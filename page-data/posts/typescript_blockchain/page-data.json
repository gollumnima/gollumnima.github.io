{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript_blockchain","webpackCompilationHash":"5db6424a12da3fa72803","result":{"data":{"markdownRemark":{"id":"3b5d5645-68de-5531-8ec7-9bf417662b67","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/f1948710-092e-11ea-9e05-cf069c31c421/image.png\" alt=\"image.png\"></p>\n<p>본 포스팅은 노마드코더 TypeScript로 블록체인 만들기 강의를 보고 따라 친 글입니다.</p>\n<h2 id=\"typescript-간단-초기세팅\"><a href=\"#typescript-%EA%B0%84%EB%8B%A8-%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85\" aria-label=\"typescript 간단 초기세팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 간단 초기세팅</h2>\n<ol>\n<li>yarn init\n초기화 명령어를 통해 package.json 생성</li>\n</ol>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7e981670-090e-11ea-9351-21b3a9e07049/image.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>yarn global add typescript\n글로벌로 깔아주었음</li>\n<li>tsconfig.json 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;target&quot;: &quot;ES2015&quot;,\n    &quot;sourceMap&quot;: true\n  },\n  &quot;include&quot;: [&quot;index.ts&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}</code></pre></div>\n<p>이렇게 설정해주었음</p>\n<ol start=\"4\">\n<li>index.ts 생성<br />\n<code class=\"language-text\">console.log(&quot;hello&quot;)</code> 라는 간단한 명령어 입력후 터미널에 tsc 명령어를 입력해보면\nindex.js와 index.js.map 파일이 생성된다!\n근데 tsc 명령어 보다 yarn 을 쓰고 싶어서 package.json 수정고고</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;typechain&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node index.js&quot;,\n    &quot;prestart&quot;: &quot;tsc&quot;\n  }\n}</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/86863310-0910-11ea-bba5-27daf000bedd/image.png\" alt=\"image.png\"></p>\n<p>짜잔~ 이렇게 터미널 상에 콘솔이 찍힌다.</p>\n<h2 id=\"typescript--타입쓰\"><a href=\"#typescript--%ED%83%80%EC%9E%85%EC%93%B0\" aria-label=\"typescript  타입쓰 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript : 타입쓰</h2>\n<p>간단한 예제로 콘솔을 찍어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const name = &quot;Doori&quot;,\n  age = 28,\n  gender = &quot;female&quot;;\n\nconst sayHi = (name, age, gender) =&gt; {\n  console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);\n};\n\nsayHi(name, age, gender);\n\nexport {};</code></pre></div>\n<p>제일 마지막줄에 export {}를 하지 않으면 에러 발생!</p>\n<p>이렇게 했을때 터미널에 콘솔이 아주 잘 찍힌다.<br />\n하지만 sayHi라는 함수에서 인자를 하나 빼보면 어떨까?</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8e1f6e60-0911-11ea-bba5-27daf000bedd/image.png\" alt=\"image.png\"></p>\n<p>정말 까다로운 녀석이다. 바로 에러를 뱉는다!<br />\n하지만 이렇게 깐깐한 만큼 나중에 디버깅할때 좀 더 수월해진다는 장점쓰~<br />\n인자가 세 개지만 꼭 두 개만 쓰고싶다? 그럼 방법이 또 있쥐</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const name = &quot;Doori&quot;,\n  age = 28,\n  gender = &quot;female&quot;;\n\nconst sayHi = (name, age, gender?) =&gt; {\n  console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);\n};\n\nsayHi(name, age);\n\nexport {};</code></pre></div>\n<p>인자 뒤에 물음표를 붙이면 필수적인 인자가 아닌 선택적인 것!<br />\nyarn start를 해보면 대신 콘솔이 <code class=\"language-text\">Hello Doori, you are 28, you are a undefined</code> 이렇게 찍힌다 ㅋㅋ</p>\n<p>자세한건 지난번 타입스크립트 정리 1탄 글을 참고해보자!<br />\n<a href=\"https://gollumnima.github.io/posts/typescript_1\">지난번 타입스크립트 정리글 링크</a></p>\n<h2 id=\"tsc-watch\"><a href=\"#tsc-watch\" aria-label=\"tsc watch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TSC watch</h2>\n<p><code class=\"language-text\">yarn add tsc-watch --dev</code> 명령어로 tsc watch를 깔아주고…\npackage.json을 다시 한번 수정!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// package.json\n{\n  &quot;name&quot;: &quot;typechain&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;tsc-watch --onSuccess \\&quot; node dist/index.js\\&quot; &quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;tsc-watch&quot;: &quot;^4.0.0&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;crypto-js&quot;: &quot;^3.1.9-1&quot;,\n    &quot;typescript&quot;: &quot;^3.7.2&quot;\n  }\n}</code></pre></div>\n<p>tsconfig.json도 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// tssconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;target&quot;: &quot;ES2015&quot;,\n    &quot;sourceMap&quot;: true,\n    &quot;outDir&quot;: &quot;dist&quot;\n  },\n  &quot;include&quot;: [&quot;src/**/*&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;]\n}</code></pre></div>\n<p>include쪽을 보면.. 모든 파일을 src 하에 관리하겠단 소리라서\n내가 만든 index.ts 파일을 src 밑으로 넣어준다.</p>\n<p>이렇게 설정을 해주면 모든 TypeScript는 src로 들어가고, 컴파일된 것들은 dist로 들어간다.\nyarn start 하면 에러가 안 나야 하는데</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8dd12db0-0919-11ea-bba5-27daf000bedd/image.png\" alt=\"image.png\"></p>\n<p>이런 에러가 뜬다??? <br />\n<code class=\"language-text\">yarn add typescript</code> 명령어로 조진다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a05eef30-0919-11ea-b582-93c0e6ad9fde/image.png\" alt=\"image.png\"></p>\n<p>yarn start를 다시 하면 잘 나온다!<br />\n저게 지금 watch모드가 실행중인건데.. 무언가 변화가 생기면 인제 dist에 기록이 된다\u001f</p>\n<h2 id=\"interface\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4d452c00-091a-11ea-9831-e73723558cd7/image.png\" alt=\"image.png\"></p>\n<p>위와 같이 입력했을때 에러 발생..!\n그래서 여기에 인터페이스를 적용할거다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Human {\n  name: string;\n  age: number;\n  gender: string;\n}\n\nconst person = {\n  name: &quot;Doori&quot;,\n  age: 28,\n  gender: &quot;female&quot;\n};\n\nconst sayHi = (person: Human): string =&gt; {\n  return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}!`;\n};\n\nconsole.log(sayHi(person));\n\nexport {};</code></pre></div>\n<p>Human이라는 인터페이스를 객체형식으로 만들었고, sayHi라는 함수에 person의 타입을 Human으로 정의해주었다.<br />\n그랬더니 에러가 발생하지 않았다! 오 씐기씐기<br />\n주의할 점은 객체 쓰는것처럼 템플릿 리터럴 안의 변수명을 dot notation을 이용해 써야한다.<br /></p>\n<p>인터페이스라는 개념은 JS에 없고 TS에만 있는거라는데.. <br />나중에 한.. ES13쯤 가면 자바스크립트에도 분명 생긴다 ㅋㅋㅋ</p>\n<h2 id=\"class-in-typescript\"><a href=\"#class-in-typescript\" aria-label=\"class in typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class in TypeScript</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Human {\n  public name: string;\n  public age: number;\n  public gender: string;\n  constructor(name: string, age: number, gender: string) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n}\n\nconst chicken = new Human(&quot;NeNe&quot;, 10, &quot;rooster&quot;);\n\nconst sayHi = (person: Human): string =&gt; {\n  return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}!`;\n};\n\nconsole.log(sayHi(chicken));\n\nexport {};</code></pre></div>\n<p>인터페이스와 비슷하지만 class를 이용하는 방법도 있다.<br />\n이걸 왜쓰냐? 자바스크립트가 인터페이스는 인식하지 못하기 때문! 또한 TS를 쓰는 측면에서 좀더 안전한 방법이라고 한다.</p>\n<p>만약에 Human 클래스 내부에 public을 private으로 쓰면 해당하는 인자를 Human 클래스 외부에서 쓸 수 없다. 예시를 한번 보자!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f8e55ed0-091b-11ea-aabc-79c24bf061cc/image.png\" alt=\"image.png\"></p>\n<p>age를 public이 아닌 private으로 설정하면 요렇게 에러 발생!<br />\n코딩알못일땐 굉장히 쓸모없는 기능이라고 생각했을텐데.. 그래도 몇 달 공부했다고 저 기능이 나중에 유용하게 쓰일것 같단 생각이 팍팍ㅋㅋㅋ</p>\n<h2 id=\"block-chain-만들기\"><a href=\"#block-chain-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"block chain 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block Chain 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Block {\n  public index: number;\n  public hash: string;\n  public previousHash: string;\n  public data: string;\n  public timestamp: number;\n  constructor(\n    index: number,\n    hash: string,\n    previousHash: string,\n    data: string,\n    timestamp: number\n  ) {\n    this.index = index;\n    this.hash = hash;\n    this.previousHash = previousHash;\n    this.data = data;\n    this.timestamp = timestamp;\n  }\n}\n\nconst genesisBlock: Block = new Block(0, &quot;2020202020202&quot;, &quot;&quot;, &quot;Hello&quot;, 123456);\n\nlet blockchain: Block[] = [genesisBlock];\n\nconsole.log(blockchain);\n\nexport {};</code></pre></div>\n<p>이렇게 하면 콘솔도 아주 잘 찍힌다!<br />\n여기서 테스트 한 가지… blockchain에다가 다른걸 푸쉬해보자.</p>\n<p><code class=\"language-text\">blockchain.push(&quot;gold&quot;);</code> 를 한번 시험삼아 해보면..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4389d730-091d-11ea-b582-93c0e6ad9fde/image.png\" alt=\"image.png\"></p>\n<p>짠! 이렇게 에러 발생!\n클래스 안의 parameter로 쓰이지 않은 값을 푸쉬하려니 당연히 되지 않는다.</p>\n<h2 id=\"block-chain---two\"><a href=\"#block-chain---two\" aria-label=\"block chain   two permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block Chain - Two</h2>\n<p><code class=\"language-text\">yarn add crypto-js</code> 명령어로 크립토 설치!<br />\n사실 니코의 다른 블록체인 강의를 듣지 못해서 블록체인 개념은 잘 모른다.<br />\n근데 일단 crypto가 해쉬를 위한 암호화 도구인걸로 이해했다!ㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import * as CryptoJS from &quot;crypto-js&quot;;\n\nclass Block {\n  public index: number;\n  public hash: string;\n  public previousHash: string;\n  public data: string;\n  public timestamp: number;\n\n// 여기서 static을 바깥에서 이 메소드를 부르지 못한다.\n  static calculateBlockHash = (\n    index: number,\n    previousHash: string,\n    timestamp: number,\n    data: string\n  ): string =&gt;\n    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();\n\n  constructor(\n    index: number,\n    hash: string,\n    previousHash: string,\n    data: string,\n    timestamp: number\n  ) {\n    this.index = index;\n    this.hash = hash;\n    this.previousHash = previousHash;\n    this.data = data;\n    this.timestamp = timestamp;\n  }\n}\n\nconst genesisBlock: Block = new Block(0, &quot;2020202020202&quot;, &quot;&quot;, &quot;Hello&quot;, 123456);\n\nlet blockchain: Block[] = [genesisBlock];\n\nconst getBlockchain = (): Block[] =&gt; blockchain;\n\nconst getLastestBlock = (): Block =&gt; blockchain[blockchain.length - 1];\n\nconst getNewTimeStamp = (): number =&gt; Math.round(new Date().getTime() / 1000);\n\nexport {};</code></pre></div>\n<p>갑자기 알 수 없는 함수들이 많아지고 있는데.. 흠.. 일단.. 따라치고 본다…<br />\n따라치다 보면 타입스크립트가 익숙해지겠지 ㅠㅠ</p>\n<h2 id=\"block-chain---three\"><a href=\"#block-chain---three\" aria-label=\"block chain   three permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block Chain - Three</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import * as CryptoJS from &quot;crypto-js&quot;;\n\nclass Block {\n  public index: number;\n  public hash: string;\n  public previousHash: string;\n  public data: string;\n  public timestamp: number;\n\n  static calculateBlockHash = (\n    index: number,\n    previousHash: string,\n    timestamp: number,\n    data: string\n  ): string =&gt;\n    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();\n\n  constructor(\n    index: number,\n    hash: string,\n    previousHash: string,\n    data: string,\n    timestamp: number\n  ) {\n    this.index = index;\n    this.hash = hash;\n    this.previousHash = previousHash;\n    this.data = data;\n    this.timestamp = timestamp;\n  }\n}\n\nconst genesisBlock: Block = new Block(0, &quot;2020202020202&quot;, &quot;&quot;, &quot;Hello&quot;, 123456);\n\nlet blockchain: Block[] = [genesisBlock];\n\nconst getBlockchain = (): Block[] =&gt; blockchain;\n\nconst getLastestBlock = (): Block =&gt; blockchain[blockchain.length - 1];\n\nconst getNewTimeStamp = (): number =&gt; Math.round(new Date().getTime() / 1000);\n\nconst createNewBlock = (data: string): Block =&gt; {\n  const previousBlock: Block = getLastestBlock();\n  const newIndex: number = previousBlock.index + 1;\n  const newTimestamp: number = getNewTimeStamp();\n  const newHash: string = Block.calculateBlockHash(\n    newIndex,\n    previousBlock.hash,\n    newTimestamp,\n    data\n  );\n  const newBlock: Block = new Block(\n    newIndex,\n    newHash,\n    previousBlock.hash,\n    data,\n    newTimestamp\n  );\n  return newBlock;\n};\n\nconsole.log(createNewBlock(&quot;hello&quot;), createNewBlock(&quot;bye bye&quot;));\n\nexport {};</code></pre></div>\n<p>콘솔을 살펴보자.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/463048a0-0929-11ea-9e05-cf069c31c421/image.png\" alt=\"image.png\"></p>\n<p>값이 아주 잘 나오고 있다. crypto.js가 만들어낸 hash 넘나 신기..!<br />\n근데 보면 index 값이 동일하게 나온다. 그래서 다시 도전!!<br /></p>\n<h2 id=\"block-chain---last\"><a href=\"#block-chain---last\" aria-label=\"block chain   last permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block Chain - Last</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import * as CryptoJS from &quot;crypto-js&quot;;\n\nclass Block {\n  static calculateBlockHash = (\n    index: number,\n    previousHash: string,\n    timestamp: number,\n    data: string\n  ): string =&gt;\n    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();\n\n  static validateStructure = (aBlock: Block): boolean =&gt;\n    typeof aBlock.index === &quot;number&quot; &amp;&amp;\n    typeof aBlock.hash === &quot;string&quot; &amp;&amp;\n    typeof aBlock.previousHash === &quot;string&quot; &amp;&amp;\n    typeof aBlock.timestamp === &quot;number&quot; &amp;&amp;\n    typeof aBlock.data === &quot;string&quot;;\n\n  public index: number;\n  public hash: string;\n  public previousHash: string;\n  public data: string;\n  public timestamp: number;\n\n  constructor(\n    index: number,\n    hash: string,\n    previousHash: string,\n    data: string,\n    timestamp: number\n  ) {\n    this.index = index;\n    this.hash = hash;\n    this.previousHash = previousHash;\n    this.data = data;\n    this.timestamp = timestamp;\n  }\n}\n\nconst genesisBlock: Block = new Block(0, &quot;2020202020202&quot;, &quot;&quot;, &quot;Hello&quot;, 123456);\n\nlet blockchain: Block[] = [genesisBlock];\n\nconst getBlockchain = (): Block[] =&gt; blockchain;\n\nconst getLastestBlock = (): Block =&gt; blockchain[blockchain.length - 1];\n\nconst getNewTimeStamp = (): number =&gt; Math.round(new Date().getTime() / 1000);\n\nconst createNewBlock = (data: string): Block =&gt; {\n  const previousBlock: Block = getLastestBlock();\n  const newIndex: number = previousBlock.index + 1;\n  const newTimestamp: number = getNewTimeStamp();\n  const newHash: string = Block.calculateBlockHash(\n    newIndex,\n    previousBlock.hash,\n    newTimestamp,\n    data\n  );\n  const newBlock: Block = new Block(\n    newIndex,\n    newHash,\n    previousBlock.hash,\n    data,\n    newTimestamp\n  );\n  addBlock(newBlock);\n  return newBlock;\n};\n\nconst getHashforBlock = (aBlock: Block): string =&gt;\n  Block.calculateBlockHash(\n    aBlock.index,\n    aBlock.previousHash,\n    aBlock.timestamp,\n    aBlock.data\n  );\n\nconst isBlockValid = (candidateBlock: Block, previousBlock: Block): boolean =&gt; {\n  if (!Block.validateStructure(candidateBlock)) {\n    return false;\n  } else if (previousBlock.index + 1 !== candidateBlock.index) {\n    return false;\n  } else if (previousBlock.hash !== candidateBlock.previousHash) {\n    return false;\n  } else if (getHashforBlock(candidateBlock) !== candidateBlock.hash) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst addBlock = (candidateBlock: Block): void =&gt; {\n  if (isBlockValid(candidateBlock, getLastestBlock())) {\n    blockchain.push(candidateBlock);\n  }\n};\n\ncreateNewBlock(&quot;second block&quot;);\ncreateNewBlock(&quot;third block&quot;);\ncreateNewBlock(&quot;fourth block&quot;);\n\nconsole.log(blockchain);\n\nexport {};</code></pre></div>\n<p>어디 콘솔을 한번 찍어보자..!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7715bb80-092e-11ea-9e05-cf069c31c421/image.png\" alt=\"image.png\"></p>\n<p>서로 다른 인덱스 넘버, 서로 다른 해시값! 아주 잘 찍히고 있다.<br />\n사실 블록체인은 아직도 모르겠다..ㅋㅋㅋ<br />\n예전같으면 블록체인의 원리와 역사 다 검색해서 포스팅에 넣었을텐데.. 시간이 매우 없다ㅠ<br />\n깊게 파보는건 다음 기회에!!!! 공부할 게 넘넘 많다리~~~</p>\n<p>근데 대충 타입스크립트가 어떻게 적용되는지는 얼추 알겠다.<br />\n빠른 시일 내에 내가 CRA로 만든 페이지들을 타입스크립트로 변형해서 올릴수 있기를..😂😂</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>노마드코더 타입스크립트로 블록체인 만들기</li>\n</ul>","fields":{"slug":"/posts/typescript_blockchain","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2019-11-16T20:42:23.169Z","description":"매주 목요일은 위코드 프론트앤드 스터디(a.k.a 프스) 목요일 전에 미리 타입스크립트 인터페이스를 공부하려다 너무 멀리 와버린 포스팅... 노마드코더 강의를 보고 블록체인을 만들어봤는데, 블록체인의 '블'자도 모르고 걍 타입스크립트 공부하려고 강의 듣고 따라친 글","tags":["typescript"],"title":"TypeScript로 블록체인 만들기(feat.니콜라스형)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/typescript_blockchain"}}}