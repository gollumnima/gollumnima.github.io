{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodeJS_2","webpackCompilationHash":"e2863fffa48f8cefae11","result":{"data":{"markdownRemark":{"id":"61cd0810-98f6-5749-8b56-927479bcec8e","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/98513bc0-1b22-11ea-929c-e3202fd1cd14/image.png\" alt=\"image.png\"></p>\n<p><b>허선생님의 귀중한 강의를 듣고 정리해 본 노드 포스팅!</b><br/>\n썸네일의 잎사귀는 노드 느낌 나서 뙇!<br/>\n우리 허선생님은 찰떡같이 가르치셨으나, 학생(나 ㅋㅋㅋ)이 못 알아듣고 왜곡해서 이상한 말을 썼을 수도 있음..👉👈</p>\n<h2 id=\"nodejs-특징--장점쓰\"><a href=\"#nodejs-%ED%8A%B9%EC%A7%95--%EC%9E%A5%EC%A0%90%EC%93%B0\" aria-label=\"nodejs 특징  장점쓰 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js 특징 &#x26;&#x26; 장점쓰</h2>\n<p>node.js는 프레임워크가 아니라 언어다. 자바스크립트의 구현체 중 하나이다.<br/>\n특정 상황에서 수학 계산보단 입출력이 많을때 좋은 언어이다.<br/>\n파일을 읽고 쓰고..할때! 데이터베이스 접근을 자주 할 때 좋다!</p>\n<p>크롬엔 없지만 노드에만 있는 기능으론 app path가 있어서 파일 입출력을 노드가 컨트롤 할 수 있다.\n대신 윈도우와 관련된건 없…!<br/>\n그래도 자바스크립트 문법을 대부분 따른다는게 JS를 공부한 나에겐 가장 큰 장점쓰!<br/>\n윈도우 관련된 기능 없으면 뭐어때! http관련된 기능이 노드에 기본적으로 들어가 있다.</p>\n<h2 id=\"blocking-과-none-blocking-io\"><a href=\"#blocking-%EA%B3%BC-none-blocking-io\" aria-label=\"blocking 과 none blocking io permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>blocking 과 none blocking io</h2>\n<p>흔히 말하는 동기와 비동기에 대한 것이다!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c921de60-1b38-11ea-b0bb-6f74ba5f3951/image.png\" alt=\"image.png\"></p>\n<h4 id=\"동기blocking-io\"><a href=\"#%EB%8F%99%EA%B8%B0blocking-io\" aria-label=\"동기blocking io permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기(blocking i/o)</h4>\n<p>일반적인 웹서버를 생각해보자.<br/>\n푸드트럭에서 일하는 사람이 전자레인지에서 음식 데펴서 손님에게 준다고 생각해보자!<br/>\n전자렌지를 돌리는 동안 똘똘한 사람들이라면 다른 음식을 조리하거나 음식을 주문받을텐데 동기는 그렇게 작동하지 않는다.\n(내가 보기엔 비효율적이지만 분명 뭔가 장점이 있겠지)<br/></p>\n<p>다른 행동을 하지 않고 오로지 전자레인지 앞에서 음식이 다 조리 될때까지 기다린다ㅠㅠ\nPython이 대표적인 동기방식이라고 한다!</p>\n<h4 id=\"비동기non-blocking-io\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0non-blocking-io\" aria-label=\"비동기non blocking io permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기(non blocking i/o)</h4>\n<p>컴잘알이 아닌 내가 보기엔 동기보다 똘똘한 방식.<br/>\n전자레인지에 음식 집어넣고 기다리는 동안 다른 일을 한다. 똑똑해~<br/></p>\n<p>전자레인지 앞에서 대기타는 일처럼 코드상에서 신경쓰지 않고 넘어가도 되는 작업들을 넘겨버리는 게 바로 비동기라고 한다!\n<br/>\n<br/></p>\n<p><b>+ 여기서 잠깐 multi thread 이야기!</b></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/96b84940-1b43-11ea-9c04-0bf27d5086c5/image.png\" alt=\"image.png\"></p>\n<p>(single thread와 multi thread에 대해선 나중에 한번 정리하고 넘어갈 예정)<br/>\n그림과 같이 컴퓨터가 다섯 대 있다고 쳐보자. 그렇다면 서버도 그에 맞게 다섯 개가 필요함<br/>\n근데 내가 돌리는 컴퓨터 개수보다 접속자수가 많아지면 그게 동기방식으로 처리가 되서 비효율적이게 된다~</p>\n<p>데이터베이스가 놀고 있어서 웹 서버는 강제로 휴식중..<br/>\n빨리 일 시켜야 하는데 서버에서도 데이터 베이스를 기다리느라 아무것도 안하게 되는데…\n이러한 현상을 해결하기 위한게 바로 <b>비동기 처리 방식</b>이다!</p>\n<p>서버가 멍때리고 기다리는게 아니라 그때그때 계산해서 할 수 있는 행동을 전부 처리한다!<br/>\n기다려야 하는 행동은 놔두고 먼저 처리할 수 있는 일을 처리하는 것</p>\n<p>허선생님 진짜 찰떡같은 비유 최고..! 박수~~ 👏👏👏<br/>\n여튼 react에서의 axios나 fetch가 바로 이런 비동기 처리방식이다!</p>\n<h2 id=\"실습해보자\"><a href=\"#%EC%8B%A4%EC%8A%B5%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"실습해보자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습해보자!</h2>\n<ol>\n<li>빈 폴더 하나 만들어서 초기화해준다. 명령어는\n<code class=\"language-text\">npm init</code><br/>\nreact 프로젝트 만들땐 -y를 붙였는데 이걸 안 붙이면</li>\n</ol>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/001830f0-1b15-11ea-a0de-bf8adf7e444e/image.png\" alt=\"image.png\"></p>\n<p>이렇게 값들을 하나 하나 설정을 해줘야 한다.\n그래서 -y는 모두 yes를 뜻하는 것..!<br/>\n여튼 이 과정을 통해 package.json 파일이 생성된다.</p>\n<ol start=\"2\">\n<li>server.js 파일을 만든다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// server.js\nlet foo = 2;\nconsole.log(foo);</code></pre></div>\n<p>터미널에 <code class=\"language-text\">node server</code>명령어를 입력하면 콘솔에 2가 뜬다.</p>\n<ol start=\"3\">\n<li>app.js 파일도 만들어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const http = require(&#39;http&#39;);\nconst app = require(&#39;./app&#39;);\n// 경로를 안 붙이면 module이라고 생각하고, 경로를 붙이면 파일이라고 생각하면 됨\n// listener를 가지고 있으면 app으로서 작동을 함.\n\nhttp.createServer(app).listen(8000, () =&gt; {\n  console.log(&#39;서버 시작할게유~&#39;);\n});\n// inbound 요청을 듣겠다. 리쓴\n// 듣기 시작한 이후에 콘솔찍겠다</code></pre></div>\n<ol start=\"4\">\n<li>express 설치<br/>\n명령어는 <code class=\"language-text\">yarn add express</code> 입력 궈궈!<br/>\n아직 express.js에 대해 잘은 모르지만 일단 해본다. 나중에 정리할 예정쓰!</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const express = require(&#39;express&#39;);\n\nconst app = express();\n// express는 class 인데 한번 더 묶어서 클래스처럼 안 보인다.\n\nconsole.log(&#39;4&#39;);\napp.get(&#39;/foo&#39;, () =&gt; {\n  console.log(&#39;요청을 받았다 오바!&#39;);\n});\n\nmodule.exports = app;</code></pre></div>\n<p>지금 app.js에 콘솔로 4를 찍고 있는데\n그 전에 server.js에도 숫자를 찍어놨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(&#39;1&#39;);\n\nconst http = require(&#39;http&#39;);\nconst app = require(&#39;./app&#39;);\n\n// 경로를 안 붙이면 module이라고 생각하고, 경로를 붙이면 파일이라고 생각하면 됨\n// listener를 가지고 있으면 app으로서 작동을 함.\n\nconsole.log(&#39;2&#39;);\n\nhttp.createServer(app).listen(8000, () =&gt; {\n  console.log(&#39;3&#39;);\n  console.log(&#39;서버 시작할게유~&#39;);\n  // 비동기 코드라 가장 늦게 실행됨\n});\n// inbound 요청을 듣겠다. 리쓴\n// 듣기 시작한 이후에 콘솔찍겠다\n\nconsole.log(&#39;5&#39;);</code></pre></div>\n<ul>\n<li>server.js에서 서버가 시작되는 거니까 첫줄의 1이 가장 먼저 찍히고,<br/></li>\n<li>server.js에 있는 app require를 실행하기 위해<br />\n<code class=\"language-text\">module.exports = app;</code>위의 코드를 먼저 실행<br />\n그래서 app.js에서 값을 불러오니까 app에 있는 4가 두번째로 찍히고,<br/></li>\n<li>그 다음 줄부터는 순서대로 찍힌다. (숫자 4까지 있을 때)</li>\n</ul>\n<p>근데 마지막 줄에 5가 있으면 어떻게 될까?<br/>\n5는 가장 마지막 줄에 있지만 createServer함수가 비동기 방식으로 인자로 들어간 함수를 받기 때문에\n인자로 들어간 함수 안의 콘솔들이 가장 늦게 찍힌다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7144dbb0-1b16-11ea-a5d2-e149b859f4b5/image.png\" alt=\"image.png\"></p>\n<p>그리하여 콘솔찍히는 순서는 1-4-2-5-3-서버 시작할게유~ 순!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f6862b80-1b16-11ea-b06d-87feba7af501/image.png\" alt=\"image.png\"></p>\n<p>콘솔창에는 값이 잘 찍히고 있는데, 문제는 웹페이지이다!<br />\nlocalhost:8000으로 접속해보면…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e67d8e40-1b16-11ea-a0de-bf8adf7e444e/image.png\" alt=\"image.png\"></p>\n<p>요청을 받았기 때문에 서버에는(터미널에는) 콘솔 값이 찍히는데 웹페이지가 안뜬다!<br />\n크롭탭만 봐도 뭔가 돌고 있는데.. 아무것도 뜨지 않는다.</p>\n<p>일단 서버를 재시작(ctrl+c) 해야하는데,\n그것보다 좀 더 효율적인 방법으로 nodemon을 깔아준다.</p>\n<h2 id=\"가라-노드몬\"><a href=\"#%EA%B0%80%EB%9D%BC-%EB%85%B8%EB%93%9C%EB%AA%AC\" aria-label=\"가라 노드몬 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가라 노드몬!</h2>\n<ol>\n<li>설치는 <code class=\"language-text\">npm i nodemon</code></li>\n<li>package.json에 start script를 추가해준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;node-1&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;npx nodemon ./server&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.17.1&quot;,\n    &quot;nodemon&quot;: &quot;^2.0.1&quot;\n  }\n}</code></pre></div>\n<p>다시 한번 웹페이지를 확인해주는데…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/53e86b80-1b17-11ea-b06d-87feba7af501/image.png\" alt=\"image.png\"></p>\n<p>흰 화면이 뜨는데 걍 흰색.. 내 요청을 씹은거다 ㅠㅠ</p>\n<h2 id=\"node에서-string-object-error-넘기기\"><a href=\"#node%EC%97%90%EC%84%9C-string-object-error-%EB%84%98%EA%B8%B0%EA%B8%B0\" aria-label=\"node에서 string object error 넘기기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node에서 string, object, error 넘기기</h2>\n<p>이번엔 명령어를 입력해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app.js\napp.get(&#39;/foo&#39;, (req, res, next) =&gt; {\n    res.send(&#39;배고파&#39;);\n});</code></pre></div>\n<p>그랬더니 뙇! 임의의 태그가 생겼다!!<br />\n그냥 string으로 써서 일단 이런 임시 태그가 body에 생기는 것이고..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6d3bba10-1b17-11ea-84ae-6db8b11a429d/image.png\" alt=\"image.png\"></p>\n<p>이번엔 json형태로 써보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app.js\napp.get(&#39;/foo&#39;, (req, res, next) =&gt; {\n    res.json({ 둘둘쓰: &#39;배곱&#39; });\n});</code></pre></div>\n<p>짠!! 객체형태의 값이 화면에 나온다. 이렇게</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a6bc0880-1b17-11ea-b06d-87feba7af501/image.png\" alt=\"image.png\"></p>\n<p>나는 chrome json.viewer extension을 쓰고 있어서 예쁘게 나왔는데<br />\n원래대로라면 정말 날 것 그대로 나온다.</p>\n<p>에러도 한 번 내보자! 참고로 4로 시작한건 일부러 내는 에러..ㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app.js\napp.get(&#39;/foo&#39;, (req, res, next) =&gt; {\n    res.status(401).json({ 둘둘쓰: &#39;배곱&#39; });\n});</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e0fe9580-1b17-11ea-8cbc-5bb18cbd781d/image.png\" alt=\"image.png\"></p>\n<p>에러도 아주 잘 나고 있다. 좋았어!</p>\n<h2 id=\"router\"><a href=\"#router\" aria-label=\"router permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Router</h2>\n<p>이번엔 라우팅을 위한 코드를 쳐볼거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const express = require(&#39;express&#39;);\n\nconst app = express();\n\napp.get(&#39;/foo&#39;, (req, res, next) =&gt; {\n//   res.status(401).json({ 둘둘쓰: &#39;배곱&#39; });\n});\n\napp.get(&#39;/user&#39;, (req, res, next) =&gt; {\n  res.status(200).json({ name: &#39;유저 목록&#39; });\n});\n\n\napp.get(&#39;/user/:id&#39;, (req, res, next) =&gt; {\n  const id = req.params;\n  console.log(id);\n  res.status(200).json({\n    name: &#39;허선생님&#39;,\n    id\n  }); // 원래는 id: id 인데, 객체 값과 프로퍼티가 동일하면 지워짐. 놀라운 세상!\n});\n\nmodule.exports = app;</code></pre></div>\n<p>주소창에 <code class=\"language-text\">http://localhost:8000/user?page=222&amp;offset=20</code>를 쳐보면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9002a940-1b18-11ea-b06d-87feba7af501/image.png\" alt=\"image.png\"></p>\n<p>짠~ 페이지에 json형태로 데이터가 잘 나오고 있고!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/d6877cb0-1b18-11ea-b06d-87feba7af501/image.png\" alt=\"image.png\"></p>\n<p>짠~ 콘솔창에 page와 offset 정보가 잘 나오고 있고!</p>\n<h2 id=\"middleware\"><a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware</h2>\n<p>지난번에 비선실세 같은 존재라고 이해하고 넘어갔는데.. 막 그런건 아닌거 같고 ㅋㅋ\napp.get()&#x3C;=== 이게 라우터고\n라우터의 괄호안에 들어가는 게 바로 미들웨어다!</p>\n<p>라우터는 실행할지 말지를 정해주는 역할이고,\n미들웨어는 요청이나 응답이 들어오면 그걸 처리하는 함수다. 알고보니 비선실세는 라우터..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get()\napp.post()\napp.use()\napp.all()</code></pre></div>\n<p>위와 같이 다양한 방식의 명령어가 있는데<br />\n그중에 app.use()는 유일하게 url을 쓰지 않아도 함수를 쓸 수 있다!<br />\napp.all()은 CRUD 네 가지 메소드 중 아무거나 접근을 하겠다는 것.</p>\n<p>일단 배운 내용에 대해 여기까지 정리해봤는데..<br/>\n허선생님께서 알기 쉽게 핵심만 쏙쏙 설명해주셔서 정말 감동쓰ㅠㅠ 감사합니다~<br />\n일단 코드를 쳐보면 좀 더 감이 오겠지? 화이팅 화이팅~~~</p>","fields":{"slug":"/posts/nodeJS_2","tagSlugs":["/tag/web/","/tag/node/","/tag/backend/","/tag/javascript/"]},"frontmatter":{"date":"2019-12-11T21:23:29.169Z","description":"허선생님의 찰떡같은 명강의를 듣고 블로그 정리해보기! node를 파보니까 자바스크립트 작동원리에 대해 더 잘 이해하게 되는것 같기도 하고?? 넘 재밌는 시간!","tags":["web","node","backend","javascript"],"title":"허선생님과 Node.js 공부 - 노드 초기세팅, 비동기, router"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nodeJS_2"}}}