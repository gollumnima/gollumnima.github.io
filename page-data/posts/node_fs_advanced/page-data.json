{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/node_fs_advanced","webpackCompilationHash":"2c9b336bdc11cc59f106","result":{"data":{"markdownRemark":{"id":"916883c9-1071-512c-a954-746a4d4b622e","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/0b9dc850-45ad-11ea-80bd-fb4dd3073590/image.png\" alt=\"image.png\"></p>\n<p>빙고테이블을 만들어서 사람들의 repo에 README.md파일을 뿌리는게 내 목표였다.<br /></p>\n<p>처음엔 숫자를 랜덤으로 뿌려서 테이블에 적용시키면 되는거네?하고 그냥 쉽게 생각했는데<br />\nmd파일에 랜덤 만드는 js문법을 쓸 수도 없고 어쩌지?? 하고 발만 동동 구르고 있었는데</p>\n<p><b>정답은 node 에 있었다.</b> <br />\n허선생님의 도움으로 해결쓰..ㅠㅠ</p>\n<h2 id=\"빙고-table을-만들어보자\"><a href=\"#%EB%B9%99%EA%B3%A0-table%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\"빙고 table을 만들어보자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빙고 table을 만들어보자.</h2>\n<p>코드를 간략하게 하기위해 utils에 필요한 함수들을 저장해서 불러왔다.<br />\nutils는 map과 같은 array method들 뿐만 아니라 랜덤한 값을 뽑아내는 shuffle method를 포함쓰</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//table.js\nconst utils = require(&#39;./utils&#39;)\n\nconst makeTable = utils.pipe(\n  () =&gt; Array(25),\n  arr =&gt; arr.fill(),\n  utils.map((e, i) =&gt; i + 1),\n  utils.shuffleArray,\n  arr =&gt; utils.pipe(\n      arr =&gt; arr.fill(),\n      utils.map((e, i) =&gt; i),\n      utils.reduce((acc, curr) =&gt; {\n        const index = curr * 5\n        return [\n          ...acc,\n          arr.slice(index, index + 5),\n        ]\n      }, []),\n  )(Array(5)),\n  utils.map(row =&gt; {\n    return [\n      &#39;&lt;tr&gt;&#39;,\n        (row.map(cell =&gt; (\n          `    &lt;td&gt;${cell}&lt;/td&gt;`\n        )).join(&#39;\\n&#39;)),\n      &#39;&lt;/tr&gt;&#39;,\n    ].join(&#39;\\n&#39;)\n  }),\n  arr =&gt; ([\n    &#39;&lt;table&gt;&#39;,\n    &#39;&lt;tbody&gt;&#39;,\n    ...arr,\n    &#39;&lt;/tbody&gt;&#39;,\n    &#39;&lt;/table&gt;&#39;,\n  ]),\n  arr =&gt; arr.join(&#39;\\n&#39;),\n)\n\nmodule.exports = { makeTable }</code></pre></div>\n<p>코드를 하나하나 살펴보자.</p>\n<h4 id=\"125까지의-숫자가-들어간-배열-만들기\"><a href=\"#125%EA%B9%8C%EC%A7%80%EC%9D%98-%EC%88%AB%EC%9E%90%EA%B0%80-%EB%93%A4%EC%96%B4%EA%B0%84-%EB%B0%B0%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"125까지의 숫자가 들어간 배열 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1~25까지의 숫자가 들어간 배열 만들기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 파이프라인의 첫 시작\n() =&gt; Array(25),\n  arr =&gt; arr.fill(),\n  utils.map((e, i) =&gt; i + 1),</code></pre></div>\n<ol>\n<li><code class=\"language-text\">Array(25)</code>를 이용해 빈 배열에 25개의 값이 들어갈 자리를 만들어주고</li>\n<li><code class=\"language-text\">fill()</code>을 이용해서 빈 공간을 undefined로 채우기</li>\n<li><code class=\"language-text\">map</code>의 index number를 이용해 배열을 숫자로 채우기</li>\n</ol>\n<p>위의 코드는 파이프라인에 들어가는 거라 쉼표로 길게 쓴 거지만\n만약에 파이프에 들어가지 않고 따로 썼다면 한줄로도 가능쓰!</p>\n<p><code class=\"language-text\">Array(25).fill().map((e,i)=&gt;i+1)</code> 요렇게!</p>\n<h4 id=\"배열-속-25개-숫자들을-섞어주기\"><a href=\"#%EB%B0%B0%EC%97%B4-%EC%86%8D-25%EA%B0%9C-%EC%88%AB%EC%9E%90%EB%93%A4%EC%9D%84-%EC%84%9E%EC%96%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"배열 속 25개 숫자들을 섞어주기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 속 25개 숫자들을 섞어주기</h4>\n<p>stackoverflow를 찾다보면 괜찮은 랜덤함수들이 많다.<br />\n내가 짜는건 머리아플 수 있으니 다른 사람이 짜놓은 좋은 로직의 함수를 저장해서 써먹자!\n그리하여 간단하게 <code class=\"language-text\">utils.shuffleArray,</code> 요렇게 끝!</p>\n<p>여기까진 쉬울수도 있다. 하지만 내가 해야할 것은 테이블에 숫자를 넣는건데<br />\n<code class=\"language-text\">&lt;tr&gt;&lt;/tr&gt;</code>태그로 감싸야 하기 때문에 숫자 5개를 각각의 tr태그 안에 넣어야 한다.<br /></p>\n<p>여기서 난 멘붕을 당했고, 허선생님은 간단하게 파이프를 한번 더 썼다…ㅋㅋ ㅠㅠ</p>\n<h4 id=\"위에서-만든-배열-속-숫자를-다섯개씩-끊어주기\"><a href=\"#%EC%9C%84%EC%97%90%EC%84%9C-%EB%A7%8C%EB%93%A0-%EB%B0%B0%EC%97%B4-%EC%86%8D-%EC%88%AB%EC%9E%90%EB%A5%BC-%EB%8B%A4%EC%84%AF%EA%B0%9C%EC%94%A9-%EB%81%8A%EC%96%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"위에서 만든 배열 속 숫자를 다섯개씩 끊어주기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위에서 만든 배열 속 숫자를 다섯개씩 끊어주기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> arr =&gt; utils.pipe(\n      arr =&gt; arr.fill(),\n      utils.map((e, i) =&gt; i),\n      utils.reduce((acc, curr) =&gt; {\n        const index = curr * 5\n        return [\n          ...acc,\n          arr.slice(index, index + 5),\n        ]\n      }, []),</code></pre></div>\n<p>파이프를 한번 더 써주는데 아까처럼 <code class=\"language-text\">fill</code>을 이용해 배열의 빈 공간을 확보해놓고<br />\n<code class=\"language-text\">map</code>의 index number를 이용해서 0부터 4까지의 숫자를 뽑아냈고(배열 5개 필요하니깐)\n<code class=\"language-text\">reduce</code> 부분은 넘 헷갈려서 콘솔을 찍어봤다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/da9a9240-45bd-11ea-9028-7b7f1a1316b1/image.png\" alt=\"image.png\"></p>\n<p>숫자를 5개씩 끊어야해서 <code class=\"language-text\">slice</code>를 써주는데 이를 쉽게하기 위해 index를 선언해주었고<br />\nacc는 빈배열에서 숫자가 채워지는 형태로, curr은 현재 배열이 속한 index를 가리켰다.<br />\n다시 보니 reduce 쪽이 잘 이해가 되지 않는다… ㅠㅠ<br /></p>\n<p>여튼 slice를 이용해서 5개씩 자른 배열을 만든다고 대충 이해 했고..</p>\n<h4 id=\"자른-숫자에-테이블-태그-적용하기\"><a href=\"#%EC%9E%90%EB%A5%B8-%EC%88%AB%EC%9E%90%EC%97%90-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%83%9C%EA%B7%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"자른 숫자에 테이블 태그 적용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자른 숫자에 테이블 태그 적용하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let row = [ 4, 9, 14, 22, 16 ];\n[      &quot;&lt;tr&gt;&quot;,row.map(cell=&gt; `    &lt;td&gt;${cell}&lt;/td&gt;`).join(&quot;\\n&quot;),      &quot;&lt;/tr&gt;&quot;\n].join(&quot;\\n&quot;)</code></pre></div>\n<p>정확한 로직은 제일 위의 코드 참고!<br />\n나는 일단 이게 잘 적용 되는지 확인하고 싶어서 임의의 배열을 row 변수에 대입했다.<br />\n사실 안쪽의 join은 안 써도 상관없긴 한데 확실이 indent가 있으니 보기 편하다!<br /></p>\n<p>결과물은 이렇게…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/006c9730-45c2-11ea-a464-71d1a081527a/image.png\" alt=\"image.png\"></p>\n<p>이걸 이제 <code class=\"language-text\">&lt;table&gt;</code>태그와 <code class=\"language-text\">&lt;tbody&gt;</code>태그 안에 넣어주는건 완전 쉽다!<br />\nhtml 태그를 배열을 이용해서 적용하는건 생각지도 못했는데 정말 신박한 방법이였다ㅠㅠ\n커링 두 번 쓴 것보다 html태그 적용한게 더 신기했다.. 와 ㅠㅠ</p>\n<p>이제 fs에 적용을 해야하는데..</p>\n<h2 id=\"node-file-system\"><a href=\"#node-file-system\" aria-label=\"node file system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node file system</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// fs.js\nconst fs = require(&#39;fs&#39;)\n\nconst read = path =&gt; new Promise((resolve, reject) =&gt; {\n  fs.readFile(path, &#39;utf8&#39;, (err, data) =&gt; {\n    if (err) return reject(err)\n    return resolve(data)\n  })\n})\n\nconst write = (path, data) =&gt; new Promise((resolve, reject) =&gt; {\n  fs.writeFile(path, data, (err) =&gt; {\n    if (err) return reject(err)\n    return resolve(true)\n  })\n})\n\nmodule.exports = {\n  read,\n  write,\n}</code></pre></div>\n<p>여기서 중요한 건 읽기모드와 쓰기모드 둘 다 적용시켜야 한다는 점!<br />\n일단 fs 형식을 위의 코드와 같이 써주고 우리는 이걸 index.js에서 적용시킬 예정쓰</p>\n<h2 id=\"md파일-생성하기\"><a href=\"#md%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"md파일 생성하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>md파일 생성하기</h2>\n<p>아! 이 전에 template md 파일을 만들어야 하는데!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">title~~\n\n&lt;&lt;&lt;table&gt;&gt;&gt;\n\ndescription....</code></pre></div>\n<p>빙고판을 중간에 낑겨넣고 싶어서 일단 꺽쇠를 이용해서 영역표시(?)를 해주고…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fs = require(&quot;./fs&quot;);\nconst path = require(&quot;path&quot;);\nconst { makeTable } = require(&quot;./table&quot;);\n\nfs.read(path.join(__dirname, &quot;./README.template.md&quot;))\n  .then(data =&gt; {\n    const newContent = data.replace(&quot;&lt;&lt;&lt;table&gt;&gt;&gt;&quot;, makeTable());\n    return newContent;\n  })\n  .then(content =&gt; {\n    fs.write(path.join(__dirname, &quot;../README.md&quot;), content).then(() =&gt; {\n      console.log(&quot;README 저장됨~~😆&quot;);\n    });\n  });</code></pre></div>\n<p>replace를 이용해 <code class=\"language-text\">&lt;&lt;&lt;table&gt;&gt;&gt;</code>이라는 글씨를 우리가 만든 빙고로 대체해준다.<br />\n그리고 path 설정을 잘 해줘야 하는데..!<br />\n첫번째 인자에 __dirname이 들어가지 않으면 작동이 안됐던 기억이..<br />\n두번째 인자는 경로와 파일이름과 형식이 들어가게 된다.</p>\n<p>처음에는 이렇게 node server를 켤 때마다 파일을 하나씩 생성하는 로직이었는데<br />\n우리의 능력자 허선생님이 로직을 바꿔서 각폴더에 각 md파일이 들어가게끔 해서<br />\n서버 한 번 켰을때 39개의 폴더와 md파일들이 한번에 생성되도록 만들어주었다.<br /></p>\n<p>한 1초? 늦어도 1.5초 걸렸을까..?</p>\n<p>이래서 노드를 쓰나보다.. 정말 정말 빠르고 편리하다..<br />\n노드의 매력에 점점 빠지고 있는 요즘이다.</p>\n<p>아.. 공부 진짜 열심히 하자ㅠㅠ 갈 길이 멀었다!!!</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>허선생님의 손길</li>\n</ul>","fields":{"slug":"/posts/node_fs_advanced","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/","/tag/node/"]},"frontmatter":{"date":"2020-02-01T22:54:49.169Z","description":"깃빙고타임을 위해 나에게 주어진 과제, 랜덤한 숫자의 빙고판을 만들어서 그걸 40명의 repo에 md파일로 뿌리기. 처음엔 쉽게만 생각했는데 도저히 아이디어가 떠오르지 않았던 것... 또다시 허선생님의 도움을 받았다 ㅠㅠ","tags":["web","javascript","frontend","node"],"title":"허선생님과 함께하는 node를 이용해 랜덤 빙고판 만들고 md파일 생성"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/node_fs_advanced"}}}