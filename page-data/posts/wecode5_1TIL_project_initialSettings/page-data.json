{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode5_1TIL_project_initialSettings","webpackCompilationHash":"c535a0daad8008ebfa3f","result":{"data":{"markdownRemark":{"id":"c1cc9acc-6d6d-52fb-90c9-25c444cbd85c","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/697fc700-c927-11e9-841b-23b4349b6731/image.png\" alt=\"image.png\"></p>\n<p>프로젝트 시작에 앞서 가장 중요한 게 무엇일까? <br />\n실력? 간식력? 체력? 다 아니다! 바로바로 <b>초기세팅!</b>이 젤 중요한 것!<br />\n오늘은 리액트 프로젝트 초기 세팅 때 해야할 것들에 대해 적어보았다!</p>\n<h2 id=\"경로설정-하기\"><a href=\"#%EA%B2%BD%EB%A1%9C%EC%84%A4%EC%A0%95-%ED%95%98%EA%B8%B0\" aria-label=\"경로설정 하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로설정 하기</h2>\n<p>프로젝트 루트 폴더에 <code class=\"language-text\">jsconfig.json</code>이라는 파일을 만들어주고,<br />\n그 안에 값을 넣어준 후 저장~~ 어떤 값 ?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;compilerOptions&quot;: {\n    &quot;baseUrl&quot;: &quot;src&quot;\n  },\n  &quot;include&quot;: [&quot;src&quot;]\n}</code></pre></div>\n<p>이렇게 경로설정을 하지 않았을 경우 쩜쩜쩜 파티가 열리게 되는데!\n<code class=\"language-text\">ex) import Home from &quot;../../Components/Home&quot;</code>\n위와 같이 경로설정을 해줄 경우 모든 경로가 src부터 시작하는게 기본값이라 더이상 쩜쩜을 남발하지 않아도 된다.</p>\n<h2 id=\"router-설치하기\"><a href=\"#router-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"router 설치하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Router 설치하기</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0ab676f0-c487-11e9-aac9-df0beb3e284d/image.png\" alt=\"image.png\"></p>\n<p>Route는 말 그대로 경로를 말한다! 이를 통해 원하는 페이지로 자유롭게 이동 가능쓰~</p>\n<ol>\n<li><code class=\"language-text\">npm install --save react-router-dom</code> 명령어 입력</li>\n<li><code class=\"language-text\">index.js</code>와 같은 디렉토리에 <code class=\"language-text\">Routes.js</code>파일 만들기</li>\n<li><code class=\"language-text\">Routes.js</code>파일 세팅하기</li>\n<li><code class=\"language-text\">index.js</code>파일 내에 render함수 대상을 <Routes />로 바꿔주기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 이거는 Routes.js\nimport React from &quot;react&quot;;\nimport { BrowserRouter as Router, Route, Switch } from &quot;react-router-dom&quot;;\nimport Home from &quot;./Pages/Home&quot;;\nimport Login from &quot;./Pages/Login&quot;;\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      &lt;Router&gt;\n        &lt;Switch&gt;\n          &lt;Route exact path=&quot;/&quot; component={Home} /&gt;\n          &lt;Route exact path=&quot;/login&quot; component={Login} /&gt;\n\n        &lt;/Switch&gt;\n      &lt;/Router&gt;\n    );\n  }\n}\n\nexport default Routes;</code></pre></div>\n<p>일단 예시로 <code class=\"language-text\">Home Component</code>만 넣어보았다.\n우리는 라우터를 통해 자유롭게 이동 가능쓰~~</p>\n<p>url 뒤에 <code class=\"language-text\">/</code> 붙여서 이동할 수 있는 기능도 있지만! 페이지에서 페이지끼리의 이동도 가능쓰</p>\n<p><code class=\"language-text\">import { Link } from &quot;react-router-dom&quot;;</code></p>\n<p>먼저 링크라는 Component를 라우터 돔을 통해 받아오고..</p>\n<p><code class=\"language-text\">&lt;Link to=Home&quot;&gt;</code></p>\n<p>아이콘 태그 위에 Link to 태그와 이동할 컴포넌트를 입혀주면 완성~</p>\n<p>인줄 알았죠?????\n이 모든건 index.js에 Routes 태그를 추가해야 가능한 일…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 이건 index.js 파일\nimport React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\nimport &quot;.styles/index.scss&quot;;\nimport &quot;.styles/reset.scss&quot;;\nimport Routes from &quot;./Routes&quot;;\n\nReactDOM.render(&lt;Routes /&gt;, document.getElementById(&quot;root&quot;));</code></pre></div>\n<h1 id=\"css-tool-고르기\"><a href=\"#css-tool-%EA%B3%A0%EB%A5%B4%EA%B8%B0\" aria-label=\"css tool 고르기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS tool 고르기~</h1>\n<h3 id=\"sass-설치하기\"><a href=\"#sass-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"sass 설치하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SASS 설치하기</h3>\n<p><code class=\"language-text\">npm install --save node-sass</code> 명령어로 설치 후, css파일형식을 .scss로 바꾸기</p>\n<h2 id=\"eslint와-prettier-연동하기\"><a href=\"#eslint%EC%99%80-prettier-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"eslint와 prettier 연동하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint와 Prettier 연동하기</h2>\n<p>이건 지난번에 한번 포스팅해서 링크만 남길게용\n<a href=\"https://gollumnima.github.io/posts/wecode3_5TIL_eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gollumnima.github.io/posts/wecode3_5TIL_eslint</a></p>\n<h2 id=\"styles-디렉토리-만들기\"><a href=\"#styles-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"styles 디렉토리 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styles 디렉토리 만들기</h2>\n<ul>\n<li>styles 디렉토리 안에 reset.scss와 media.scss를 추가해주세용</li>\n<li>media.scss는 반응형 웹페이지를 만들기 위해서 필요한건데 breakpoint를 두 개정도 설정해서 넣어놓고 팀원들과 공유하기!</li>\n<li>reset.scss 파일을 추가해주면 웹페이지별로 다르게 설정되어있는 기본 css 설정값들을 다 취소시켜서 좀 더 깔끔쓰~ 아래의 코드를 긁어서 복붙하세유~~~</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">html,\nbody,\ndiv,\nspan,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\nabbr,\naddress,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\nsamp,\nsmall,\nstrong,\nsub,\nsup,\nvar,\nb,\ni,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n  font-weight: normal;\n  letter-spacing: 1px;\n}\n​ * {\n  box-sizing: border-box;\n  text-decoration: none;\n  list-style: none;\n  color: inherit;\n}\n​ *:focus {\n  outline: none;\n  border: none;\n}\n​ body {\n  line-height: 1;\n}\n​ article,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n​ nav ul {\n  list-style: none;\n}\n​ blockquote,\nq {\n  quotes: none;\n}\n​ blockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: &quot;&quot;;\n  content: none;\n}\n​ a {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n​\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n​\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n​ del {\n  text-decoration: line-through;\n}\n​ abbr[title],\ndfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n​ table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n​\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0;\n}\n​ input,\nselect {\n  vertical-align: middle;\n}\n​ textarea {\n  resize: none;\n}</code></pre></div>","fields":{"slug":"/posts/wecode5_1TIL_project_initialSettings","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/project/","/tag/react/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-26T08:21:04.169Z","description":"리액트로 처음 프로젝트를 시작할때 초기세팅 해야할 것들에 대해 적어보았다","tags":["wecode","codingbootcamp","project","react","위코드"],"title":"CRA(리액트)로 만드는 프로젝트 시작 전 초기세팅 할 것들"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode5_1TIL_project_initialSettings"}}}