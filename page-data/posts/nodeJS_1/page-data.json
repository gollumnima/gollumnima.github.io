{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodeJS_1","webpackCompilationHash":"a8fcc2ff37d9d92cd5f1","result":{"data":{"markdownRemark":{"id":"41bcfdc7-ee37-54c9-a4b4-9eb143335b98","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/646b3810-1ae6-11ea-ae36-e7205b12a901/image.png\" alt=\"image.png\"></p>\n<p><b><a href=\"https://www.zerocho.com/category/NodeJS/post/578b5a36d8316615006bee0f\">제로초님 블로그</a>를 많이 참고한 글입니다.</b></p>\n<h2 id=\"middleware\"><a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware</h2>\n<p>요청에 대한 응답이 들어오면 그 중간에 껴서 어떠한 동작을 하라고 명령해주는 프로그램.\n비선실세 같은 존재?\nExpress.js도 middleware를 사용하는데 그 종류에는 Morgan, Compression, Session, Body-parser, Cookie-parser, Method-override, Cors, Multer 등이 있다고 함</p>\n<p>express에서 middleware를 사용할땐 <code class=\"language-text\">app.use(미들웨어())</code> 이런식으로!</p>\n<h2 id=\"module-system\"><a href=\"#module-system\" aria-label=\"module system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module System</h2>\n<p>module은 독립적인 하나의 소프트웨어임.\n특히나 Node.js에선 파일 하나하나가 모듈로서 기능하는데, 꼭!!\n이전 스크립트의 변수를 사용하겠다고 선언해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// calc.js\nfuction add(a,b) {\n  return a+b;\n}\nmodule.exports = add;</code></pre></div>\n<p>React에서 export 해가는 것처럼 Node.js에선 export를 이런식으로 하는데,\n이걸 적용하려면 require를 통해 변수에 담아준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// main.js\nconst add = require(&#39;./calc.js&#39;)\nconsole.log(add(1,2))</code></pre></div>\n<p>근데 이게 좀 귀찮다 싶으면 더 간단한 방법이 있다.\nReact에서도 비슷한 방법이 쓰이는데, 아예 변수이름 혹은 함수이름 자체를 export 되는 default 값으로 설정하는 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">exports.add = function(a, b) {\n  return a + b;\n};</code></pre></div>\n<p>여기서 알아야할 점은 module.exports에 객체형으로 함수 혹은 변수들이 들어가기 때문에\nexports를 쓰려면 꼭 .을 붙여서 객체의 속성값을 넣어줘야 한다.</p>\n<h2 id=\"ressend와-resjson의-차이점\"><a href=\"#ressend%EC%99%80-resjson%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"ressend와 resjson의 차이점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res.send와 res.json의 차이점?</h2>\n<ol>\n<li>res.send\nstring형태를 전송한다..?\n그래서 JSON.stringify를 꼭 써줘야 한다.</li>\n<li>res.json\nnull이나 undefined와 같이 객체형태가 아닌 값들도 객체로 넘겨서 받을 수 있는 애?</li>\n</ol>\n<h2 id=\"routing\"><a href=\"#routing\" aria-label=\"routing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing</h2>\n<p>클라이언트에서 보내는 주소에 따라 다른 처리를 하는 것. (클라이언트의 요청을 미들웨어로 분배하는 것)\n<code class=\"language-text\">app.REST API(&#39;/주소&#39;. 콜백함수)</code>\n위와 같은 형식으로 나타냄.\nget 외에도 post, put, delete 등이 있음.\n근데 put과 delete를 사용하려면 method-override 패키지 설치해야 함</p>\n<ul>\n<li>wild card\n<code class=\"language-text\">app.get(&#39;/post/:id&#39;, () =&gt; {})</code>;\n이런식으로 콜론 적는것!</li>\n</ul>\n<p>구글 검색에서의 wild card는 *표를 사용해서 단어와 단어 사이에 들어가는 키워드를 맞춰줬었는데\nNode.js에서의 wild card는 동적 라우팅과 비슷하다고 보면 될것 같다!</p>\n<h2 id=\"route-paths\"><a href=\"#route-paths\" aria-label=\"route paths permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route paths</h2>\n<p>request가 만들어지는 end point를 정의하는 것? Route paths 는 string, string pattern, 정규식으로 이루어질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.get(&#39;/&#39;, function (req, res) {\n  res.send(&#39;root&#39;)\n})</code></pre></div>\n<h2 id=\"router-method\"><a href=\"#router-method\" aria-label=\"router method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>router method</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// GET method route\napp.get(&#39;/&#39;, function (req, res) {\n  res.send(&#39;GET request to the homepage&#39;)\n})\n\n// POST method route\napp.post(&#39;/&#39;, function (req, res) {\n  res.send(&#39;POST request to the homepage&#39;)\n})</code></pre></div>\n<h2 id=\"기타\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<p>지난번 프로젝트에서 사용했던 server.js에서의 express</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// server.js\nconst express = require(&#39;express&#39;);\nconst next = require(&#39;next&#39;);\n\nconst port = parseInt(process.env.PORT, 10) || 3000;\nconst dev = process.env.NODE_ENV !== &#39;production&#39;;\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\napp.prepare().then(() =&gt; {\n  const server = express();\n  server.get(&#39;*&#39;, (req, res) =&gt; handle(req, res));\n  server.listen(port, (err) =&gt; {\n    if (err) throw err;\n    // console.log(`🤘 on http://localhost:${port}`);\n  });\n});</code></pre></div>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>제로초님 블로그 중 Node 모듈 시스템, 익스프레스 미들웨어와 라우팅</li>\n<li>Express.js 공식문서(<a href=\"https://expressjs.com/en/guide/routing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://expressjs.com/en/guide/routing.html</a>)</li>\n</ul>","fields":{"slug":"/posts/nodeJS_1","tagSlugs":["/tag/web/","/tag/node-js/","/tag/backend/","/tag/javascript/"]},"frontmatter":{"date":"2019-12-10T14:59:29.169Z","description":"평일에 블로그를 쓰는 건 참 오랜만... 이번에 허선생님과 노드 공부를 시작하게 된 기념으로 Node.js 본격 포스팅을 해보려고 한다.","tags":["web","nodeJS","backend","javascript"],"title":"나도 할수있어bility! Node.js 공부하기 1탄"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nodeJS_1"}}}