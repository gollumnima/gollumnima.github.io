{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode5_3TIL_postman","webpackCompilationHash":"c535a0daad8008ebfa3f","result":{"data":{"markdownRemark":{"id":"0208c9d8-fb77-56bc-a443-9b718feb0262","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/cddb24f0-cc4d-11e9-910d-0db327a0d842/image.png\" alt=\"image.png\"></p>\n<p>색감이 예뻐서 갖다 붙인 post box image ㅋㅋㅋ\n근데 우리가 쓸 프로그램인 postman은 이렇게 예쁘게 생기진 않았다 투박쓰~</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4e4ec010-cc4e-11e9-9732-c9f4af8a8c62/image.png\" alt=\"image.png\"></p>\n<p>postman 검색하고 다운로드 고고!\n분명 지난번에 깔았는데 우분투의 문제인지 뭔지 파일이 보이지 않아서 다시 깔았다 ㅡㅡ 우분투 너이자식…\n여튼 postman은 백에서 개발한 api를 테스트하고 프론트 영역으로 넘길 때 활용도가 높은 프로그램이다.</p>\n<h2 id=\"로그인\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8\" aria-label=\"로그인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인</h2>\n<p>젤 앞의 탭은 ‘POST’로 설정해주고 백에서 만든 url을 입력\n저 url의 end point를 항상 정확하게 입력해야 한다! 기본중의 기본!\n여튼 바디에 객체 형식으로 아이디와 비밀번호를 써준다. key값은 백에서 설정한 그 값을 쓰면 된다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/b3578650-cae5-11e9-a91b-33bacba38e75/image.png\" alt=\"image.png\"></p>\n<p>send를 누르면 SUCCESS라는 메시지가 뜨게 된다!\n만약에 같은 아이디로 한번 더 시도하게 되면…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ce6f1a20-cae5-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<p>오 신기방기 이미 있는 아이디라고 뜬다.\n만약에 이 message가 “same ID exists”라면 “존재하는 아이디 입니다. 다른 아이디를 입력해주세요.” 라는 문구가 뜨는 이런 식의 함수를 프론트에서 만들수 있는 거다 ㅋㅋㅋㅋ 넘나 신기!!!</p>\n<p>그 밖에도…</p>\n<ul>\n<li>비번 틀릴때</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/3f7b12f0-cae6-11e9-a91b-33bacba38e75/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>아이디 틀릴때</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4ed12910-cae6-11e9-a91b-33bacba38e75/image.png\" alt=\"image.png\"></p>\n<h2 id=\"로그인-성공시-토큰-발행\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%84%B1%EA%B3%B5%EC%8B%9C-%ED%86%A0%ED%81%B0-%EB%B0%9C%ED%96%89\" aria-label=\"로그인 성공시 토큰 발행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 성공시 토큰 발행</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/31199600-cae6-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<p>위의 과정을 거쳐 로그인을 성공하게 되면 토큰이 발급되는데…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9d5011f0-cae6-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<p>다시 로그인 시 토큰의 뒷자리가 바뀜! 토큰을 잘 보면 앞자리는 동일한데 뒤의 어느 구간부터 값이 바뀐다. 뒷부분이 중요하다는 말씀..!</p>\n<p>여튼 우리는 이렇게 발급받은 액세스 토큰을 가지고 토큰 해석해주는 사이트에 들어갈 것이다\n주소창에 jwt.io 를 치시오. 존맛탱 아님… JWT입니다</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/fb2b2b70-cae6-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<p>좌측에 입력한 토큰 값을 우측에서 해석해주는데 넘나 신기하다 ㅋㅋㅋ\n여튼 우리가 만든 토큰인지 남이 만든 토큰인지 확인과정을 거치고 이 정보를 또 저장해야하는데…</p>\n<p>만약에 리액트앱에서 토큰을 가지고 있으면, 새로고침시 토큰 정보들도 모두모두 안녕~~~\n일반적으론 브라우저에 저장하는데 세 가지 방법이 있다.</p>\n<ul>\n<li>로컬스토리지에 저장</li>\n<li>세션에 저장(창 끄면 사라짐)</li>\n<li>쿠키(해당 날짜가 지나면 사라짐)</li>\n</ul>\n<p>쿠키가 뭣인지도 모르고 주기적으로 쿠키 지우기를 해줬는데..날짜에 따라서 정보를 저장해주는 녀석이였군!!! 세션땐 이런 쏠쏠한 정보들을 알게 될 때마다 넘 뿌듯하다~</p>\n<p>로컬스토리지는 다음번에 다시 정리 해보도록 하고..!\n이번엔 코멘트도 함 날려보자!</p>\n<h2 id=\"코멘트-보내기\"><a href=\"#%EC%BD%94%EB%A9%98%ED%8A%B8-%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"코멘트 보내기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코멘트 보내기</h2>\n<p>로그인이 성공했다는 전제 하에 진행하는 거라서\nHeaders에 들어가서 Key에는 Authorization이라고 쓰고, value에는 로그인시 발급받은 액세스 토큰을 입력해준다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/14724f90-cae8-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<p>이렇게!\n그 담에는 body에 또 객체 형태로 message 남겨본다! 그럼 내가 보낸 이 메시지들이 백으로 넘어가는거다. 넘나 씐기씐기!!!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/21be3dd0-cae8-11e9-817f-3d68a942f65f/image.png\" alt=\"image.png\"></p>\n<h2 id=\"signup-하기\"><a href=\"#signup-%ED%95%98%EA%B8%B0\" aria-label=\"signup 하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>signup 하기</h2>\n<p>일단 signup button에 뭔가를 해줘야겠지요?\n<code class=\"language-text\">value = &quot;Register&quot; onClick={}</code>\n이런식으로 설정을 해준 다음…\nrender 전에 signup 함수를 작성해줍니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">signup = () =&gt; {\n fetch()\n };</code></pre></div>\n<p>보통 fetch로 받아오긴 하는데 최신 문법인 비동기로 받아오면 좀 더 편리쓰~\n(async, await : 데이터를 받아오는데 언제 올지 모르는 것에 적용 가능한 함수)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">signup = async() =&gt; {\nconst response = await fetch(&#39;http://10.58.4.72:8000/signup&#39;, {\n \tmethod:&#39;POST&#39;,\n    body:JSON.stringify({\n    user_id: &#39;test123&#39;,\n    password: &#39;good&#39;\n    })\n  })\n  const result = await response.json()\n\n  console.log(result)\n\n\n  if (result.message === &#39;same ID exists&#39;) {\n     alert(&#39;이미 존재하는 아이디입니다. 다시 가입해주세요.&#39;)\n  } else if (result.message === &quot;SUCCESS&quot;) {\n     alert(&#39;환영합니다. 가입되었습니다!&#39;)\n     this.props.history.push(&#39;/login&#39;)\n  \t}\n  };</code></pre></div>\n<p>세션 들으면서 썼던 코드라 indent가 맘에 안 들긴 하지만 여튼… 이렇게!\n위의 코드 마지막줄에 props.history.push가 있는데 props를 선언 안해줘도 되는지가 궁금했는데, class에 기본 변수로 들어오기 때문에 props를 따로 선언 안해줘도 된다고 한다! 넘나 씐기 씐기</p>\n<p>Router에서 인자를 어떻게 넘기는지에 대해선 아래의 링크에 잘 나와있다\n나의 사랑 우리모두의 사랑 stack overflow ~♬ 내 스택에서만 일어나지 말아라.</p>\n<p><a href=\"https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4</a></p>\n<p>여튼 전체 코드를 보자면…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport { withRouter } from &#39;react-router-dom&#39;;\nimport &#39;./Signup.scss&#39;;\nimport Logo from &#39;./logo.png&#39;;\nimport {Link} from &#39;react-router-dom&#39;;\n​\nclass Signup extends Component {\n​\n  singup = async () =&gt; {\n    const response = await fetch(&#39;http://10.58.4.74:8000/signup&#39;, {\n      method: &#39;POST&#39;,\n      body: JSON.stringify({\n        user_id: &#39;12341234sdfsdfsfsdfsd&#39;,\n        password: &#39;good&#39;\n      })\n    });\n​\n    const result = await response.json();\n​\n    console.log(result)\n    console.log(&#39;sdfsdf&#39;)\n​\n    if (result.message === &#39;same ID exists&#39;) {\n      alert(&#39;이미 있는 아이디 입니다!! 다시 가입 해주세요.&#39;)\n    } else if (result.message === &#39;SUCCESS&#39;) {\n      alert(&#39;환영합니다!! 가입 되었습니다!!!&#39;)\n      this.props.history.push(&#39;/login&#39;);\n    }\n​\n​\n  };\n​\n  render() {\n    return (\n      &lt;div className=&quot;signup-page&quot;&gt;\n        &lt;article className=&quot;signup-content&quot;&gt;\n          &lt;div className=&quot;input-wrap&quot;&gt;\n            &lt;div className=&quot;signup-header&quot;&gt;\n              &lt;Link to=&quot;/&quot;&gt;&lt;img className=&quot;signup-logo&quot; src={Logo} alt=&quot;logo_img&quot;&gt;&lt;/img&gt;&lt;/Link&gt;\n            &lt;/div&gt;\n            &lt;div className=&quot;signup-info&quot;&gt;\n              &lt;div className=&quot;signup-title&quot;&gt;Register.&lt;/div&gt;\n              &lt;div className=&quot;signup-subtitle&quot;&gt;Enter your email to create an account.&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div className=&quot;signup-form&quot;&gt;\n              &lt;input type=&quot;email&quot; placeholder=&quot;Please enter your Email&quot; maxLength=&quot;30&quot;/&gt;\n              &lt;input type=&quot;password&quot; placeholder=&quot;Your Password&quot; maxLength=&quot;8&quot;/&gt;\n              &lt;input type=&quot;password&quot; placeholder=&quot;Your Password&quot; maxLength=&quot;8&quot;/&gt;\n              &lt;input\n                type=&quot;button&quot;\n                className=&quot;signup-btn&quot;\n                value=&quot;Register&quot;\n                onClick={this.singup}\n              /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/article&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n​\nexport default withRouter(Signup);</code></pre></div>\n<p>이렇게 signup 함수 간단하게 완성쓰!\n코드가 길어서 복잡해 보일수도 있지만 원리만 생각하면 간단하다!</p>\n<p>다음 프로젝트 때는 내가 signup page를 맡게 될텐데 그 때가서 헷갈리지 말고 잘 했음 좋겠다!</p>","fields":{"slug":"/posts/wecode5_3TIL_postman","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/project/","/tag/postman/","/tag/signup/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-28T09:18:04.169Z","description":"위코드 27일차. 페이지를 꾸밀줄만 알면 진정한 프론트가 아니다! 백에서 받아온 데이터를 활용할 줄 알아야 진정한 프론트인인것. 그런 의미에서 오늘은 postman 간단 활용법을 정리해보았다!","tags":["wecode","codingbootcamp","project","postman","signup","위코드"],"title":"wecode 5주차_3일 TIL_Postman으로 데이터 주고받기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode5_3TIL_postman"}}}