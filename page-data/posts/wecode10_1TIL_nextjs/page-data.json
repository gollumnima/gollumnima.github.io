{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode10_1TIL_nextjs","webpackCompilationHash":"a8fcc2ff37d9d92cd5f1","result":{"data":{"markdownRemark":{"id":"bfda2d63-e6e8-5bef-ae96-e4e7618d71f5","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/627c4b00-e35c-11e9-a56b-8914a6ec2e86/image.png\" alt=\"image.png\"></p>\n<p>Next.js를 한번 써보았다!\n리액트랑 비슷한데.. 리액트만 쓰다가 이걸 써보니 진짜 신박하다!</p>\n<p>내가 썼던 React가 Client Side Rendering(CSR) 방식 이었다면, Next는 Server Side Rendering(SSR)방식이다.\n리액트에선 프론트부분을 작성하고 데이터는 백앤드 서버에서 받아오는 방식이었다.\n클라이언트 따로, 서버 따로.. 각각 작성해야 했는데!\nNext.js는 이 과정을 따로 해줄 필요 없이 한방에 뙇!!! 하는거라고… 이해하면 되려나?</p>\n<h2 id=\"시작하기\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir hello-next // 아무 이름의 폴더 생성\ncd hello-next // 만든 폴더로 이동고고\nyarn init -y // 초기화 해주기\nyarn add react react-dom next // next와 react 깔기\nmkdir pages // pages 폴더 만들기</code></pre></div>\n<p>여튼… 내 프로젝트 안에 pages 폴더를 만들고 <code class=\"language-text\">code .</code>으로 vscode를 켜준다!\n여기서 젤 중요한게 pages 폴더를 만드는 일이다.\nReact는 모든 js파일을 src폴더 하에서 시작하는것처럼 Next.js는 pages에서 모든 것이 시작된다고 한다!</p>\n<h2 id=\"packagejson에-추가\"><a href=\"#packagejson%EC%97%90-%EC%B6%94%EA%B0%80\" aria-label=\"packagejson에 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json에 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;hello-next&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;scripts&quot;: {\n     &quot;dev&quot;: &quot;next&quot;,\n    &quot;build&quot;: &quot;next build&quot;,\n    &quot;start&quot;: &quot;next start&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;next&quot;: &quot;^2.1.0&quot;,\n    &quot;react&quot;: &quot;^15.4.2&quot;,\n    &quot;react-dom&quot;: &quot;^15.4.2&quot;\n  }\n}</code></pre></div>\n<p>이걸 추가해줌으로 우린 <code class=\"language-text\">yarn run dev</code> 명령어로 프로젝트를 시작할 수 있다.</p>\n<p>어찌됐든 명령어를 입력하면..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c9986e80-e380-11e9-83c5-b5732aa124ce/image.png\" alt=\"image.png\"></p>\n<p>터미널에 ready, event, wait 등의 메시지가 색깔색깔별로 뜬다.\n명령어 입력 후 3000 port로 접속해 보자..!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/fe4c19b0-e380-11e9-8d67-1ddd28a8c819/image.png\" alt=\"image.png\"></p>\n<p>404 error가 뜬다!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/18e11000-e381-11e9-8d67-1ddd28a8c819/image.png\" alt=\"image.png\"></p>\n<p>Next.js 공식 문서의 learn 페이지에 가면 퀴즈와 함께 설명이 있는데\n에러가 날지 모르고 3번을 눌렀으나 답은 2번이였닼ㅋㅋ 왜 에러가 난거지\nindex.js 파일이 없어서 그런듯?? 만들어주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Index = () =&gt; (\n    &lt;div&gt;\n        &lt;p&gt;Hello Next.js&lt;/p&gt;\n    &lt;/div&gt;\n)\n\nexport default Index;</code></pre></div>\n<p>신기하게 Next.js는 react를 import 안해와도 된다 ㅋㅋ 신기씐기!</p>\n<h2 id=\"about-page-만들기\"><a href=\"#about-page-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"about page 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About page 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default () =&gt; (\n    &lt;div&gt;\n        &lt;p&gt;This is the about page&lt;/p&gt;\n    &lt;/div&gt;\n);</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0cce8490-e35f-11e9-b0fe-0bdcf6561528/image.png\" alt=\"image.png\"></p>\n<p>터미널엔 이러한 글자들이 뜬다!!!\nreact때랑은 다르게 페이지 하나 하나마다 build되고 compile되는 과정을 글자로 알려준다 ㅋㅋ</p>\n<h2 id=\"link태그\"><a href=\"#link%ED%83%9C%EA%B7%B8\" aria-label=\"link태그 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Link태그</h2>\n<p>컴포넌트를 만들고 나서 import를 안 해도 되는것도 신기했지만 더 신기했던건 Link.\nNext.js 안에 Router가 내장되어있기 때문이다 ㅋㅋ\nLink 기능을 쓰려면 <code class=\"language-text\">import Link from &#39;next/link&#39;</code> 이거 한줄 써서 import 해야하긴 한다.\nrouter를 다운로드는 안 받아도 된다 ㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Link from &#39;next/link&#39;\n\nconst Index = () =&gt; (\n    &lt;div&gt;\n        &lt;h1&gt;\n            안녕, Next.js\n        &lt;/h1&gt;\n        &lt;h2&gt;\n            &lt;Link href=&quot;/about&quot;&gt;\n                &lt;a&gt;소개&lt;/a&gt;\n            &lt;/Link&gt;\n        &lt;/h2&gt;\n    &lt;/div&gt;\n);\n\nexport default Index;</code></pre></div>\n<p>리액트는 Link 안에 to를 썼지만, Next는 to 대신 href를 써준다.\n그리고 Link Component 내부엔 또 다른 컴포넌트가 들어가거나 element가 들어가야 한다!!</p>\n<p>공식문서에 따르면…\nWe know that Next.js is all about pages. We can create a page by exporting a React component, and putting that component inside the pages directory. Then it will have a fixed URL based on the file name.</p>\n<p>그니까 파일이름 그 자체가 걍 url의 이름이 되는 것..!!\n리액트땐 Routes.js 들어가서 직접 이름을 설정해줬는데 Next는 걍 파일이름 자체가 url 경로</p>\n<h2 id=\"header-만들기\"><a href=\"#header-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"header 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Header 만들기</h2>\n<p>component라는 폴더를 만들고 그 안에 Header.js 파일은 만들어놓은 상태다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Link from &#39;next/link&#39;;\n\nconst linkStyle = {\n    marginRight: &#39;1rem&#39;\n}\nconst Header = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;Link href=&quot;/&quot;&gt;&lt;a style={linkStyle}&gt;홈&lt;/a&gt;&lt;/Link&gt;\n            &lt;Link href=&quot;/about&quot;&gt;&lt;a style={linkStyle}&gt;소개&lt;/a&gt;&lt;/Link&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Header;</code></pre></div>\n<p>이렇게 하면 Header라는 파일에 home과 about으로 가는 경로가 써 있으니깐\n이걸 또 import 해서 모든 페이지에 붙이면 되겠지!\n근데 이것보다 더 간편한 방법이 있다..</p>\n<h2 id=\"layout-만들기\"><a href=\"#layout-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"layout 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Header from &quot;./Header&quot;\n\nconst layoutStyle = {\n    margin: 20,\n    padding: 20,\n    border: `1px solid #DDD`\n};\n\n\nconst Layout = props =&gt; (\n    &lt;div style={layoutStyle}&gt;\n        &lt;Header /&gt;\n        {props.children}\n    &lt;/div&gt;\n);\n\nexport default Layout;</code></pre></div>\n<p>Header Component를 불러오고 그 밑엔 props의 자식 컴포넌트가 들어오도록 props로 넘겨주는 방식..!\n오.. 신박해!</p>\n<p>이렇게 해줬으면 인제 각 페이지에서 Header 컴포넌트를 제거하고\n가장 바깥쪽 div를 Layout Component로 감싸주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import MyLayout from &quot;../comp/MyLayout&quot;\n\nexport default function About() {\n  return (\n    &lt;div&gt;\n      &lt;MyLayout /&gt;\n      &lt;p&gt;This is the about page&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>요런식으로! ㅋㅋㅋㅋㅋ\n그럼 이렇게 뙇!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a01a39c0-e3e5-11e9-812e-b93d8ea65a84/image.png\" alt=\"image.png\"></p>\n<p>근데… 암만 봐도 난 이 과정들이 넘 비효율적인것 같다 ㅠㅠ</p>\n<p>리액트에선 NavBar 컴포넌트 만든걸 그냥 Routes.js파일 안에 넣으면 끝이었는데\n뭐가 이렇게 번거로운지… 내가 아직 잘 몰라서 그런건가!\n분명 더 간편한 방법이 있을것 같은데.. 지금으로썬 모르겠다 ㅠㅠ</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2a7d78c0-e3e6-11e9-96af-c59b887e2153/image.png\" alt=\"image.png\"></p>\n<p>공식문서 퀴즈에서.. props.children 지워보래서 지워봤는데 아무일도 일어나지 않았고\n그래서 1번을 골랐을 뿐인데 틀렸댄다 ㅠㅠㅠ</p>\n<p>그래서 정말 파일 토씨 하나 틀리지 않게 하려고 완전한 복붙 후 다시 props.children을 지워보았다.\nLike this!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Header from &#39;./Header&#39;\n\nconst layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: &#39;1px solid #DDD&#39;\n}\n\nexport default function Layout(props) {\n  return (\n    &lt;div style={layoutStyle}&gt;\n      &lt;Header /&gt;\n      {/* {props.children} */}\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>그랬더니…!!!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4fa952a0-e3ea-11e9-812e-b93d8ea65a84/image.png\" alt=\"image.png\"></p>\n<p>드디어 아무 내용도 뜨지 않았다!!!\n역시 공식문서의 말을 잘 들어야 한다…ㅋㅋㅋ\n여튼… 위와 같은 Layout 파일을 만들거면 인자로 props를.. 그 아래엔 props.children을 꼭 써주자.</p>\n<h2 id=\"hoc-방식으로-해보기\"><a href=\"#hoc-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"hoc 방식으로 해보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC 방식으로 해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Header from &#39;./Header&#39;;\n\nconst layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: &#39;1px solid #DDD&#39;\n};\n\nconst withLayout = Page =&gt; {\n  return () =&gt; (\n    &lt;div style={layoutStyle}&gt;\n      &lt;Header /&gt;\n      &lt;Page /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default withLayout;</code></pre></div>\n<p>withLayout을 정의해주고…\n각각의 컴포넌트에 withLayout을 export 해준다 이렇게!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import withLayout from &#39;../components/MyLayout&#39;;\n\nconst Page = () =&gt; &lt;p&gt;Hello Next.js&lt;/p&gt;;\n\nexport default withLayout(Page);</code></pre></div>\n<p>넘나 신기한것…\n아직 HOC 방식으로 코드를 쳐보지 않았는데 대충 이런 느낌이었군!</p>\n<h2 id=\"props로-넘겨주는-방법쓰\"><a href=\"#props%EB%A1%9C-%EB%84%98%EA%B2%A8%EC%A3%BC%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%93%B0\" aria-label=\"props로 넘겨주는 방법쓰 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props로 넘겨주는 방법쓰</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Header from &#39;./Header&#39;;\n\nconst layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: &#39;1px solid #DDD&#39;\n};\n\nconst Layout = props =&gt; (\n  &lt;div style={layoutStyle}&gt;\n    &lt;Header /&gt;\n    {props.content}\n  &lt;/div&gt;\n);\n\nexport default Layout;</code></pre></div>\n<p>같은 방식이긴 한데.. 인자로 props가 들어가고 아래엔 props.content를 써준다.<br />\n이 Layout을 적용할 각각의 폴더에는..!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Layout from &#39;../components/MyLayout.js&#39;;\n\nconst indexPageContent = &lt;p&gt;Hello Next.js&lt;/p&gt;;\n\nexport default function Index() {\n  return &lt;Layout content={indexPageContent} /&gt;;\n}</code></pre></div>\n<p>props의 content에 들어갈 부분을 변수로 정의해주고\nreturn 값에는 Layout Component를 불러주고 그 요소로 contetn={위에서 선언한 변수}를 넣어준다.\n아… 이건 진짜 핵 귀찮은 방법인거 같다 ㅠㅠㅠㅠ</p>\n<p>일단은 글이 길어질것 같으니 다음 포스팅에 이어서…☆</p>","fields":{"slug":"/posts/wecode10_1TIL_nextjs","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/next/","/tag/react/","/tag/위코드/"]},"frontmatter":{"date":"2019-09-30T16:05:23.169Z","description":"위코드 63일차. 기업협업 간 첫 날! 내가 출근한 기업에서는 Next.js라는 프레임워크를 이용하고 있어서 본격 Next.js를 사용해보기 전, 공식문서로 공부를 해보았다","tags":["wecode","codingbootcamp","next","react","위코드"],"title":"wecode 10주차_1일 TIL_공식문서와 함께하는 둘둘의 Next.js 도전기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode10_1TIL_nextjs"}}}