{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/mobX_1","webpackCompilationHash":"4b9bf8cfac28b8ad22b6","result":{"data":{"markdownRemark":{"id":"318de87d-b149-5aeb-90c9-44adb59713e5","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/6e89ea80-13fc-11ea-8254-91d59d50bb4f/image.png\" alt=\"image.png\"></p>\n<p>벨로퍼트 님의 글을 보고 따라해 본 mobX<br />\nmobX는 먼저 4가지 개념을 알고 있어야 한다.</p>\n<h2 id=\"observable-state\"><a href=\"#observable-state\" aria-label=\"observable state permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Observable state</h2>\n<p>말 그대로 관찰받고 있는 상태를 말한다.<br />\n아마 리액트의 state와 비슷하다고 보면 되려나?</p>\n<h2 id=\"computed-value\"><a href=\"#computed-value\" aria-label=\"computed value permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed Value</h2>\n<p>기존 상태값을 토대로 만들어진 연산된 값.</p>\n<h2 id=\"reaction\"><a href=\"#reaction\" aria-label=\"reaction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction</h2>\n<p>Computed Value는 특정 값을 연산해야 할때만 처리가 되는데,\n그 중간에! 어떠한 값이 바뀌는 작업에 어떠한 일이 벌어지는걸 reaction이라고 한다.</p>\n<h2 id=\"action\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h2>\n<p>상태에 변화를 일으키는 것. 쉽게 생각해서 함수 같은 것을 떠올리면 되려나!\n근데 여기선 리덕스에서처럼 액션을 객체형태로 만들어 쓰지 않는게 하나의 특징쓰~</p>\n<h4 id=\"연습해보자\"><a href=\"#%EC%97%B0%EC%8A%B5%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"연습해보자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연습해보자!</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { observable, reaction, computed, autorun } from &quot;mobx&quot;;\n\n// observable state\nconst calculator = observable ({\n  a: 1,\n  b: 2,\n})</code></pre></div>\n<p>초기 상태 설정을 위해 observable state를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reaction(\n  ()=&gt; calculator.a,\n  (value, reaction) =&gt; {\n    console.log(`a값이 ${value}로 바뀌었네요!`);\n  }\n);\n\nreaction(\n  ()=&gt; calculator.b,\n  (value, reaction) =&gt; {\n    console.log(`a값이 ${value}로 바뀌었네요!`);\n  }\n);\n\ncalculator.a = 10;\ncalculator.b = 20;</code></pre></div>\n<p>이후 reaction을 통해 값이 변할때 리액션을 이루어질 수 있도록 설정</p>\n<p>콘솔창을 확인해보면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/1f92d850-13e4-11ea-90bc-61119672f9e1/image.png\" alt=\"image.png\"></p>\n<p>변화된 값에 대한 콘솔이 찍힌다.<br />\n이번엔 computed를 써보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = computed(() =&gt; {\n  console.log(&#39;계산중입니다.&#39;); // observe가 사용될때 이 콘솔이 나온다?\n  return calculator.a + calculator.b;\n})\n\nsum.observe(()=&gt; calculator.a); // a값을 주시하고 있음\nsum.observe(()=&gt; calculator.b) ; // b값을 주시하고 있음\n\ncalculator.a = 10;\ncalculator.b = 20;\n\nconsole.log(sum.value);\nconsole.log(sum.value);\n\ncalculator.a = 20;</code></pre></div>\n<p>콘솔창을 다시 확인해보자.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/b4676e50-13e4-11ea-90bc-61119672f9e1/image.png\" alt=\"image.png\"></p>\n<p>짠짠~ 계산중이라는 콘솔과 바뀐 값이 잘 찍히고 있다.<br /></p>\n<p>이번엔 auturun을 써볼차례쓰..!<br />\nautorun을 사용하면 reaction을 대신한다고…하는데.. 일단 써보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">autorun(() =&gt; console.log(`a값이 ${calculator.a}로 바뀌었네요!`));\nautorun(()=&gt; console.log(`b값이  ${calculator.b}로 바뀌었네요`));\n// autorun(()=&gt; sum.get());\n\ncalculator.a = 10;\ncalculator.b = 20;\n\nconsole.log(sum.value);\nconsole.log(sum.value);\n\ncalculator.a = 20;\nconsole.log(sum.value);</code></pre></div>\n<p>위에서 get함수를 쓰면 하나 하나 observe 하지 않아도 된다고 한다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a9c3ee50-13e5-11ea-9473-01dd1a17b245/image.png\" alt=\"image.png\"></p>\n<p>get도, observe도 하지 않았을 때의 콘솔창이다.\n여기서 observe를 쓴다면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c7cbeb50-13e5-11ea-90bc-61119672f9e1/image.png\" alt=\"image.png\"></p>\n<p>짠! 이렇게 나온다.<br />\n위에서 쓴 get 함수에서 주석을 푸르고, observe를 지워준다면<br />\n콘솔에 동일한 결과가 나온다.</p>\n<p>이번엔 클래스를 활용해 식을 깔끔하게 써보자<br />\ncafe에서 메뉴가 추가되는 코드를 짜보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { decorate, observable, computed, autorun } from &quot;mobx&quot;;\n\nclass Cafe {\n  basket = [];\n\n  get total() {\n    console.log(&#39;계산중입니다...!&#39;);\n    return this.basket.reduce((pre,cur) =&gt; pre + cur.price, 0);\n  }\n\n  select (name, price) {\n    this.basket.push({ name, price });\n  }\n}\n\n// decorate를 통해 각 값에 MobX 함수를 적용\ndecorate(Cafe, {\n  basket: observable,\n  total: computed,\n});\n\nconst cafe = new Cafe();\nautorun(() =&gt; cafe.total);\ncafe.select(&#39;Iced Latte&#39;, 5000);\nconsole.log(cafe.total);\ncafe.select(&#39;Honey Bread&#39;, 6000);\nconsole.log(cafe.total);\ncafe.select(&#39;Lemon Ade&#39;, 4000);\nconsole.log(cafe.total);</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a043dfb0-13e6-11ea-90bc-61119672f9e1/image.png\" alt=\"image.png\"></p>\n<p>계산은 잘 되는군 이열~</p>\n<p>이번엔 예제에 조건을 추가하고 마지막줄에 콘솔을 한번 찍었다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const cafe = new Cafe();\nautorun(() =&gt; cafe.total);\nautorun(() =&gt; {\n  if (cafe.basket.length &gt; 0) {\n     console.log(cafe.basket[cafe.basket.length -1]);\n  }\n});\n\ncafe.select(&#39;Iced Latte&#39;, 5000);\ncafe.select(&#39;Honey Bread&#39;, 6000);\ncafe.select(&#39;Lemon Ade&#39;, 4000);\nconsole.log(cafe.total);</code></pre></div>\n<p>그 결과 콘솔창은</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9ac95e50-13e8-11ea-9473-01dd1a17b245/image.png\" alt=\"image.png\"></p>\n<p>이걸 이제 transaction으로 감싸주자.<br />\n젤 윗줄에서 transaction을 import 해준 후에..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">transaction(() =&gt; {\n cafe.select(&#39;Iced Latte&#39;, 5000);\n cafe.select(&#39;Honey Bread&#39;, 6000);\n cafe.select(&#39;Lemon Ade&#39;, 4000);\n }\n)\nconsole.log(cafe.total);</code></pre></div>\n<p>아까의 cafe.select들을 모조리 transaction안에 넣어주면<br />\n콘솔창은 가장 마지막에 딱 한번 찍히게 된다. 이렇게!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e7e69450-13e8-11ea-aeb6-b9ea8e1dd5e0/image.png\" alt=\"image.png\"></p>\n<p>약간 더 간편하게 하려면 decorator 문법을 써주면 된다고 한다.\n도전도전..!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { observable, computed, autorun, action, transaction } from &quot;mobx&quot;;\n\nclass Cafe {\n  @observable basket = [];\n\n  @computed\n  get total() {\n    console.log(&#39;계산중입니다...!&#39;);\n    return this.basket.reduce((pre,cur) =&gt; pre + cur.price, 0);\n  }\n\n  @action\n  select (name, price) {\n    this.basket.push({ name, price });\n  }\n}\n\nconst cafe = new Cafe();\nautorun(() =&gt; cafe.total);\nautorun(() =&gt; {\n  if (cafe.basket.length &gt; 0) {\n     console.log(cafe.basket[cafe.basket.length -1]);\n  }\n});\n\ntransaction(() =&gt; {\n  cafe.select(&#39;Iced Latte&#39;, 5000);\n  cafe.select(&#39;Honey Bread&#39;, 6000);\n  cafe.select(&#39;Lemon Ade&#39;, 4000);\n})\nconsole.log(cafe.total);</code></pre></div>\n<p>decorator 문법은 자바스크립트 뿐만 아니라 파이썬 등에서도 다양하게 쓰이는데<br />\n@ &#x3C;= 요 골뱅이를 불러서 쓰는게 공통이라고 한다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/320031d0-13ea-11ea-90bc-61119672f9e1/image.png\" alt=\"image.png\"></p>\n<p>콘솔을 찍어보면 아까와 동일한 값이 나온다.<br />\ndecorate 함수를 쓰는 것 대신 decorator를 통해 좀 더 코드가 간결해진 느낌?</p>\n<h2 id=\"리액트에서-mobx-적용해보기\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mobx-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"리액트에서 mobx 적용해보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에서 mobX 적용해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-react-app 프로젝트이름\ncd 프로젝트이름\nyarn add mobx mobx-react</code></pre></div>\n<p>mobX는 걍 깔기만 하면 cra에서 쓸 수 있지만,<br />\n위에서 사용한 decorate는 ES7 문법이기 때문에 babel 설정을 따로 해주어야 한다.</p>\n<p>벨로퍼트님은 package.json을 수정해주라고 하는데 안 먹혀서 다른 방법을 찾아보았다.<br />\n어떤 사람은 eject 명령어를 쓰던데, 한번 eject 하면 영원히 못 돌린다고 들어서<br />\n넘 무서우니깐 좀 더 귀찮지만 안 무서운 방법을 사용해봤다.</p>\n<ul>\n<li>cra 프로젝트에 mobX 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add customize-cra --dev\nyarn add react-app-rewired --dev\n\n// cra 버전2를 사용하고 있다면 둘 다 설치\n// cra 버전1을 사용하고 있다면 rewired만 설치</code></pre></div>\n<p>위의 명령어로 라이브러리를 설치하면 eject 없이도\n이미 만들어놓은 cra 프로젝트에 customizing해서 설정값을 바꿀수 있는듯?</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/88cc61c0-1401-11ea-b045-c52c09e7df8c/image.png\" alt=\"image.png\">\n근데 댄 아브라모씨가 추천하는 방법은 아니다.. 한번만 쓸게유ㅠㅠ</p>\n<ul>\n<li>바벨 설치\n<code class=\"language-text\">yarn add @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators</code></li>\n<li>package.json 수정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &quot;scripts&quot;: {\n   &quot;start&quot;: &quot;react-app-rewired start&quot;,\n   &quot;build&quot;: &quot;react-app-rewired build&quot;,\n   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;\n}</code></pre></div>\n<ul>\n<li>config-overrides.js 파일 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const {\n    addDecoratorsLegacy,\n    disableEsLint,\n    override\n} = require(&quot;customize-cra&quot;);\n\n  module.exports = {\n    webpack: override(\n        disableEsLint(),\n        addDecoratorsLegacy()\n    )\n  };</code></pre></div>\n<p>위와 같이 작성해주고, root directory에 놓는다.</p>\n<p>자 인제 Counter 라는 컴포넌트를 만들거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> import React, { Component } from &quot;react&quot;;\n import {decorate, observable, action} from &quot;mobx&quot;;\n import {observer} from &quot;mobx-react&quot;;\n\n class Counter extends Component {\n     number = 0;\n\n     increase = () =&gt; {\n         this.number++;\n     }\n\n     decrease = () =&gt; {\n         this.number--;\n     }\n     render() {\n         return(\n           &lt;div&gt;\n             &lt;h1&gt;{this.number}&lt;/h1&gt;\n             &lt;button onClick={this.increase}&gt;+1&lt;/button&gt;\n             &lt;button onClick={this.decrease}&gt;-1&lt;/button&gt;\n           &lt;/div&gt;\n         );\n     }\n }\n\n decorate(Counter , {\n     number : observable,\n     increase : action,\n     decrease : action\n })\n\n export default observer(Counter);</code></pre></div>\n<p>신기하게도 이게 끝이다!\nmobX를 쓰면 constructor 안에 state 안 써도 되고,\n함수 안에도 setState함수를 안 써도 된다!! 신기신기!!!</p>\n<p>위에서 babel도 설정해줬으니, 이번엔 decorator를 활용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from &quot;react&quot;;\nimport {observable, action} from &quot;mobx&quot;;\nimport {observer} from &quot;mobx-react&quot;;\n\nclass Counter extends Component {\n    @observable number = 0;\n\n    @action increase = () =&gt; {\n        this.number++;\n    }\n\n    @action decrease = () =&gt; {\n        this.number--;\n    }\n    render() {\n        return(\n          &lt;div&gt;\n            &lt;h1&gt;{this.number}&lt;/h1&gt;\n            &lt;button onClick={this.increase}&gt;+1&lt;/button&gt;\n            &lt;button onClick={this.decrease}&gt;-1&lt;/button&gt;\n          &lt;/div&gt;\n        );\n    }\n}\n\nexport default observer(Counter);</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/cae77d00-1402-11ea-8254-91d59d50bb4f/image.png\" alt=\"image.png\"></p>\n<p>날것 그대로의 카운터의 모습이다. 플/마 버튼을 눌러보면 잘 작동한다.<br />\n넘나 신기할 따름이다 ㅋㅋㅋ</p>\n<p>지금 만들고 있는 테스트용 페이지가 있는데 거기다가도 적용해 봐야겠다.</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://velog.io/@velopert/MobX-2-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-MobX-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-oejltas52z\">mobX 개념 출처 : 벨로그님 블로그</a></li>\n<li><a href=\"https://medium.com/@jsh901220/create-react-app%EC%97%90%EC%84%9C-eject%EC%82%AC%EC%9A%A9%EC%95%88%ED%95%98%EA%B8%B0-customize-cra-react-app-rewired-10a83522ace0\">eject 없이 cra 커스터마이징 : 조승현님 블로그</a></li>\n</ul>","fields":{"slug":"/posts/mobX_1","tagSlugs":["/tag/web/","/tag/frontend/","/tag/react/","/tag/mobx/"]},"frontmatter":{"date":"2019-11-30T14:15:23.169Z","description":"급하게 만들어보고 싶은 웹페이지가 있는데, 리덕스는 공부하면 할수록 끝이 없을것 같다.. 그래서 도전해본다, mobX. 나에게 몹은 몬스터였는데.. 몹X니까 몬스터 아님쓰?ㅋㅋㅋㅋ","tags":["web","frontend","react","mobx"],"title":"리액트에서 mobX 이용해 상태관리 해보자"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/mobX_1"}}}