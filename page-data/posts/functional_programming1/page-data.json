{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/functional_programming1","webpackCompilationHash":"c535a0daad8008ebfa3f","result":{"data":{"markdownRemark":{"id":"e05feb2d-13cc-5837-85ca-aec248abd1d0","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/1f276140-1ee5-11ea-a04d-b735fbfc6528/image.png\" alt=\"image.png\"></p>\n<h2 id=\"성공적인-프로그래밍이란\"><a href=\"#%EC%84%B1%EA%B3%B5%EC%A0%81%EC%9D%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"성공적인 프로그래밍이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성공적인 프로그래밍이란?</h2>\n<ul>\n<li>사용성, 성능, 확장성, 기획 변경에 대한 대응력이 좋은 것..!</li>\n</ul>\n<h2 id=\"함수형-프로그래밍\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍</h2>\n<ul>\n<li>성공적인 프로그래밍을 위해 부수 효과보다는 조합성을 강조하는 프로그래밍 패러다임</li>\n<li>부수효과를 지양하는 것 => 순수함수 만드는 것</li>\n<li>조합성을 강조하는 것 => 모듈화 수준을 높이는 것</li>\n<li>순수함수 => 오류를 줄이고 안정성을 높이는 것. 다시 말해 <br /> 동일한 인자를 주면 동일한 결과를 리턴하는 것(부수효과가 없음)</li>\n<li>모듈화 수준 높아짐 => 생산성 높이는 것</li>\n</ul>\n<p>ex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const add = (a,b) =&gt; a+b\nadd(10,5)\n\nlet c= 20;\nconst add2 = (a,b) =&gt; a+b+c;\nadd2(10,5)\n\nconsole.log(c,&#39;c 이전값&#39;)\nconst add3 = (a,b) =&gt; {\n  c=b;\n  console.log(c, &#39;c 이전값&#39;)\n  return a+b\n}\n\nadd3(20,30)</code></pre></div>\n<p>위의 식에서 add가 순수함수! add2나 add3는 부수효과가 있어서 순수함수라 할 수 없다.\n순수함수는 평가시점에 따라 결과가 달라지지 않고, 항상 동일한 결과를 리턴하기 때문에 안전하다!!</p>\n<h2 id=\"일급함수\"><a href=\"#%EC%9D%BC%EA%B8%89%ED%95%A8%EC%88%98\" aria-label=\"일급함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급함수</h2>\n<p>함수를 runtime에서 값으로 담을 수 있고, 변수로 담을 수 있고, 인자로 담을 수 있는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let f1 = (a) =&gt; a*a\nconsole.log(f1(5))\n\nconst f3 = (f) =&gt; f()\nf3(() =&gt; 10)</code></pre></div>\n<p>순수함수와 일급함수를 합친 공식을 한번 만들어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const add_maker = (a) =&gt; {\n// 이 부분이 클로저\n  return (b) =&gt; a+b\n}\n\nlet add10 = add_maker(10)\nconsole.log(add10(20)) // 30</code></pre></div>\n<p>한 가지 예시 더!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const f4 = (f1,f2,f3) =&gt; f3(f1()+f2());\nf4(()=&gt;2,()=&gt;1,a=&gt;a*a) // 9</code></pre></div>\n<p>함수형 프로그래밍을 하면 이런 식으로 순수함수를 조합하고, 순수함수들이 최종적으로 결과를 만들면 이를 통해 로직을 만들어간다!</p>\n<h2 id=\"요즘-개발이야기쓰\"><a href=\"#%EC%9A%94%EC%A6%98-%EA%B0%9C%EB%B0%9C%EC%9D%B4%EC%95%BC%EA%B8%B0%EC%93%B0\" aria-label=\"요즘 개발이야기쓰 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요즘 개발이야기쓰</h2>\n<ul>\n<li>재미/실시간성 => 라이브 방송, 실시간 댓글, 협업, 메신저</li>\n<li>독창성/완성도 => 애니메이션, 무한스크롤, 벽돌</li>\n<li>더 많아져야 하는 동시성 => 비동기 I/O, CSP, Actor, STM…</li>\n<li>더 빨라야 하는 반응성/고가용성 => ELB, Auto Sacling, OTP Supervisor…</li>\n<li>대용량/정확성/병렬성 => MapReduce, Clojure Reducers…</li>\n<li>복잡도/MSA… => 많아지고 세밀해지는 도구들… 타협할 수 없는 생산성</li>\n</ul>\n<p>스멀스멀 다가오는 FP..(Functional Programming)\n좋아지는 하드웨어 성능, 좋아지는 컴파일러로 인해\n함수형 프로그래밍 기술도 점점 향상되고 있음!</p>\n<p><b>“함수형 프로그래밍은 애플리케이션, 함수의 구성요소, 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다.”</b></p>\n<p><b>“함수형 사고방식은 문제의 해결방법을 동사(함수)들로 구성(조합)하는 것”</b></p>\n<p><i>ㅡ마이클 포커스 &#x3C;클로저 프로그래밍의 즐거움> 중…</i></p>\n<p>객체지향에선 데이터를 만든다음에 그 데이터에 맞게 함수를 만드는데,\n함수형에선 그 반대로 함수를 먼저 만들고 시작!</p>\n<p>우리는 함수형을 왜 써야 하는가보다는 어떻게 전환하는 가에 대해 생각을 해야 한다!</p>\n<h2 id=\"다형성\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"다형성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성…</h2>\n<p>method는 객체지향 프로그래밍.<br />\nmethod의 특징은 해당 클래스에 정의되어 있기 때문에 해당 클래스의 인스턴스에만 사용할 수 있음.\n예를 들어 map과 filter는 배열에서만 사용 가능쓰</p>\n<p>함수형 프로그래밍을 사용하면 다형성도 높아진다!</p>\n<p>객체지향은 해당하는 객체가 생겨야 평가를 할 수 있어서 데이터가 꼭 생겨야 하는데,\n함수형은 데이터 없이도 함수가 존재할 수 있기 때문에 좀 더 실용적이게 되는 것</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/43f93440-1ee9-11ea-88c2-c54c28403982/image.png\" alt=\"image.png\"></p>\n<h2 id=\"커링\"><a href=\"#%EC%BB%A4%EB%A7%81\" aria-label=\"커링 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커링</h2>\n<p>커링은 함수와 인자를 다루는 기법을 말한다.<br/> 함수에 인자를 하나씩 적용해나가다가 필요한 인자가 채워지면 함수 본체를 실행하는 것.<br />\nJS에선 커링이 지원되지 않지만, 일급함수가 지원되고 평가시점을 마음대로 다룰수 있기 때문에 커링과 같은 기법을 얼마든지 구현할 수 있다.<br />\n위에서 만들었던 add_maker도 커링이라고 할 수 있다!</p>\n<p>예시 코드를 보자..!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function curry(fn) {\n  return function(a) {\n    return function(b) {\n      return fn(a,b);\n    }\n  }\n}\n\nconst add = curry(function(a,b){\n  return a+b\n})\n\nlet add10 = add(10);\nadd10(5) // 15\nadd(3)add(5) // 8</code></pre></div>\n<p>fn에 a+b 라는 함수가 들어간것이고, a+b 라는 값을 기억했다가\nreturn 부분에서 a가 인자로 들어가고, b가 인자로 들어가는 함수가 차례로 진행되는데\n결론적으로 a+b 더하는 식으로 이어진다.</p>\n<p>여기서 add10을 처음에 정의해준 것처럼 변수에 어떠한 값을 먼저 담아야 그게 계속 진행이 되는듯? 어렵다리~~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function curry(fn) {\n  return function(a,b) {\n    return arguments.length === 2 ? fn(a,b) : function (b) { return fn(a,b)}\n  }\n}</code></pre></div>\n<p>이런식으로도 표현된다고 한다.. 와우…</p>\n<p>빼기도 한번 만들어볼건데.. 저 식을 저대로 적용하면 -값 적용이 애매하게 된다.\n그래서 순서대로 적용하기 위해 식을 약간 변형해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function curryr(fn) {\n  return function (a,b) {\n    return arguments.length === 2 ? fn(a,b) : function (b) { return fn(b,a)}\n  }\n}\n\nconst sub = curryr(function(a,b) {\n  return a-b\n})\n\nlet sub10 = sub(10);\nsub(10)(5) // -5</code></pre></div>\n<p>이렇게 하면 오른쪽에서 왼쪽으로 진행되기 때문에 로직에 잘 들어맞게 된다.</p>\n<p>아래는 커링함수를 get함수에 적용한 코드이다. 이렇게 쓰는 방법도 있구나~~~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let users = [\n  {id:1, name: &#39;doori&#39;, age: 28},\n  {id:2, name: &#39;dori&#39;, age: 38},\n  {id:3, name: &#39;duri&#39;, age: 48},\n  {id:4, name: &#39;diri&#39;, age: 58},\n  {id:5, name: &#39;dari&#39;, age: 18},\n  {id:6, name: &#39;deri&#39;, age: 8},\n  {id:7, name: &#39;douri&#39;, age: 98},\n]\n\nfunction get(obj, key) {\n  return obj === null ? undefined : obj[key]\n}\n\nlet user1 = users[0];\nconsole.log(user1.name)\nconsole.log(get(user1,&#39;name&#39;))\n\n// 요렇게 하는 방법도 있지만..\n\nfunction curryr(fn) {\n  return function (a,b) {\n    return arguments.length === 2 ? fn(a,b) : function (b) { return fn(b,a)}\n  }\n}\n\nfunction get(obj, key) {\n  return obj === null ? undefined : obj[key]\n}\n\nconst _get = curryr(function(obj,key) {\n  return obj === null ? undefined : obj[key]})\n\nlet user1 = users[0];\nconsole.log(_get(user1, &#39;name&#39;))\nconsole.log(_get(&#39;name&#39;)(user1))</code></pre></div>\n<p>여튼 다시.. 정리하자면! 커링이란~! 본체함수를 실행시키기 원하는 시점까지 미뤄두었다가 최종적으로 평가하는 기법이라고 함.\n커링 넘 어렵다리~~</p>\n<h2 id=\"reduce\"><a href=\"#reduce\" aria-label=\"reduce permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce</h2>\n<p>와.. reduce 개념이 엄청 헷갈리고 별로 안 좋아했는데 유인동쌤 최고다 진짜</p>\n<p><code class=\"language-text\">function _reduce(list, iter,memo) { }</code></p>\n<p>일단 기본 개념은 요로코롬 배열과, 함수와, 직전값이 들어가는건데\n아까 위에서 나왔던 add 함수를 생각해보자면…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">_reduce([1,2,3], function(a,b) {\n  return a+b;\n},0)\n\nmemo = add(0,1)\nmemo = add(memo,2)\nmemo = add(memo,3)\nadd(add(add(0,1),2),3);</code></pre></div>\n<p>memo는 배열을 돌면서 초기값과 더해주는데\n그 값을 기억했다가 직전값과 더해서 최종적인 합계를 도출해낸다.</p>\n<p>filter나 map은 배열이 인자로 들어가서 배열을 리턴해내지만,\nreduce는 배열이 들어가면 어떠한 숫자가 나오거나 하나의 객체를 뱉어낸다!</p>\n<p>reduce가 합계를 도출하는건 알았는데 배열이 들어갔을때 객체를 뱉어낸다는건<br />\n우리 허선생님을 통해 처음 알게된 사실… 넘 신기 ㅠㅠ<br />\nreduce… 앞으로 함수형 프로그래밍을 하려면 자주 쓰게 될것같은데\n얼른 더 친해져야겠다 두리듀스!!!! Do Reduce!!!!</p>\n<hr>\n<p>그런 의미에서 풀어보는 <b>WeCode JS Exercise 문제!</b><br/>\n내가 지난번 면접에서 질문 받았던 것을 예리님께서 문제화 해주셨다.</p>\n<p>Q. 4개의 값을 인자로 받는 함수가 있는데, 인자가 null이나 undefined일 경우 프로퍼티에 추가하면 안된다. 예를 들어 input값이 1, null, 3, undefined 이면 output은 { a: 1, c: 3 }이어야 한다.</p>\n<p>나의 눈물겨운 첫 시도</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const neesArgs = (h,j,k,l) =&gt; {\n  let obj = {};\n  obj = {a:h, b:j, c:k, d:l}\n  if (h === undefined || typeof h === null) {\n    delete obj.a;\n  }\n  else if (j === undefined || typeof j === null) {\n    delete obj.b;\n  }\n  else if (k === undefined || typeof k === null) {\n    delete obj.c;\n  }\n  else if (l === undefined || typeof l === &#39;&#39;){\n    delete obj.d;\n    // null을 어떻게 잡아야하나\n  }\n  return obj;\n}</code></pre></div>\n<p>코드는 굉장히 길고 조잡하지만, null값은 삭제 할 수 없었다.<br />\n그러던 중 허선생님의 꿀팁으로 Object.entries()와 reduce를 써보게 되는데…<br />\n허선생님이 풀땐 이해가 쏙쏙 된거 같았는데 혼자 하려니 안된다.<br />\n그렇다.. 과거의 나는 허선생님의 코드를 완전히 이해를 하지 못한것이었다 ㅋㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const neesArgs  = (...args) =&gt; {\n  let obj = {a:args[0], b: args[1], c: args[2], d: args[3]};\n  return Object.entries(obj).reduce((prev, curr) =&gt; {\n    const key = curr[0];\n    const value = curr[1];\n    return (value !== undefined || null) ? Object.assign({},{key : value} ): null\n  },&#39;&#39;)\n}</code></pre></div>\n<p>어떻게든 코드를 줄여보고자 삼항연산자를 썼지만.. 리턴값은 null<br />\n접근이 잘못되었다는걸 깨닫고 다른 방법을 찾아본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const neesArgs  = (...args) =&gt; {\n  let obj = {a:args[0], b: args[1], c: args[2], d: args[3]}\n  let temp = {}\n  let converted = Object.entries(obj).filter(el=&gt; {\n    return el[1]\n  })\n  console.log(converted[0][1],&#39;ㅂㅏ뀐거&#39;) // [ [ &#39;a&#39;, 1 ], [ &#39;c&#39;, 2 ] ] &#39;ㅂㅏ뀐거&#39;\n  for(let i in converted) {\n    temp[converted[i][0]] = converted[i][1]\n  }\n  return temp; // { &#39;2&#39;: undefined, a: undefined }\n}</code></pre></div>\n<p>reduce를 쓰지 않고 for in문을 이용해서 접근해보았다.<br />\n이렇게도 값이 나오긴 하는데.. reduce를 너무 쓰고 싶었다.\n그래서 <a href=\"https://medium.com/dailyjs/rewriting-javascript-converting-an-array-of-objects-to-an-object-ec579cafbfc7\">이 블로그</a>를 참고해서 내가 짠 식에 적용해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const neesArgs  = (...args) =&gt; {\n  let obj = {a:args[0], b: args[1], c: args[2], d: args[3]};\n  return Object.entries(obj).reduce((obj, item) =&gt; {\n    if (item[1] !== undefined &amp;&amp; item[1] !==  null) {\n      obj[item[0]] = item[1]\n    }\n    return obj\n  },{})\n}</code></pre></div>\n<p>결과는 성공적.. 드뎌 제출완료쓰<br />\n허선생님은 쫌 더 간단하게 풀었던 것 같은데.. 월요일날 물어봐야지 ㅠㅠ</p>\n<p>부족함이 너무 느껴져서 공부할 게 태산인 요즘이지만!\n이렇게 하나 하나 개념 정리하면서 넘어가면 언젠간 잘하게 되겠지!!<br /></p>\n<p><b>문어,지지말자!! 화이팅쓰!!! 문어발식 공부하는 모든 개발자분들~</b></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0fbf8d50-1ee4-11ea-b5c9-61067e78208a/image.png\" alt=\"image.png\"></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D#</a></li>\n<li><a href=\"https://medium.com/dailyjs/rewriting-javascript-converting-an-array-of-objects-to-an-object-ec579cafbfc7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/dailyjs/rewriting-javascript-converting-an-array-of-objects-to-an-object-ec579cafbfc7</a></li>\n</ul>","fields":{"slug":"/posts/functional_programming1","tagSlugs":["/tag/wecode/","/tag/frontend/","/tag/javascript/"]},"frontmatter":{"date":"2019-12-15T11:45:29.169Z","description":"허선생님의 추천을 받고 인프런에 올라온 유인동님의 함수형 프로그래밍 강의를 정리해보고 있다. 성격이 급해서 빨리빨리에 집중하다 보니 중요한 것들을 놓치고 있는 것 같아서 다시 자바스크립트 공부중인 요즘!","tags":["wecode","frontend","javascript"],"title":"유인동님의 함수형 프로그래밍 - 순수함수, 일급함수, currying, reduce"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/functional_programming1"}}}