{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode3_1_TIL_linux/","webpackCompilationHash":"ba3130b67514d907a41d","result":{"data":{"markdownRemark":{"id":"0d1623ec-b579-578c-80e0-02a7c6092590","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/4a5a69a0-be93-11e9-9e21-fd5890a496e3/image.png\" alt=\"image.png\">\n까만 터미널이 무서워서 색깔을 입혀본 나의 터미널쓰.. 터미널 너무 무서워서 싫어하는데… 개발 하려면 이제는 친해져야겠지! 하는 의미에서 써보는 포스팅 ㅠㅠ</p>\n<h2 id=\"linux\"><a href=\"#linux\" aria-label=\"linux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux</h2>\n<p>대부분의 서버가 linux로 되어 있어서 개발하는 사람들이라면 짱짱 중요한 운영체제.( window는 서버로 잘 안쓴다고 한다.. 열일해라 윈도우). 일단 리눅스를 피할수없는 운명이므로…</p>\n<ol>\n<li>잘 알아야하고</li>\n<li>반복적으로 써서 익숙해져야 한다!</li>\n</ol>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/3dc0a9a0-c0de-11e9-a81c-3590d60861a3/image.png\" alt=\"image.png\">(Linus Torvals)</p>\n<p>리눅스는 1991년도에 Linus Torvals가 개발함. 리눅스를 개발한것 치고는 연봉이 6만 5천불 정도..!???? 원래는 더 받을 능력이 있지만 그냥 이 사람은 개발이 좋아서 하는 것… 대단쓰..!! 리눅스 말고 깃도 만들었는데 돈은 깃허브가 다 가져가네~~ 와우 ㅋㅋ</p>\n<p>리눅스의 뿌리는 유닉스. 뿌리가 깊기 때문에 처음부터 끝까지 알긴 어렵고,..\n리눅스 전문 직군도 따로 있음! 그 정도로 학문의 깊이가 깊음\n그러니까 우리는 개발자 선에서 필요한 정도만 알고 있으면 됨.</p>\n<ul>\n<li>리눅스의 디렉토리 구조</li>\n<li>path</li>\n<li>설정</li>\n</ul>\n<p>오늘 포스팅에선 이 정도를 살펴보려고 한다!</p>\n<h3 id=\"리눅스의-file-system\"><a href=\"#%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-file-system\" aria-label=\"리눅스의 file system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리눅스의 file system</h3>\n<p>리눅스는 기본적인 폴더 구조는 트리형태! <code class=\"language-text\">/</code>가 각각의 directory를 나타낸다. 윈도우에서는 <code class=\"language-text\">\\</code> 백슬러시. 디렉토리 구조는 두 가지 형태로 나뉘는데…</p>\n<ol>\n<li>시스템 디렉토리\n운영체제 관련한 것들이 담김.</li>\n<li>유저 디렉토리\n홈 디렉토리를 말한다.</li>\n</ol>\n<p>ex) 유저 디렉토리 이동방법 활용쓰</p>\n<ul>\n<li><code class=\"language-text\">cd /</code> 입력시 홈 디렉토리로 이동~</li>\n<li><code class=\"language-text\">cd</code>만 치고 아무 것도 안 치면 홈 디렉토리로 이동!</li>\n<li><code class=\"language-text\">~</code>(틸다) 치면 홈디렉토리로 감</li>\n</ul>\n<p>(틸다라는 용어를 알았으니 이제붙턴 물결말고 틸다를 자주 써줘야겠다! 내가 아는 틸다는 틸다스윈튼밖에…☆)</p>\n<h3 id=\"경로\"><a href=\"#%EA%B2%BD%EB%A1%9C\" aria-label=\"경로 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로</h3>\n<ol>\n<li>절대경로\n내 위치랑 상관없이 절대적인 경로. root부터 타고 감.</li>\n<li>상대경로\n내 위치에 따라 움직임.\n<code class=\"language-text\">.</code> : 현재 내 위치\n<code class=\"language-text\">..</code>: 현재 내 위치보다 더 상위 디렉토리\n<code class=\"language-text\">./</code>: 같은 폴더안에 있다!</li>\n</ol>\n<p>이거 진짜 왕 중요!! 터미널이나 비주얼 스튜디오에서 진짜진짜 자주 쓴다. 아직 헷갈려서 쳐보면서 확인하는데.. 한번 정리해놨으니 이제는 기억하겠지!</p>\n<p>ex) <code class=\"language-text\">cd ./temp</code>\n현재 내가 위치해있는 디렉토리 내부의 temp 디렉토리.</p>\n<h3 id=\"설정configs\"><a href=\"#%EC%84%A4%EC%A0%95configs\" aria-label=\"설정configs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정(configs)</h3>\n<p>우리가 코드 치면서 자주 보는 config file… 이건 환경을 설정하다라는 의미의 configure의 줄임말 이였다!\n여튼 리눅스에서의 설정은 주로 파일을 통해서 하는데, 크게 시스템 설정과 유저 설정으로 나눠볼 수 있다.</p>\n<ol>\n<li>시스템 설정\n-> 어려우니까 다음기회에 정리할 예정쓰!</li>\n<li>유저 설정\n-> file에 있는 값들을 바꿔서 설정을 해줌.</li>\n</ol>\n<p>다양한 설정파일들이 있는데… 그 중 제일 중요한건 shell이다! 우리는 보통 설정을 터미널 창을 통해 하게 되는데.. 그렇다면 shell가 terminal은 무슨 차이일까! shell이 회장님, terminal은 비서라고 생각하면 쉬울 것 같다.</p>\n<p>사용자가 terminal에 명령어를 입력하면 그 명령어를 받아서 운영체제에 전달해주고, 운영체제가 그걸 실행시키면 결과값을 다시 전송하는게 바로 shell이 하는 역할이다. 이렇게 shell은 유저와 운영체제간의 중간다리 역할을 한다!!</p>\n<p>shell의 종류도 여러가지가 있는데..</p>\n<ul>\n<li>bash : 내가 윈도우 시절에 썼던 git bash 같은 애들</li>\n<li>z shell(Zsh) : 요즘 핫한 shell. 터미널을 예쁘게 꾸밀수도 있고, 유용한 명령어가 많아서 생산성을 높일 수 있음.</li>\n</ul>\n<p>shell 설정을 하려면.. 예를 들어 Zsh을 깐다고 생각해보자!\n홈 디렉토리에 있지만 우리 눈엔 안 보인다… 착한 사람 눈에만 보인다 ㅎ\nzshrc파일은 <code class=\"language-text\">.</code>으로 시작되는 숨겨진 파일이라서 <code class=\"language-text\">ls -a</code>라는 명령어를 입력하면 그제서야 볼 수 있다!</p>\n<h2 id=\"환경변수path-environment-variable\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98path-environment-variable\" aria-label=\"환경변수path environment variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경변수(path environment variable)</h2>\n<p>환경변수란 linux라는 운영체제의 환경설정값을 저장하고 있는 변수를 말한다.(여기서 환경은 shell을 말한다.) 이렇게 말하면 잘 이해가 가지 않으니 예를 들어보겠다!!!</p>\n<p><code class=\"language-text\">cd</code> 우리가 자주 쓰는 이 명령어 cd는 놀랍게도 프로그램이다. 이미 경로설정이 잘 됭있기 때문에 path를 입력하지 않고 cd만 쳐도 실행이 되는것…! 넘나 씐기~\n그 밖에도…\n<code class=\"language-text\">ls</code>, <code class=\"language-text\">mv</code>, <code class=\"language-text\">cp</code>, <code class=\"language-text\">cat</code>, <code class=\"language-text\">less</code>, <code class=\"language-text\">tail</code>, <code class=\"language-text\">nohup</code>, <code class=\"language-text\">rm</code>, <code class=\"language-text\">mkdir</code>, <code class=\"language-text\">clear</code>, <code class=\"language-text\">pwd</code>, <code class=\"language-text\">chown</code>, <code class=\"language-text\">grep</code>, <code class=\"language-text\">history</code>,<code class=\"language-text\">ps</code>\npath 설정이 잘 되어있는 이러한 명령어들이 있다!</p>\n<p>우리가 프로그램을 새로 설치했을 때 실행이 잘 안 될 경우가 있는데, 그건 바로 path 설정이 제대로 안 되어 있어서이다 ㅠㅠ 나도 이번에 eslint를 설치하느라 고생을 넘 많이 했는데 그게 다 path설정 때문에 발생한 문제였구나…</p>\n<p>환경변수를 설정하는 방법에 대해서는 다음 기회에 저 명령어들과 함께 다룰 예정!!</p>","fields":{"slug":"/posts/wecode3_1_TIL_linux/","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/linux/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-12T22:40:32.169Z","description":"위코드 15일차. 송은우님의 강연을 바탕으로 개발자에게 있어서 뗄래야 뗄 수 없는 리눅스의 기초개념에 대해 정리해보았다.","tags":["wecode","codingbootcamp","linux","위코드"],"title":"wecode 3주차_1일 TIL_Linux의 기초를 알아보자"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode3_1_TIL_linux/"}}}