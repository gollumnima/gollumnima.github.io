{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode2_7_TIL_js/","webpackCompilationHash":"27447e284f559cd23d47","result":{"data":{"markdownRemark":{"id":"8743b47c-ddd4-5b8c-9e8d-2ece4ce0c410","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/4abe4cd0-bc28-11e9-891f-a7a04360ad5c/world-13029591920.jpg\" alt=\"world-1302959_1920.jpg\">\n위코드 멘토님 송은우님의 강연을 바탕으로 쓴 포스팅입니다 :)</p>\n<h2 id=\"웹서비스\"><a href=\"#%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"웹서비스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹서비스</h2>\n<p>그냥 개발공부를 시작하는 것보다는 한번쯤은 짚고 넘어가면 좋을 부분이 바로 웹의 역사! 뭐든 역사와 의미를 알고가면 좀 더 재밌게 공부할 수 있으니깐~!ㅋㅋ</p>\n<p>먼저 인터넷이라는 개념은 1960년대에 처음 나왔는데,군사목적으로 문서를 빨리 빨리 전송하려고 나온것! 그 당시에는 물리적으로 떨어져있는 컴퓨터와 컴퓨터와의 연결을 뜻하는게 바로 인터넷이었음. 지금과는 완전히 다른 개념쓰~\n우리와 좀 더 친숙한 의미의 인터넷은 1960년대에 나왔져! World Wide Web. 줄여서 WWW. 10년만에 상용화가 될 정도로 빠른 발전이 있었지요~</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8c81dcc0-bc2a-11e9-8397-2b5ddb762b18/memory-28824811920.jpg\" alt=\"memory-2882481_1920.jpg\"></p>\n<p>저의 초등학교 시절 과제는 이 디스켓과 함께 했었는데.. 지금은 사용하지 않는 비운의 디스켓…☆ 여튼.. 그당시만 해도 CD를 굽는다거나 플로피 디스크에 문서를 저장했었는데, 요즘은 다운로드만 하면 끝! 해외에 기술을 수출하려고 해도 배타고 비행기타고 난리난리 했지만 요즘은 인터넷만 연결하면 되지요. 개이득!!</p>\n<blockquote>\n<p>인터넷이 가져온 가장 큰 혁신이 바로 이렇게 공간적인 제약을 없앤 것!</p>\n</blockquote>\n<h2 id=\"초창기-web-service-architecture\"><a href=\"#%EC%B4%88%EC%B0%BD%EA%B8%B0-web-service-architecture\" aria-label=\"초창기 web service architecture permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초창기 Web Service Architecture</h2>\n<p>이걸 짚고 넘어가기 전에, 요즘의 야후와 어린시절의 야후를 비교해보자..!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/77e2f910-bc2b-11e9-8397-2b5ddb762b18/image.png\" alt=\"image.png\">\n<img src=\"https://images.velog.io/post-images/dooreplay/42f18190-bc2b-11e9-877b-2fffbf6a152c/image.png\" alt=\"image.png\"></p>\n<p>2000년대의 Yahoo는 거의 신문인줄… 야후 꾸러기 들어가서 플래시게임 하고 놀았었는데 그 당시엔 별로 촌스럽다고 생각을 안 했지만 지금 보니 ㅋㅋㅋㅋㅋㅋㅋㅋ</p>\n<p>웹의 발달과 함께 닷컴붐 혹은 닷컴버블현상이 일어났음. 이 당시에 너도 나도 IT사업을 하다 보니 망한곳도 많고 ㅠㅠ 여튼 이 과정 속에서 UI가 중요해졌음! html만으론 한계쓰~</p>\n<ul>\n<li>Hyper Text Markup Language\nHTML이 뭐의 줄임말인줄은 알았으나 마크업과 마크다운의 차이를 잘 몰랐다. 근데 마크업은 태그를 통해 표시(Mark up)하는 것. 글만 보면 이게 div인지 p인지 몰라.. 어떻게 랜더링해야 하는지 고민쓰..! 근데 내가 쓰고 있는 이 개츠비 블로그는 마크다운 형식이라 ’## 이것은 큰글씨’ 이런식으로 직관적으로 효과를 줘서 딱 알아볼 수 있음!! 제일 앞에 붙은 hyper는 html이 link 위주의 글이라는 걸 알려준다.(하이퍼링크 소곤소곤…)</li>\n<li>Cascading Stytle Sheet\nhtml과 마찬가지로 css로도 로직을 구현할 수 없음. 얘는 그저 꾸며주기만 할 뿐…!</li>\n</ul>\n<blockquote>\n<p>그래서 우리는 다양한 로직을 구현하기 위해 Javascript가 필요한거다!</p>\n</blockquote>\n<p>네이버 실시간 검색순위를 생각해보자!\n<img src=\"https://images.velog.io/post-images/dooreplay/7a2a37b0-bc30-11e9-8397-2b5ddb762b18/image.png\" alt=\"image.png\"></p>\n<p>실검의 네모박스는 한번 랜더링되면 바뀌지 않지만(정적)\n실검의 키워드는 실시간으로 바뀌고 있다(동적) 크롬 개발자도구 툴을 이용해보면 우리 눈에 보이지 않는 투명 실검영역이 점차 위로 올라가고 있음을 확인할수 있다~</p>\n<p>그렇다면 </p>\n<h2 id=\"왜\"><a href=\"#%EC%99%9C\" aria-label=\"왜 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜</h2>\n<p>다른 언어를 웹사이트에 쓰지 못했을까? 우리가 가진 프로그래밍 언어는 많은데..\n못생겨서? 컴파일이 안되서? 전부 아니다. 웹 브라우저가 C언어 같은 애들을 실행하지 못했기 때문에 걔네가 실행할 수 있는 언어가 필요했던 것!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ff9d45e0-bc30-11e9-8397-2b5ddb762b18/image.png\" alt=\"image.png\"></p>\n<p>자바스크립트는 넷스케이프라는 회사의 브렌던 아이크(Brendan Eich)씨가 만들었는데, 넷스케이프는 그당시 최초로 상용화된 웹 브라우저였고 인기도 퍽발! 그럼 왜 자바 스크립트일까? java랑 대체 무슨 관련이 있길래… 사실 직접적인 관련은 없다 ㅎ</p>\n<p>원래 java는 Sun Microsystems라는 회사가 개발했는데 망… 그래서 Oracle이 인수했음!ㅠㅠ java랑 비슷한데 웹적으로, 동적으로 구현할 수 있는 언어를 만들자 그게 javascript인 것! java인데 script 기능이 되는 것이죠~</p>\n<p>이후, java는 applet이라는걸 따로 만듬. 약간 flash 같은거!? 근데 얘는 망한듯.. 약간 무겁다네요</p>\n<h2 id=\"2세대-web--동적인-요소가-가미됨\"><a href=\"#2%EC%84%B8%EB%8C%80-web--%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%9A%94%EC%86%8C%EA%B0%80-%EA%B0%80%EB%AF%B8%EB%90%A8\" aria-label=\"2세대 web  동적인 요소가 가미됨 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2세대 Web : 동적인 요소가 가미됨</h2>\n<p>html로 정적인 부분을 구현하고 script 태그에 있는 부분을 랜더링해서 동적이게 만든 것. 하나의 웹서버가 브라우저에 html,js,xml 다 전송쓰~ </p>\n<h2 id=\"요즘은-spa-무조건-동적쓰-주객전도쓰\"><a href=\"#%EC%9A%94%EC%A6%98%EC%9D%80-spa-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EB%8F%99%EC%A0%81%EC%93%B0-%EC%A3%BC%EA%B0%9D%EC%A0%84%EB%8F%84%EC%93%B0\" aria-label=\"요즘은 spa 무조건 동적쓰 주객전도쓰 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요즘은 SPA 무조건 동적쓰! 주객전도쓰~</h2>\n<p>주객전도쓰~ 이제는 html이 아닌 javascript 위주로 돌아간다네~~\n=> django 같이 한 서버에서 다 처리하는 애들은 api에 적합하지 않음. 너무 헤비해! 그래서 우리는 Single Page Application을 쓰는데, React가 이 처리를 도와줌.</p>\n<ul>\n<li>Single Page Application\n하나의 페이지로 전체 애플리케이션을 구현할수 있음. html마저도 js를 통해서 생성하는것..! js가 그때그때 필요한 태그들을 생성해버린다…! 예를 들어, file 하나에 html 페이지에서 body태그는 div 하나정도만 잡고, link라는 태그에 js 파일 링크 걸고, 그 본체인 js 에서 다 구현쓰~ 이열! (사실 SPA에 대해선 아직 자세히 알지 못하므로 시간날때 다음번 포스팅에서 자세히 다뤄볼것이다)</li>\n</ul>\n<p>이 과정에서 브라우저는 서버랑 데이터만 주고받으면 되는것이고, 개발자 세계를 생각해보면..</p>\n<h4 id=\"uiux를-담당하는-front와-서버-데이터를-담당하는-back의-구분이-명확해짐\"><a href=\"#uiux%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-front%EC%99%80-%EC%84%9C%EB%B2%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-back%EC%9D%98-%EA%B5%AC%EB%B6%84%EC%9D%B4-%EB%AA%85%ED%99%95%ED%95%B4%EC%A7%90\" aria-label=\"uiux를 담당하는 front와 서버 데이터를 담당하는 back의 구분이 명확해짐 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ui/ux를 담당하는 front와 서버/ 데이터를 담당하는 back의 구분이 명확해짐.</h4>\n<h2 id=\"빅데이터가-중요해진-시대\"><a href=\"#%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%B4%EC%A7%84-%EC%8B%9C%EB%8C%80\" aria-label=\"빅데이터가 중요해진 시대 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빅데이터가 중요해진 시대..</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/31eff270-bc38-11e9-a402-4726289e189d/image.png\" alt=\"image.png\"></p>\n<p>트위터를 생각해보자. 기능적으론 꽤 구현하기 쉬운 편이다. 그치만 동시에 전세계에서 몇 백만명이 써도 나 혼자 쓰고있는 듯한 속도감이 아주 좋다… 그렇게 만드는게 참 어려운데 대단한 기술이라는 것만 알겠다..! 그래서 페북은 엔지니어가 만명정도 된다고 우와…</p>\n<p>데이터 양이 너무 많아지면 데이터를 여러 서버에 분산시켜서 저장한 담에 분석할 때 각자 독립적으로 하고, 분석결과를 하나로 조합해서 데이터베이스에 넣고.. 여튼 빅데이터가 중요해짐!</p>\n<p>갑분…</p>\n<h2 id=\"개발팀-구성\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%8C%80-%EA%B5%AC%EC%84%B1\" aria-label=\"개발팀 구성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발팀 구성</h2>\n<p>늘 궁금했던 건데 이번 은우님 강연을 통해서 개발팀에 역할이 어떻게 나누어져 있는지 알게되서 넘나 뿌듯뿌듯</p>\n<ul>\n<li>front\n-Product Manager: 어떤 시스템을 만들지 기획. 뭘뭘 먼저 개발할지 순서를 결정하기도 하고, user feedback을 받기도 하고, business와 개발팀의 중간 역할을 함\n-designer : ui, ux 디자인\n-frontend developer: 말그대로 앞단에서 일하는 개발자. 우리나라는 퍼블리셔라고 html, css 해주는사람 따로 있음</li>\n<li>back\n-빽의 앞: api 담당 -> 실검순위가 나오는 테이블은 프론트, 실제 실검 데이터는 빽이 담당. 로그인 페이지 꾸미는게 프론트라면 빽은 프론트가 보내준 아이디와 비번을 가지고 맞으면 맞다 아니면 아니다 반응 해주는 알고리즘을 만든다.\n-빽의 뒤 :데이터 수집, 분석, 관리 등</li>\n</ul>\n<p>-devops : 빽 개발자가 system infa 관리도 함. aws같은 클라우드 서비스가 발전하면서 하드웨어를 몰라도 시스템 인프라 관리 가능쓰\n-sysops : 서버관리쓰. 하드웨어적\n-data scientist : 머신러닝, ai 등 데이터 분석 알고리즘과 데이터 분석 모델링 구현\n-data engineer : ds 도와서 데이터 모델링 구현해줌\n-tester : QA- 직접 메뉴얼 테스팅쓰. sw enginnerr in test/ test automation 자동테스트 시스템 전문 구현</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>위코드</li>\n<li><a href=\"https://poiemaweb.com/js-spa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://poiemaweb.com/js-spa</a></li>\n</ul>","fields":{"slug":"/posts/wecode2_7_TIL_js/","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/html/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-11T22:40:32.169Z","description":"위코드 14일차 위코드 송은우님의 강연을 바탕으로 웹의 역사에 대해 정리해보았다!","tags":["wecode","codingbootcamp","html","위코드"],"title":"wecode 2주차_7일 TIL_웹의 역사와 이것저것쓰"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode2_7_TIL_js/"}}}