{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/mobx_todo","result":{"data":{"markdownRemark":{"id":"90017eda-d6b3-5653-ad66-2b165a580dac","html":"<p>오랜만에 다시 정리해본다. 타입스크립트 스타트!</p>\n<h2 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p><code class=\"language-text\">npm install -g typescript ts-node</code> 명령어 고고</p>\n<p><code class=\"language-text\">tsc --help</code> 명령어를 입력해보면 TS가 깔렸는지 확인 가능쓰\n난 자꾸 에러가 떠서 뭔가 했더니 이미 설치되었던것ㅋㅋ</p>\n<h2 id=\"프로젝트-폴더-생성\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 폴더 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 폴더 생성</h2>\n<p><code class=\"language-text\">mkdir ts-todo</code>\n일단 나는 ts-todo라는 이름의 디렉토리를 생성했음\n그 폴더로 위치를 이동한 후에 package.json을 생성해보자.\n<code class=\"language-text\">npm init -y</code> 명령어를 입력하면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"name\": \"ts-todo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}</code></pre></div>\n<p>짠 이런 형태의 기본 package.json 세팅 완료.\n이제 axios 를 깔아보자.\n<code class=\"language-text\">npm install axios</code>\n프로젝트 폴더에 들어가보면 node.modules 디렉토리에 axios 폴더가 생성된 것이 보임!!\n이제 <code class=\"language-text\">index.ts</code> 파일을 만들어줄거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//index.ts\nimport axios from 'axios';\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\n\naxios.get(url).then(response => {\n  console.log(response.data);\n});</code></pre></div>\n<p>ts파일은 노드 환경에서 컴파일 되지 않기 때문에 ts 전용 명령어를 써줘야 한다.</p>\n<p><code class=\"language-text\">tsc index.ts</code> 명령어 입력 고고</p>\n<p>그럼 index.js 파일이 생기고 그제서야 node 명령어를 쓸 수 있음</p>\n<p><code class=\"language-text\">node index.js</code> 입력해보면 콘솔에\n<code class=\"language-text\">{ userId: 1, id: 1, title: 'delectus aut autem', completed: false }</code> 이렇게 axios로 받아온 값이 뜸!! 오예</p>\n<p>음.. <code class=\"language-text\">ts-node index.ts</code> 쳐도 똑같이 터미널에 나온다는데 왜 안떠??\nmodule not found 에러가 뜬다. 구글링 고고</p>\n<p>찾아보니 typescript를 global로 깔지 말고 local로 깔라고 해서 다시 깔기 고고\n<code class=\"language-text\">npm install i typescript</code>\n하고 다시 <code class=\"language-text\">ts-node index.ts</code> 쳐봤더니 이제 터미널에 콘솔이 제대로 뜬다!</p>\n<p>콘솔에 들어오는 값을 깔끔하게 보이기 위해 template literal을 사용해줄거다.\n거기에 TS의 interface까지 적용해볼거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import axios from 'axios';\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\n\ninterface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\naxios.get(url).then(response => {\n  const todo = response.data as Todo;\n\n  const ID = todo.ID;\n  const title = todo.Title;\n  const finished = todo.finished;\n\n  console.log(`\n    The Todo with ID : ${ID};\n    Has a title of : ${title}\n    Is it finished? ${finished}\n  `);\n});</code></pre></div>\n<p>여기서 interface는 TS에서객체 구조를 정의할때 사용된다.\n이대로 타이핑을 해보면 우리가 axios 안에 선언한 변수에 빨간 줄이 그어진다!\ninterface에서 정의해준 data의 type이 일치하지 않기 때문!!</p>\n<p>에러를 바탕으로 수정을 해보면 제대로 콘솔이 찍힌다. 라잌 디스</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  The Todo with ID : 1;\n  Has a title of : delectus aut autem\n  Is it finished? false</code></pre></div>\n<p>한가지 더 실험을 해보기 위해 logTodo를 만들었음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import axios from 'axios';\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\n\n// interface는 TS에서객체 구조를 정의할때 사용된다.\ninterface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\naxios.get(url).then(response => {\n  const todo = response.data as Todo;\n\n  const id = todo.id;\n  const title = todo.title;\n  const completed = todo.completed;\n\n  logTodo(id, completed, title);\n});\n\nconst logTodo = (id, title, completed) => {\n  console.log(`\n  The Todo with ID : ${id};\n  Has a title of : ${title}\n  Is it finished? ${completed}\n`);\n};</code></pre></div>\n<p>다시 ts-node를 이용해 터미널에 찍힌 값을 확인해보면..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  The Todo with ID : 1;\n  Has a title of : false\n  Is it finished? delectus aut autem</code></pre></div>\n<p>왜 이런 결과가 나왔냐! logTodo의 argument에 type을 정의해주지 않았기 때문에\n아무 값이나 다 받아도 다 되는 상태였..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const logTodo = (id: number, title: string, completed: boolean) => {\n  console.log(`\n  The Todo with ID : ${id};\n  Has a title of : ${title}\n  Is it finished? ${completed}\n`);</code></pre></div>\n<p>인자로 들어가는 id, title, completed에 각각 type을 정의해줌\n또 ts-node를 이용해 터미널에 찍힌 값을 확인해보면 에러가 뜸\n왜냐.. boolean으로 받아야할 값에 string이 나왔기 때문!</p>\n<p>axios 내부에서 자리를 조금 바꿔주자\n<code class=\"language-text\">logTodo(id, title, completed);</code> 요렇게 하면 에러 싹 사라짐~~ 굿굿쓰</p>\n<h2 id=\"type-annotations-vs-inference\" style=\"position:relative;\"><a href=\"#type-annotations-vs-inference\" aria-label=\"type annotations vs inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type annotations vs inference</h2>\n<p>Type annotations란 우리말로 타입 주석을 말한다.\n우리가 TS에게 전달해야 할 값의 타입\nType ineference는 우리말로 타입 추론!\nTS가 특정 변수가 어떠한 타입을 지닌지 추론하려는 것을 말함</p>\n<p>Type annotations for functions\n=></p>","fields":{"slug":"/posts/mobx_todo","tagSlugs":["/tag/web/","/tag/frontend/","/tag/react/","/tag/typescript/"]},"frontmatter":{"date":"2020-03-14T21:46:49.169Z","description":"typescript 도전기","tags":["web","frontend","react","typescript"],"title":"typescript 공부하기(작성중)"}}},"pageContext":{"slug":"/posts/mobx_todo"}},"staticQueryHashes":["251939775","3613830147","401334301"]}