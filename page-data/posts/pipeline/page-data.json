{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pipeline","webpackCompilationHash":"eae2fbfc6f779386949a","result":{"data":{"markdownRemark":{"id":"bee65685-97dc-5c75-bca3-c63f9a1c01fc","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/b4e4bda0-2498-11ea-bf90-6f14d76347bb/image.png\" alt=\"image.png\"></p>\n<h2 id=\"pipeline\"><a href=\"#pipeline\" aria-label=\"pipeline permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipeline</h2>\n<p>아마 함수형 프로그래밍에서 나온 개념일듯..?!\n인자로 받은 함수들을 순차적으로 실행시키는 함수를 말한다.</p>\n<p>이렇게만 말하면 뭔지 이해가 잘 안가니 예시를 들어보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getName = (person) =&gt; person.name\nconsole.log(getName({name: &#39;whatispipeline&#39;}))\n\nconst uppercase = string =&gt; string.toUpperCase();\nconsole.log(uppercase(&#39;whatispipeline&#39;))</code></pre></div>\n<p>위와 같이 getName이라는 함수와 uppercase라는 함수가 있다.\n이를 동시에 실행시키려면 uppercase와 getName함수를 같이 실행시키는 방법이 있다.</p>\n<p><code class=\"language-text\">uppercase(getName({name:&#39;whatispipeline&#39;}))</code> 요렇게!</p>\n<p>근데 여기에 함수를 두 개 더 추가하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const reverse = str =&gt; str.split(&#39;&#39;).reverse().join(&#39;&#39;)\nconsole.log(reverse(&#39;whatispipeline&#39;))\n\nconst get6Char = string =&gt; string.substring(0,6)\nconsole.log(get6Char(&#39;whatispipeline&#39;))</code></pre></div>\n<p>이 함수들을 동시에 실행시켜 본다면..?\n<code class=\"language-text\">reverse(get6Char(uppercase(getName({ name: &#39;whatispipeline&#39; }))))</code></p>\n<p>식이 너무 지저분해 보인다… 코드의 가독성을 위해 pipeline을 적용해보자.\npipe함수는 전역에 저장되어 있는 메소드가 아니기 때문에 선언을 먼저 해줘야 한다.</p>\n<h2 id=\"pipe함수-선언\"><a href=\"#pipe%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"pipe함수 선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipe함수 선언</h2>\n<p><code class=\"language-text\">const pipe = (...funcs) =&gt; x =&gt; funcs.reduce((v,f)=&gt; f(v),x)</code></p>\n<p>reduce에 인자로 두 개의 값이 들어가는데,\nv는 currentValue이고, f는 currentFunction이다.\n정의된 함수에 현재의 값을 넣고, 마지막 인자로는 원래 함수들에 들어갈 인자를 적어주었다.</p>\n<p>이제 pipe에 함수들을 넣어주기만 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pipe(\ngetName,\nuppercase,\nget6Char, reverse)({name:&#39;whatispipeline&#39;})</code></pre></div>\n<p>아까 위에서 썼던 코드보단 뭔가 더 정돈된 느낌이다. 일단 보기 깔끔하다!</p>\n<p>pipe말고도 compose라는 것도 있는데, reduceRight메소드를 이용한다.\nreduce는 들어봤어도 reduceRight은 생전 처음 보는데 와.. 앞으로 공부할 것들이 정말 많구나 하는걸 오늘 또 새삼 느낀다.<br />\nreduceRight이 궁금한 사람들은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">MDN문서</a>를 참고하시길!!</p>\n<h2 id=\"compose함수-선언\"><a href=\"#compose%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"compose함수 선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compose함수 선언</h2>\n<p><code class=\"language-text\">const compose = (...fns) =&gt; x =&gt; fns.reduceRight((v,f)=&gt;f(v),x)</code></p>\n<p>pipe를 선언해줬던 것과 동일하게 compose 함수를 선언해준다.\n여기서 주의할점은 reduceRight은 오른쪽에서 왼쪽으로 reduce를 실행시키기 때문에\n인자들의 순서를 pipe와는 반대로 써주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">compose(\n  reverse,\n  get6Char,\n  uppercase, getName)({name:&#39;whatispipeline&#39;})</code></pre></div>\n<p>콘솔을 찍어보면 아까와 동일한 결과가 나온다.<br />\npipe든 compose든 아직은 어떤 곳에다가 적용을 해야할지 잘 모르겠으나.. 일단 정리해놓으면 언젠간 쓰겠지?<br /></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/news/pipe-and-compose-in-javascript-5b04004ac937/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/pipe-and-compose-in-javascript-5b04004ac937/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight</a></li>\n</ul>","fields":{"slug":"/posts/pipeline","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/"]},"frontmatter":{"date":"2019-12-22T18:29:39.169Z","description":"허선생님의 노드 수업을 들으면서 처음 들어봤던 개념, pipeline. 자바스크립트 세상은 아직도 내가 모르는 게 엄청 많구나~~ 열심히 공부하자 둘둘","tags":["web","javascript","frontend"],"title":"reduce를 이용한 유용한 함수, 자바스크립트 pipeline에 대해 알아보자!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/pipeline"}}}