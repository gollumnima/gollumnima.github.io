{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodeJS_3","webpackCompilationHash":"904934329d42a9e48021","result":{"data":{"markdownRemark":{"id":"2de90bdf-9719-58c0-86c9-e0ca38587970","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/3b541bc0-1c0a-11ea-b7f5-31ede584ba37/image.png\" alt=\"image.png\"></p>\n<h2 id=\"error-발생시키기\"><a href=\"#error-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"error 발생시키기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>error 발생시키기</h2>\n<p>status에 따라 에러가 발생하도록 내가 error number와 메시지를 지정할 수 있다.\n예를 들어 지정하지 않은 앤드포인트에 접속했을 때 404가 발생하도록 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.use((req, res, next) =&gt; {\n   res.status(404).json({\n     message: &#39;존재하지 않는 url입니다&#39;\n   });\n});</code></pre></div>\n<p>response의 status가 404 일때 다음과 같은 메시지가 뜨도록 설정했다.<br />\n다음과 같은 방식으로도 해볼 수도 있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.use((req, res, next) =&gt; {\n  const err = new Error(&#39;존재하지 않는 url 입니다&#39;);\n  err.status = 404;\n  next(err);\n});</code></pre></div>\n<p>우리 허선생님께서 최대한 효율적인 방법을 가르쳐주려고 노력을 많이 해주신다 감동쓰 ㅠㅠ</p>\n<h2 id=\"guard\"><a href=\"#guard\" aria-label=\"guard permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>guard</h2>\n<p>로그인과 같이 인증을 통해 접근이 가능한 페이지를 만들어줄거다.\ncookie-parser를 이용해서 일단 쿠키 데이터를 만들어줄거다!\n설치는 간단쓰! <code class=\"language-text\">npm i cookie-parser</code> 로 설치하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const express = require(&#39;express&#39;);\nconst app = express();\nconst cookieParser = require(&#39;cookie-parser&#39;);\nconst routes = require(&#39;./routes&#39;);</code></pre></div>\n<p>cookieParser라는 변수를 하나 만들어서 cookie-parser메소드를 불러오고,\n그 다음엔 <code class=\"language-text\">app.use(cookieParser())</code> app.use 메소드 내에서 저 함수를 실행시켜야 한다.</p>\n<h2 id=\"중첩-라우트\"><a href=\"#%EC%A4%91%EC%B2%A9-%EB%9D%BC%EC%9A%B0%ED%8A%B8\" aria-label=\"중첩 라우트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 라우트</h2>\n<p>저 위의 코드판에서 routes 변수에 담은 저 값은 뭘까?<br />\n같은 경로에 routes.js 파일이 있거나 아니면 같은 경로에 존재하는 routes 디렉토리 내의 index.js를 뜻한다.\n나는 후자에 속하는데, 그렇담 routes 디렉토리의 index.js를 까보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// index.js\nconst express = require(&#39;express&#39;);\n\n// ▶︎\nconst router = express.Router();\nconst user = require(&#39;./user&#39;);\n\n// ★\nrouter.get(&#39;/login&#39;, (req, res, next) =&gt; {\n  res\n    .cookie(&#39;usertype&#39;, 1)\n    .status(200)\n    .json({ message: &#39;로그인 테[스트 했습니다&#39; });\n});\n\nrouter.use((req, res, next) =&gt; {\n  console.log(&#39;매 요청마다 작도ㅓㅇ&#39;);\n  next();\n});\nmodule.exports = router;</code></pre></div>\n<p>★ 별쪽 코드를 보면.. router가 get 메소드를 받고있다.<br/>\n원래 이건 app의 입장에서만 받을 수 있는건데 ▶︎ 부분을 보면\nrouter가 express에서 Router로서 값이 담겼다.\nexpress모듈을 불러와서 router라는 변수가 마치 app 인것처럼 행동할 수 있는 것..! 맞나?</p>\n<p>그리하여… ★ 코드를 다시 한번 확인해보자면…!<br />\n/login url로 접속했을때 res의 쿠키가 usertype:1이고,\n마침 그 상태가 200이면 message: 로그인 테스트했습니다. 가 뜨게 하는건데</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ce685860-1bef-11ea-aee9-abd517690d87/image.png\" alt=\"image.png\"></p>\n<p>짠 이렇게 뜬다!\n개발자도구를 열어 Application을 확인해보면 쿠키도 잘 들어와 있다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6aa476d0-1f1c-11ea-8fa5-b9dd989fc091/image.png\" alt=\"image.png\"></p>\n<p>요렇게!</p>\n<p>나의 콘솔창도 한번 보자</p>\n<p>정리해보자면, 지금 구조가 login 페이지에 접속하면 쿠키가 생성이 되는 거고\ncheckUser 함수가 적용된 코드에는 권한이 필요한 것이다.\n쿠키를 지우고 로그인을 거치지 않은 채, 다른 페이지를 접속하면 권한이 없다고 나온다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/13c1f430-1c9e-11ea-a292-c164e0afb82f/image.png\" alt=\"image.png\"></p>\n<p>요렇게! 짱신기~</p>\n<p>더 나아가서.. checkUser함수를 controllers 디렉토리의 auth.js에 넣어주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.use((req, res, next) =&gt; {\n  console.log(req.cookies);\n  if (req.cookies.usertype === 1) return next();\n  const err = new Error(&#39;권한이 없네용&#39;);\n  err.status = 401;\n  next(err);\n  // node.js에선 else를 안 쓰고 바로 리턴해버림. 중괄호를 최대한 줄이려는 관습이 있음\n});\n\nlogin 한다음에 user 들어가면 유저목록이 뜨는데\n로그인 하기 전에 user 먼저 들어가면 권한이 없다고 에러 발생</code></pre></div>\n<p>cookie의 usertype이 1이 아닐 경우 에러를 던지는 코드다.\nindex.js에서 로그인할때의 쿠키를 지정하는 코드가 있는데 그걸 살짝 바꿔줄거다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">router.get(&#39;/login&#39;, (req, res, next) =&gt; {\n  res\n    .cookie(&#39;macaron&#39;, 2)\n    .status(200)\n    .json({ message: &#39;로그인 테[스트 했습니다&#39; });\n});</code></pre></div>\n<p>res에서 쿠키가 들어오는 곳을 macaron으로 바꿔주었다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/14f26fd0-1f0d-11ea-bf45-79721d598144/image.png\" alt=\"image.png\"></p>\n<p>그러고 나서 user페이지에 들어가보자.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7c8d1c80-1f0d-11ea-80d8-65652475e66e/image.png\" alt=\"image.png\"></p>\n<p>쿠키가 usertype, 1이 아니기 때문에 접근 불가쓰~</p>\n<p>여기까지 중첩라우터와 guard를 살펴봤고..\n인제 진짜 신기한 걸 할꺼다!</p>\n<h2 id=\"file-system-module\"><a href=\"#file-system-module\" aria-label=\"file system module permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File System Module</h2>\n<p>노드는 신기하게도 파일의 읽고 쓰기가 가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// services/json.js\nconst fs = require(&#39;fs&#39;);\nconst path = require(&#39;path&#39;);\n\n// 옛날방식의 비동기를 promise형으로 바꾼 것\nconst readJSON = (name) =&gt; new Promise((resolve, reject) =&gt; {\n  // dirname은 절대경로 찍는 명령어\n  fs.readFile(path.join(__dirname, `../data/${name}.json`), (err, data) =&gt; {\n    if (err) return reject(err);\n    try {\n      const result = JSON.parse(data);\n      resolve(result);\n    } catch (e) {\n      reject(e);\n    }\n    resolve();\n  });\n});\n\nconst writeJSON = (name, data) =&gt; new Promise((resolve, reject) =&gt; {\n  try {\n    const json = JSON.stringify(data);\n    fs.writeFile(path.join(__dirname, `../data/${name}.json`), json, (err) =&gt; {\n      // 파일저장이 잘 됐는지 안됐는지 확인하는거니까 에러밖에 안 넣어줘도 됨\n      if (err) return reject(err);\n      resolve(true); // 생략가능\n    });\n  } catch (e) {\n    reject(e);\n  }\n  // 첫번째가 경로, 두번째가 데이터, 세번째가 콜백\n});\n\nmodule.exports = {\n  readJSON, writeJSON // 똑같은 이름으로 내보내서 키랑 밸류 생략쓰\n};</code></pre></div>\n<p>위와 같이 파일 읽기 및 쓰기 코드를 써준다.\n그 다음에 routes 디렉토리 안의 user.js 에 아래와 같이 써준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// routes/user.js\nconst express = require(&#39;express&#39;);\nconst validator = require(&#39;express-validator&#39;);\nconst {validationMiddleware} = require(&#39;../controllers/validator&#39;)\n\nconst router = express.Router();\nconst { checkUser } = require(&#39;../controllers/auth&#39;);\n// const checkUser = require(&#39;../controllers/auth&#39;).checkUser 같은거임\nconst json = require(&#39;../services/json&#39;);\n\nrouter.use(checkUser);\n\nrouter.get(&#39;/&#39;, checkUser, (req, res, next) =&gt; {\n  json.writeJSON(&#39;test&#39;, { test: &#39;성공쓰&#39; })\n    .then((rs) =&gt; {\n      console.log(rs);\n    }).catch((er) =&gt; {\n      console.log(er);\n    });\n  const page = req.query;\n  console.log(req.query);\n  res.status(200).json({ name: &#39;유저 목록&#39; });\n});\n\n// user에만 권한이 있고, user/id 에는 영향 안줌. 독립적으로 작동함\nrouter.get(&#39;/:id&#39;, validationMiddleware(\n  validator.param(&#39;id&#39;).toInt().isInt(),\n),(req, res, next) =&gt; {\n  const id = req.params.id;\n  console.log(id);\n  res.status(200).json({\n    name: &#39;허선생님&#39;,\n    id\n  }); // id: id 객체 값과 프로퍼티가 동일하면 지워짐.\n});\n\nmodule.exports = router;</code></pre></div>\n<p>그 다음에 서버를 켜고 routes에 등록되어 있는 user로 접속을 해보자!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0586d2b0-1f09-11ea-9ebb-a9e9116b5b0c/image.png\" alt=\"image.png\"></p>\n<p>원래 data 디렉토리 안에는 아무 것도 없었으나…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2f4773c0-1f09-11ea-b3f4-e73280e2e0cc/image.png\" alt=\"image.png\"></p>\n<p>서버를 켜고 접속하는 순간 test.json 파일이 data 폴더 내부에 생성된다.\n그리고 메시지는 user.js에서 내가 설정한대로 성공쓰라고 뙇!!</p>\n<p>없던 파일을 이렇게 만들어내다니.. 넘나 신기한 노드의 세상~<br />\n아직도 이해못하는 부분들이 많지만.. Promise랑 call back함수 열심히 공부해야지 ㅠ</p>","fields":{"slug":"/posts/nodeJS_3","tagSlugs":["/tag/web/","/tag/node/","/tag/backend/","/tag/javascript/"]},"frontmatter":{"date":"2019-12-12T16:37:29.169Z","description":"오늘도 허선생님의 강의 듣고 정리하기 시간! 내 이해력에 비해 진도가 빠르지만.. 이렇게 블로깅으로 기록을 해놓으면 언젠간 이해하지 않을까 싶어서 오늘도 블로그 달린다!!! ","tags":["web","node","backend","javascript"],"title":"허선생님과 Node.js 공부 - error 발생시키기, 중첩라우팅, fs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nodeJS_3"}}}