{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode2_3_TIL_js/","webpackCompilationHash":"ae87ee1a9b4c8b246693","result":{"data":{"markdownRemark":{"id":"245fb9b7-560a-5410-b658-c77865bc340d","html":"<p>지난번에 캐릭터를 자르는데까지 정말 오랜 시간이 걸렸다. 이제 key event를 넣어서 좌우로 이동할 수 있도록 식을 만드는 시간쓰~</p>\n<h2 id=\"key-code-number-알아내기\"><a href=\"#key-code-number-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"key code number 알아내기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key code Number 알아내기</h2>\n<p>캐릭터를 좌우로 이동하려면 좌키, 우키 각각에 해당하는 숫자를 알아내서 각각의 값에 이벤트를 걸어줘야 한다.\n<a href=\"https://keycode.info\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://keycode.info</a> 키 값은 여기 들어가면 원하는 키를 눌러보면 쉽게 알아낼 수 있다!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/59da6c40-b8bc-11e9-b8f8-7d296a837f8b/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/752cbf20-b8bc-11e9-b06a-a38d4a6f85a7/image.png\" alt=\"image.png\"></p>\n<p>이로써 좌키의 keycode는 37, 우키의 keycode는 39라는걸 알게되었다리~\n이제 addEventlistener를 작성해보자.</p>\n<h2 id=\"key-event의-종류\"><a href=\"#key-event%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"key event의 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key event의 종류</h2>\n<ul>\n<li>keydown : 사용자가 키보드를 누르는 순간 발생</li>\n<li>keyup : 사용자가 키보드에서 손을 떼는 순간 발생</li>\n<li>keypress : 사용자가 키보드를 누르고 있을 때 발생</li>\n</ul>\n<p>keydown 이벤트를 적용하면 우리가 좌키, 우키를 누를 때마다 이벤트가 발생하게 된다.\nkeypress 이벤트랑은 무슨 차이가 있을지 한번 직접 써보면서 비교를 해보려고 했는데 안 먹힌다 ㅎ 이럴때 쓰라고 있는 함수가 아닌가보다~~~</p>\n<h2 id=\"적용\"><a href=\"#%EC%A0%81%EC%9A%A9\" aria-label=\"적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용</h2>\n<ul>\n<li>나의 첫번째 시도</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function left() {\n    let hero = document.getElementById(&#39;hero&#39;)\n    hero.style.left= parseInt(hero.style.left-1)+&#39;px&#39;\n}\n\nfunction right() {\n    let hero = document.getElementById(&#39;hero&#39;)\n    hero.style.right= parseInt(hero.style.left+1)+&#39;px&#39;\n}\n\nfunction moving(event) {\n    if(event.keyCode === 37) {\n        left()\n    }\n    if (event.keyCode === 39) {\n        right()\n    }\n}\n\nwindow.addEventListener(&#39;keydown&#39;,function(event) {\n    moving(event)\n})</code></pre></div>\n<p>이렇게 하면 왼쪽으로 너무 확 간다.. 오른쪽으론 가지도 않는다.\n아무래도  function left와 right가 잘못 된 것 같아서 다시 한번 작성해보았다</p>\n<ul>\n<li>나의 두번째 시도</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var hero_position = 400\n\nfunction left() {\n    let hero = document.getElementById(&#39;hero&#39;)\n    hero.style.backgroundPositionX = 70+&#39;px&#39;\n    hero_position -= 10\n    hero.style.left = hero_position + &#39;px&#39;\n    //hero의 포지션이 0일때 멈추게 하는 법\n    if(hero_position &lt;= 0) {\n        hero_position = 0 \n    }\n}\n\nfunction right() {\n    let hero = document.getElementById(&#39;hero&#39;)\n    hero.style.backgroundPositionX = 35+&#39;px&#39;\n    hero_position += 10\n    hero.style.left = hero_position + &#39;px&#39;\n    //hero의 포지션이 764일때 멈추게 하는 법\n    if(hero_position &gt;= 764) {\n        hero_position = 764\n    }\n}</code></pre></div>\n<p>처음에 backgroundPositionX를 CSS에 나와있는 대로 background-position-x 라고 썼다가 오류가 났다. 찾아보니 Camel case로 써야 하는것 같아서 바꿔보니 캐릭터 도리도리는 성공!</p>\n<p>position도 생각처럼 쉬운 문제는 아니였는데…\n처음엔 아예 left에다가 직접 숫자를 더하고 뺐다가 아닌것 같아서 <code class=\"language-text\">hero_position</code>이라는 변수를 하나 만들어서 적용했더니 성공!\n이동하는걸 성공하고 나니 경계선에 도달했을 때 더이상 못 움직이게 하는 로직은 쉬웠다. 그냥 특정한 숫자에 도달했을 때 고정된 값을 주면 되는거였다!!!!</p>\n<p>하지만 진정한 고통은 class를 공부하면서 왔는데… 다음타자는 클래스인가 두둥!!!!</p>\n<h3 id=\"to-be-continued\"><a href=\"#to-be-continued\" aria-label=\"to be continued permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To be continued…</h3>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<h4 id=\"key-eventbr\"><a href=\"#key-eventbr\" aria-label=\"key eventbr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key event<br></h4>\n<ul>\n<li><a href=\"https://keycode.info\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://keycode.info</a></li>\n<li><a href=\"https://www.w3schools.com/jsref/event_onkeypress.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.w3schools.com/jsref/event_onkeypress.asp</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8ZPlNOzLrdw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=8ZPlNOzLrdw</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=vbnjxXCq5HQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=vbnjxXCq5HQ</a></li>\n</ul>","fields":{"slug":"/posts/wecode2_3_TIL_js/","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/javascript/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-07T22:40:32.169Z","description":"위코드 10일차 js. 자바스크립트로 게임만들기를 시작하기 중 키보드 이벤트를 넣어보았다!","tags":["wecode","codingbootcamp","javascript","위코드"],"title":"wecode 2주차_3일 TIL_게임에서 keyevent로 캐릭터 이동하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode2_3_TIL_js/"}}}