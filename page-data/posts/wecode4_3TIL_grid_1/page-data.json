{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode4_3TIL_grid_1","webpackCompilationHash":"7f3250257c4abb86e1c7","result":{"data":{"markdownRemark":{"id":"64ab45d3-fcea-5672-9c02-7736466c43bd","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/ce448e00-c6cf-11e9-90c9-a5e30005de04/image.png\" alt=\"image.png\"></p>\n<p>그리드 하면 생각하는게 와플의 정직한 직선들이라 사진에 넣어보았다 ㅋㅋㅋ\n이전까지는 flex만 써봤는데(사실 아직 flex를 마스터한것도 아니다.. 다음번에 정리해놔야지)\nflex보다 좀 더 유용할 것 같은 Grid에 대해 정리해보려고 한다!</p>\n<h2 id=\"왜-grid를-쓸까\"><a href=\"#%EC%99%9C-grid%EB%A5%BC-%EC%93%B8%EA%B9%8C\" aria-label=\"왜 grid를 쓸까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 Grid를 쓸까?</h2>\n<ul>\n<li>2차원 레이아웃을 짜기 쉽다</li>\n<li>부트스트랩보다 심플한 마크업 구조!</li>\n</ul>\n<h2 id=\"grid\"><a href=\"#grid\" aria-label=\"grid permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grid</h2>\n<p>Grid, 말 그대로 격자선을 말한다.\n크게 전체를 감싸는 container와 그 안의 요소들로 나눌 수 있는데\n더 크게 나눠보자면 row와 column으로도 나누어지겠지! flex처럼</p>\n<p>먼저 html 구조를 짜보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;div class=&quot;container&quot;&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;/div&gt;\n    &lt;/div&gt;</code></pre></div>\n<p>scss 기능을 약간 활용한 css 구조도 함께 볼게요~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$yellow: #ffdd59;\n$blue: #3c40c6;\n.container {\n  display: grid;\n  div {\n    width: 100px;\n    height: 80px;\n  }\n  div:nth-child(even) {\n    background: $yellow;\n  }\n  div:nth-child(odd) {\n    background: $blue;\n  }\n}</code></pre></div>\n<p>이렇게 하면 하단의 구조가 나올거에요. (듀얼모니터 쓰는 중이라 스크롤도 애매하게 캡쳐됐지만 무시하세여 ㅋㅋ)</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f80e8870-c6d0-11e9-90c9-a5e30005de04/image.png\" alt=\"image.png\">\n먼저 container에는 <code class=\"language-text\">display: grid;</code>라는 속성을 주었고요.\n화면에 상자를 보이게 하려고 자식 div들에게 크기를 따로 주었지만 이렇게 하지 않아도 됩니다.\n부모div인 container에 rows와 columns 크기를 지정하면 자식들이 따라갑니다.</p>\n<h2 id=\"grid-template-columnnsrows\"><a href=\"#grid-template-columnnsrows\" aria-label=\"grid template columnnsrows permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>grid-template-columnns/rows</h2>\n<p>자식 div에 준 width와 height을 지우고, container에 두 줄을 추가해볼게요</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-template-rows: 100px 100px 100px;\ngrid-template-columns: 50px 50px 50px;</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c038fc70-c6d3-11e9-8b9d-cb65853403a4/image.png\" alt=\"image.png\"></p>\n<p>이렇게 보니 감이 안 오죠? rows에서 50px 하나를 제거해볼게요</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-template-rows: 100px 100px;\ngrid-template-columns: 50px 50px 50px;</code></pre></div>\n<p>이렇게 하면…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e49463c0-c6d3-11e9-90c9-a5e30005de04/image.png\" alt=\"image.png\"></p>\n<p>약간 감이 오시나요??</p>\n<p><code class=\"language-text\">grid-template-rows: 100px 100px;</code>는 세로 100px짜리를 2행으로 만들어라 라는 뜻이였고요,\n<code class=\"language-text\">grid-template-columns: 50px 50px 50px;</code>는 가로 50px짜리를 3열로 만들어라 라는 뜻이에요!</p>\n<p>많이 헷갈리죠? 그치만 익숙해지면 손쉽게 쓸 수 있을거에요!\n근데 네모가 붙어있어서 좀 답답한데 떨어뜨리고 싶어요.. 그럴땐 어떻게 할까요?</p>\n<h2 id=\"grid-gap\"><a href=\"#grid-gap\" aria-label=\"grid gap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>grid-gap</h2>\n<p>갭이라는 속성이 있어서 사이사이를 띄워줄 수 있어요!\n아까 줬던 container의 css에 <code class=\"language-text\">grid-gap: 5px;</code> 이걸 추가해볼게요</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/dd5bd420-c6d4-11e9-8b9d-cb65853403a4/image.png\" alt=\"image.png\"></p>\n<p>그러면 이렇게 간격이 뙇!!</p>\n<h2 id=\"auto-flow와-auto-rowscolumns\"><a href=\"#auto-flow%EC%99%80-auto-rowscolumns\" aria-label=\"auto flow와 auto rowscolumns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>auto-flow와 auto-rows/columns</h2>\n<p>위에서 자식div가 9개였는데 <code class=\"language-text\">grid-template-rows: 100px 100px;</code> 으로 설정해줘서 2행까지밖에 뜨지 않죠! 지금의 상황처럼 숨겨진 자식div를 자동으로 화면에 띄워주는 것이 바로 grid-auto뭐시깽이들이에요</p>\n<p><code class=\"language-text\">grid-auto-rows: 200px</code> 이라고 한 줄 추가해볼게요.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2f0c22a0-c6dc-11e9-8ebd-0d28270a60b3/image.png\" alt=\"image.png\"></p>\n<p>이렇게 하면 숨겨졌던 세 개의 div들이 세로가 200px인 상태로 화면에 나타나게 됩니다!\n우리가 만들 웹페이지나 모바일 화면은 위에서 아래로 스크롤을 내리는 형식이니까 이 성질을 잘 활용하면 좋겠죠?</p>\n<p><code class=\"language-text\">grid-auto-columns: 200px</code> 이라고 써보면 어떨까요?\n정답은 아무 일도 일어나지 않는다!\n왜냐… grid-auto 뭐시기의 default값은 row로 설정이 되어있기 때문이죠!\n그럴 때 써주는게 <code class=\"language-text\">grid-auto-flow</code>입니다.</p>\n<p>위에서 설정한 코드 밑에 <code class=\"language-text\">grid-auto-flow: columns</code> 이 속성을 추가해보면..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f4d20f30-c6dd-11e9-90c9-a5e30005de04/image.png\" alt=\"image.png\"></p>\n<p>아까는 아무 일도 일어나지 않았지만 보다시피 column 속성이 채워집니다!</p>\n<h2 id=\"grid-template-areas\"><a href=\"#grid-template-areas\" aria-label=\"grid template areas permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>grid-template-areas</h2>\n<p>왠지 grid에서의 핵심 특징인것 같은 느낌적인 느낌인 이 template-areas!\n제가 설정한 템플릿에 따라 화면구성을 만들어주는 친구입니다.</p>\n<p>아까는 div가 9개인 상태에서 시작했지만 지금은 4개로 시작할거에요.\n각각의 className은 first~fourth까지!!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Grid = () =&gt; {\n    return(\n      &lt;div className=&quot;container&quot;&gt;\n      &lt;div className=&quot;first&quot;&gt;&lt;/div&gt;\n      &lt;div className=&quot;second&quot;&gt;&lt;/div&gt;\n      &lt;div className=&quot;third&quot;&gt;&lt;/div&gt;\n      &lt;div className=&quot;fourth&quot;&gt;&lt;/div&gt;\n\n    &lt;/div&gt;\n\n    )\n}</code></pre></div>\n<p>css 코드도 함 봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$red: #ff5e57;\n$yellow: #ffdd59;\n$blue: #3c40c6;\n$green: #05c46b;\n.container {\n  display: grid;\n  grid-gap: 5px;\n  grid-auto-flow: column;\n  grid-auto-rows: 200px;\n  grid-template-areas: &quot;head head head&quot;\n                       &quot;content content side&quot;\n                       &quot;content content side&quot;\n                       &quot;footer footer footer&quot;\n  div:first-child {\n    grid-area: head;\n    background: $green;\n  }\n  .second {\n    grid-area: content;\n    background: $yellow;\n  }\n  .third {\n    grid-area: side;\n    background: $red;\n  }\n  .fourth {\n    grid-area: footer;\n    background: $blue;\n  }\n}</code></pre></div>\n<p>부모div에는 “head head head” 이런식의 string 값을 4개 주었구요\n각각의 자식 div에 <code class=\"language-text\">grid-area</code>라는 속성을 추가하고 value에는 부모div에서 정의한 template들을 적용시켜봤어요</p>\n<p>그러면 화면구성은 어떻게 될까요!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/3107f900-c6e4-11e9-b6d6-1fdc05f3cd3a/image.png\" alt=\"image.png\"></p>\n<p>짠~ 이렇게 멋있게 구역이 나누어집니다!\n저 상태에서 개발자도구의 커서를 갖다 대면…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ca5b0c10-c701-11e9-bcd4-4b91f5ecbff0/image.png\" alt=\"image.png\"></p>\n<p>우리가 template area를 설정한 대로 정확하게 나뉘어서 나온게 보이시죠? (글씨는 원래 안 뜨는건데 보기 쉽게 제가 추가해놓은거에요.)\n이 방법을 쓰면 margin이나 width, height 기타 등등의 속성을 따로 주지 않아도 되니까 진짜 편한거 같아요!</p>\n<p>글이 너무 길어지는거 같으니 다음편으로 계속…</p>\n<p>출처에 있는 srimba 사이트 꼭 들어가보세요!\n영상 들으면서 직접 그 화면에서 실습도 해볼수 있어요 넘나 신기한것…\n이렇게..!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/3c5b7700-c702-11e9-836e-af72d1853ae5/image.png\" alt=\"image.png\"></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.w3schools.com/css/css_grid.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.w3schools.com/css/css_grid.asp</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/</a></li>\n<li><a href=\"https://scrimba.com/p/pWqLHa/c7Jqdfa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://scrimba.com/p/pWqLHa/c7Jqdfa</a></li>\n</ul>","fields":{"slug":"/posts/wecode4_3TIL_grid_1","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/grid/","/tag/css/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-21T15:37:04.169Z","description":"위코드 22일차. 프로젝트에 앞서 css 속성 중 grid에 대해서 공부해보았다, 그 1탄!","tags":["wecode","codingbootcamp","grid","css","위코드"],"title":"wecode 4주차_3일 TIL_CSS Grid로 레이아웃을 짜보자 1탄"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode4_3TIL_grid_1"}}}