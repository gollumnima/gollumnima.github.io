{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode5_5TIL_git","webpackCompilationHash":"7e146e3312287caabe4a","result":{"data":{"markdownRemark":{"id":"f5c654c2-265b-53d5-8b33-d9224783e228","html":"<h2 id=\"github-repository-만들기\"><a href=\"#github-repository-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"github repository 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>github repository 만들기</h2>\n<p>repo 새로 만들 때마다 자꾸 검색하게 되서 이번 기회에 정리하기로 마음먹음!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ed22c560-bccc-11e9-af0d-7bc87d670a4f/image.png\" alt=\"image.png\"></p>\n<ol>\n<li>깃허브에서 new repository 클릭해서 먼저 깃허브 상에 repo를 생성</li>\n<li>terminal에 <code class=\"language-text\">git init</code> 입력. 로컬저장소를 만드는 과정이다. 근데 이미 CRA를 실행했으면 초기화가 된 상태라 이 과정은 생략해도 된다!</li>\n<li><code class=\"language-text\">git status</code> (상태 확인하는건데 필수는 아님)</li>\n<li><code class=\"language-text\">git add .</code> 파일 전부 올리기. 파일 하나씩 올리기는 <code class=\"language-text\">gi add 경로/파일이름</code></li>\n<li><code class=\"language-text\">git commit -m &quot;day1 completed&quot;</code> 따옴표 안은 원하는 문구를 넣는거지만, 최대한 명확한 문구를 넣기</li>\n<li>git repository 주소를 복사한 다음 <code class=\"language-text\">git remote add origin 주소이름</code></li>\n<li><code class=\"language-text\">git remote -v</code> 로컬저장소와 원격저장소가 연결됨</li>\n<li><code class=\"language-text\">git push origin master</code> 커밋한 파일을 원격저장소에 올리기</li>\n</ol>\n<p>만약에 이게 프로젝트라면 처음 초기 세팅한 사람만 master에 push를 하고,\n그 이후에는 각자의 branch로 push를 하면 관리자가 merge 작업을 통해 병합해준다!</p>\n<h2 id=\"프로젝트-진행시\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A7%84%ED%96%89%EC%8B%9C\" aria-label=\"프로젝트 진행시 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 진행시…</h2>\n<p>각자 파일을 수정하고 업로드 하려면…</p>\n<ol>\n<li><code class=\"language-text\">git add .</code></li>\n<li><code class=\"language-text\">git commit -m &quot;home component completed&quot;</code></li>\n<li><code class=\"language-text\">git push origin feature/home</code></li>\n<li>push까지 하고 프로젝트 repo가 있는 github 페이지로 들어가서 New Pull Request 해준다</li>\n<li>관리자가 merge를 하면 그 master를 받고 또 새 가지를 파서 작업 시작!</li>\n</ol>\n<h2 id=\"branch-재활용-금지\"><a href=\"#branch-%EC%9E%AC%ED%99%9C%EC%9A%A9-%EA%B8%88%EC%A7%80\" aria-label=\"branch 재활용 금지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>branch 재활용 금지</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e30ec630-cc5a-11e9-a60f-17e4210d0ccf/image.png\" alt=\"image.png\"></p>\n<p>초기 세팅은 branch가 master이다. 그 이후 파트별로 분업을 하는데.. 각자의 branch를 새로 파야한다.</p>\n<ul>\n<li>브랜치 확인\n<code class=\"language-text\">git branch</code>를 하면 터미널에서 나의 branch 목록을 보여준다. 목록에서 나가려면 <code class=\"language-text\">ESC+;+q</code>를 순서대로 눌러준다!</li>\n<li>브랜치 생성\n<code class=\"language-text\">git branch feature/home</code> 이런식으로…!</li>\n<li>체크아웃\n<code class=\"language-text\">git checkout feature/menu</code> 쳌아웃 뒤에 이동하고 싶은 브랜치명 입력하기!</li>\n</ul>\n<p>여튼 여태 나는 기능별로 브랜치 뚫는것 까진 잘 했는데… 각각 페이지에서 야금야금 수정할 사항이 생기면 이미 pr 날리고 merge된 상태에서 또 다시 작업이 끝난 브랜치로 돌아갔다. <br/>하지만 재활용 금지!! 버리고 새 가지를 파야 한다…!<br/>\n내가 처음에 작업하던 브랜치는 맨 처음 master인데… 공동작업을 하다보면 완료 시점이 달라지고, 다들 미래를 향해 가고 있는데 나만 과거에 머무르게 되므로 시점 차이가 나다 보니 자꾸 충돌이 이루어 지는 것..</p>\n<p>나의 예시를 살펴보자.</p>\n<p>충돌남이 났다고 터미널에 뜬다… Like this.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/bdcea870-c91e-11e9-a47f-e3d5dc19fd81/image.png\" alt=\"image.png\"></p>\n<p>충돌이 나면 화면에 이런게 뜬다. 약간 섬유 뭉쳐놓은 그런 느낌이 난다 엉켜있는게</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/3598abf0-cada-11e9-a82a-cffb68435e6d/image.png\" alt=\"image.png\"></p>\n<p>저건 직접 지워도 되고 아니면 저 위에 Accept Current Change나 Accept Incoming Change 같은 버튼 눌러도 된다.\n여러 브랜치에서 작업을 하기 때문에 프로젝트를 하다 보면 충돌은 피할 수 없다.ㅋㅋㅋ<br/>\n<br/>여튼 충돌을 없애보았는데…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6dd426a0-c91f-11e9-a47f-e3d5dc19fd81/image.png\" alt=\"image.png\"></p>\n<p>내 메인화면이 안 뜨고 웬 노랑이만 나온다!\n이게 왜 일까 했더니 우리 팀원 분 중 한 분이 작업하다가 div에 yellow를 입힌게 내 파일에도 영향을 미친 것이었다! <br/>SASS nested tag 기능의 중요성…☆</p>\n<p>여튼… css 쪽도 안 알아보고 충돌이 해결됐다고 생각하고 뭐라도 해보겠다고 push를 해버렸다..!\n이럴때 시간을 되돌려서 지워주는 명령어가 필요하다</p>\n<p>터미널에 <code class=\"language-text\">git log</code>를 입력해보면 내가 여태 commit 했던 내역과 head가 나오게 된다.\nhead를 살펴보면 로컬의 소스코드가 어느 위치에 있는지 알 수 있다.\n만약 push를 안 했으면 예전의 origin recipe를 커밋한 상태가 뜰텐데 내가 push를 했기 때문에 head에 아래의 캡쳐 이미지와 같은게 뜬다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/42863330-c93d-11e9-a234-d98c498b5e96/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0870db40-c93e-11e9-94f8-973ff48cfb77/image.png\" alt=\"image.png\"></p>\n<p>우리가 checkout은 브랜치를 바꿀 때 주로 쓰지만, 작업 내역을 지울때도 쓸 수 있다.\n<code class=\"language-text\">git checkout src/Pages</code> 명령어를 통해 같은 경로에 있는 파일 두개를 지웠다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/27fc6b00-c93e-11e9-94f8-973ff48cfb77/image.png\" alt=\"image.png\"></p>\n<p><code class=\"language-text\">git status</code>를 입력하면 하면 또 지울게 있음! 그래서 그것도 지워버렸다!\n그랬더니 다시 예전의 내 파일로 돌아왔다~</p>\n<p>여튼 팀원분이 css파일 제대로 수정해서 merge가 된 이후로 다시 pull을 받으니 문제 해결쓰!\n맨날 혼자 블로그나 작업하다가 이런 프로젝트를 통해 git의 진가를 알게 되는것 같아서 뿌듯했다~</p>\n<h3 id=\"근데-만약에-내가-뭔가-실수를-해서-파일을-망쳐버렸으면-그땐-어떻게-하지\"><a href=\"#%EA%B7%BC%EB%8D%B0-%EB%A7%8C%EC%95%BD%EC%97%90-%EB%82%B4%EA%B0%80-%EB%AD%94%EA%B0%80-%EC%8B%A4%EC%88%98%EB%A5%BC-%ED%95%B4%EC%84%9C-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%A7%9D%EC%B3%90%EB%B2%84%EB%A0%B8%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%95%90-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EC%A7%80\" aria-label=\"근데 만약에 내가 뭔가 실수를 해서 파일을 망쳐버렸으면 그땐 어떻게 하지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>근데 만약에… 내가 뭔가 실수를 해서 파일을 망쳐버렸으면 그땐 어떻게 하지..?</h3>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0231f150-c8a4-11e9-9813-697e23afe5d4/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7206a880-cc5b-11e9-a75b-5d8adc576244/image.png\" alt=\"image.png\"></p>\n<h1 id=\"세상이-무너져도-다시-클론받으면-그만\"><a href=\"#%EC%84%B8%EC%83%81%EC%9D%B4-%EB%AC%B4%EB%84%88%EC%A0%B8%EB%8F%84-%EB%8B%A4%EC%8B%9C-%ED%81%B4%EB%A1%A0%EB%B0%9B%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%A7%8C\" aria-label=\"세상이 무너져도 다시 클론받으면 그만 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세상이 무너져도 다시 클론받으면 그만</h1>\n<p>우리에겐 <code class=\"language-text\">git clone</code>이라는 아주 편리한 명령어가 있다!\n세상이 무너져도 다시 클론받으면 그만이라는 걸 잊지말자!</p>\n<p>여튼… git과 좀 더 친해져야 할 것 같다.</p>","fields":{"slug":"/posts/wecode5_5TIL_git","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/project/","/tag/git/","/tag/linux/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-30T11:14:04.169Z","description":"위코드 29일차. Git과 조금 멀어졌다 가까워 지는 시간. 개발자면서 Git이랑 안 친하면 개발자라 할 수 없다. Git과 절친이 되기 위한 그 첫 번째 여정이 지금 바로 시작된다.","tags":["wecode","codingbootcamp","project","git","linux","위코드"],"title":"wecode 5주차_5일 TIL_Check git out! 자주 쓰는 git 용어 정리 및 간단 팁"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode5_5TIL_git"}}}