{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode3_4TIL_react","webpackCompilationHash":"283643e1df7aa2a40a0d","result":{"data":{"markdownRemark":{"id":"6ccf44bc-5a2e-5f94-b601-152b0da75487","html":"<p>눈으로 보고 치는 눈코딩과 직접 치는 코드가 정말 정말 다르다는 것을 또 다시 느낀 한 주였습니다… 리액트 때문에 계속 멘붕이였죠!\n하지만 곧 익숙해질거라 믿으며.. 저의 삽질 과정을 올려봅니다!</p>\n<h2 id=\"오류가-왜-이리-많이-생기니\"><a href=\"#%EC%98%A4%EB%A5%98%EA%B0%80-%EC%99%9C-%EC%9D%B4%EB%A6%AC-%EB%A7%8E%EC%9D%B4-%EC%83%9D%EA%B8%B0%EB%8B%88\" aria-label=\"오류가 왜 이리 많이 생기니 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류가 왜 이리 많이 생기니?</h2>\n<ul>\n<li>\n<p>no-unused-vars\n<img src=\"https://images.velog.io/post-images/dooreplay/1ce8b630-be8d-11e9-a771-e153ddc68ff9/image.png\" alt=\"image.png\">\n<img src=\"https://images.velog.io/post-images/dooreplay/2b92add0-be8d-11e9-a771-e153ddc68ff9/image.png\" alt=\"image.png\"></p>\n<p>import 선언은 해놓고 안 쓰는 애들에 대한 경고가 뜹니다.\n이럴 경우 간편하게 주석처리하거나 저 코드를 지우면 됩니다~</p>\n</li>\n<li>Module not found<br>\n캡쳐를 다 해놓은줄 알았는데 저게 끝이네요… ㅠㅠ 저건 대부분 경로설정을 잘못해서 생긴거니까 파일의 상대경로를 잘 설정하세요!</li>\n<li>inline-style 방식에서의 에러</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/1abde180-c1af-11e9-b953-25aefde875fe/image.png\" alt=\"image.png\"></p>\n<p>이건 아마 처음에 인라인으로 태그에 스타일요소를 넣으려고 했을때 발생한 에러같은데… JSX에서는 중괄호를 두번씩 써서 인라인으로 쓸 수 있습니다! 그치만 프로답게 css파일에 스타일을 정의하는 습관을 기릅시다!</p>\n<p>그 밖에 오타로 인한 에러가 참 많이 났었는데… 매의 눈 필수!!!\n언제 한번 리액트 에러 모음집 글을 써보겠습니다~ 대부분의 오류는 주위 사람들에게 도움을 청하거나.. 구글링으로 해결했습니다!</p>\n<h2 id=\"컴포넌트-쪼개기가-너무-어려워\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%AA%BC%EA%B0%9C%EA%B8%B0%EA%B0%80-%EB%84%88%EB%AC%B4-%EC%96%B4%EB%A0%A4%EC%9B%8C\" aria-label=\"컴포넌트 쪼개기가 너무 어려워 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 쪼개기가 너무 어려워…</h2>\n<p>처음엔 단순히 레이아웃별로 쪼갰습니다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/05469f30-c1b0-11e9-a7d0-358f0b555fd4/image.png\" alt=\"image.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;&gt;\n&lt;Top /&gt;\n&lt;Left /&gt;\n&lt;Right /&gt;\n&lt;/&gt;</code></pre></div>\n<p>render함수의 return값 안에 저런식으로 넣었지만..\n컴포넌트를 쓰는 이유가 재사용성 때문인데.. 제가 일단 쪼개긴 했어도 재활용은 전혀 하지 않았기 때문에 다시 쪼개봤습니다!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a449dde0-c1b0-11e9-b4da-37fdbf89eb79/image.png\" alt=\"image.png\">\n사실 재사용 할만한 모양이 별로 없어서 Top Component에 속해있던 흰색 바 안의 구성요소들을 Top2nd라는 컴포넌트로 따로 빼서 Left Component와 Right Component에 이어붙여줬습니다..</p>\n<p>이렇게 하는게 제대로 하는건진 모르겠지만.. 일단 월요일에 피드백 받기 전까지 주말까지의 저의 삽질은 여기까지!!</p>\n<h2 id=\"부모-컴포넌트에-대한-오해\"><a href=\"#%EB%B6%80%EB%AA%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%A4%ED%95%B4\" aria-label=\"부모 컴포넌트에 대한 오해 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부모 컴포넌트에 대한 오해…</h2>\n<p>저는 그냥 <code class=\"language-text\">&lt;Top /&gt;&lt;Left /&gt;&lt;Right /&gt;</code>가 합쳐지는 최종 컴포넌트가 부모 컴포넌트라고 생각했는데… 그게 아니였어요!!! 부모 컴포넌트는 react app에서 무조건 하나만 존재할거라 생각했는데…\n그냥 props를 물려주는 쪽은 다 부모라고 할 수 있는거에요! 앞서 react 개념 정리할 때 각 컴포넌트간 데이터 교류를 무역이라고 정의 내렸는데.. <br>그냥 그 무역이 부모와 자식간의 거래(?) 였네요 ㅋㅋㅋㅋ</p>\n<p>부모 컴포넌트에 대해서 제대로 알고있지 못해서 props를 활용하는 부분도 어렵게 생각했는데, 한번 이해하고 나니 이제 간단한 코드는 쓸 수 있게 되었어요!</p>\n<p>예를 들어…</p>\n<p><code class=\"language-text\">Top2nd</code>라는 위는 굵은 글씨, 아래는 얇은 글씨의 형식을 만들어주는 컴포넌트가 있습니다. 이걸 <code class=\"language-text\">Right</code>이라는 컴포넌트에 붙여볼겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Top2nd extends React.Component {\n\n    render() {\n    return (\n        &lt;div className=&quot;doorits_box&quot;&gt;\n            &lt;ul&gt;\n            &lt;li className=&quot;bold&quot;&gt;{this.props.bold}&lt;/li&gt;\n            &lt;li className=&quot;light&quot;&gt;{this.props.light}&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    );\n  }\n}</code></pre></div>\n<br>\n<p>아래는 <code class=\"language-text\">Right</code> 컴포넌트 중 일부</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     &lt;div\n      className=&quot;bar_wrap&quot;\n      &gt;\n      &lt;Top2nd\n      bold=&quot;Doorits&quot;\n      light={this.state.tweetBox.length}\n      /&gt;\n      &lt;Top2nd\n      bold=&quot;Followers&quot;\n      light=&quot;24&quot;\n      /&gt;\n      &lt;Top2nd\n      bold=&quot;Followings&quot;\n      light=&quot;2&quot;\n      /&gt;\n      &lt;/div&gt;</code></pre></div>\n<br>\n<p><code class=\"language-text\">Top2nd</code> 컴포넌트의 bold라는 className에 넣고 싶은 글씨를 넣을 수도 있고,\n아니면 state객체를 이용해서 <code class=\"language-text\">Right</code>안의 값을 대입하는 방법도 있습니다!\n넘나 신기한 리액트의 세계~~\n아직은 어렵고, 잘 안되면 화도 나지만 재미는 있으니깐! 더 발전할 수 있겠죠? XD</p>","fields":{"slug":"/posts/wecode3_4TIL_react","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/react/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-15T09:40:32.169Z","description":"위코드 18일차. 지난번 개념 정리에 이어.. 리액트로 미니트위터를 만들면서 맞딱뜨린 에러와 오해에 대해 정리해보았다!","tags":["wecode","codingbootcamp","react","위코드"],"title":"wecode 3주차_4일 TIL_리액트를 이용해 미니트위터 만들기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode3_4TIL_react"}}}