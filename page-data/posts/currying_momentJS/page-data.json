{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/currying_momentJS","webpackCompilationHash":"6171aaa0fcef9ed110eb","result":{"data":{"markdownRemark":{"id":"87a0467f-7ebb-5bce-b78c-9129a76d3795","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/0dfffd60-26c3-11ea-bcc6-ff5d30595a6f/image.png\" alt=\"image.png\"></p>\n<p>moment.js에 대한 설명을 하기 이전에 먼저 currying에 대해 짚고 넘어가보자!\ncurrying은 지난번에 포스팅했던 클로저를 활용해서 코드를 좀 더 단순화 하는 기법이다.\n클로저가 궁금한 분들은 <a href=\"https://gollumnima.github.io/posts/scope_closure\">지난번 포스팅</a> 고고!</p>\n<h2 id=\"currying\"><a href=\"#currying\" aria-label=\"currying permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>currying</h2>\n<p>간단한 예제부터 살펴보자. 더하기를 해줄거다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let sum = function(x) {\n  return function(y) {\n    return x+y;\n  }\n}</code></pre></div>\n<p>sum이라는 변수 안에 x를 인자로 받는 익명함수를 넣어줄건데,\n이 함수는 y를 인자로 받는 익명함수를 리턴하고, 그 익명함수는 최종적으로 x+y를 리턴한다.</p>\n<p>화살표함수를 이용해서 쫌 더 줄여보자!</p>\n<p><code class=\"language-text\">const sum = x =&gt; y =&gt; x+y</code></p>\n<p>놀라운 세상!!\n근데 더하기 같은 경우는 순서가 그다지 중요하지 않으므로 이번엔 제곱연산을 해보자.</p>\n<p>Answer라는 함수를 만들어줄건데, 이 Answer를 이용해서 제곱하는 square, 세제곱하는 cubic, 네제곱하는 strange도 만들어줄거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Answer(num) {\n  return function (n) {\n    return Math.pow(n,num)\n  }\n}\n\nconst square = Answer(2)\nconst cubic = Answer(3)\nconst strange = Answer(4)\n\nconsole.log(square(2)) // 4\nconsole.log(cubic(2)) // 8\nconsole.log(strange(2)) // 16</code></pre></div>\n<p>콘솔을 찍어보면 정확히 내가 원하는 값이 나온다!\n커링을 이용해서 더 줄여볼까?</p>\n<p><code class=\"language-text\">const Answer = num =&gt; n =&gt; Math.pow(n,num)</code></p>\n<p>더하기는 순서가 상관없었지만, 제곱은 인자가 들어가는 순서가 중요하므로 조심 또 조심!<br />\nn의 num제곱을 결과값으로 리턴해야 하는데,\nsquare는 Answer의 제곱, 즉 여기서 Answer에 들어가는 인자는 num이다.\n이 Answer함수 내부에 들어있는 n을 인자로 받는 익명함수가 결국 우리가 원하는 값을 리턴하는데\nsquare(3)은 결국 Answer(2)(3)과 똑같은 값이기 때문에 3의 제곱인 9를 리턴한다.</p>\n<p>자 그럼 이제 moment에서 적용해보자.</p>\n<h2 id=\"momentjs\"><a href=\"#momentjs\" aria-label=\"momentjs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment.js</h2>\n<p>moment.js, react-moment… 이것저것 종류가 참 많다.\n둘 다 깔긴 했었는데, 나는 일단 timestamp를 예쁜 날짜형식으로 바꾸는게 목적이어서\nmoment-timezone을 설치했다.</p>\n<p>설치는 간편하게 이렇게! <code class=\"language-text\">yarn add moment-timezone</code><br />\n가져다 쓸때도 간단하게 <code class=\"language-text\">import moment from &quot;moment-timezone&quot;</code></p>\n<p>moment도 moment지만 나는 Hooks도 어색하고, timezone의 숫자를 얻어내는 것부터 힘들었다.\n어쨌든… 먼저 firestore field에서 timezone 숫자값을 얻어내자.</p>\n<p>지난번과 코드가 약간 달라졌다. ClassInfo라는 객체에 모든 정보가 담겨있도록 받았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const ClassInfo = db.collection(&quot;left_seat&quot;).doc(&#39;wecoder&#39;)\nconst CurrentIndexOfClass = db.collection(&quot;left_seat&quot;).doc(&#39;current_th&#39;)\n\nconst fetchData = async () =&gt; {\n  try {\n    const classIndex = await CurrentIndexOfClass.get()\n      .then(doc =&gt; {\n        const result = doc.data()\n        return result.current\n      })\n\n    const classInfo = await ClassInfo.get()\n      .then(doc =&gt; doc.data())\n    return classInfo[classIndex]\n  } catch (err) {\n    console.log(err)\n    throw err\n  }\n}</code></pre></div>\n<p>ClassInfo에서 특정 숫자를 입력했을때 해당하는 정보를 받아오기 위해\nclassIndex라는 숫자 또한 이용했다.</p>\n<p>classInfo에서 starting<em>date,closing</em>date를 통해 timezone 숫자를 받아오는데\nclosing_date 자체가 객체기 때문에 seconds라는 property까지 접근해주어야 한다.<br />\n그렇게 접근했을때의 값은 unix number이기 때문에 우리는 moment를 이용해 내가 원하는 형식의 날짜로 다시 한 번 변형해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const allDate = value =&gt; {\n  if (!value || !value.seconds) return &#39;&#39;\n  return moment(value.seconds * 1000).tz(&#39;Asia/Seoul&#39;).format(&#39;YYYY년 M월 D일&#39;)\n}</code></pre></div>\n<p>랜더링 되는 중에 undefined가 잠시잠깐 뜰 수 있는데, 그걸 방지하기 위해 value 값이 없거나 value.seconds가 없을때 에러나서 터지지 말라고 쿠션 조건을 한줄 넣어 주었다.</p>\n<p>리턴되는 moment함수에선 value.seconds에 1000을 곱해줬는데, 이 작업을 해주지 않으면 1970년으로 나온다 ㅋㅋㅋ<br />\n그리고 .tz에 해당 지역에 대한 정보를 넣어줘야 시차(?)가 맞는다.<br /></p>\n<p>format은 진짜 진짜 진짜로 핵 신기하다.<br />\nYYYY-MM-DD 해도 되고, YYYY년 MM월 DD일 해도 된다 오오~<br />\n근데 MM월 말고 M월이라고 해도 된다.<br />\nM월이라고 하면 한 자릿수인 달엔 01월, 02월 이렇게 표시되는데 M만 하면 그런 걱정은 놉!</p>\n<p>진짜 똑똑한 라이브러리다 와~~~ 만든 사람에게 박수 👏👏👏</p>\n<p>어찌됐든… 이렇게 만든 allDate를 그냥 밑에다가 적용하기만 하면 된다.\n<code class=\"language-text\">allDate(classInfo.starting_date)</code> 이렇게!</p>\n<p>근데 나에게 주어진 과제는 연도가 포함된 날짜와 연도가 포함되지 않은 날짜 두 개!<br />\n식을 두 번씩 쓰면 코드가 쓸데없이 길어지기 때문에 utils에 moment라는 함수를 따로 만들어주었다.\n이렇게 함수를 따로 빼주면 moment도 한번만 import 하면 되니까 완전 개이득!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// utils/moment.js\n\nimport moment from &quot;moment-timezone&quot;\n\nconst formatDate = config =&gt; {\n    return value =&gt; {\n        if (!value || !value.seconds) return &#39;&#39;\n        return moment(value.seconds * 1000)\n            .tz(&#39;Asia/Seoul&#39;)\n            .format(config)\n    }\n}\n\nexport const withYear = formatDate(&#39;YYYY년M월D일&#39;)\nexport const withoutYear = formatDate(&#39;M월D일&#39;)</code></pre></div>\n<p>일단 함수로 한 번 빼줘서 moment를 한 번만 import해도 되고,<br />\n위에서 allDate를 쓰는 식으로 썼다면 비슷한 템플릿의 코드를 두 번 썼어야 했던 것도\nwithYear과 withoutYear이라는 변수를 선언해서 코드는 단 한 번만 써준다 와~</p>\n<p>적용할 때는 <code class=\"language-text\">&lt;span&gt;개강일: {withoutYear(classInfo.starting_date)}&lt;/span&gt;</code>\n걍 요렇게 해주면 끝!!<br /></p>\n<p>아 물론 utils/moment함수를 import 해줘야 적용할 수 있겠쥐~\n뭔가 굉장히 똑똑해진 느낌쓰~</p>\n<p>앞으로 코드를 어떻게 하면 더 효율적으로 줄일 수 있을지를 많이 고민해봐야 할 것 같다!</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>허선생님의 꿀팁</li>\n</ul>","fields":{"slug":"/posts/currying_momentJS","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/"]},"frontmatter":{"date":"2019-12-26T21:48:39.169Z","description":"timestamp를 현재시간으로 바꿔주는 moment.js를 활용하려다 보니, 지난시간 배운 클로저를 이용한 커링을 써먹게 되었다. 코드가 완전 짧아지는 신세계! 지금 바로 공개합니다.","tags":["web","javascript","frontend"],"title":"timestamp를 현재시간으로 바꿔주는 moment.js와 커링의 콜라보"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/currying_momentJS"}}}