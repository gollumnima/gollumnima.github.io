{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodeJS_4","webpackCompilationHash":"2c9b336bdc11cc59f106","result":{"data":{"markdownRemark":{"id":"d041161c-b145-5461-94da-f57b0db1d6b1","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/026a7750-2155-11ea-b3a3-bb0fc898801e/image.png\" alt=\"image.png\"></p>\n<h2 id=\"maria-db-설치하기\"><a href=\"#maria-db-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"maria db 설치하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maria db 설치하기</h2>\n<p><code class=\"language-text\">brew install mariadb</code> 명령어로 설치!</p>\n<ul>\n<li>서버 시작 : <code class=\"language-text\">mysql.server start</code></li>\n<li>서버 멈춤 : <code class=\"language-text\">mysql.server stop</code></li>\n<li>실행중인 서버 상태확인 : <code class=\"language-text\">mysql.server status</code></li>\n<li>접속 : <code class=\"language-text\">mysql -uroot</code></li>\n</ul>\n<p><i> 스크롤을 내리면 나오는 캡쳐들이 사실 시간순서와 관계없긴 하지만 내용은 시간 순서이니.. 캡쳐 내용을 많이 신경쓰지 말것!</i>\n<br /></p>\n<p>ex) 이미 데이터 만들고 마리아디비에서 확인을 했지만, 글의 순서상 마리아디비에서 데이터를 먼저 확인한다.</p>\n<h3 id=\"서버-켜기\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%BC%9C%EA%B8%B0\" aria-label=\"서버 켜기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 켜기</h3>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e5c632a0-209c-11ea-b574-233afa84a504/image.png\" alt=\"image.png\"></p>\n<p><code class=\"language-text\">mysql.server start</code>로 서버 켜주거나 혹은 <code class=\"language-text\">mysql</code>만 입력해도 됨<br /></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/41a5a330-209d-11ea-b574-233afa84a504/image.png\" alt=\"image.png\"></p>\n<p>위 명령어를 통해 내 컴퓨터가 서버가 된건데, 이 서버는 데이터 베이스 여러개 가질 수 있음.\n자! 이제 데이터베이스를 한번 만들어보자!</p>\n<p><b>database 만들기</b><br />\n<code class=\"language-text\">create database wecode;</code> &#x3C;- 끝에 땀 꼭 붙여야 한다! 땀 안 쓰면 문장이 계속 이어지는 줄 앎..\n나는 데이터베이스 이름을 wecode로 지정했다</p>\n<p><b>선택한 이름의 database 목록 보기</b> <br />\n<code class=\"language-text\">use wecode</code>로 선택한 이름의 database에 접근할 수 있고<br /></p>\n<p><b>database 목록 보기</b> <br />\n<code class=\"language-text\">show databases;</code> &#x3C;- 이때 <b>땀방울 꼭</b> 붙여야 함!<br />\nshow명령어가 터미널에서 ls와 비슷한 명령어 같은 느낌적인 느낌쓰.. 기존 데이터베이스 목록을 보여준다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/5c84b330-2250-11ea-ac6b-8fd2766c9ca5/image.png\" alt=\"image.png\"></p>\n<p>위의 캡쳐이미지는 wecode database에 접속해서 database 목록을 조회하는 화면!</p>\n<p><b>테이블에 담긴 정보를 받아오기</b>\n<code class=\"language-text\">select 무엇 from 테이블명;</code> 명령어를 통해 원하는 정보들을 가지고 올 수 있다.\nselect 는 CRUD에서 read에 해당되는 것! 읽기모드 인것이다~\n무엇의 요소들은 쉼표를 통해 여러 개의 값을 조회할 수 있고, 아니면 *표를 통해 전체 조회가 가능쓰!</p>\n<p>예를 들어, post table에서 content와 createdAt만 가져오고자 한다면!<br />\n<code class=\"language-text\">select title, createdAt from post;</code>라고 하면 된다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/49f88d70-2252-11ea-857a-67bf08f839d1/image.png\" alt=\"image.png\"></p>\n<p>전체를 다 가져오고 싶다???\n<code class=\"language-text\">select * from post;</code> 라고 하면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/905fedd0-2252-11ea-98a3-37d48d524d7c/image.png\" alt=\"image.png\"></p>\n<p>짠 다 볼 수 있다!\n이제 권한을 부여해볼건데..!</p>\n<p><code class=\"language-text\">create user wecode_user@localhost identified by &#39;wecode1234&#39;;</code></p>\n<p>위의 명령어를 통해 username과 password를 설정하고 권한을 부여해야 함.</p>\n<p><code class=\"language-text\">grant all privileges on wecode.\\* to wecode_user@localhost;</code>\n이렇게 권한을 부여하면 관리자권한으로 mysql을 쓰는것!<br /></p>\n<p><b>database에서 나가기</b><br />\n간단하게 <code class=\"language-text\">exit</code> 명령어로 나갈 수 있다!</p>\n<p>권한도 부여했으니, 다시 한번 wecode 데이터베이스에 접속해보자!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/47a66ec0-209f-11ea-bfea-5d0fa0c4a664/image.png\" alt=\"image.png\"></p>\n<p><code class=\"language-text\">데이터베이스이름 -u 사용자이름 -p</code>\nu와 p는 각각 user와 password를 나타낸다.<br />\n다만 비번을 공개된 창에 쓰면 쫌 그러니깐, 엔터 한벙 치고 보이지 않는 상태에서 써준다.</p>\n<h2 id=\"project로-다시-돌아가서\"><a href=\"#project%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EB%8F%8C%EC%95%84%EA%B0%80%EC%84%9C\" aria-label=\"project로 다시 돌아가서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>project로 다시 돌아가서…</h2>\n<p><code class=\"language-text\">npm i sequelize</code> <br />\n<code class=\"language-text\">npm i mariadb</code> <br />\n<code class=\"language-text\">npm i dotenv</code> <br /></p>\n<p>세 가지 명령어 입력 고고!! 하나씩 다시 살펴보자.</p>\n<h3 id=\"sequelize\"><a href=\"#sequelize\" aria-label=\"sequelize permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sequelize</h3>\n<p>사전적 정의로는 속편을 만들다. 라는 뜻!<br />\n하나의 ORM(Object Relation Mapping)으로써 => db의 관계를 객체로 mapping 한다!\n프로그래밍적인 걸로 sql 쿼리를 대신 날려주는 것.\norm이 없어도 되긴 하는데, 이걸 써야 개발이 편해지는 것. sql은 조금 관계성을 보기엔 좀 이질적이라고 한다!</p>\n<h3 id=\"mariadb\"><a href=\"#mariadb\" aria-label=\"mariadb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mariadb</h3>\n<p>mariadb는 connection을 관리하는 친구(보통 connector라고 함)<br />\n요건 필수로 설치해야 한다! 데이터베이스는 http가 아니기 때문에 <br />\nfetch 같은거 못쓰고 별도의 프로토콜을 써야 하는데, mariadb는 그걸 관리해주는 애!</p>\n<h3 id=\"dotenv\"><a href=\"#dotenv\" aria-label=\"dotenv permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dotenv</h3>\n<p>dotenv 는 환경변수 관리 즉, 마리아디비에 로그인하는 것.. <br />마리아디비에 사용자랑 비번 만들었으니깐\n요청할때마다 사용자명과 암호를 치는 것!<br />\n이 정보를 어딘가에 저장을 해야하는데,\n소스코드에 있으면 데이터베이스 암호도 털리니까 별도의 공간에 데이터베이스 로그인 정보를 따로 빼놓는 장치.\n개발환경 및 배포환경이 달라야 할때 환경변수를 사용.</p>\n<p><b>dotenv 파일을 Github에 안 올라가게 하려면..</b></p>\n<ul>\n<li>프로젝트에 .env파일 만듬</li>\n<li>gitignore에 .env 추가</li>\n<li>.env 파일에 아래와 같이 써준다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//.env\n\nDB_NAME=wecode // database name\nDB_USERNAME=wecode // username\nDB_PASSWORD=wecode // password</code></pre></div>\n<p>나는 시험삼아 그냥 다 wecode로 설정해놨는데.. 이렇게 하면 안된다 ㅋㅋ</p>\n<ul>\n<li>그담에 server.js 젤 첫줄에다가 이거 한 줄 추가</li>\n</ul>\n<p><code class=\"language-text\">require(&#39;dotenv&#39;).config()</code></p>\n<ul>\n<li>db.js 파일을 만든다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// db.js\n\nconst Sequelize = require(&#39;sequelize&#39;)\nconst sequelize = new Sequelize({\n    port: 3306, // database default port(고정값)\n    database: process.env.DB_NAME,\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    host: &#39;localhost&#39;,\n    dialect: &#39;mariadb&#39;\n})</code></pre></div>\n<p>이렇게 환경변수 설정(마리아디비 로그인)까지 완료했고 이제 sequelize를 해줄거다\n이걸 왜 해주냐 하면.. 예를들어 post table을 만들었다고 생각해보자!</p>\n<p>노드 코드 어딘가에다가 문자열로 <code class=\"language-text\">SELECT user,~~~ from~~ where~~</code> 막 이렇게 구구절절 써야하는데\n이걸 자동화해주는게 ORM이다!</p>\n<p>이걸 하기위해선 먼저 스키마 정의를 해야하는데,\nmodels라는 폴더를 만들고 거기에 post.js를 만들어줄것이다!</p>\n<p>sequelize.org 공식문서에 가면 방법이 상세히 나와있음!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//post.js\n\nmodule.exports = (sequelize, types) =&gt; {\n    return sequelize.define(&#39;post&#39;, { // 파일명이라 post\n      title: {\n          type: types.TEXT(&#39;tiny&#39;),\n          allowNull: false, // 필수라서 Not Null이라고도 함. NN\n          defaultValue: &#39;제목없음&#39;\n      },\n      content: {\n          type: types.TEXT,\n          allowNull: false,\n      },\n    }, {\n        tableName: &#39;post&#39;,\n    })\n}</code></pre></div>\n<p>이걸 app에서 불러올거임</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app.js\n// 앞부분 생략쓰\n// export한 요소 세개가 db 변수에 들어오는 것.\n// 비구조화 할당 가능쓰\n// const db = require(&#39;./db&#39;)\nconst {  sequelize } = require(&#39;./db&#39;)\n\n// 서버가 시작되는 순간에 실행이 되게 하는 것!\nsequelize.sync()</code></pre></div>\n<p>이제 서버를 켜면!!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/4ee02820-20a4-11ea-9a5b-d1c6e9e9dfde/image.png\" alt=\"image.png\"></p>\n<p>내가 만든 wecode data가 뙇!!! 터미널에 뜬다.</p>\n<p>이제 내용을 담아볼거다!</p>\n<p>지난번에 했던 것중 routes폴더에 post.js를 post-json으로 바꿔주곻</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const express = require(&#39;express&#39;);\nconst router = express.Router();\n\nconst {\n    getOnePost,\n    getAllPosts,\n    updatePost,\n    createPost,\n    deletePost,\n    validate,\n} = require(&#39;../controllers/post-json&#39;)\nconst { validationMiddleware } = require(&#39;../controllers/validator&#39;)\n\n\n// 목록조회\nrouter.get(&#39;/&#39;, validationMiddleware(\n    validate.offset,\n    validate.limit,\n    validate.order\n), getAllPosts)\n\n// 단일조회\nrouter.get(&#39;/:id&#39;,validationMiddleware(\n    validate.id,\n), getOnePost)\n\n// 생성\nrouter.post(&#39;/&#39;,validationMiddleware(\n    validate.body,\n), createPost)\n\n// 수정\nrouter.put(&#39;/:id&#39;, validationMiddleware(\n    validate.id,\n    validate.body\n), updatePost,\n)\n\n// 삭제\nrouter.delete(&#39;/:id&#39;, validationMiddleware(\n    validate.id\n),deletePost)\n\nmodule.exports = router</code></pre></div>\n<p>index.js에 있는 post변수명들을 postJSON으로 바꿔주었음.</p>\n<p>그러고 다시 controllers/post.js 로 돌아와서…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const { post } = require(&#39;../db&#39;)\n// ORM으로 모델 정의한 걸 불러옴\n// post 테이블이 어떤 속성을 가지고 있는지, 데이터 사용자명 같은 정보도 다 들어있음\n\nconst getAllPost = async (req, res, next)=&gt;{\n  // 데이터베이스는 비동기임. 웹서버 바깥에서 자원을 가지고 오는 거락서(node.js 바깥쪽에서 갖고오는거)\n    const result = await post.findAll({\n\n  })\n  console.log(result, &#39;결과당~~₩&#39;)\n  res.end()\n}\n\n\nconst createPost = async (req, res, next)=&gt;{\n  const result = await post.create({\n      title: &#39;나는 제목이당&#39;,\n      content: &#39;나는 내용쓰&#39;,\n      // Post 보낼때마다 새로운 내용 쓰고 싶으면 비구조화 할당으로 title, content라고 써줌\n  })\n  console.log(result)\n  res.end()\n}</code></pre></div>\n<p>createPost를 작성하고 post로 post를 보내보자!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/92c246d0-225d-11ea-a575-0d5e65f73cc6/image.png\" alt=\"image.png\">\n(몰랐는데 Postman에 다크모드가 있어서 적용해봤다 ㅋㅋ)</p>\n<p>이번엔 get을 해줄거다! 그 전에 getAllPost를 작성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const getAllPost = async (req, res, next)=&gt;{\n\n  try {\n    const {\n        offset = 1, limit = 20\n      } = req.query // 등호 옆에는 기본값 넣어준 것\n      const {\n          count,\n          rows\n      } = await post.findAndCountAll({ // 배열에 숫자가 붙어있음.\n          offset : parseInt(offset)-1,\n          limit : parseInt(limit),\n      })\n      // 데이터베이스는 비동기임. 웹서버 바깥에서 자원을 가지고 오는 거락서(node.js 바깥쪽에서 갖고오는거)\n\n      const results = rows.map(e =&gt; e.toJSON())\n      res.json({\n          message: &#39;조회함&#39;,\n          data : { count, results}\n      })\n  }\n\n  catch(err) {\n      next(err)\n  }\n}</code></pre></div>\n<p>이제 겟 날리면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e84dfef0-225d-11ea-ad48-0b749827e71f/image.png\" alt=\"image.png\"></p>\n<p>짠 get했더니 넘나 잘 나오고 있고요!</p>\n<p>다음번 포스팅은 크롤링에 대한 것이다!\n이런 저런 세션으로 수업이 계속 미뤄졌는데 다음주 월요일일부터 다시 재개될듯~?\n그동안 Node도, 비동기도, Promise도 다 열심히 공부하자 아자아자!!!</p>\n<h2 id=\"오늘의-느낀-점\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"오늘의 느낀 점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 느낀 점…</h2>\n<ul>\n<li>비구조화할당 열심히 공부할 것!</li>\n<li>Promise 열심히 공부할 것!</li>\n<li>node.js 구조 확실히 공부할 것!</li>\n<li>허선생님 최고 ㅠㅠ</li>\n</ul>","fields":{"slug":"/posts/nodeJS_4","tagSlugs":["/tag/web/","/tag/node/","/tag/backend/","/tag/javascript/","/tag/postman/"]},"frontmatter":{"date":"2019-12-19T10:01:29.169Z","description":"프로젝트 할때 mock-up 데이터 만들려고 json형식의 데이터 파일을 vscode에서 만든 적은 있었는데, 실제 백앤드 데이터 테이블을 만든 적은 없었다! 근데 오늘, 그걸 해냈다! maria DB로 데이터 만들어 본 후기훅이~","tags":["web","node","backend","javascript","postman"],"title":"허선생님과 함께하는 Maria DB로 데이터 만들기와 Node.js에서 적용"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nodeJS_4"}}}