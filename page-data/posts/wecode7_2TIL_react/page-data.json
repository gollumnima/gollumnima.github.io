{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode7_2TIL_react","webpackCompilationHash":"05c6eb7aac2d64d2e81f","result":{"data":{"markdownRemark":{"id":"7893f740-fccb-5b3e-844b-ea38d6477be4","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/cd2a53e0-d392-11e9-a0b2-e3484432dcc9/image.png\" alt=\"image.png\"></p>\n<p>눈 깜짝할 새에 더위가 한 풀 꺾이고, 1차 프로젝트도 끝이 나고, 추석연휴도 찾아왔다.\n벌써 위코드에서 동기들과 함께 생활을 한 지 한 달이 훨씬 지났다는 소리다 와우! <br />\n남은 일주일의 쉬는시간(?)동안 공부 방향을 세 갈래로 나누어 생각해봤는데, 그 중 첫째가 리액트 라이프사이클과 리덕스!</p>\n<p>라이프사이클을 정리하기 전에, 프로젝트 때 코드도 다시 돌아볼 겸 state와 props에 대해 다시 간략히 정리해보려고 한다.</p>\n<h2 id=\"react-ui데이터를-관리하는-라이브러리\"><a href=\"#react-ui%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"react ui데이터를 관리하는 라이브러리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React, UI데이터를 관리하는 라이브러리</h2>\n<p>아래 링크에는 3주차 이틀차 되던 날 내가 리액트에 대해 정리했던 내용에 담겨있다.\n<a href=\"https://gollumnima.github.io/posts/wecode3_2_TIL_react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gollumnima.github.io/posts/wecode3_2_TIL_react/</a>\n저 당시엔 state와 props에 대한 이해도가 없는 채로 그냥 알아야 적용하니깐.. 주입식으로 정리했던 것 같다.\n물론 지금도 완전히 다 이해한 건 아니지만 프로젝트를 하면서 어떤 느낌인지 감이 왔다!</p>\n<p>여튼… 지난번 포스팅에선 <code class=\"language-text\">&quot;리액트는 라이브러리다&quot;</code> 라고 했는데\n정확히 말하자면, <code class=\"language-text\">&quot;UI 데이터를 관리하는 라이브러리&quot;</code>다.\n이 데이터는 또 두 갈래로 나눠지는데,</p>\n<ul>\n<li>컴포넌트 내부의 상태값 (state)</li>\n<li>부모 컴포넌트에서 물려받는 속성값 (props)</li>\n</ul>\n<p>리액트는 이러한 UI데이터가 변경이 될때마다 화면을 다시 그리는 속성을 가지고 있다.\nhtml의 DOM 구조를 생각해보자면, 우리는 데이터가 변경될 때마다 dom요소를 직접 설정해야만 했다.</p>\n<p>예시를 보자!</p>\n<ul>\n<li>html+js에서의 이름 클릭시 트윗 삭제기능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function filter() {\n  let be_empty = document.getElementsByClassName(&#39;contents_wrap&#39;)[0]\n  if (event.target.innerText === &#39;Doori Kim&#39;) {\n    be_empty.remove();\n    const sum_doorits = document.getElementsByClassName(&#39;sum_doorits&#39;)[0]\n    const total_doorits = doorits_box.children.length\n    sum_doorits.innerHTML = total_doorits; // 헐 대박..\n  }\n}</code></pre></div>\n<p>저 당시엔 주석으로 헐 대박을 썼지만..\n리액트 코드 보다가 이거 보니 넘나 복잡한 것!</p>\n<p>이제 리액트 코드를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  removeTweet = () =&gt; {\n    this.setState({\n      tweetBox: this.state.tweetBox\n    });\n  };\n\n&lt;div className=&quot;doorits_box&quot;&gt;\n  &lt;ul&gt;\n    {tweetBox.map((el, idx) =&gt; (\n      &lt;li key={idx}&gt;\n        &lt;button className=&quot;name_btn&quot; onClick={this.removeTweet}&gt;\n        {el.name}\n        &lt;/button&gt;\n          &lt;span className=&quot;post_time&quot;&gt;{el.time.toString()}&lt;/span&gt;\n          &lt;p className=&quot;post_txt&quot;&gt;{el.message}&lt;/p&gt;\n       &lt;/li&gt;\n     ))}\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre></div>\n<p>훨씬 더 직관적이다!\nremoveTweet이라는 함수를 만들어서 tweetBox의 state에 변화를 주고, onClick이벤트에 만든 함수를 적용시키면 끝!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8d5e0670-d398-11e9-a0b2-e3484432dcc9/image.png\" alt=\"image.png\"></p>\n<p>어때요? 참 쉽죠?</p>\n<h4 id=\"기억할-것은-리액트는-랜더함수를-통해-화면을-자동으로-갱신시킨다는-점\"><a href=\"#%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8A%94-%EB%9E%9C%EB%8D%94%ED%95%A8%EC%88%98%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%99%94%EB%A9%B4%EC%9D%84-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EA%B0%B1%EC%8B%A0%EC%8B%9C%ED%82%A8%EB%8B%A4%EB%8A%94-%EC%A0%90\" aria-label=\"기억할 것은 리액트는 랜더함수를 통해 화면을 자동으로 갱신시킨다는 점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기억할 것은 리액트는 랜더함수를 통해 화면을 자동으로 갱신시킨다는 점!</h4>\n<h2 id=\"state\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<p>클래스형 컴포넌트 내부에서 상태를 관리해줄 때 state를 쓴다.\n(요즘은 함수형 컴포넌트에서도 state를 쓸 수 있게 훅이라는 게 새로 나오긴 했다 ㅎ)\nconstructor 안에서 초기 상태를 this.state 객체 안에 변화할 값들을 넣어주고 초기값을 세팅해준다.</p>\n<p>우리가 state를 이용하지 않고, 임의로 데이터값을 바꾼다고 해도 가능은 하다!\n하지만 리액트는 바보라서 데이터가 변경되었다는 사실을 모르기 때문에 화면은 그대로 일것이다 ㅠㅠ\n그래서 우리는 setState를 써줘야 하는 것!</p>\n<p>우리팀 프로젝트의 어려웠던 부분 중 하나인 뉴스 카테고리 선택하는 뉴스홈 화면 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &quot;react&quot;;\nimport NewsHomeCategory from &quot;./NewsHomeCategory&quot;;\nimport { Link } from &quot;react-router-dom&quot;;\nimport Navbar from &quot;../../Components/Home/Navbar&quot;;\nimport HomeNewsItem from &quot;../../Components/Home/HomeNewsItem&quot;;\nimport &quot;./NewsHome.scss&quot;;\n\nclass NewsHome extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      category: [],\n      newsList: [],\n      active_category: 1,\n      selectedIndex: 0,\n      indexCount: 0\n    };\n  }\n\n  componentDidMount() {\n    fetch(&quot;http://13.209.12.87:8000/news/tags&quot;, {\n      method: &quot;GET&quot;,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;\n      }\n    })\n      .then(response =&gt; {\n        return response.json();\n      })\n      .then(response =&gt; {\n        let categoryList = response.map(el =&gt; {\n          return el.tag;\n        });\n\t\t//fetch로 데이터를 받은 후 카테고리 정보를 받아오게끔 setState 함수 설정\n        this.setState({\n          category: categoryList\n        });\n      });\n    this.requestNewsList(this.state.active_category);\n  }\n\n  requestNewsList(categoryItem_number) {\n    fetch(\n      `http://13.209.12.87:8000/news?offset=1&amp;tag_num=${categoryItem_number}`,\n      {\n        method: &quot;GET&quot;,\n        headers: {\n          &quot;Content-Type&quot;: &quot;application/json&quot;\n        }\n      }\n    )\n      .then(response =&gt; {\n        return response.json();\n      })\n      // 해당하는 카테고리의 배열만 뜨게 설정하기\n      .then(response =&gt; {\n        this.setState({\n          newsList: response[0].news_data.map(el =&gt; {\n            if (el.tag_id === categoryItem_number) {\n              return el;\n            } else {\n              return &quot;&quot;;\n            }\n          }),\n          active_category: categoryItem_number\n        });\n      });\n  }\n  onChangeCategory = e =&gt; {\n    let categoryItem_number = Number(e.currentTarget.id);\n    // 백에서 보내준 데이터가 1부터 시작해서 -1을 해줘야 제대로 작동한다\n    this.setState({\n      selectedIndex: categoryItem_number - 1\n    });\n    this.requestNewsList(categoryItem_number);\n  };\n\n  render() {\n    return (\n      &lt;&gt;\n        &lt;div className=&quot;NewsWrap&quot;&gt;\n          &lt;div className=&quot;NewsHome-tag&quot;&gt;\n            &lt;div className=&quot;NewsHome page_wrapper&quot;&gt;\n              &lt;div className=&quot;tag_round&quot;&gt;\n                {this.state.category.map((el, key) =&gt; {\n                  let selectedStatus =\n                    key === this.state.selectedIndex ? true : false;\n                  return (\n                    &lt;NewsHomeCategory\n                      key={key}\n                      name={el}\n                      value={key + 1}\n                      onChangeCategory={this.onChangeCategory}\n                      selected={selectedStatus}\n                    /&gt;\n                  );\n                })}\n              &lt;/div&gt;\n              &lt;div className=&quot;design&quot;&gt;\n                {this.state.newsList.map((item, index) =&gt; {\n                  if (item !== &quot;&quot;) {\n                    return (\n                      &lt;Link to={`/news/${item.id}`}&gt;\n                        &lt;HomeNewsItem\n                          key={index}\n                          category={item.tag}\n                          title={item.title}\n                          summary={item.content}\n                          thumbnail={item.image_url}\n                        /&gt;\n                      &lt;/Link&gt;\n                    );\n                  }\n                })}\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/&gt;\n    );\n  }\n}\n\nexport default NewsHome;</code></pre></div>\n<p>엄청 복잡한 로직이었다!\n일단 클릭한 카테고리에 따라 보이는 화면이 다르게 구현 하는것도 힘들었고,\n뉴스와 레시피쪽 데이터 형식이 같진 않아서 fetch함수를 써서 데이터를 가져오고 가공하는데 더 어려움을 겪었던 것 같다.</p>\n<p>NewsHome이라는 컴포넌트는 또 NewsHomeCategory라는 컴포넌트와 이어지는데..\n여기서 우리는 props에 대해서 살펴볼 것이다.</p>\n<h2 id=\"props\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props</h2>\n<p>부모컴포넌트로 부터 물려 받는 속성값을 props라고 한다.\n이는 불변객체(immutable)기 때문에 값을 변경하려고 하면 에러가 난다!</p>\n<p>그렇다면 NewsHome과 이어지는 NewsHomeCategory의 코드를 살펴보자</p>\n<p>살펴보기 전! 내가 처음에 시도했던 방법을 먼저 살펴보자\n<img src=\"https://images.velog.io/post-images/dooreplay/ced57f00-d075-11e9-a83f-2d728137bd80/image.png\" alt=\"image.png\">\n(원래 일식 카테고리 누르면 노재팬 뜨게 하려고 했는데 팀원들의 만류로 패쓰~)\n여튼 카테고리를 눌렀을 때 해당하는 리스트는 뜨지만, 색깔이 바뀌는 효과를 주고 싶었던 나는…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> onClinkHandler = e =&gt; {\n    this.props.onChangeCategory(e);\n    this.setState({\n      color: &quot;orange&quot;,\n      backgroundColor: &quot;3px soild orange&quot;\n    })\n  };\n\nrender() {\n    return (\n      &lt;div className=&quot;check_box&quot;&gt;\n        &lt;div\n          className=&quot;RecipeButton&quot;\n          style={{ borderBottom: this.state.borderBottom }}\n        &gt;\n          &lt;p\n            id={this.props.value}\n            onClick={this.onClinkHandler}\n            style={{ color: this.state.color }}\n          &gt;\n            {this.props.name}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }</code></pre></div>\n<p>state에 color와 backgroundColor를 넣어놓고 Click 이벤트가 일어날 때 style이 바뀌도록 인라인으로 css효과를 작성했다.\n그치만… 결과는!!!\n누르는 것마다 색깔이 바뀌게 되어서 대실패~</p>\n<p>우리팀 에이스 광훈님의 도움을 받아 다시 작성해본 코드…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &quot;react&quot;;\nimport &quot;./NewsHome.scss&quot;;\n\nclass NewsHomeCategory extends React.Component {\n  onClickHandler = e =&gt; {\n    this.props.onChangeCategory(e);\n  };\n\n  render() {\n    let borderColor = this.props.selected\n      ? &quot;3px solid orange&quot;\n      : &quot;2px solid #bdbdbd&quot;;\n\n    let charColor = this.props.selected ? &quot;orange&quot; : &quot;black&quot;;\n\n    return (\n      &lt;div className=&quot;check_box&quot;&gt;\n        &lt;div\n          className=&quot;NewsButton&quot;\n          style={{\n            borderBottom: `${borderColor}`\n          }}\n        &gt;\n          &lt;p\n            id={this.props.value}\n            onClick={this.onClickHandler}\n            style={{\n              color: `${charColor}`\n            }}\n          &gt;\n            {this.props.name}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default NewsHomeCategory;</code></pre></div>\n<p>props가 선택 되었는지 안 되었는지를 알기 위해선 NewsHome 컴포넌트 내부에 selected가 true인지 false인지 판별하는 함수를 넣어줬다. 요렇게!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div className=&quot;tag_round&quot;&gt;\n  {this.state.category.map((el, key) =&gt; {\n    let selectedStatus = key === this.state.selectedIndex ? true : false;\n    return (\n      &lt;NewsHomeCategory\n        key={key}\n        name={el}\n        value={key + 1}\n        onChangeCategory={this.onChangeCategory}\n        selected={selectedStatus}\n      /&gt;\n    );\n  })}\n&lt;/div&gt;</code></pre></div>\n<p>selectedStatus가 true인 애들만 orange 색으로 바뀌게 하는 코드가 뙇!\n이제 증말로 선택한 카테고리만 색깔이 바뀐다 오예!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c70834f0-d3a1-11e9-8f86-5df8e04645de/image.png\" alt=\"image.png\"></p>\n<p>넘나 잘 먹히는 것…☆\n나 혼자만의 힘으로 한건 아니지만 원하는 결과가 화면에 나오니 이렇게 기쁠수가 없었다 ㅋㅋ</p>\n<p>3주 전의 나는 이론으로만 대충 이런거다! 하고 state와 props에 대해 포스팅 했었는데\n프로젝트에 적용을 해보니까 쪼꼼 알 것 같다.</p>\n<h3 id=\"결론-무조건-콘솔-찍어봐라\"><a href=\"#%EA%B2%B0%EB%A1%A0-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%BD%98%EC%86%94-%EC%B0%8D%EC%96%B4%EB%B4%90%EB%9D%BC\" aria-label=\"결론 무조건 콘솔 찍어봐라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론, 무조건 콘솔 찍어봐라!</h3>\n<p>this.props가 무엇인지, this.state.newsList에 어떤 데이터가 들어오는지, 진짜로 데이터가 들어오긴 하는건지!\n일단 다 찍어봐야 알 수 있다!</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>실전 리액트 프로그래밍(이재승 저)</li>\n<li>1차 프로젝트 wooridoori.com 코드</li>\n</ul>","fields":{"slug":"/posts/wecode7_2TIL_react","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/project/","/tag/react/","/tag/위코드/"]},"frontmatter":{"date":"2019-09-10T17:11:04.169Z","description":"위코드 36일차. 1차 프로젝트를 마치며 다시금 state와 props로 데이터를 변경하는 법을 정리해보았다. (with 1차 프로젝트 코드)","tags":["wecode","codingbootcamp","project","react","위코드"],"title":"wecode 7주차_2일 TIL_리액트 상태값 변경+프로젝트 예시"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode7_2TIL_react"}}}