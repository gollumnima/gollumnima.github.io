{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react_sibling_component","webpackCompilationHash":"7d2f4de2be02b98b7855","result":{"data":{"markdownRemark":{"id":"b69dedec-706d-5692-9504-1fa896d65ff8","html":"<hr>\n<p>2차 프로젝트 때의 기억을 더듬어 써보는 포스팅..\n코드 엉성함 주의 😂😂😂</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/45e0c9f0-e125-11e9-ac74-991045cdf4ca/image.png\" alt=\"image.png\"></p>\n<h2 id=\"sibling-component간-데이터-교환\"><a href=\"#sibling-component%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%90%ED%99%98\" aria-label=\"sibling component간 데이터 교환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sibling component간 데이터 교환</h2>\n<p>일반적으로 우리가 부모 component에서 자식 component로 데이터를 보낼땐 props를 이용한다.<br />\n하지만, 반대로 자식에서 부모에게 데이터를 보낼 수 있는 것일까?!<br />\n정통(?)적으론 힘든 일이라서 리덕스나 컨텍스트같은 개념들이 나왔겠지..?<br />\n하지만 우리의 리액트세상에 불가능이란 없다!! 할 수는 있다 ㅋㅋ<br /></p>\n<h2 id=\"콜백함수\"><a href=\"#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98\" aria-label=\"콜백함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백함수</h2>\n<p>그때도 지금도 나에겐 아직 넘나 어색한 콜백함수를 이용하면 자식에서 부모로 정보를 넘길 수 있다.<br />\n그렇다면 콜백함수란 뭘까?<br />\n바로바로!! 함수를 인자로 사용하는 함수를 말한다.<br /></p>\n<p>예시를 통해 살펴보자…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/d882a770-fe2f-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>2차 프로젝트인 애드워드 프로젝트에서 골치 아팠던 것 중 하나..<br />\n동영상 업로드 버튼을 누르면 모달창이 뜨는데!</p>\n<h4 id=\"막판에-급하게-모바일-버전으로-수정하느라-css가-깨진건-무시해주세요-ㅋㅋ\"><a href=\"#%EB%A7%89%ED%8C%90%EC%97%90-%EA%B8%89%ED%95%98%EA%B2%8C-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%90%EB%9D%BC-css%EA%B0%80-%EA%B9%A8%EC%A7%84%EA%B1%B4-%EB%AC%B4%EC%8B%9C%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94-%E3%85%8B%E3%85%8B\" aria-label=\"막판에 급하게 모바일 버전으로 수정하느라 css가 깨진건 무시해주세요 ㅋㅋ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(막판에 급하게 모바일 버전으로 수정하느라 css가 깨진건 무시해주세요 ㅋㅋ)</h4>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2f736dd0-fe30-11e9-8a44-a5519ded29c0/image.png\" alt=\"image.png\"></p>\n<p>왼쪽에 광고영상 업로드, 퀴즈 업로드라는 두개의 탭이 있고,\n각각의 탭을 누를 경우 오른쪽 빈 공간에 해당 탭의 컴포넌트를 불러오는 식이다.</p>\n<p>근데 우리 프로젝트 특성상, 광고영상 고유의 id가 있어야 했고,\n그 아이디는 광고정보를 ‘POST’로 보냈을 때 모든 정보가 유효하면 백앤드쪽에서 넘어 오는 id였고,\n나는 해당하는 id를 퀴즈 업로드 시 ‘POST’로 같이 부쳐줘야 했다!</p>\n<p>이틀을 고민해도 답이 안 나왔는데..\n동기 사랑~ 나라 사랑~~ 광훈님의 도움으로😆 콜백함수를 이용하게 되었다!</p>\n<p>일단.. 코드를 보기 전 내 컴포넌트 구조를 다시 한번 살펴보자면!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9622be30-fe32-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>ModalForm이라는 부모 컴포넌트 하에\nAdVideoForm과 AdQuizForm이라는 자식 컴포넌트들이 있는 건데..<br />\nresId라는 값을 자식=>부모=>자식 컴포넌트 순으로 전달을 해야 하는 것!</p>\n<p>일단 부모 컴포넌트에 콜백함수를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ModalForm.js(부모 컴포넌트)\nclass ModalForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeTab: &quot;videoTab&quot;,\n      visible: true,\n      resId: 0\n    };\n  }\n\n  onUpdateResId = resId =&gt; {\n    this.setState({\n      resId: resId\n    });\n  };\n\n  switchMenu = activeTab =&gt; {\n    this.setState({ activeTab: activeTab });\n  };\n\n  onClose = () =&gt; {\n    const { visible } = this.state;\n    if (visible === !!visible) {\n      this.setState({\n        visible: false\n      });\n    } else {\n      this.setState({\n        visible: true\n      });\n    }\n  };\n\n  render() {\n    let subView = [\n      { videoTab: &lt;AdVideoForm onUpdateResId={this.onUpdateResId} key=&quot;0&quot; /&gt; },\n      { quizTab: &lt;AdQuizForm key=&quot;1&quot; resId={this.state.resId} /&gt; }\n    ];\n\n    return (\n      &lt;ModalBackground canSee={this.visible}&gt;\n        &lt;ModalWrapper&gt;\n          &lt;TitleWrapper&gt;\n            &lt;TitleLetters&gt;Adwards&lt;/TitleLetters&gt;\n          &lt;/TitleWrapper&gt;\n          &lt;AdVideoWrapper&gt;\n            &lt;AdLeft&gt;\n              &lt;LeftUL&gt;\n                &lt;AdSideLILef\n                  active={this.state.activeTab === &quot;videoTab&quot;}\n                  onClick={() =&gt; this.switchMenu(&quot;videoTab&quot;)}\n                &gt;\n                  &lt;Span&gt;광고 영상 업로드&lt;/Span&gt;\n                &lt;/AdSideLILef&gt;\n                &lt;AdSideLIRig\n                  active={this.state.activeTab === &quot;quizTab&quot;}\n                  onClick={() =&gt; this.switchMenu(&quot;quizTab&quot;)}\n                &gt;\n                  &lt;Span&gt;퀴즈 업로드&lt;/Span&gt;\n                &lt;/AdSideLIRig&gt;\n              &lt;/LeftUL&gt;\n            &lt;/AdLeft&gt;\n            &lt;AdRight&gt;\n              {subView.map((el, key) =&gt; {\n                el.key = key;\n                return el[this.state.activeTab];\n              })}\n            &lt;/AdRight&gt;\n          &lt;/AdVideoWrapper&gt;\n          &lt;CloseOK&gt;\n            &lt;CloseLetter cancel onClick={this.onClose}&gt;\n              취소\n            &lt;/CloseLetter&gt;\n            &lt;Link to=&quot;/biz_main&quot; style={{ textDecoration: &quot;none&quot; }}&gt;\n              &lt;CloseLetter&gt;확인&lt;/CloseLetter&gt;\n            &lt;/Link&gt;\n          &lt;/CloseOK&gt;\n        &lt;/ModalWrapper&gt;\n      &lt;/ModalBackground&gt;\n    );\n  }\n}</code></pre></div>\n<p>하나하나 코드를 다시 뜯어보자면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8a5256f0-fe33-11e9-8a44-a5519ded29c0/image.png\" alt=\"image.png\"></p>\n<p>먼저 부모 컴포넌트의 state에 resId를 0으로 초기화 시켜주고..<br />\nonUpdateResId 라는 함수를 만들고, 들어오는 값과 동일한 값으로 state값을 업데이트 시키기</p>\n<p>이제 자식컴포넌트로 가서…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// AdVideoForm(resId를 받는 자식컴포넌트)\n// .... 중략..\n  onClickSave = e =&gt; {\n    const {\n      videoTitle,\n      videoLink,\n      videoThumbnail,\n      videoCate,\n      videoDesc,\n      videoBudget,\n      videoPrice,\n      tags,\n      videoInterests\n    } = this.state;\n\n    const title = videoTitle.trim();\n    const link = videoLink.trim();\n    const thumbnail = videoThumbnail.trim();\n    const desc = videoDesc.trim();\n    const cate = videoCate;\n    const budget = videoBudget.trim();\n    const price = videoPrice.trim();\n    const interests = videoInterests;\n    const tag = tags;\n\n    if (\n      title === &quot;&quot; ||\n      link === &quot;&quot; ||\n      thumbnail === &quot;&quot; ||\n      desc === &quot;&quot; ||\n      cate === &quot;&quot; ||\n      budget === &quot;&quot; ||\n      price === &quot;&quot;\n    ) {\n      alert(&quot;모든 칸을 채워주세요&quot;);\n    } else {\n      fetch(&quot;http://13.125.254.18:8000/advertisement&quot;, {\n        method: &quot;POST&quot;,\n        headers: {\n          Authorization: `${AuthAd}`\n        },\n        body: JSON.stringify({\n          title: title,\n          video_link: link,\n          thumbnail: thumbnail,\n          ad_category_id: cate,\n          description: desc,\n          budget: budget,\n          price_per_view: price,\n          tag: tag,\n          interests_type_id: interests\n        })\n      })\n        .then(response =&gt; {\n          if (response.status !== 200) {\n            return response.json();\n          } else {\n            alert(&quot;영상 정보가 저장되었습니다.&quot;);\n            return response.json();\n          }\n        })\n        .then(response =&gt; {\n          this.props.onUpdateResId(response);\n          this.setState({\n            resId: response\n          });\n        });\n  // 중략...</code></pre></div>\n<p>다시 코드를 하나 하나 뜯어보자! 씹고 뜯고 맛보고 즐기고~😜<br />\n<br />\n<img src=\"https://images.velog.io/post-images/dooreplay/0ba15df0-fe34-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>아까와 마찬가지로 resId를 state안에 넣어서 초기화 해주고..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/54255cc0-fe34-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>유저가 입력한 정보가 서버로 잘 보내지면 response에서 resId가 넘어오는데\n여기서 부모컴포넌트에 썼던 onUpdateResId라는 함수를 props로 넘겨서 response를 받는다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/bb264f90-fe36-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>개발자도구-네트워크 탭을 확인해보면 값이 아주 잘 들어왔다!<br />\n이렇게 resId를 업데이트 해주고 다시 부모컴포넌트로 돌아가서..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9d0c0a70-fe33-11e9-8a44-a5519ded29c0/image.png\" alt=\"image.png\"></p>\n<p>response를 통해 받은 값을 콜백함수를 통해 resId에 담아서 업데이트를 해주었다!<br />\n이제 이 업데이트한 값을 또 다른 자식 컴포넌트로 보내야 하는데..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ffe17170-fe34-11e9-aff5-3513ca67697d/image.png\" alt=\"image.png\"></p>\n<p>바로 아래에 또다른 자식컴포넌트를 부르는 탭이 있어서<br />\n저기다가 바로 resId를 부모 컴포넌트의 state의 resId라고 대입을 해준다!</p>\n<p>이제 AdQuizForm 컴포넌트로 넘어가보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  onSaveQuiz = e =&gt; {\n    const {\n      quizQuestion,\n      quizRightAnswer,\n      testOne,\n      testTwo,\n      testThree,\n      testFour\n    } = this.state;\n    const question = quizQuestion.trim();\n    question.trim();\n    if (\n      question === &quot;&quot; ||\n      testOne === &quot;&quot; ||\n      testTwo === &quot;&quot; ||\n      testThree === &quot;&quot; ||\n      testFour === &quot;&quot;\n    ) {\n      alert(&quot;모든 칸을 채워주세요&quot;);\n    } else {\n      fetch(&quot;http://13.125.254.18:8000/quiz&quot;, {\n        method: &quot;POST&quot;,\n        headers: {\n          Authorization: `${AuthAd}`\n        },\n        body: JSON.stringify({\n          ad_id: this.props.resId.advertisement_id,\n          quizzes: [\n            {\n              content: quizQuestion,\n              choices: [testOne, testTwo, testThree, testFour],\n              answers: quizRightAnswer\n            }\n          ]\n        })\n      }).then(response =&gt; {\n        if (response.status !== 200) {\n          return response.json();\n        } else {\n          alert(&quot;퀴즈 정보가 저장되었습니다.&quot;);\n        }\n      });\n    }\n  };</code></pre></div>\n<p>자식=>부모로 넘기는게 진짜 힘든 과정이었는데 이제 정말 다 왔다!<br />\n부모=>자식으로 넘기는건 걍 props 쓰면 되니까 넘나 간단한 것~</p>\n<p>확인차.. render 밑에다 console.log(this.props, ‘props)를 찍어보았다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/ea521dd0-fe36-11e9-8221-0996ebd35fe7/image.png\" alt=\"image.png\"></p>\n<p>아주 잘 찍히고 있다!\n서버로 보낼때는 ad<em>id라는 이름으로 보내야 하기 때문에<br />\nBody에 `ad</em>id: this.props.resId.advertisement_id`라는 값을 실어준다.\n그럼 해결쓰!</p>\n<p>이걸 해결하고 나서의 교훈..</p>\n<ol>\n<li>구조는 최대한 간단하게 짜자. depth가 깊어지면 쥬금…ㅠㅠ</li>\n<li>리덕스를 공부하자.</li>\n</ol>\n<p>애초에 리덕스를 공부했으면 이걸로 고민했을 일이 없는 거였는데!\n리덕스 안 쓰고 쌩으로 하려니 넘나 힘들었던 것…\n기술은 괜히 발전하는게 아니다 ㅋㅋㅋㅋ</p>","fields":{"slug":"/posts/react_sibling_component","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-11-04T21:47:23.169Z","description":"2차 프로젝트 때 나에게 두통을 줬던 자식 컴포넌트에서 자식 컴포넌트로 데이터 보내기... 까먹을 수도 있으니 기억을 더듬아 다시 정리해보았다!","tags":["react"],"title":"React에서 자식 컴포넌트끼리의 데이터 교환"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/react_sibling_component"}}}