{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode6_1TIL_fetch","webpackCompilationHash":"3f8c579279cc14da3608","result":{"data":{"markdownRemark":{"id":"ec6cf41b-bb8b-5a8d-a154-1c4f7f6fa431","html":"<p>2주 프로젝트의 2주일 차 첫 날… 맞나? 아니면 1주차의 주말인가? 블로깅이 밀려서 정확한 날짜는 기억이 나지 않는다 ㅠㅠ<br/>\n여튼 .. 원래 레시피 목록에는 하드코딩이 되어 있었는데, 백앤드에서 데이터를 보내줬다고 가정하면서 json data를 fetch로 불러오는 걸 연습해보았다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from &quot;react&quot;;\nimport &quot;./BestRecipe.scss&quot;;\n\nclass BestRecipe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: []\n    };\n  }\n  componentDidMount() {\n    fetch(&quot;../../Pages/Home/Data.json&quot;)\n      .then(response =&gt; response.json())\n      .then(\n        result =&gt; {\n          console.log(result, &quot;b4&quot;);\n\n          this.setState({\n            isLoaded: true,\n            data: result\n          });\n          console.log(result, &quot;after&quot;);\n        },\n        error =&gt; {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded, data } = this.state;\n    if (error) {\n      console.log(data, &quot;얍얍1&quot;);\n      return &lt;div&gt;Error in loading&lt;/div&gt;;\n    } else if (!isLoaded) {\n      console.log(data, &quot;얍얍2&quot;);\n      return &lt;div&gt;Loading ...&lt;/div&gt;;\n    } else {\n      console.log(data, &quot;얍얍3&quot;);\n      return (\n        &lt;&gt;\n          {data.map(food =&gt; (\n            &lt;div className=&quot;home_recipe_wrapper&quot;&gt;\n              &lt;div className=&quot;home_recipe_container&quot;&gt;\n                &lt;div className=&quot;home_recipe_img_container&quot;&gt;\n                  &lt;img url={food.img} alt={food.name}&gt;&lt;/img&gt; )\n                  &lt;div className=&quot;home_recipe_words_container&quot;&gt;\n                    &lt;h4 className=&quot;home_recipe_category&quot;&gt;{food.des}&lt;/h4&gt;\n                    &lt;h2 className=&quot;home_recipe_name&quot;&gt;{food.name}&lt;/h2&gt;\n                  &lt;/div&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/&gt;\n      );\n    }\n  }\n}\n\nexport default BestRecipe;</code></pre></div>\n<p>이것이 나의 코드…<br />\n<a href=\"https://howtocreateapps.com/json-html-react-tutorial/#3_Fetching_an_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://howtocreateapps.com/json-html-react-tutorial/#3_Fetching_an_API</a> <br />\n이 사이트를 참고해보았다! 근데 나는 역시나 똥손이였다.\n분명 함수식에서의 에러는 다 제거했는데… 이미지와 텍스트가 로드되지 않는다!!!!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/b55688c0-cbe4-11e9-924b-950387af45d2/image.png\" alt=\"image.png\"></p>\n<p>response 부분이 의심스러워서 콘솔도 찍어봤는데 이렇게…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fetch(&quot;../../Pages/Home/Data.json&quot;).then(response =&gt;\n      console.log(response.json())\n    );</code></pre></div>\n<p>결과는…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/65d5a3c0-cbe5-11e9-af3c-f5a01e555467/image.png\" alt=\"image.png\"></p>\n<p><code class=\"language-text\">Unexpected token &lt; in JSON at position 0</code>라니.. 띠용????\n그래서 wecode 전용 stack overflow에 문의를 해봤다!</p>\n<p>콘솔을 찍어보라고 하셔서 그것도 해보았다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BestRecipe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: []\n    };\n  }\n  componentDidMount() {\n    fetch(&quot;../../Pages/Home/Data.json&quot;)\n      .then(response =&gt; response.json())\n      .then(response =&gt; console.log(response, &quot;응답하라!&quot;))\n      .then(\n        result =&gt; {\n          this.setState({\n            isLoaded: true,\n            data: result\n          });\n        },\n        error =&gt; {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n      .then(result =&gt; console.log(result, &quot;결과!!&quot;));\n  }</code></pre></div>\n<p><br />찍어 보았는데… 반응은 result가 undefined라는 것.. 네트워크 탭도 확인해보았는데..<br />\n<img src=\"https://images.velog.io/post-images/dooreplay/b1492160-cbe5-11e9-af3c-f5a01e555467/image.png\" alt=\"image.png\">\n<br />\n200 OK면 괜찮은거 같은데 왜 안될까 왜 왜???\n여기서 문제는 두 가지였는데… 우리는 타요만 기억하면 된다 <br />\n<br /> <img src=\"https://images.velog.io/post-images/dooreplay/32896ed0-cc48-11e9-ac8e-357588005325/image.png\" alt=\"image.png\"></p>\n<h1 id=\"타고-타고타고-집요하게-타고들어가기\"><a href=\"#%ED%83%80%EA%B3%A0-%ED%83%80%EA%B3%A0%ED%83%80%EA%B3%A0-%EC%A7%91%EC%9A%94%ED%95%98%EA%B2%8C-%ED%83%80%EA%B3%A0%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0\" aria-label=\"타고 타고타고 집요하게 타고들어가기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타고 타고타고 집요하게 타고들어가기!</h1>\n<p>그 ‘탄다는 것’에서의 포인트는 두 가지이다.</p>\n<h2 id=\"fetch함수를-쓰려면-public-폴더-하에서-관리하기\"><a href=\"#fetch%ED%95%A8%EC%88%98%EB%A5%BC-%EC%93%B0%EB%A0%A4%EB%A9%B4-public-%ED%8F%B4%EB%8D%94-%ED%95%98%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"fetch함수를 쓰려면 public 폴더 하에서 관리하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch함수를 쓰려면 public 폴더 하에서 관리하기</h2>\n<p>fetch함수 특성상 정해진 url에 접속해서 파일을 불러오는데, 그 대상이 되는게 바로 public 폴더이다. 브라우저에서 public 바로 밑에 있는 index.html에 접근해서 화면을 나오게 하는 것…!\n나의 경로를 다시 보자면…<code class=\"language-text\">../../Pages/Home/Data.json</code>\n이렇게 두 번 이상 경로를 타게 되면 build 폴더를 벗어나기 때문에 json.data를 불러올 수 없는 것이였다!\n이 경우는 public 폴더안에 data.json 파일을 옮기고 <code class=\"language-text\">fetch(&quot;./data.json&quot;)</code> 경로 설정을 다음과 같이 해주면 된다리</p>\n<h2 id=\"데이터가-src폴더에-있을땐-import-하기\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-src%ED%8F%B4%EB%8D%94%EC%97%90-%EC%9E%88%EC%9D%84%EB%95%90-import-%ED%95%98%EA%B8%B0\" aria-label=\"데이터가 src폴더에 있을땐 import 하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터가 src폴더에 있을땐 import 하기</h2>\n<p>src폴더 내에 있는 json파일은 import 하기! 브라우저가 화면을 띄울때 index.js 파일부터 읽는데.. 거기선 또 Routes로 연결 되어있고.. Routes로 들어가면 또 거기서 import된 파일들을 확인하고 계속 타고타고타고타고 올라갑니다. 근데! 저는 위에서 json data를 한번도 import 하지 않았기 때문에 undefined 값이 불려진 것이다.</p>\n<p><br /><br />html로 페이지를 만들때는 js파일에서 fetch를 쓰는 게 훨씬 간단했는데\nreact로 넘어가니까 넘 복잡한것 같다.. 그래도 경로설정만 잘해주면 된다는것</p>\n<p>다시 한번 말하지만 우리가 기억할 것은 타요다!\n<br /><img src=\"https://images.velog.io/post-images/dooreplay/32896ed0-cc48-11e9-ac8e-357588005325/image.png\" alt=\"image.png\">\n<br />react가 파일을 어떤 경로로 타고타고타고타고 들어가는지 그 원리만 알면 해결쓰~~\n백엔드에서 주소 받아와서 한 fetch에 대해선 다음 이 시간에 정리할 예정!</p>","fields":{"slug":"/posts/wecode6_1TIL_fetch","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/project/","/tag/fetch/","/tag/위코드/"]},"frontmatter":{"date":"2019-09-02T16:02:04.169Z","description":"위코드 30일차. 지난번 fetch 포스팅에 이어서 또 다시 써 보는 fetch 포스팅. 백엔드에서 주는 실 데이터가 아닌 내가 임의로 만든 데이터json 파일을 fetch로 불러올 때의 주의사항을 정리해보았다!","tags":["wecode","codingbootcamp","project","fetch","위코드"],"title":"wecode 6주차_1일 TIL_fetch 쓸때 주의사항(feat.타요)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode6_1TIL_fetch"}}}