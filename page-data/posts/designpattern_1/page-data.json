{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/designpattern_1","webpackCompilationHash":"25d9316762a3a654a790","result":{"data":{"markdownRemark":{"id":"cb036bff-675c-5156-b7cd-6682ef1c06ce","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/ddc460f0-3464-11ea-8b24-ab245ed330b3/image.png\" alt=\"image.png\"></p>\n<h1 id=\"디자인-패턴\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"디자인 패턴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴</h1>\n<p>이번 시간에는 속깊자 5장 디자인 패턴을 정리해볼건데, 내용이 많으므로\n일단 1,2장 내용을 차례로 정리해볼 예정이다.</p>\n<h2 id=\"모듈-패턴\"><a href=\"#%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4\" aria-label=\"모듈 패턴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 패턴</h2>\n<p>자바스크립트의 소스를 모듈 단위로 관리하거나 라이브러리를 만들때 주로 사용한다.<br />\n일반적인 프로젝트에선 잘 안 쓰이지만 서버개발, 라이브러리개발, API개발 등에 유용하게 쓰이는 패턴쓰\n여러 함수와 변수를 글로벌 영역에 두고 사용하는게 아니라, 하나의 대표 글로벌 변수 안에 여러 함수를 두는 게 바로 모듈 패턴의 기본!</p>\n<h3 id=\"모듈패턴의-장점\"><a href=\"#%EB%AA%A8%EB%93%88%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"모듈패턴의 장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈패턴의 장점</h3>\n<ul>\n<li>글로벌 변수를 최소화함으로 다른 소스를 가져다 쓸때 충돌 최소화 시킴</li>\n<li>모듈간 의존성을 최소화하거나 의존성을 파악하기 쉬움</li>\n</ul>\n<p>예시를 한번 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function(window) {\n  var my = {\n    helloWorld : function() {\n      alert(&quot;HEllo World&quot;);\n    },\n    hello : {\n      world: function() {\n        alert(&quot;HEllo World&quot;);\n      }\n    }\n  }\n\n  window.my = my\n})(window)\n\nconsole.log(my.helloWorld()) // === HEllo World\nconsole.log(my.hello.world()) // === HEllo World</code></pre></div>\n<p>모듈패턴이 어떻게 활용되는지에 대한 기본틀이 이것이다!\n하지만 더 간단하게 생각해보자면, 우리가 React에서 함수를 import 해서 쓰는 것도 하나의 모듈패턴이라고 할 수있다.</p>\n<p>제이쿼리에서 변수인 <code class=\"language-text\">$</code>+ <code class=\"language-text\">selector</code>로 함수를 호출하는 것도 모듈패턴이다.<br />\n속깊자 본문에는 jQuery 예시가 많이 나왔는데 난 제이쿼리 잘알못이니까 생략..!<br /></p>\n<p>허선생님의 노드 수업에서 크롤링 배울때 cheerio 쓰면서 <code class=\"language-text\">$변수</code>를 쓴적 있긴 하다.<br />\n아 그러고 보니 크롤링 수업 이어서 해야하는데 큽… 못 듣고 있다 속상…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const scrapNtok = async () =&gt; {\n    let browser;\n  try {\n    browser = await puppeteer.launch()\n\n    const page = await browser.newPage() // 얘도 비동기라서 이렇게. 크롬에서 새탭 여는 효과\n\n    await page.goto(&#39;https://www.ntok.go.kr/kr/Main/Index&#39;)\n\n    const html = await page.content()\n\n    const $ = cheerio.load(html)\n    const shows = $(&#39;#container &gt; div.contents.clfix &gt; div:nth-child(2) &gt; div &gt; div &gt; div.bx-viewport &gt; ul &gt; li:nth-child(2) &gt; ul &gt; li&#39;)\n    .toArray()\n    .map(e =&gt; {\n        const $ = cheerio(e)\n        const url = $.find(&#39;a&#39;).attr(&#39;href&#39;)\n        const img = $.find(&#39;img&#39;).attr(&#39;src&#39;)\n        const title = $.find(&#39;.name&#39;).text()\n        const period = $.find(&#39;.prd_info span:nth-child(1)&#39;).text()\n        const place = $.find(&#39;.prd_info span:nth-child(2)&#39;).text()\n        return { url, img, title, period, place }\n      })\n    return shows\n\n} catch(err) {\n    throw(err)\n  } finally {\n      browser.close()\n\n  }\n}</code></pre></div>\n<h2 id=\"이벤트-델리게이션\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%EC%85%98\" aria-label=\"이벤트 델리게이션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 델리게이션</h2>\n<p>다수의 DOM 모두에 이벤트리스너를 부여하는 것이 아니라, 대표 DOM에만 이벤트를 걸어서 처리하는 패턴을 말한다.\n모든 DOM에 일일히 이벤트리스너를 할당하면 초기화 단계에서 컴퓨팅 자원을 많이 소모하게 된다.\n그래서 부모DOM을 만들어서 이벤트를 처리하거나, 주요 이벤트가 발생하는 부분별로 나누어서 처리하는 방식을 쓰게 되었다.</p>\n<p>이는 HTML에서 이벤트 버블링을 통해 이벤트를 상위 DOM으로 전달할 수 있는 원리를 이용한다.\n이벤트가 발생하면 부모와 자식 DOM 사이에서 해당 이벤트를 전파할때 <code class=\"language-text\">캡처링-&gt;대상-&gt;버블링</code>의 세 단계를 거친다.</p>\n<h3 id=\"이벤트-버블링과-캡처링\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B2%84%EB%B8%94%EB%A7%81%EA%B3%BC-%EC%BA%A1%EC%B2%98%EB%A7%81\" aria-label=\"이벤트 버블링과 캡처링 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 버블링과 캡처링</h3>\n<p>이벤트 버블링은 <code class=\"language-text\">자식DOM-&gt;부모DOM</code>까지 전파 되는 것,<br />\n이벤트 캡처링은 <code class=\"language-text\">부모DOM-&gt;자식DOM</code>까지 전파되는 것을 의미한다.</p>\n<p>예시를 보자!\n책에 있는 코드를 가져다 쳐봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    div{\n      border: 1px solid black;\n    }\n    .divOutside {\n      width: 200px;\n      height: 200px;\n      background-color: lightgreen;\n    }\n    .divMiddle {\n      width: 150px;\n      height: 150px;\n      background-color: lightblue;\n    }\n    .divInside {\n      width: 100px;\n      height: 100px;\n      background-color: pink;\n      position: relative;\n    }\n    .divFloat {\n      position: absolute;\n      left: 210px;\n      height: 50px;\n      width: 50px;\n      background-color: lightgray;\n    }\n    .highlight{\n      background-color: black;\n    }\n  &lt;/style&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n  &lt;title&gt;Bubbling &amp;&amp; Capturing&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=&quot;divBubblingOutside&quot; class=&quot;divOutside&quot;&gt;\n    &lt;div id=&quot;divBubblingMiddle&quot; class=&quot;divMiddle&quot;&gt;\n      &lt;div id=&quot;divBubblingInside&quot; class=&quot;divInside&quot;&gt;\n        Bubbling\n&lt;div id=&quot;divBubblingFloat&quot; class=&quot;divFloat&quot;&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;div id=&quot;divCapturingOutside&quot; class=&quot;divOutside&quot;&gt;\n  &lt;div id=&quot;divCapturingMiddle class=&quot;divMiddle&quot;&gt;\n&lt;div id=&quot;divCapturingInside&quot; class=&quot;divInside&quot;&gt;\n  Capturing\n&lt;div id=&quot;divCapturingFloat&quot; class=&quot;dicFloat&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;script&gt;\n(function() {\n  document.getElementById(&quot;divBubblingOutside&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Outside bubbling&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  });\n  document.getElementById(&quot;divBubblingMiddle&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Middle bubbling&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  });\n  document.getElementById(&quot;divBubblingInside&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Inside bubbling&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  });\n  document.getElementById(&quot;divBubblingFloat&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Float bubbling&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  });\n  document.getElementById(&quot;divCapturingOutside&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Outside capturing&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  }, true);\n  document.getElementById(&quot;divCapturingMiddle&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Middle capturing&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  }, true);\n document.getElementById(&quot;divCapturingInside&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Inside capturing&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  }, true);    document.getElementById(&quot;divCapturingFloat&quot;)\n  .addEventListener(&#39;click&#39;, function() {\n    this.classList.toggle(&quot;highlight&quot;);\n    alert(&quot;Float capturing&quot;);\n    this.classList.toggle(&quot;highlight&quot;);\n  }, true);\n})()\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>아래는 캡처화면!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7ca4cd90-34e2-11ea-a2b9-83d2dfa4d785/image.png\" alt=\"image.png\"></p>\n<p>상단의 분홍색 영역(버블링)을 클릭하면 inside->middle->outside 순으로 alert창이 뜬다.\n캡처링은 이와 반대로 실행된다.</p>\n<p>특정 DOM에서 이벤트가 발생하면 해당 DOM의 dispatchEvent()라는 함수를 통해 이벤트를 전달하게 된다.\n이 때 이벤트 전달은 propagation path라는 전파경로에 따라 수행되는데, 크게 세 단계로 이루어진다.\n<code class=\"language-text\">이벤트 캡처-&gt;target-&gt;이벤트 버블</code> 순이다.<br />\n따라서 캡처링과 버블링을 위한 두 가지 이벤트를 같은 DOM에 설정해놓으면 캡처링으로 설정한 이벤트 핸들러가 먼저 호출되고, 이후 버블링이 실행된다.</p>\n<h3 id=\"dom-수정-시-전달-경로\"><a href=\"#dom-%EC%88%98%EC%A0%95-%EC%8B%9C-%EC%A0%84%EB%8B%AC-%EA%B2%BD%EB%A1%9C\" aria-label=\"dom 수정 시 전달 경로 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 수정 시 전달 경로</h3>\n<p>이벤트가 발생하고 나면 핸들러 안에서 DOM이 수정되더라도 이벤트 전달은 중단되지 않고 원래의 경로를 통해 이벤트가 전파된다.\n속깊자 본문에선 아까 썼던 코드에서 divCapturingMiddle의 이벤트 핸들러에서 이벤트 대상인 divCapturingFloat를 삭제하는 코드를 예시로 썼다.\n이렇게 하면 divCapturingFloat는 DOM에서 삭제되어 보이지 않지만 이벤트 핸들러는 그대로 호출이 된다.<br /></p>\n<p>즉, 전달 경로 중 DOM이 수정되어도 이벤트 핸들러 호출은 변경이 없다는 걸 알 수 있다.</p>\n<h3 id=\"이벤트-전달-세-단계\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%EB%8B%AC-%EC%84%B8-%EB%8B%A8%EA%B3%84\" aria-label=\"이벤트 전달 세 단계 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 전달 세 단계</h3>\n<ul>\n<li><b>캡처링 단계</b>: 이벤트가 발생한 대상의 부모들을 window 객체부터 시작해 순서대로 호출한다. 부모가 캡처링으로 정의되어 있다면 이벤트가 target에 도달하기 전에 호출되어야 한다.</li>\n<li><b>대상 단계</b> : 이벤트가 target에 도달했을 때 버블링 할 것인지 정할 수 있고, 만약 버블링 하지 않을거라면 이후 버블링 단계는 생략된다.</li>\n<li><b>버블링 단계</b> : 다시 이벤트 대상부터 tree를 따라서 부모 DOM 요소를 따라 이벤트 핸들러를 처리</li>\n</ul>\n<p>이벤트 델리게이션 패턴은 캡처링(부모부터 시작)에서 먼저 이벤트를 잡아서 처리하면 성능상으로 조금 더 효율적으로 구현할 수 있다.<br />\n이래서 예로부터 부모님 말씀을 잘 들으면 자다가도 콩고물이 떨어진다는 말이 있나보다!<br /></p>\n<p>하지만 구버전 브라우저에선 캡처링을 지원 안 할수도 있다고 하는데.. <br />이제 책이 출간된지 꽤 되었으니까 대부분 되지 않을까 싶다~</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>속깊은 자바스크립트 (양성익 저)</li>\n</ul>","fields":{"slug":"/posts/designpattern_1","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/"]},"frontmatter":{"date":"2020-01-11T15:25:39.169Z","description":"속깊자 5장 디자인패턴 그 첫번째 포스팅! 5.1과 5.2 내용인 모듈패턴과 이벤트 델리게이션 패턴에 대해 정리해보았다","tags":["web","javascript","frontend"],"title":"속깊은 JavaScript - 디자인패턴 1탄"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/designpattern_1"}}}