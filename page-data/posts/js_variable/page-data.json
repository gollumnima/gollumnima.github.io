{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js_variable","webpackCompilationHash":"6171aaa0fcef9ed110eb","result":{"data":{"markdownRemark":{"id":"a75bd0f7-c757-53f6-ba0f-4ec1fb55e4b3","html":"<p>본 포스팅은 양성익님의 속깊은 Javascript를 읽고 정리해본 글입니다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/61d15760-289c-11ea-bf43-87ed2aca4d7c/image.png\" alt=\"image.png\"></p>\n<p>변수에 대해선 위코드 1주차때 한번 정리한적이 있는데, 속깊은 자바스크립트(이하 속깊자) 3장 내용이 마침 변수에 대한 거라서 다시한번 정리 고고!<br />\n지난번 포스팅은 스크롤을 좀만 내리면 링크를 걸어놨다~</p>\n<h2 id=\"자바스크립트-기본형과-typeof\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%B3%B8%ED%98%95%EA%B3%BC-typeof\" aria-label=\"자바스크립트 기본형과 typeof permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 기본형과 typeof</h2>\n<p>자바스크립트의 기본형 변수에는 여섯 가지가 있는데</p>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>undefined</li>\n<li>null</li>\n<li>symbol</li>\n</ul>\n<p>위의 것들이 기본형 변수이다.<br /></p>\n<p>JS는 이러한 기본형 변수들과 Object를 기초로 하는 객체들로 구성되는데, 특정 변수가 어떤 형태인지 확인하는 연산자로 typeof 를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof true // boolean\ntypeof undefined // undefined\ntypeof null // object</code></pre></div>\n<p>희한하게 null의 type을 살펴보면 object이다.<br />\n자바스크립트 세상에선 null이 기본형으로 구분 되어있지만 왜 type은 object일까?<br />\nJS가 개발되었을 당시, 타 언어들과 마찬가지로 null이면 0이라는 값을 가지는 객체로 취급해서 개발을 했는데\ntypeof null의 결과값을 null로 바꿔버리면 이미 만들어진 웹페이지들에 영향을 주기 때문에 결국 수정은 안했다는 소문이..</p>\n<h2 id=\"new-string과--string의-차이\"><a href=\"#new-string%EA%B3%BC--string%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"new string과  string의 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>new String(\"\")과 \"\", String(\"\")의 차이</h2>\n<p>이게 뭔지 알아보기 전에 먼저 instanceof에 대해 알아보자.</p>\n<p><code class=\"language-text\">왼쪽이 instanceof 오른쪽이니</code></p>\n<p>윗줄의 코드처럼 보통 두 개의 인자를 받으며, 왼쪽에 받는 인자가 오른쪽에 받는 인자의 인스턴스인지 확인하고 맞으면 true, 아니라면 false를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Macaron (name, flavour) {\n  this.name = name;\n  this.flavour = flavour;\n}\n\nlet gift = new Macaron(&quot;veryVeryStrawBerry&quot;, &quot;strawberry&quot;);\n\nconsole.log(gift instanceof Macaron); // true\nconsole.log(gift instanceof Object); // true\nconsole.log(typeof gift); // &#39;object&#39;</code></pre></div>\n<p>여기서 알아둬야 할 점은 instanceof는 기본형에 대해선 동작하지 않는다는 점!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(true instanceof Boolean); // false\nconsole.log(22 instanceof Number); // false\nconsole.log([0,1,2] instanceof Array); // true</code></pre></div>\n<p>왜냐? 배열을 생성하는 표현식은 내부적으로 new Array()와 같은 형태를 취하기 때문\nstring도 한번 확인해볼까?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const color1 = new String(&#39;blue&#39;)\nconst color2 = &quot;blue&quot;\n\nconsole.log(color1); // [String: &#39;blue&#39;]\nconsole.log(color2); // &#39;blue&#39;\nconsole.log(color1 === color2); // false\nconsole.log(color2 instanceof String) // false\nconsole.log(color2 instanceof Object) // false</code></pre></div>\n<p>color1과 color2는 똑같은 파랑이지만 완전히 같진 않다.\n물론 === 말고 느슨한 비교를 하면 동일하다고 나오긴 하지만, 약간 생긴것도 다르다.\n그래서 일반적인 string이 String 클래스의 인스턴스가 될수없다.</p>\n<p>근데 기가 막힌건 이거다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(color1.constructor === String) // true\nconsole.log(color2.constructor === String) // true</code></pre></div>\n<p>color2의 constructor가 String이라고..? String의 인스턴스는 아니였는데 얘 뭐지…<br />\n얘의 생성자가 String인 이유는 color2.constructor를 생성할때 내부적으로 형변환이 일어나는데 그 다음에 constructor에 접근하기 때문이라고 한다.</p>\n<p>이게 내부 스크립트상 돌아가는 내용에 대해선 책에 자세히 나와있다. 책 사세요~</p>\n<h2 id=\"글로벌-변수\"><a href=\"#%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98\" aria-label=\"글로벌 변수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글로벌 변수</h2>\n<p>사실 글로벌 변수를 쓰는걸 지양하기 위해 자바스크립트에서 let과 const가 나오게 됐는데\n왜 글로벌 변수를 쓰는게 위험한지 지금부터 알아보자!</p>\n<p>일단 JS는 웹에서 쓰인다는 특수성을 가지고 있고, 웹과 다른 애플리케이션들의 차이점에는</p>\n<ul>\n<li>소스와 데이터의 공개성과 다양한 라이브러리 등 외부 소스 활용</li>\n<li>비동기 로직과 이벤트 기반 처리</li>\n<li>PC부터 모바일까지 다양한 브라우징 환경</li>\n</ul>\n<p>이렇게 세 가지가 있는데, 지금부터 글로벌 변수를 쓰면 안되는 이유와 함께 특징을 살펴보자</p>\n<p>첫번째와 두번째 이유로 글로벌 변수를 쓰게 되면 충돌이 나게 된다.<br />\n세번째 이유는! 변수 메모리 관리 차원에서 쓰지 않기.<br />\n웹 페이지가 떠 있는 한 모든 글로벌 변수가 메모리에 상주해서 컴퓨팅자원이 소모된다.<br />\n여기서 나오는 개념이 바로 garbage collection이다.</p>\n<h3 id=\"garbage-collection\"><a href=\"#garbage-collection\" aria-label=\"garbage collection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Garbage Collection</h3>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/db9f2860-291e-11ea-9558-a369eb307b94/image.png\" alt=\"image.png\"></p>\n<p>자바스크립트는 변수의 메모리 관리 전략으로 자바의 garbage collection을 사용한다.<br />\n그래서 해당 변수를 참조하는 다른 변수나 함수가 있다면 메모리에서 해제하지 않는다.<br />\nJS에서 딱 한번만 순차적으로 실행되고 다시 호출될 일이 없으면 글로벌 변수들은 자신을 참조하는 다른 변수나 함수가 없어서 메모리에서 해제쓰~</p>\n<p>하지만 JS는 이벤트 콜백 함수가 많이 사용되서 글로벌 변수는 하나 이상의 함수에서 참조할 확률이 높다.\n또, 동적 변수 참조가 가능해서 하위 스코프가 살아있다면 상위 변수들도 계속 참조할 수 있는 상태로 남아 있게 된다.</p>\n<p>그래서 모바일 브라우저의 메모리 사용을 원활하게 하기 위해 잠시 사용할 변수는 로컬변수로 현재 스코프에 올려서 사용하고, 사용 안 할 때는 해제하는 게 좋다.</p>\n<h2 id=\"window-객체\"><a href=\"#window-%EA%B0%9D%EC%B2%B4\" aria-label=\"window 객체 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window 객체</h2>\n<p>다른 언어와 다르게 자바스크립트는 글로벌 영역도 하나의 변수로 정의해서 사용하고 있다.\n이 글로벌 영역은 window 객체가 관장하고 있는데, 과연 무엇일까! 이번 기회에 한번 제대로 알아보자.</p>\n<p>먼저 Global Object는 어떠한 컨텍스트가 실행되기 전에 먼저 생성 된다.<br />\n생성자가 없어서 new로 생성할 수 없으며, 함수로 호출할 수도, 프로토타입도 없다.<br />\nHTML DOM환경에서 이 객체는 window 속성을 가지고 있으며 이게 바로 Global Object 그 자체!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6da75090-2922-11ea-938b-4127dfc5d23f/image.png\" alt=\"image.png\"></p>\n<p>이렇게 재귀적인 패턴도 엿볼 수 있다.</p>\n<h2 id=\"글로벌-변수-선언-방법\"><a href=\"#%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%A9%EB%B2%95\" aria-label=\"글로벌 변수 선언 방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글로벌 변수 선언 방법</h2>\n<p>글로벌 변수 선언방법은 아래의 네 가지 방법이 가장 대표적이라고 한다.</p>\n<ul>\n<li>글로벌 스코프에서 var 써서 변수 선언</li>\n<li>상위 스코프에서 같은 변수명으로 선언되지 않고 var없이 바로 변수 사용</li>\n<li>window 객체가 재건언되지 않은 스코프에서 window.global과 같이 속성 추가</li>\n<li>window 객체가 재선언되지 않은 스코프에서 window[“global”]과 같이 속성 추가</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/494bf2d0-292e-11ea-aef0-05e32caeab10/image.png\" alt=\"image.png\"></p>\n<p>선언자 없으면 변수 선언 못할줄 알았는데 되네? 신기신기</p>\n<h2 id=\"글로벌-변수-선언-방법의-차이\"><a href=\"#%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%A9%EB%B2%95%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"글로벌 변수 선언 방법의 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글로벌 변수 선언 방법의 차이</h2>\n<p>이건 지난번 포스팅에 써 놓은 내용을 참고하면 좋다.\n지난포스팅이 궁금하다면 <a href=\"https://gollumnima.github.io/posts/wecode1_4_TIL_js/\">여기 클릭</a>!!!</p>\n<p>급하게 끝내는 것 같지만.. 정리하자면!</p>\n<ul>\n<li>다른언어에서처럼 자바스크립트에서도 글로벌변수 사용 자제하자</li>\n<li>window객체는 글로벌 스코프의 변수들을 속성으로 가지고 있다</li>\n<li>선언자 없이 변수 선언시 글로벌 변수가 될 위험성이 있다</li>\n<li>스코프가 생성되면 선언자 하나에 변수들을 정의하는게 좋다</li>\n<li>글로벌 변수 사용을 최소화하기 위해 클로저나 모듈패턴을 사용하자</li>\n<li>상위 스코프에 있는 변수나 속성의 속성을 여러번 접근하는 경우 로컬 변수에 할당해서 사용하자</li>\n</ul>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>속깊은 Javascript(양성익 저)</li>\n</ul>","fields":{"slug":"/posts/js_variable","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/"]},"frontmatter":{"date":"2019-12-28T15:14:39.169Z","description":"지난번 1,2장 정리에 이어 속깊은 자바스크립트 3장을 정리해보았다. 자바스크립트에서 가장 기본적이면서도 필수적인 변수에 대한 글.","tags":["web","javascript","frontend"],"title":"속깊은 JavaScript - 자바스크립트의 변수 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/js_variable"}}}