{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/nodeJS_crawling","webpackCompilationHash":"25d9316762a3a654a790","result":{"data":{"markdownRemark":{"id":"538c3ccc-d7ba-50cc-91a7-d89ce72123a4","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/6b38e640-0931-11ea-9719-7d092f99b44c/image.png\" alt=\"image.png\"></p>\n<p>위코드에 있다보면 다양한 세션들이 많이 열린다.<br />\n선택과 집중을 강조하시기 때문에 모든 세션들은 선택사항 이지만!!!<br />\n이날은.. 죽일놈의 호기심 때문에 선택과 집중을 포기하기로 했다.</p>\n<h2 id=\"crawling\"><a href=\"#crawling\" aria-label=\"crawling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Crawling</h2>\n<p>옛날엔 html안에 모든 데이터를 심은 상태로 페이지를 만들었기 때문에 크롤링이 쉬웠는데<br />\n요즘은 SPA로 페이지 작업을 많이들 하기 때문에 크롤링이 쉽지가 않다.<br />\n그래서 팬텀 JS나 셀레늄 같은걸 써서 비동기로 처리해서 크롤링을 한다고 하는데..<br />\n이날 우리의 목표는 node.js를 이용해 크롤링 하고, 몽고 db에 넣는 것이었다.</p>\n<h2 id=\"nodejs-란\"><a href=\"#nodejs-%EB%9E%80\" aria-label=\"nodejs 란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js 란?</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/0d122850-0932-11ea-9e05-cf069c31c421/image.png\" alt=\"image.png\"></p>\n<p>node.js는 언어도, 프레임워크도, 라이브러리도 아니다. JavaScript Runtime 환경이다.<br />\n더 간단히 말하자면 백앤드 시스템이 자바스크립트에서도 돌아갈 수 있도록 도와주는 것!<br />\n원래 node.js에서 ES6 문법이 적용이 안 됐었는데 업글 되고 node 12버전부터 최신문법 적용된다!</p>\n<p>여튼 node에서의 require이 import와 같다고 한다.</p>\n<h2 id=\"도전-클래스101-크롤링하기\"><a href=\"#%EB%8F%84%EC%A0%84-%ED%81%B4%EB%9E%98%EC%8A%A4101-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0\" aria-label=\"도전 클래스101 크롤링하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도전! 클래스101 크롤링하기</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/a090a430-0932-11ea-aa94-f3699ad0167a/image.png\" alt=\"image.png\"></p>\n<p><br />오늘의 목표는 클래스101의 카테고리 정보 크롤링하기!<br />\n카테고리가 어딨냐하면… 클래스101 사이트에서 스크롤을 좀 더 내려보면</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c568dca0-0932-11ea-9e05-cf069c31c421/image.png\" alt=\"image.png\"></p>\n<p>굉장히 어중띈 곳에 카테고리 정보가 뙇!!</p>\n<p>저 카테고리 정보를 가져오려면 먼저 개발자도구를 열고…<br />\n네트워크탭의 XHR눌러서 body에 categorysummarylist 써잇는 쿼리 복붙해야 한다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/1357e190-0933-11ea-aa94-f3699ad0167a/image.png\" alt=\"image.png\"></p>\n<p>신기한건 endpoint가 전부 graphql 한 개로 되어있다는 것…!<br />\n여튼 이게 중요한 게 아니고..!<br />\n스크롤을 내려 Request Payload 에 내가 원하는 정보가 있는걸 확인하고 복붙 고고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const axios = require(&#39;axios&#39;);\n\n// axios.get(&#39;https://class101.net/&#39;).then((response)=&gt;{\n//     console.log(response)\n// })\n\naxios.post(&#39;https://gql-prod.class101.net/graphql&#39;, {\n    operationName:&quot;CategorySummaryList&quot;,\n    variables:{&quot;categoryFilter&quot;:{&quot;isHide&quot;:false},&quot;offset&quot;:0,&quot;limit&quot;:9999},\n    query:  `fragment CategorySummary on Category {\n             _id\n             firestoreId\n             title\n             iconUrl\n             __typename\n            }\n\n                query CategorySummaryList($categoryFilter: PreCategoryFilter!, $limit: Int, $offset: Int) {\n                    categories: getCategories(categoryFilter: $categoryFilter, limit: $limit, offset: $offset) {\n                      ...CategorySummary\n                       __typename\n                            }\n                        }\n               `\n\n\n}).then((response)=&gt; {\n    console.log(response.data)\n})</code></pre></div>\n<p>시간 관계상 node.js의 문법 및 코드 한줄한줄을 이해할 수 없었기 때문에<br />\n일단 주어진 양식에 개발자도구에서 긁어온 정보를 복붙 해보았다!</p>\n<h3 id=\"여기서-잠깐\"><a href=\"#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9E%A0%EA%B9%90\" aria-label=\"여기서 잠깐 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여기서 잠깐!</h3>\n<p>node.js 에서 <code class=\"language-text\">node 경로</code>를 입력하면 콘솔창을 사용할 수 있다.<br />\n나는 src디렉토리 아래의 craw파일의 콘솔을 보기 위해 <code class=\"language-text\">node src/craw</code>를 입력해봄<br /></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/395673e0-0549-11ea-ac63-55a9515c3308/image.png\" alt=\"image.png\"></p>\n<p>콘솔로그에 response를 쳐보면 위와같이 뜨고</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/e20b0a60-0548-11ea-8b36-0500379121cf/image.png\" alt=\"image.png\"></p>\n<p>콘솔로그에 response.data 쳤을땐 위와깉이 뜬다.</p>\n<p>마지막 줄 콘솔찍는 부분을 JSON.stringify로 받아보자.</p>\n<p><code class=\"language-text\">}).then((response)=&gt; { console.log(JSON.stringify(response.data, null,2)) })</code>\n이렇게 하면..!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8707faa0-0549-11ea-ac63-55a9515c3308/image.png\" alt=\"image.png\"></p>\n<p>오오 씐기씐기!!\ntitle에 내가 원하는 카테고리명들이 뙇!!!</p>\n<h2 id=\"mongodb-설치하기\"><a href=\"#mongodb-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"mongodb 설치하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MongoDB 설치하기</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/93b12170-0934-11ea-8b5e-01a0e8eb699a/image.png\" alt=\"image.png\"></p>\n<p>노드도 초록, 몽고도 초록초록 친환경적이고 좋군~</p>\n<p>일단 <a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\n\">공식문서</a> 보고 터미널에서 몽고디비와 친구들을 설치해보았다.<br />\n(아래는 맥 명령어 기준입니다.)<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew tap mongodb/brew\nbrew install mongodb-community@4.2\n// 위의 두개 설치하고\nbrew services start mongodb-community\n// 이걸로 실행</code></pre></div>\n<h3 id=\"아-몽고디비-컴파스도-깔아줍니다-검색해서-다운고고\"><a href=\"#%EC%95%84-%EB%AA%BD%EA%B3%A0%EB%94%94%EB%B9%84-%EC%BB%B4%ED%8C%8C%EC%8A%A4%EB%8F%84-%EA%B9%94%EC%95%84%EC%A4%8D%EB%8B%88%EB%8B%A4-%EA%B2%80%EC%83%89%ED%95%B4%EC%84%9C-%EB%8B%A4%EC%9A%B4%EA%B3%A0%EA%B3%A0\" aria-label=\"아 몽고디비 컴파스도 깔아줍니다 검색해서 다운고고 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아!! 몽고디비 컴파스도 깔아줍니다. 검색해서 다운고고!</h3>\n<p>아래의 화면은 몽고디비 컴파스로 보이는 화면. 약간 포스트맨의 역할을 하는 것 같다</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6f71ac10-054e-11ea-9105-53a6223ef9ce/image.png\" alt=\"image.png\"></p>\n<p>오 신기신기!!!!!!!<br />\n일단 이번 포스팅은 이게 끝이다 ㅋㅋㅋㅋ</p>\n<p>지난번엔 파이썬으로 크롤링도 해보았고, 이번엔 node.JS 도전!!!<br />\n나중에 좀 더 파보고.. 위코드에서 했던 1차 프로젝트를 한번 손보고싶닼ㅋㅋ<br />\n1년 안에 할 수 있겠지????</p>\n<p>일단 급한건 리액트니깐.. 리액트부터 열심히 파보자. 아자아자!!<br /></p>\n<h2 id=\"불코딩열코딩빡코딩죽코딩\"><a href=\"#%EB%B6%88%EC%BD%94%EB%94%A9%EC%97%B4%EC%BD%94%EB%94%A9%EB%B9%A1%EC%BD%94%EB%94%A9%EC%A3%BD%EC%BD%94%EB%94%A9\" aria-label=\"불코딩열코딩빡코딩죽코딩 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔥불코딩!열코딩!빡코딩!죽코딩!🔥</h2>\n<p>지난번 파이썬 크롤링 포스팅이 궁금하다면? <a href=\"https://gollumnima.github.io/posts/wecode6_2TIL_crawling\">여기</a> 클릭</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>위코드 node.js 크롤링 세션</li>\n</ul>","fields":{"slug":"/posts/nodeJS_crawling","tagSlugs":["/tag/node/","/tag/crawling/","/tag/wecode/","/tag/backend/","/tag/위코드/"]},"frontmatter":{"date":"2019-11-17T21:36:23.169Z","description":"지난 번에 python에서 beautiful soup을 이용해서 크롤링을 해보았는데, 이번엔 node.js를 이용해 크롤링하고 mongoDB에 저장하는 걸 도전!!! 노드알못이라 정확한 설명은 없다, 과정만 적었을 뿐! 자세한 설명은 언제가 될지 모를 다음번 포스팅을 기약하며..","tags":["node","crawling","wecode","backend","위코드"],"title":"node.js 를 이용해서 크롤링 도전!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/nodeJS_crawling"}}}