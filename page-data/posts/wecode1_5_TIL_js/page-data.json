{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode1_5_TIL_js/","webpackCompilationHash":"63fc8c23cc44a212da6e","result":{"data":{"markdownRemark":{"id":"778efdd9-fff6-5e04-a695-330c76b99399","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/21b05e00-b656-11e9-98df-8b92d767b097/image.png\" alt=\"image.png\"></p>\n<p>화살표 함수만은 피하고 싶었는데.. 위코드 2일차에 마주쳤다…☆\n어차피 나중엔 계속 쓰게 될텐데 지금 정리해야 마음이 편해질것 같아서 정리해봅니다~~</p>\n<blockquote>\n<p>고통을 즐기는 개발자가 되자!</p>\n</blockquote>\n<hr>\n<h2 id=\"화살표함수\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98\" aria-label=\"화살표함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표함수</h2>\n<p><em>그냥 함수 있는거 쓰면 되는데.. 화살표 함수. 대체 왜 쓸까?</em></p>\n<ul>\n<li>ES6 문법이라서\n-js를 표준화하는 ECMA Script의 버전이 벌써 10까지 나왔다네요… 세상에마상에\n-대세를 따르는 개발자가 됩시다! 지금은 화살표가 어색할지 몰라도 나중엔 디폴트값이 될지도…</li>\n<li>코드가 엄청나게 짧아진다\n-중괄호, 엔터 없이도 => 이 화살표만 있으면 되니까 식이 좀 더 깔끔쓰!</li>\n<li>멋있어 보인다\n-멋에 죽고 멋에 사는 개발자라면 화살표함수를 쓰시오~ㅋㅋ</li>\n</ul>\n<p> 화살표 함수를 이번기회에 제대로 정리해야지!! 하고 마음 먹었으나…\n예시 위주로만 갈게요ㅠ\n화살표 함수에 대해서는 Baby Tiger님이 정리를 잘 해놨으니 링크 드릴게요 :)\n<a href=\"https://babytiger.netlify.com/posts/arrow-function/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://babytiger.netlify.com/posts/arrow-function/</a></p>\n<h3 id=\"화살표-함수-적용--인자가-없을때\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%97%86%EC%9D%84%EB%95%8C\" aria-label=\"화살표 함수 적용  인자가 없을때 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수 적용 : 인자가 없을때</h3>\n<p>들어가기 앞서.. 한 가지 덧붙이자면!!! 화살표 함수는 무조건 익명함수에요.\n<code class=\"language-text\">let</code>이나 <code class=\"language-text\">const</code>같은 선언자로 선언하는 함수 표현식으로 작성해주세용\n자 그럼 1번 예시!!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> function macaron(){\n  return &#39;달콤해~&#39;\n}</code></pre></div>\n<p>이랬던 함수가…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const macaron = () =&gt; &#39;달콤해~&#39;</code></pre></div>\n<p>일반 함수식과 비교해보면 중괄호와 return 대신 => 이 화살표를 쓴 걸 알수있져!\n예시의 식처럼 한줄짜리 식들은 중괄호를 생략할 수 있어요~\n또한 함수이름과 소괄호 사이에 = 을 써서 함수를 정의한다는 점도 알아두세요!</p>\n<h3 id=\"화살표-함수-적용--인자가-하나\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%ED%95%98%EB%82%98\" aria-label=\"화살표 함수 적용  인자가 하나 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수 적용 : 인자가 하나</h3>\n<p>이번엔 인자가 하나일 경우를 살펴볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const a = function square(y) {\n  return y * y\n}</code></pre></div>\n<p>이랬던 함수가…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const square = y =&gt; y*y</code></pre></div>\n<p> 이렇게 한 줄로 줄어들었어요! 개이득!!\n위에서 예시로 든 제곱 함수보다 식이 더 복잡해질때 화살표함수를 쓰는게 유용하겠죠?\n인자가 하나일땐 괄호 생략이 가능한데, 두 개 이상일때부턴 괄호를 꼭꼭 써주세요!</p>\n<h3 id=\"화살표-함수-적용--인자가-둘\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EB%91%98\" aria-label=\"화살표 함수 적용  인자가 둘 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수 적용 : 인자가 둘</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function plus(a,b) {\n  return `${a} 더하기 ${b}는 ${a+b}입니다`\n}</code></pre></div>\n<p>이랬던 식을 화살표 함수에 적용하면…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const plus = (a,b) =&gt;`${a} 더하기 ${b}는 ${a+b}입니다`</code></pre></div>\n<p>이렇게 뙇! 인자가 두개라서 괄호를 붙여줬어요~~</p>\n<p>여기서 잠깐, <code class=\"language-text\">${}</code>&#x3C;= 이 달러표시는 뭘까요~얘도 화살표 함수처럼 ES6문법이에요.</p>\n<ul>\n<li>template literal : 따옴표 대신 빽틱(1 옆의 것)을 이용해 문자열을 표기하는 방법. 빽틱 안에 ${}를 이용해 값을 표기할 수 있음.\n(처음엔 빽틱이 빽티기인줄 알고 뻥튀기가 생각났는데… back tick.. 영어였슴다…☆)</li>\n</ul>\n<p>이렇게 얘기하면 뭔 말인지 모르겠죠? 예시를 들어볼게요~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const plus = (a,b) =&gt;a+ &#39; 더하기 &#39; + b+&#39;는 &#39;+a+b+&#39;입니다&#39;</code></pre></div>\n<p>아까 위에서 만든 함수의 리턴값을 일반적인 string을 나타내는 형식으로 써봤어요.\ntemplate literal을 이용하면 전체를 빽틱으로 감싸고 대입이 필요한 값에만 ${}를 씌워주면 되는데, 이렇게 쓰니 참 복잡하죠? 편하게 갑시다~~ </p>\n<h3 id=\"화살표-함수-적용--array-method\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--array-method\" aria-label=\"화살표 함수 적용  array method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수 적용 : Array Method</h3>\n<p>가장 작은 숫자를 찾는 함수를 만들어 보았어요. 최대한 직관적이게 풀어볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [42,1,&#39;a&#39;,&#39;z&#39;,100,28,&#39;맛있다&#39;]\nfunction findSmall(arr){\n  let temp = []\n  let answer = &#39;&#39;\n  for(let i=0; i &lt; arr.length; i++) {\n    if(typeof arr[i] === &#39;number&#39;) {\n      temp.push(arr[i])\n    }\n  }\n  let min = temp[0]\n  for(let j=0; j &lt; temp.length; j++) {\n    if(min &gt; temp[j]) {\n      min = temp[j];\n    }\n  }\n  return min;\n}\nconsole.log(findSmall(arr)) // 100</code></pre></div>\n<p>첫번째 for문에서 숫자인지를 걸러주고, 두번째 for문에선 숫자들의 대소비교를 통해 답을 냈어요.</p>\n<p>자… 그럼 method로 아주 간단하게 풀어봅시다. 놀라지 마세요!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const findSmall = () =&gt; arr.filter(x=&gt;typeof x === &#39;number&#39;).sort((a,b)=&gt;a-b)[0]\n\nconsole.log(findSmall(arr)) // 100</code></pre></div>\n<p>저 긴 식이 이렇게나 짧게 줄어들었어요!\n저는 여기서 array method 중에 하나인 <code class=\"language-text\">filter</code>를 사용했는데요.\n여기서 filter는 주어진 조건에 맞는 애들만 딱 걸러주는 역할을 하고, sort 함수는 작은 숫자에서 큰 숫자 순으로 정렬을 해주는 역할을 했어요.</p>\n<p>예시를 하나 더 들어볼게용\n문제의 출처는 위코드 입니다 ㅎ 실은 제가 이걸 노가다방식으로 풀었기 때문에 블로그에 정리하면서 다시 한번 풀어보고 싶었어요!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//dates=[&#39;2019-03-21&#39;, &#39;2019-04-21&#39;, &#39;2019-05-21&#39;]\n\n//리턴값을 이렇게 바꾸시오.\n[&#39;2019년 03월 21일&#39;, &#39;2019년 04월 21일&#39;, &#39;2019년 05월 21일&#39;]</code></pre></div>\n<p>처음에 푼 식을 먼저 공개할게요.. 완전 노가다에요…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let formatDate = dates =&gt; Array(`${dates[0].split(&#39;-&#39;)[0]}년 ${dates[0].split(&#39;-&#39;)[1]}월 ${dates[0].split(&#39;-&#39;)[2]}일`,`${dates[1].split(&#39;-&#39;)[0]}년 ${dates[1].split(&#39;-&#39;)[1]}월 ${dates[1].split(&#39;-&#39;)[2]}일`,`${dates[2].split(&#39;-&#39;)[0]}년 ${dates[2].split(&#39;-&#39;)[1]}월 ${dates[2].split(&#39;-&#39;)[2]}일`)</code></pre></div>\n<p>이걸 다시 제대로.. <code class=\"language-text\">map</code>을 이용해 묶어보겠슴다\n사실 계속 어떻게 할지 헤매다가 같은 기수 순규님의 도움으로 해결쓰…☆</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let formatDate = arr =&gt; {  //1번\n  return arr.map(x =&gt; { //2번\n    let temp = x.split(&#39;-&#39;) //3번\n    return `${temp[0]}년 ${temp[1]}월 ${temp[2]}일` //4번\n  })\n}</code></pre></div>\n<ul>\n<li>1번 : arr에 적용되는 식이 한 줄이 아닐거니까 화살표 뒤에 중괄호와 리턴 쓰기(사실 화살표 함수라 해서 무조건 중괄호 안쓰려고 생각하다 보니 더 안풀렸다 ㅠ)</li>\n<li>2번 : arr에 <code class=\"language-text\">map</code>을 적용해서 각각의 arr의 element들에 적용되는 식 만듬. 여기서 임의의 변수 x란 arr[i]와 동일한 역할</li>\n<li>3번 : x를 split해준 값을 temp에 담는다.(사실 이 과정이 머릿속으로 그려지지 않아서 하드코딩으로 지저분하게 문제를 풀었다ㅜㅜ 담으면 되는거였구나 ㅠㅠ)</li>\n<li>4번 : temp 배열의 0번째, 1번째, 2번째의 데이터를 통해 값을 리턴</li>\n</ul>\n<p>화살표 함수는 여전히 헷갈리는 어려운 녀석이다 ㅜㅜ\n그치만 계속 계속 쓰다보면 늘겠지!! 화살표 함수를 습관화하자!!!</p>\n<h3 id=\"별책부록--커링과-화살표함수\"><a href=\"#%EB%B3%84%EC%B1%85%EB%B6%80%EB%A1%9D--%EC%BB%A4%EB%A7%81%EA%B3%BC-%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98\" aria-label=\"별책부록  커링과 화살표함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>별책부록 : 커링과 화살표함수</h3>\n<p>예전에 커링 정리 하다가 엄청 놀란 식이 있어서 공유해봅니다..☆</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let sum = function(x) {\n  return function(y) {\n    return x+y\n  }\n}\n\nconsole.log(sum(5)(7)) // 12</code></pre></div>\n<p>물론 커링 자체도 굉장히 놀랍고 신기한 기술인데.. 여기에 화살표함수가 더해지면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let sum = x =&gt; y =&gt; x+y\n\nconsole.log(sum(5)(7)) // 12</code></pre></div>\n<p>와우…!!! 놀라움의 연속쓰~~\n커링은 더 나중에 정리해보겠슴다!\n화살표함수가 익숙해지는 그날까지~~~ 모두모두 화이팅</p>\n<h3 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://poiemaweb.com/es6-arrow-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://poiemaweb.com/es6-arrow-function</a></li>\n<li>wecode</li>\n<li>MDN</li>\n</ul>","fields":{"slug":"/posts/wecode1_5_TIL_js/","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/javascript/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-02T23:46:37.121Z","description":"위코드 5일차 js 정리 2탄. ES6 문법 중 나에게 아직도 너무 익숙지 않은 화살표함수에 대해 정리해보았다!","tags":["wecode","codingbootcamp","javascript","위코드"],"title":"wecode 1주차_5일 TIL_화살표함수"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode1_5_TIL_js/"}}}