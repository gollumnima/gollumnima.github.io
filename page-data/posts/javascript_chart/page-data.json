{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript_chart","webpackCompilationHash":"0e2949e6642822848652","result":{"data":{"markdownRemark":{"id":"4dd13043-b381-575e-88b2-5ecc3f0b0288","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/d41e70a0-45c5-11ea-a464-71d1a081527a/image.png\" alt=\"image.png\"></p>\n<h1 id=\"스포주의-위코드-차트문제-아직-안-푼사람은-이-글을-읽지-마씨오\"><a href=\"#%EC%8A%A4%ED%8F%AC%EC%A3%BC%EC%9D%98-%EC%9C%84%EC%BD%94%EB%93%9C-%EC%B0%A8%ED%8A%B8%EB%AC%B8%EC%A0%9C-%EC%95%84%EC%A7%81-%EC%95%88-%ED%91%BC%EC%82%AC%EB%9E%8C%EC%9D%80-%EC%9D%B4-%EA%B8%80%EC%9D%84-%EC%9D%BD%EC%A7%80-%EB%A7%88%EC%94%A8%EC%98%A4\" aria-label=\"스포주의 위코드 차트문제 아직 안 푼사람은 이 글을 읽지 마씨오 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스포주의! 위코드 차트문제 아직 안 푼사람은 이 글을 읽지 마씨오!</h1>\n<p>지금 상콤한게 무지 땡겨서 썸네일은 딸기로!(tmi 사진 고르는데만 5분이 넘게 소요됨)</p>\n<p>wecode repl.it문제들이 계속 업데이트 되고 있는 요즘..<br />\n새로 업뎃된 문제를 풀려면 지난번 안 풀었던 문제를 다시 풀어야하는데…<br />\n보니까 차트문제부터 막혀있어서 차트부터 뚫기 도전!!!</p>\n<p>요 문제는 하이차트 라이브러리를 쓸 때 진짜 유용할 것 같다.<br />\n일찍 알았으면 프로젝트 때 하드코딩 안 해도 됐던건데 아쉽 ㅠㅠ</p>\n<p>문제는 차트 xAxis에 들어가는 categories와 series 데이터에 들어갈 배열을 만드는 것이었다.\ncategories는 그냥 연도를 뽑아내서 빈 배열에 담는 거라서 쉬웠고<br />\n문제는 series였다.</p>\n<p>요구하는 데이터의 구조는 요렇게</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[{\n      name: &#39;react&#39;,\n      data: [ 43934, 52503, 57177, 69658, 97031, 119931 ]\n  }, {\n      name: &#39;angular&#39;,\n      data: [ 24916, 24064, 29742, 29851, 29742, 32490 ]\n  }, {\n      name: &#39;vue&#39;,\n      data: [ null, null, 9988, 22169, 35112, 42452 ]\n}]</code></pre></div>\n<p>배열 안에 객체 안에 name과 data를 분류하는 것이었다. 어디서?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// data.js\nconst data = {\n  result: {\n    ok: true,\n    data: [{\n      year: 2014,\n      react: 43934,\n      angular: 24916\n    }, {\n      year: 2015,\n      react: 52503,\n      angular: 24064\n    }, {\n      year: 2016,\n      react: 57177,\n      angular: 29742,\n      vue: 9988\n    }, {\n      year: 2017,\n      react: 69658,\n      angular: 29851,\n      vue: 22169\n    }, {\n      year: 2018,\n      react: 97031,\n      angular: 29742,\n      vue: 35112\n    }, {\n      year: 2019,\n      react: 119931,\n      angular: 32490,\n      vue: 42452\n    }]\n  }\n}</code></pre></div>\n<p>바로 요기서!</p>\n<p>문제를 풀고있자니 넘나 집중이 안 되는 것.. 딴 짓도 엄청 많이 했다.<br />\n문제에 집중하는 시간보다 딴 짓에 투자한 시간이 더 많았을 듯..? ㅠㅠ</p>\n<p>결국 논리적인 사색을 즐겨하는 누군가의 도움을 받았다 ㅋㅋㅋㅋ ㅠㅠ</p>\n<h2 id=\"데이터-배열-뽑아내기\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%B0%EC%97%B4-%EB%BD%91%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"데이터 배열 뽑아내기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 배열 뽑아내기</h2>\n<p>먼저 data.js에서 값을 뽑아 내야 하는데, 우리가 원하는 정보는 <code class=\"language-text\">data.result.data</code>에 담겨있다.\n이 배열의 길이만큼 for문을 돌리고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const series = (years =&gt; {\n  const react = [];\n  const angular = [];\n  const vue = [];\n\n  for (let i = 0; i &lt; years.length; i++) {\n    const year = years[i];\n    react.push(year.react || null)\n    angular.push(year.angular || null)\n    vue.push(year.vue || null)\n  }\n\n  // 요 밑에서부턴 아래의 코드에...</code></pre></div>\n<p>나였다면 if문을 일일히 썼을텐데 스마트한 누군가는 push 괄호 안에 <code class=\"language-text\">|| null</code>을 추가해서\n해당하는 연도에 데이터가 없다면 null값을 추가해주었다. 와.. 완전 똑똑쓰!</p>\n<h2 id=\"객체와-배열-method의-활용\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%B0%B0%EC%97%B4-method%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\"객체와 배열 method의 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체와 배열 method의 활용</h2>\n<p>위에서 for문을 돌려서 빈 배열이었던 프론트엔드 삼대장들은 값을 가지게 되었다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9ec3a8a0-45c8-11ea-8282-db378fc2babc/image.png\" alt=\"image.png\"></p>\n<p>코드만 있으면 심심하니까 가끔씩 컬러풀한 runJS 캡쳐도 써먹기 ㅋㅋ<br />\n또 한 가지 배운 점! console 찍을 때 객체를 활용하면 눈에 보기 좋다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 위의 코드와 이어집니다.\n  return Object\n    .entries({react, angular, vue})\n    .map(([name, data]) =&gt; ({\n      name, data\n    }))\n\n})(data.result.data);</code></pre></div>\n<h4 id=\"objectentries\"><a href=\"#objectentries\" aria-label=\"objectentries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.entries</h4>\n<p>위에서 콘솔을 객체로 찍은 것처럼 프론트엔드 삼대장들을 객체에 넣어준다음에 entries를 써먹는다.\n그러면 객체였던 값들이 이중배열 형태로 나타나게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  [ &#39;react&#39;, [ 43934, 52503, 57177, 69658, 97031, 119931 ] ],\n  [ &#39;angular&#39;, [ 24916, 24064, 29742, 29851, 29742, 32490 ] ],\n  [ &#39;vue&#39;, [ null, null, 9988, 22169, 35112, 42452 ] ]\n]</code></pre></div>\n<p>바로 요렇게!!\n여기서 우리는 또 map을 돌려줄거다.</p>\n<h4 id=\"map을-돌릴건데-신박한-형태로-돌리기\"><a href=\"#map%EC%9D%84-%EB%8F%8C%EB%A6%B4%EA%B1%B4%EB%8D%B0-%EC%8B%A0%EB%B0%95%ED%95%9C-%ED%98%95%ED%83%9C%EB%A1%9C-%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"map을 돌릴건데 신박한 형태로 돌리기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map을 돌릴건데.. 신박한 형태로 돌리기</h4>\n<p>평소에 map돌릴땐 그냥 el, i로 주는데 배열 형태로 넣어볼거다.<br />\n근데 같은 값이면 비구조화 하면 생략 가능하니까 고대로…</p>\n<p><code class=\"language-text\">name : name</code> 이런식으로 쓸 필요 없이 걍 name 써준다.<br />\n와.. 이렇게 풀리는걸 난 몇 시간동안 끙끙 앓았던가 ㅠㅠ</p>\n<p>코드를 다시 보자면..!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const series = (years =&gt; {\n  const react = [];\n  const angular = [];\n  const vue = [];\n\n  for (let i = 0; i &lt; years.length; i++) {\n    const year = years[i];\n    react.push(year.react || null)\n    angular.push(year.angular || null)\n    vue.push(year.vue || null)\n  }\n\n  return Object\n    .entries({react, angular, vue})\n    .map(([name, data]) =&gt; ({\n      name, data\n    }))\n\n})(data.result.data);</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/6a1da720-45ca-11ea-978a-8d5d2d7b64e3/image.png\" alt=\"image.png\"></p>\n<p>결과는 요로코롬 잘 나오고 있다!<br />\n물론 데이터는 실제와 상이하니 믿지마시오~</p>\n<p>나도 array와 object method를 가지고 노는 사람이 되고 싶다~~~ <br />\n열심히 알고리즘 문제를 풀어봐야 할 것 같다…</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>익명의 천사의 도움</li>\n</ul>","fields":{"slug":"/posts/javascript_chart","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/","/tag/chart/"]},"frontmatter":{"date":"2020-02-02T23:44:49.169Z","description":"어떤 서비스를 하던 간 웬만해선 쓰게 될 차트. 그 중에서도 가장 대중적인 하이차트! 오늘은 자바스크립트로 차트데이터에 들어가는 값을 조작하는 연습문제를 풀어보았다.","tags":["web","javascript","frontend","chart"],"title":"차트데이터에 들어가는 값 조작하기!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript_chart"}}}