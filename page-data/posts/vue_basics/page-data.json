{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/vue_basics","webpackCompilationHash":"0e2949e6642822848652","result":{"data":{"markdownRemark":{"id":"f2a28a6a-1ca5-5007-b857-a6977c46ab5c","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/55567510-3850-11ea-919e-d17b328bab88/image.png\" alt=\"image.png\"></p>\n<h2 id=\"뷰의-특징\"><a href=\"#%EB%B7%B0%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"뷰의 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰의 특징</h2>\n<p>다른건 무조건 노드js 웹팩환경에서 바벨 돌려야 하는데 뷰는 개발환경이 굉장히 유연한 편! <br />\n웹팩을 쓰지 못하는 환경에서도 뷰를 쓸 수 있다.</p>\n<p>또한 뷰는 웹팩기반으로 쓸 필요 없다. 예를 들어..</p>\n<p>ex) 몰빵.html (허선생님이 5분만에 만든 내기용 파일)\n<img src=\"https://images.velog.io/post-images/dooreplay/e482e980-3e72-11ea-965e-d3cc07a32524/image.png\" alt=\"image.png\"></p>\n<p>위와 같이 그냥 html 문서에다가 써도 된다! 리액트처럼 jsx 형식으로 안 써도 된다! <br />\n사실 jsx가 문법상 js도 html도 아니고 그냥 리액트만의 문법, 새로운 언어라고 할 수 있는데,\n뷰에서 통용되는 문법은 html5와 웹 컴포넌트라는 미래용 표준 문법만으로만 만들어져있다!</p>\n<p>문법상 표준이라서 위와 같이 작성해도 parsing error가 나지 않는다!! <br />\n하지만 표준문법에 맞는걸 써야해서 굉장히 제한적이다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/5b21c250-3ea0-11ea-8e00-b9a940f9d458/image.png\" alt=\"image.png\"></p>\n<h2 id=\"리액트와-뷰의-차이\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%99%80-%EB%B7%B0%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"리액트와 뷰의 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트와 뷰의 차이?</h2>\n<p><b>리액트는 1종 면허</b>로 모는 스틱차량과 같다!<br>\n분노의 질주처럼 기어 바꿔가면서 빠르게 운전하고 싶을때 수동이 더 좋은데 마감기한이 시급한 프로젝트에는 리액트가 제격이라고 한다.</p>\n<p><b>뷰는 2종 면허</b>로 모는 오토차량과 같다.<br />\n오토차량은 기어 넣는게 없어서 운전을 처음 시작하는 사람이 몰거나 1종면허를 가지고 있는 사람이 손쉽게 몰 수 있다. 이처럼 초보자가 뷰로 작업을 해도 일정한 수준이 나온다.</p>\n<h2 id=\"설치\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p>npx를 지원 안하기 때문에 글로벌로 깔아야한다.</p>\n<p><b>설치</b> : <code class=\"language-text\">npm install -g @vue/cli</code><br />\n<b>버전확인</b> : <code class=\"language-text\">vue --version</code><br />\n<b>프로젝트 시작</b> : <code class=\"language-text\">vue create 프로젝트명</code><br /></p>\n<p>설치시 manually 를 선택하면 아래와 같은 화면이 뜬다</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/dd9e0a90-3851-11ea-919e-d17b328bab88/image.png\" alt=\"image.png\"></p>\n<p>편의상 캡쳐화면과 같이 설정을 해준다!</p>\n<h2 id=\"서버-켜기\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%BC%9C%EA%B8%B0\" aria-label=\"서버 켜기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 켜기</h2>\n<p>서버 켜기 : <code class=\"language-text\">npm run serve</code> 를 입력하면 8080으로 서버가 들어온다.</p>\n<h2 id=\"폴더구조\"><a href=\"#%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0\" aria-label=\"폴더구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폴더구조</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c9e938c0-3852-11ea-a9df-ed9cb935146f/image.png\" alt=\"image.png\"></p>\n<p>views 폴더가 React에서의 pages,\nstore가 Redux에서 store 역할을 한다.</p>\n<h2 id=\"single-file-component\"><a href=\"#single-file-component\" aria-label=\"single file component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single File Component</h2>\n<p>뷰는 무조건 한 파일은 컴포넌트 하나이다!<br />\n하나의 컴포넌트는 template, script, style 태그로 구성되어 있다.</p>\n<h2 id=\"component-구조\"><a href=\"#component-%EA%B5%AC%EC%A1%B0\" aria-label=\"component 구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component 구조</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n};\n&lt;/script&gt;\n&lt;style scoped lang=&quot;scss&quot;&gt;\n&lt;/style&gt;</code></pre></div>\n<h2 id=\"todo-list-만들기\"><a href=\"#todo-list-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"todo list 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Todo List 만들기</h2>\n<p>들어가기 앞서.. 뷰의 몇 가지 특징 더!</p>\n<ul>\n<li>map 돌리려면 <code class=\"language-text\">v-for</code>를 사용한다.</li>\n<li>key값 주는건 <code class=\"language-text\">v-bind:key=&quot;todo.key&quot;</code></li>\n<li>문자열 쓰려면 이렇게 <code class=\"language-text\">{{todo.msg}}</code></li>\n<li>객체로 뽑아내려면 <code class=\"language-text\">JSON.stringify</code> 써야 한다.</li>\n<li>onClick 대신에 <code class=\"language-text\">@click=&quot;&quot;</code>, 혹은 <code class=\"language-text\">v-on:click</code> 이런식으로!</li>\n<li>value는 <code class=\"language-text\">v-bind:value=&quot;땡땡&quot;</code>으로.. 좀 더 줄이면 <code class=\"language-text\">:value</code> 이렇게!</li>\n<li>뷰는 내부적으로 프록시 혹은 Object.defineProperty 사용하고 있어서 화살표함수 놉!</li>\n<li>뷰는 함수 가지고 상태변경을 하는게 아니라서 setState 안 써도 된다.</li>\n</ul>\n<p>state 값을 바꾸는 예제를 간단히 살펴보자.</p>\n<h3 id=\"state-값-바꾸기\"><a href=\"#state-%EA%B0%92-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"state 값 바꾸기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state 값 바꾸기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;div&gt;\n    {{ isTrue ? &quot;참&quot; : &quot;거짓&quot; }}\n    &lt;button @click=&quot;toggleTrue&quot;&gt;토글쓰&lt;/button&gt;\n    //생략\n  &lt;/div&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n   toggleTrue() {\n      this.isTrue = !this.isTrue;\n  },\n}\n// 생략</code></pre></div>\n<p>라잌 디스. <br />\nthis로 모든게 다 해결쓰!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/5a4fa900-3f13-11ea-b38a-1bc91ac1c098/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/5db01210-3f13-11ea-b229-cfef3ae8f3c5/image.png\" alt=\"image.png\"></p>\n<p>개발자 도구를 열어서 확인해보면 토글쓰를 누를 때마다 state 값이 바뀌는게 보인다.<br />\n물론 chrome extension 중 <code class=\"language-text\">vue.js devtools</code>를 깔아야 확인 가능쓰!</p>\n<h3 id=\"preventdefault-걸어주기\"><a href=\"#preventdefault-%EA%B1%B8%EC%96%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"preventdefault 걸어주기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>preventDefault 걸어주기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;template&gt;\n  &lt;form @submit.prevent=&quot;&quot;&gt;\n      &lt;input type=&quot;text&quot; placeholder=&quot;할일이 뭐가 있을까~&quot;&gt;\n      &lt;button &gt;&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/template&gt;</code></pre></div>\n<p>위와 같이 <code class=\"language-text\">&lt;form @submit.prevent=&quot;&quot;&gt;</code> 라고 써주면 preventDefault가 자동으로 걸린다.</p>\n<h3 id=\"뷰에서-이벤트-관리하기\"><a href=\"#%EB%B7%B0%EC%97%90%EC%84%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"뷰에서 이벤트 관리하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰에서 이벤트 관리하기</h3>\n<p>뷰는 이벤트 중심적으로 설계되어 있다.\n<code class=\"language-text\">emit</code>을 이용해 하위 컴포넌트가 상위 컴포넌트에게 이벤트를 발생 시키는데,\n첫번째 인자론 이벤트가 발생하는 곳, 두번째 인자론 그 이벤트에 담기는 값을 넣어준다. <br /></p>\n<p>emit을 이용해 이벤트를 보내기만 하면 소용이 없고 submit을 써줘야 이벤트를 받을 수 있다.\n하지만 이벤트를 받지 않아도 딱히 에러는 발생하지 않는다.</p>\n<p>아래는 로직이 들어간 CreateTodo.vue 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//CreateTodo.vue\n&lt;template&gt;\n  &lt;form @submit.prevent=&quot;submitTodo&quot;&gt;\n      &lt;input type=&quot;text&quot; placeholder=&quot;할일이 뭐가 있을까~&quot; :value=&quot;text&quot; @keyup=&quot;handleChange&quot;\n      /&gt;\n      &lt;input type=&quot;text&quot; v-model=&quot;person&quot; placeholder=&quot;누가할까?&quot; &gt;\n      &lt;button &gt;확인쓰&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n  data() {\n    return {\n      text: &#39;&#39;,\n      person: &#39;&#39;,\n    };\n  },\n  methods: {\n    submitTodo() {\n      this.$emit(&#39;submit&#39;, {\n        text: this.text,\n        person: this.person,\n      });\n      this.text = &#39;&#39;;\n      this.person = &#39;&#39;;\n    },\n    handleChange(ev) {\n      console.log(ev.target.value);\n      this.text = ev.target.value;\n    },\n  },\n  watch: {\n    //   useEffect와 같은 것~\n    text() {\n      this.$emit(&#39;input&#39;, this.text);\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n\n&lt;/style&gt;</code></pre></div>\n<p>CreateTodo 컴포넌트를 App에서 불러와보면..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//App.vue\n&lt;template&gt;\n  &lt;div&gt;\n    {{ isTrue ? &quot;참&quot; : &quot;거짓&quot; }}\n    &lt;button @click=&quot;toggleTrue&quot;&gt;토글쓰&lt;/button&gt;\n    &lt;CreateTodo @submit=&quot;addTo~o&quot; v-model=&quot;textttt&quot;/&gt;\n    &lt;ul&gt;\n      &lt;li v-for=&quot;todo in todos&quot; v-bind:key=&quot;todo.key&quot;\n      :style=&quot;{ backgroundColor: todo.done ? &#39;blue&#39; : &#39;yellow&#39;}&quot;\n      :class=&quot;{\n        done: todo.done,\n        yeri: todo.person === &#39;예리님&#39;,\n      }&quot;&gt;\n        {{ todo.msg}}\n        {{todo.person}}\n        &lt;button @click=&quot;e =&gt; toggleTodo(todo.key)&quot;&gt;{{todo.done ? &quot;완료쓰&quot; : &quot;완료하기&quot;}}&lt;/button&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport CreateTodo from &#39;@/components/CreateTodo.vue&#39;;\n\nexport default {\n  components: {\n    CreateTodo,\n  },\n  props: {\n    foo: {\n      required: false,\n      type: Number,\n      default() { return 1; },\n    },\n  },\n  // state를 모아놓는 애들을 데이터\n  data() {\n    return {\n      // state를 초기화\n      todos: [\n        { key: 1, msg: &#39;밥먹기&#39;, done: false },\n        { key: 2, msg: &#39;화장실가기&#39;, done: false },\n        { key: 2, msg: &#39;잠자기&#39;, done: false },\n      ],\n      isTrue: true,\n      textttt: &#39;&#39;,\n    };\n  },\n  methods: {\n    toggleTodo(key) {\n      this.todos = this.todos.map(todo =&gt; ((todo.key === key)\n        ? { ...todo, done: !todo.done }\n        : todo));\n    },\n    console(...value) {\n      value.forEach(console.log);\n    },\n    toggleTrue() {\n      this.console(&#39;ddd&#39;);\n      this.isTrue = !this.isTrue;\n    },\n    addTodo({ text, person }) {\n      this.todos = this.todos.concat({\n        key: Date.now(),\n        msg: text,\n        person,\n        done: false,\n      });\n    },\n  },\n};\n&lt;/script&gt;\n&lt;style scoped lang=&quot;scss&quot; &gt;\n$color: #f0f3f6;\nul,li {\n  padding: 0;\n  list-style: none;\n  background-color: $color;\n}\n&lt;/style&gt;</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/470cd1e0-3f1f-11ea-80a2-95d08eb3c8d5/image.png\" alt=\"image.png\"></p>\n<p>위의 코드로 완성된 화면은 이렇게 뙇!<br />\n근데 가운데의 화장실가기와 잠자기는 묶여있는지 뭘 눌러도 둘이 같이 선택이 된다.<br />\n이건 나중에 왜 그런지 원인을 파악해볼 예정쓰..!</p>\n<p>급하게 마무리하는 것 같지만 나는 얼른 나가야하므로..\n다음 기회에 뷰를 쓰게될 일이 생긴다면 더 열심히 정리해볼 생각이다!</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>허선생님의 꿀같은 강의</li>\n</ul>","fields":{"slug":"/posts/vue_basics","tagSlugs":["/tag/web/","/tag/javascript/","/tag/frontend/","/tag/vue/"]},"frontmatter":{"date":"2020-01-24T15:21:49.169Z","description":"유튜브 보면서 to-do list 만드는걸 따라쳐보긴 했는데 그래도 뭔가 부족쓰.. 허선생님의 뷰 강의를 들으면서 다시 개념을 잡아본 포스팅!","tags":["web","javascript","frontend","vue"],"title":"허선생님과 함께하는 Vue 기초"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/vue_basics"}}}