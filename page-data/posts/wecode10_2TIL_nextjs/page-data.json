{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode10_2TIL_nextjs","webpackCompilationHash":"4423d0e3c21e55745f20","result":{"data":{"markdownRemark":{"id":"e5487246-e991-53b3-8358-f71ede6b8c10","html":"<h2 id=\"dynamic-pages\"><a href=\"#dynamic-pages\" aria-label=\"dynamic pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Pages</h2>\n<p>이번 챕터에서는 리액트에서처럼 마찬가지로 router 기능을 써볼건데\n마찬가지로 Next.js에 기본적으로 내장되어 있는 기능이기 때문에 import만 해오면 된다!</p>\n<p>공식문서 주소에 나온 clone해온 파일의 3번째 index.js를 다음과 같이 수정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Layout from &#39;../components/MyLayout&#39;;\nimport Link from &#39;next/link&#39;;\n\nconst PostLink = props =&gt; (\n  &lt;li&gt;\n    &lt;Link href={`/post?title=${props.title}`}&gt;\n      &lt;a&gt;{props.title}&lt;/a&gt;\n    &lt;/Link&gt;\n  &lt;/li&gt;\n);\nexport default function Blog() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;My Blog&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;PostLink title=&quot;Hello Next.js&quot; /&gt;\n        &lt;PostLink title=&quot;Learn Next.js is awesome&quot; /&gt;\n        &lt;PostLink title=&quot;Deploy apps with Zeit&quot; /&gt;\n      &lt;/ul&gt;\n    &lt;/Layout&gt;\n  );\n}</code></pre></div>\n<p>그러면 화면은 이렇게 돻!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9b760a70-e403-11e9-8a8d-f7ea9a766832/image.png\" alt=\"image.png\"></p>\n<p>이제 아래의 list에 있는 글씨들을 클릭했을때 화면 연결을 해주기 위해\npost.js라는 파일을 하나 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRouter } from &quot;next/router&quot;;\nimport Layout from &quot;../components/MyLayout&quot;;\n\nconst Page = () =&gt; {\n    const router = useRouter();\n    console.log(router, &quot;콘솔&quot;)\n\n    return(\n        &lt;Layout&gt;\n            &lt;h1&gt;{router.query.title}&lt;/h1&gt;\n            &lt;p&gt;This is the blog post content.&lt;/p&gt;\n        &lt;/Layout&gt;\n    )\n}\n\nexport default Page;</code></pre></div>\n<p>여기서 router에 무슨 값이 들어가는지 궁금해서 콘솔을 찍어봤다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/55702b00-e403-11e9-af17-f94cdb32d073/image.png\" alt=\"image.png\"></p>\n<p>내부에 다양한 값들이 존재하는데, 이 중에서 나는 query의 title을 갖다 써야 하므로!\n그걸 써준다 ㅋㅋ\n근데 신기한거 발견쓰!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/32e150e0-e404-11e9-b9e2-1ff301bbd93f/image.png\" alt=\"image.png\"></p>\n<p>걍 로컬 3000, 그니깐 메인에서 console을 찍었을 때의 query는 빈 객체지만\n각각의 리스트에 있는 글자를 클릭하면 title 값이 객체 안에 들어가있다1 오오!!<br />\n성호쓰의 추측에 의하면.. Next.js는 SSR이고.. 페이지의 파일명이 곧 path가 되는거니깐\n헤당 페이지에 접근했을 때 비로소 url이 바뀌고 그에 따라 빈 객체에 title이 생긴다는데\n맞는말인것 같다 오오.. 천재쓰 ㅋㅋㅋㅋ</p>\n<p>어찌됐든 useRouter를 통해 우리는 router 객체에 접근할 수 있으며,\n이것은 바로 react HOOK과 같은 효과가 있다는 것!!!</p>\n<h2 id=\"clean-urls-with-dynamic-routing\"><a href=\"#clean-urls-with-dynamic-routing\" aria-label=\"clean urls with dynamic routing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clean URLs with Dynamic Routing</h2>\n<p>이번엔 시작부터 좀 신기하다\n파일이름이 [id].js라니.. 파일에 대괄호가 들어가도 된다니!!!\n여튼 공식문서에 나와있는대로 열심히 쳐준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//[id].js\nimport { useRouter } from &#39;next/router&#39;;\nimport Layout from &#39;../../components/MyLayout&#39;;\n\nexport default function Post() {\n  const router = useRouter();\n\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;{router.query.id}&lt;/h1&gt;\n      &lt;p&gt;This is the blog post content.&lt;/p&gt;\n    &lt;/Layout&gt;\n  );\n}</code></pre></div>\n<p>여튼 파일이름에 [] &#x3C;- 이걸 써준 이상 동적으로 라우팅되게 할 수 있다고 한다.<br />\n괄호 안에 들어가는 id는 page에 의해 제공되는 query param의 이름이 된다고 한다!\n아까 전엔 모두 한 페이지에 들어가게끔 라우팅을 구현했지만..<br />\n이제 각각 서로 다른 페이지에 들어갈 수 있도록 구현해볼 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// index.js\nimport Layout from &#39;../components/MyLayout&#39;;\nimport Link from &#39;next/link&#39;;\n\nconst PostLink = props =&gt; (\n  &lt;li&gt;\n    &lt;Link href=&quot;/p/[id]&quot; as={`/p/${props.id}`}&gt;\n      &lt;a&gt;{props.id}&lt;/a&gt;\n    &lt;/Link&gt;\n  &lt;/li&gt;\n);\n\nexport default function Blog() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;My Blog&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;PostLink id=&quot;hello-nextjs&quot; /&gt;\n        &lt;PostLink id=&quot;learn-nextjs&quot; /&gt;\n        &lt;PostLink id=&quot;deploy-nextjs&quot; /&gt;\n      &lt;/ul&gt;\n    &lt;/Layout&gt;\n  );\n}</code></pre></div>\n<p>다음과 같이 index.js 파일을 바꿔주고…\n그 전에 짚고 넘어가야 할 부분!!<br />\nPostLink를 선언해준 부분을 잘 보면..\nhref는 경로를 나타내고, as는 url bar에 보이는 부분을 나타낸다고 한다.</p>\n<p>as를 지워보면 우리의 url창은 <code class=\"language-text\">http://localhost:3000/p/[id]</code> 이렇게\n화면 또한…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/c3b0bbe0-e410-11e9-8a8d-f7ea9a766832/image.png\" alt=\"image.png\"></p>\n<p>이상해 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ</p>\n<p>router가 어떻게 찍히는지 궁금하니까 또 콘손을 찍어보았다. 궁금쓰!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/53404720-e40d-11e9-91fd-d7aabdfb5f43/image.png\" alt=\"image.png\"></p>\n<p>역시나 아까의 케이스처럼 메인 화면에서는 빈 객체였는데\n리스트의 글자를 누르니 query에 id라는 key와 각 글자라는 value가 생겼다.<br />\n이게 바로 SSR MAGIC-★</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9915ab40-e40e-11e9-855b-c9c70516744a/image.png\" alt=\"image.png\"></p>\n<p>화면은 아까와 똑같다!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/b2d724f0-e40e-11e9-855b-c9c70516744a/image.png\" alt=\"image.png\"></p>\n<p>url은 이렇게 찍히는데 나름 클린한건가?ㅋㅋㅋ<br />\n그 전꺼는 얼마나 드러웠는지 확인하려고 다시 3폴더로 이동하고 서버를 실행해보니..</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f9a6bd00-e40e-11e9-91fd-d7aabdfb5f43/image.png\" alt=\"image.png\"></p>\n<p>진짜 드러운 url이었다 ㅋㅋㅋㅋㅋ</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2b7b3d10-e40f-11e9-91fd-d7aabdfb5f43/image.png\" alt=\"image.png\"></p>\n<p>clean한 url을 만든 기념으로 clean한 이미지 투척!<br />\n내 블로그에서 출처를 안 쓰는 이미지들은 모두 pixabay에서 온 것들이다. 저작권 없는 무료이미지 최고 ㅋㅋ</p>\n<h2 id=\"fetching-data-for-pages\"><a href=\"#fetching-data-for-pages\" aria-label=\"fetching data for pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetching Data for Pages</h2>\n<p>니꼴라스의 무비앱 만들기와 비슷하게 Next.js 공식문서에선 Batman Movie api를 받아오는 연습이 있다.\n지금부터 스타투~~</p>\n<p>먼저 명령어로 라이브러리를 깔아준다. <code class=\"language-text\">yarn add isomorphic-unfetch</code>\n공식문서 index.js에 있는 모든 식을 따라치기 이전, 코드를 약간만 치고 console을 찍어보았다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7f91d2a0-e415-11e9-855b-c9c70516744a/image.png\" alt=\"image.png\"></p>\n<p>콘솔 잘 나오고있고.. 코드는 아래까지만 쳐봤다 일단</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Layout from &#39;../components/MyLayout.js&#39;;\nimport Link from &#39;next/link&#39;;\nimport fetch from &#39;isomorphic-unfetch&#39;;\n\nconst Index = props =&gt; (\n  &lt;Layout&gt;\n    &lt;h1&gt;Batman TV Show&lt;/h1&gt;\n    &lt;ul&gt;\n      {console.log(props, &quot;프롭스&quot;)}\n    &lt;/ul&gt;\n  &lt;/Layout&gt;\n)\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(&#39;https://api.tvmaze.com/search/shows?q=batman&#39;);\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`)\n  return {\n    shows: data\n  }\n}\n\nexport default Index;</code></pre></div>\n<p>props로 들어가는 값을 비동기로 받아와서 json으로 변형한 후 data라고 선언해주는데\n보통 fetch를 쓸 땐 .then으로 연결했던걸 이렇게 변수로 뙇!! 나타내니 더 보기가 편하네?!?\n내가 이해하기론 getInitailProps가 then을 안 써도 fetch에서 바로 데이터를 변수에 넣고 사용할 수 있는듯..? 여튼…</p>\n<p>이제 다시.. 남은 코드를 쳐보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Layout from &#39;../components/MyLayout.js&#39;;\nimport Link from &#39;next/link&#39;;\nimport fetch from &#39;isomorphic-unfetch&#39;;\n\nconst Index = props =&gt; (\n  &lt;Layout&gt;\n    &lt;h1&gt;Batman TV Show&lt;/h1&gt;\n    &lt;ul&gt;\n      {props.shows.map(show =&gt; (\n        &lt;li key= {show.id}&gt;\n          &lt;Link href=&quot;/p/[id]&quot; as={`/p/${show.id}`}&gt;\n            &lt;a&gt;{show.name}&lt;/a&gt;\n          &lt;/Link&gt;\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  &lt;/Layout&gt;\n)\n\nIndex.getInitialProps = async function() {\n  const res = await fetch(&#39;https://api.tvmaze.com/search/shows?q=batman&#39;);\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`)\n  return {\n    shows: data.map(entry =&gt; entry.show)\n  };\n};\n\nexport default Index;</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8fbf8740-e419-11e9-be0b-83e93a051029/image.png\" alt=\"image.png\"></p>\n<p>좋았어… 리스트대로 아주 잘 나오고 있다.<br />\n값이 잘 뜨는건 확인했고.. 새로고침을 한번 해보자. <br />그러고 터미널과 브라우저의 콘솔창을 확인해본다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/7714b840-e41a-11e9-be0b-83e93a051029/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/8572d9d0-e41a-11e9-8a8d-f7ea9a766832/image.png\" alt=\"image.png\"></p>\n<p>브라우저는 아주 깨-끗.\n터미널에는 내가 공식문서에 입력된 콘솔처럼 data의 length인 10이 잘 찍힌다.\n왜냐.. 서버에서 페이지를 랜더링 했기 때문이다.\n우리는 이미 데이터를 가지고 있으니깐 client에서 다시 fetch를 쓸 이유는 없는것… 이라는데</p>\n<p>아무래도 영 찝찝해서 다시 제대로 정리해보았다!</p>\n<h2 id=\"getinitialprops줄여서-gip\"><a href=\"#getinitialprops%EC%A4%84%EC%97%AC%EC%84%9C-gip\" aria-label=\"getinitialprops줄여서 gip permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getInitialProps(줄여서 GIP)</h2>\n<ul>\n<li>비동기 정적 메소드 (async static method)</li>\n<li>초기에 페이지가 로드될때 GIP은 오직 서버에서만 실행쓰</li>\n<li>link Component나 routing API를 통해 다른 루트로 접근시 오직 client에서만 실행쓰</li>\n<li>무조건 객체 리턴쓰</li>\n</ul>\n<p>궁금해서 찍어본 콘솔라시도~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Index.getInitialProps = async function() {\n  const res = await fetch(&#39;https://api.tvmaze.com/search/shows?q=batman&#39;);\n  console.log(res, &quot;응답혀&quot;)\n  const data = await res.json();\n  console.log(data, &quot;데이터여~&quot;)\n  console.log(`Show data fetched. Count: ${data.length}`)\n  return {\n    shows: data.map(entry =&gt; entry.show)\n  };\n};</code></pre></div>\n<p>위의 코드에서 res와 data와 data의 length를 각각 찍어보았다.\n먼저 res를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//res의 콘솔\nResponse {\n  size: 0,\n  timeout: 0,\n  [Symbol(Body internals)]: {\n    body: Gunzip {\n      _writeState: [Uint32Array],\n      _readableState: [ReadableState],\n      readable: true,\n      _events: [Object: null prototype],\n      _eventsCount: 6,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      writable: false,\n      allowHalfOpen: true,\n      _transformState: [Object],\n      _hadError: false,\n      bytesWritten: 0,\n      _handle: [Zlib],\n      _outBuffer: &lt;Buffer 5b 7b 22 73 63 6f 72 65 22 3a 32 34 2e 33 39 36 31 31 2c 22 73 68 6f 77 22 3a 7b 22 69 64 22 3a 39 37 35 2c 22 75 72 6c 22 3a 22 68 74 74 70 3a 2f 2f ... 16334 more bytes&gt;,\n      _outOffset: 0,\n      _chunkSize: 16384,\n      _defaultFlushFlag: 2,\n      _finishFlushFlag: 2,\n      _defaultFullFlushFlag: 3,\n      _info: undefined,\n      _level: -1,\n      _strategy: 0\n    },\n    disturbed: false,\n    error: null\n  },\n  [Symbol(Response internals)]: {\n    url: &#39;https://api.tvmaze.com/search/shows?q=batman&#39;,\n    status: 200,\n    statusText: &#39;OK&#39;,\n    headers: Headers { [Symbol(map)]: [Object: null prototype] },\n    counter: 0\n  }\n} 응답혀</code></pre></div>\n<p>오.. 200 OK와 url이 젤 먼저 보인다\ndata도 함 까보자!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/bda1ab90-e426-11e9-855b-c9c70516744a/image.png\" alt=\"image.png\"></p>\n<p>생각해보니 data.length가 10인데… 너무 기니까 걍 한 부분 캡쳐 고고!<br />\n이걸 console을 찍고 저장하면 바로 보이는 것이 아니라, 브라우저에서 새로고침을 해야 서버의 콘솔에 뜬다.\n그리고 브라우저엔 아무 정보도 뜨지 않는다…</p>\n<p>공식문서에 의하면 브라우저에선 Link Component 등으로 접근했을때 client에서만 실행된다고 했는데\n진짜다 ㅋㅋㅋㅋ</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/18ed1980-e427-11e9-bdf7-95b1f8e33241/image.png\" alt=\"image.png\"></p>\n<p>아까까진 콘솔창이 넘나 깨-끗 했지만… 인제 데이터가 온다!!!!!<br />\n그니까 다시 정리해보자면…!<br />\n브라우저 단에서 뭔가를 띄우려면 url을 만지거나 Link 걸린 글자를 만지거나 해야하고\n안그럼 다 서버단에서만 정보가 전송이 되는 것 같은 너낌적인 너낌…?!</p>\n<h2 id=\"styled-jsx\"><a href=\"#styled-jsx\" aria-label=\"styled jsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-jsx</h2>\n<p>Next.js에서 CSS 효과를 주는 가장 좋은 방법은 styled-jsx인듯?<br />\n(보통은 material ui 같은 프레임워크를 많이 쓰는듯…?!)</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/33387f80-e42e-11e9-929c-651a2a4e4521/image.png\" alt=\"image.png\"></p>\n<p>사용전에 <code class=\"language-text\">ctrl+shift+x</code>를 눌러서 이 확장판을 깔면 코드치기 더 편할것이다 ㅋㅋ<br />\n아 배고파 꼬르륵 소리 나려고 하네 큰일났다.</p>\n<p>index.js 파일을 이렇게 써준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Layout from &#39;../components/MyLayout&#39;;\nimport Link from &#39;next/link&#39;;\n\nfunction getPosts() {\n  return [\n    { id: &#39;hello-nextjs&#39;, title: &#39;Hello Next.js&#39; },\n    { id: &#39;learn-nextjs&#39;, title: &#39;Learn Next.js is awesome&#39; },\n    { id: &#39;deploy-nextjs&#39;, title: &#39;Deploy apps with ZEIT&#39; }\n  ];\n}\n\nexport default function Blog() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;My Blog&lt;/h1&gt;\n      &lt;ul&gt;\n        {getPosts().map(post =&gt; (\n          &lt;li key={post.id}&gt;\n            &lt;Link href=&quot;/p/[id]&quot; as={`/p/${post.id}`}&gt;\n              &lt;a&gt;{post.title}&lt;/a&gt;\n            &lt;/Link&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n      &lt;style jsx&gt;{`\n        h1,\n        a {\n          font-family: &#39;Arial&#39;;\n        }\n\n        ul {\n          padding: 0;\n        }\n\n        li {\n          list-style: none;\n          margin: 5px 0;\n        }\n\n        a {\n          text-decoration: none;\n          color: blue;\n        }\n\n        a:hover {\n          opacity: 0.6;\n        }\n      `}&lt;/style&gt;\n    &lt;/Layout&gt;\n  );\n}</code></pre></div>\n<p>저기서 getPost라는 함수를 대체 왜 써준진 모르겠다. 만든사람이 함수덕후?<br />\n여튼 styled 태그를 열고 중괄호와 빽틱을 또 열어서 css 요소들을 넣어주면 된다.<br />\n확장팩을 깔았으면 내 색깔! 안 깔았으면 주황색깔이 떠서 혼란혼란쓰~~ 확장팩 까세욧!</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/2ab128c0-e42f-11e9-b2a9-1d24e2c56ef8/image.png\" alt=\"image.png\"></p>\n<p>확장팩 까니까 을매나 보기 편하게요~</p>\n<p>이제 Global Style도 적용해 볼건데, 그전에 react-markdown을 깔아주자\n<code class=\"language-text\">sudo yarn add react-markdown</code> 명령어로 설치 고고!\n코드를 한번 까봅시다~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useRouter } from &#39;next/router&#39;;\nimport Markdown from &#39;react-markdown&#39;;\nimport Layout from &#39;../../components/MyLayout&#39;;\n\nexport default () =&gt; {\n  const router = useRouter();\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;{router.query.id}&lt;/h1&gt;\n      &lt;div className=&quot;markdown&quot;&gt;\n        &lt;Markdown\n          source={`\nThis is our blog post.\nYes. We can have a [link](/link).\nAnd we can have a title as well.\n\n### This is a title\n\nAnd here&#39;s the content.\n      `}\n        /&gt;\n      &lt;/div&gt;\n      &lt;style jsx global&gt;{`\n        .markdown {\n          font-family: &#39;Arial&#39;;\n        }\n\n        .markdown a {\n          text-decoration: none;\n          color: blue;\n        }\n\n        .markdown a:hover {\n          opacity: 0.6;\n        }\n\n        .markdown h3 {\n          margin: 0;\n          padding: 0;\n          text-transform: uppercase;\n        }\n      `}&lt;/style&gt;\n    &lt;/Layout&gt;\n  );\n};</code></pre></div>\n<p>react-markdown을 깔아주었으므로 우리는 Markdown Component를 사용할 수 있고\n그 컴포넌트 아래에선 마크다운으로 쓰면 된다 레알로 ㅋㅋ 씐기 씐ㄱ!!!<br />\n여태껏 reset.css를 만들거나.. global styles를 만들거나 했었는데<br />\nstyle jsx는 그냥 태그에 <code class=\"language-text\">&lt;style jsx global&gt;</code>만 붙이면 된다ㅋㅋ<br />\n근데 아직 내가 이게 미숙해서 그런지.. style jsx는 좀 불편해보인다 ㅠ</p>\n<p>deploy는 다음기회에…\n사실 한거 같긴한데 PORT 여러개 쓰는 부분이 잘 이해가 안가서 잠시 내려놓았다 ㅋㅋ</p>","fields":{"slug":"/posts/wecode10_2TIL_nextjs","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/next/","/tag/react/","/tag/위코드/"]},"frontmatter":{"date":"2019-10-01T16:19:23.169Z","description":"위코드 64일차. 기업협업 이틀차! 하필 휴일과 위워크 가는 날때문에 이틀이나 쉬게(?) 되서 금요일부터 본격적으로 임무가 주어지는데! 그 전까지 Next.js와 코드분석을 해보는 중이다. 지난번 포스팅에 이어 Next.js 2탄이다.","tags":["wecode","codingbootcamp","next","react","위코드"],"title":"wecode 10주차_2일 TIL_공식문서와 함께하는 둘둘의 Next.js 도전기 2탄"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode10_2TIL_nextjs"}}}