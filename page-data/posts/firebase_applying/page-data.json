{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/firebase_applying","webpackCompilationHash":"b74fc07a81b4f137b8e8","result":{"data":{"markdownRemark":{"id":"c9948d45-ee46-5af8-9f83-920a09ce3906","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/1e8dfb60-18da-11ea-8759-35ac578710df/image.png\" alt=\"image.png\"></p>\n<h2 id=\"firebase-데이터-정보를-객체에-담기\"><a href=\"#firebase-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%8B%B4%EA%B8%B0\" aria-label=\"firebase 데이터 정보를 객체에 담기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>firebase 데이터 정보를 객체에 담기</h2>\n<h4 id=\"1-첫번째-시도\"><a href=\"#1-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"1 첫번째 시도 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 첫번째 시도</h4>\n<p>state에 빈 객체를 넣어두고, setState함수를 이용해 객체에 데이터를 담으려고 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> this.state = {\n      pre_number: 0,\n      main_number: 0,\n      field_list: {}\n    };</code></pre></div>\n<p>요로코롬.. 빈 객체를 선언해준 다음!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">componentDidMount() {\n    const docRef = db.collection(&quot;left_seat&quot;).doc(&quot;wecoder_6&quot;);\n\n    docRef\n      .get()\n      .then(function(doc) {\n        if (doc.exists) {\n          this.setState({\n            field_list: doc.data()\n          });\n        } else {\n          console.log(&quot;No such document!&quot;);\n        }\n      })\n      .catch(function(err) {\n        console.log(&quot;Error getting document&quot;, err);\n      });\n  }</code></pre></div>\n<p>컴디마 안에서 left_seat 콜렉션에 담긴 데이터들을 소환한 다음 <br />\nsetState를 이용해 빈 객체에 데이터를 담아주려고 하는데…</p>\n<p>return 전에 field_list를 콘솔 찍어보니…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/f86bfd50-18b7-11ea-af62-df20a61bae43/image.png\" alt=\"image.png\"></p>\n<p>뚜둔~~ 에러 발생!\n구글링 시작!<br />\narrow function을 쓰라고 한다… ㅋ<br />\nthis 정리 빨리 끝내야겠네 휴~~</p>\n<h4 id=\"2-두번째-시도--arrow-function-쓰기\"><a href=\"#2-%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84--arrow-function-%EC%93%B0%EA%B8%B0\" aria-label=\"2 두번째 시도  arrow function 쓰기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 두번째 시도 : Arrow function 쓰기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const docRef = db.collection(&quot;left_seat&quot;).doc(&quot;wecoder_6&quot;);\n\n    docRef\n      .get()\n      .then(doc =&gt; { // 여기가 달라진 부분쓰\n        if (doc.exists) {\n          // console.log(&quot;Document data: &quot;, doc.data());\n          this.setState({\n            field_list: doc.data()\n          });\n        } else {\n          console.log(&quot;No such document!&quot;);\n        }\n      })\n      .catch(function(err) {\n        console.log(&quot;Error getting document&quot;, err);\n      });</code></pre></div>\n<p>then 이후에 원래는 function이었던 것을 화살표함수로 바꿔주었다.<br />\nStackoverflow 에 있는 답변을 읽어보니.. (나와 비슷한 상황의 질문글)<br />\n내가 쓴건 일반함수이기 때문에 this가 호출되는 대상에 묶여 있고,<br />\n클래스형 컴포넌트 안에서 코드가 자동적으로 strict mode에서 돌아가기 때문에 <br />this가 undefined인거고 그래서 에러가 발생한거라고 한다.</p>\n<p>앗 그럼 함수형에선 괜찮을지.. 나중에 훅스로 한번 도전고고!</p>\n<p>여튼 띄우기 성공!</p>\n<h2 id=\"적용하기\"><a href=\"#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"적용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용하기</h2>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/9a5b5a40-18ca-11ea-9952-d3095b7d2e3b/image.png\" alt=\"image.png\"></p>\n<p>원래의 화면쓰..!</p>\n<p>투명 input창을 만들고 거기다가 입력한 값을 받아다가 저장버튼을 누르면<br />\n아예 placeholder에 숫자가 저장이 되도록 만들었는데<br />\nplaceholder에 state에 있는 값 말고 firebase에 있는 데이터를 불러왔다.</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/82a66780-18cc-11ea-acff-03cf24cb2941/image.png\" alt=\"image.png\"></p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/61c0c600-18cc-11ea-acff-03cf24cb2941/image.png\" alt=\"image.png\"></p>\n<p>이건 내가 입력한 값이 절대 아니다. firebase에 내가 설정한 데이터를 받아온거다!</p>\n<p>와.. 그럼 handleChange값을 안 받아도 되는거니까 진짜 핵 간단한거네..?? 와우!!!<br />\n앞으로 코드가 훨씬 짧아질 것 같은 느낌적인 느낌이 든다 ㅋㅋㅋ</p>\n<h2 id=\"훅스-적용하기hooks-with-firebase\"><a href=\"#%ED%9B%85%EC%8A%A4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0hooks-with-firebase\" aria-label=\"훅스 적용하기hooks with firebase permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>훅스 적용하기(hooks with firebase)</h2>\n<p>클래스형과 마찬가지로 db객체를 import 해온다.<br />\nuseEffect와 useState 둘 다 쓸 것이므로 이것 또한 import 하기!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useEffect, useState } from &quot;react&quot;;\nimport { db } from &quot;../../firebase&quot;;</code></pre></div>\n<p>그 다음엔 함수형 컴포넌트 안에 코드를 친다!!\n훅스를 아직 마스터 한 게 아니라.. <br /> <a href=\"https://dev.to/bmcmahen/using-firebase-with-react-hooks-21ap\">이 분 블로그</a>를 많이 참고함!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 생략.. 함수형 컴포넌트 껍데기겠죠? 훗\n  const [infoArr, setInfo] = useState([]); // update\n  const currentNumber = 6;\nuseEffect(() =&gt; {\n    console.log(&quot;effect&quot;);\n    const unsub = db.collection(&quot;left_seat&quot;).onSnapshot(snapshot =&gt; {\n      const allInfo = snapshot.docs.map(\n        doc =&gt;\n          // id: doc.id,\n          doc.data()[currentNumber]\n      );\n      setInfo(allInfo.filter(v =&gt; v));\n    });\n    return () =&gt; {\n      console.log(&quot;cleanUp&quot;);\n      unsub();\n    };\n  }, []);\n\n  return (\n    &lt;&gt;\n    // div 구조 생략쓰\n      {infoArr.map(el =&gt; (\n        &lt;Layout\n        left={el.pre_left} /&gt;\n\n  // 중략...... div 구조 생략쓰\n  &lt;/&gt;\n// 생략쓰</code></pre></div>\n<p>코드는 이러하고.. 나의 firestore 구조는 이렇게..!\n<img src=\"https://images.velog.io/post-images/dooreplay/94a1ba50-1bbc-11ea-85a5-8bbbb773a859/image.png\" alt=\"image.png\"></p>\n<p>field 추가할 때 map을 선택하면 요렇게 객체 구조로 만들 수 있다.\n구조가 잘못 되서 갈아 엎기를 반복하다가 나름 적당한 구조를 선택했다!</p>\n<p>여튼 훅스로 이렇게 firestore 적용도 완료!!\n소소한 코드지만 홈페이지에 보여지는 부분 중 하나가 나의 손을 거치게 된다는 게 넘 뿌듯할 따름이다.</p>\n<h3 id=\"-더불어\"><a href=\"#-%EB%8D%94%EB%B6%88%EC%96%B4\" aria-label=\" 더불어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+ 더불어…</h3>\n<p>위의 포스팅은 어떠한 기관과 관련된 게 절대 아닙니다! 값도, 이름도 제가 막 설정한 임의의 값입니다!</p>","fields":{"slug":"/posts/firebase_applying","tagSlugs":["/tag/web/","/tag/frontend/","/tag/react/","/tag/backend/","/tag/google/"]},"frontmatter":{"date":"2019-12-07T19:02:29.169Z","description":"지난번 firebase 소개편에 이어 firebase에서 가져온 data를 적용하는 포스팅! 포스팅 한 편이 너무 긴 느낌이라 미래의 독자들을 위해 앞으론 이렇게 짤막하게 끊어볼 예정이다 ㅋㅋ","tags":["web","frontend","react","backend","google"],"title":"백엔드 개발자없이 데이터베이스 만들기 2탄- Cloud firestore 활용"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/firebase_applying"}}}