{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/wecode2_6_TIL_js/","webpackCompilationHash":"4b9bf8cfac28b8ad22b6","result":{"data":{"markdownRemark":{"id":"b3a9b020-cabc-5cdd-8dd1-cef9494fd240","html":"<p><img src=\"https://images.velog.io/post-images/dooreplay/fea3ee60-bc07-11e9-b5c2-e3ccef6334a9/image.png\" alt=\"image.png\"></p>\n<p>지난 시간에 class 공부를 마쳐서 class로 구현할 수 있을줄 알았는데 아니였고… 영웅을 화면에 띄우는 것부터 시작해서 동작 구현 등을 같은 기수 광훈님의 도움을 엄청 많이 받았다. 감사합니다 ㅠㅠ</p>\n<p>함수로 쓴 코드와 클래스로 쓴 코드를 먼저 비교해보자!</p>\n<h2 id=\"함수로-구현\"><a href=\"#%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84\" aria-label=\"함수로 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수로 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var hero_position = 400\nvar hero = document.getElementById(&#39;hero&#39;)\n\nfunction left() {\n    hero.style.backgroundPositionX = 70+&#39;px\n    //이 부분을 처음에 background-position-x로 써서 오류가 났음\n    hero_position -= 10\n    hero.style.left = hero_position + &#39;px&#39;\n    //hero의 포지션이 0일때 멈추게 하는 법\n    if(hero_position &lt;= 0) {\n        hero_position = 0 \n    }\n}\n\nfunction right() {\n    hero.style.backgroundPositionX = 35+&#39;px&#39;\n    hero_position += 10\n    hero.style.left = hero_position + &#39;px&#39;\n    //hero의 포지션이 764일때 멈추게 하는 법\n    if(hero_position &gt;= 762) {\n        hero_position = 762\n    }\n}\n\nfunction moving(event) {\n    if(event.keyCode === 37) {\n        left()\n    }\n    if(event.keyCode === 39) {\n        right()\n    }\n}\n\nwindow.addEventListener(&#39;keydown&#39;,function(event) {\n    moving(event)\n})</code></pre></div>\n<h4 id=\"처음에-실수했던-부분\"><a href=\"#%EC%B2%98%EC%9D%8C%EC%97%90-%EC%8B%A4%EC%88%98%ED%96%88%EB%8D%98-%EB%B6%80%EB%B6%84\" aria-label=\"처음에 실수했던 부분 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처음에 실수했던 부분</h4>\n<ul>\n<li>backgroundPositionX를 CSS에서 쓰던 대로 하이픈(-)을 썼다가 오류가 발생. Camel case로 적어보니 그 오류는 해결쓰!</li>\n</ul>\n<p>아직 나는 초보자이고, 게임을 구현하는 게 생소하다 보니 이미지를 자르는 데서부터 시간이 굉장히 오래 걸렸는데 함수 자체는 간단쓰!\n이게 될까??? 하는 의심으로 쉽사리 식을 써내려가지 못했다 ㅋㅋ </p>\n<blockquote>\n<p>기계를 좀 더 믿자.</p>\n</blockquote>\n<h2 id=\"class로-구현\"><a href=\"#class%EB%A1%9C-%EA%B5%AC%ED%98%84\" aria-label=\"class로 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class로 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Hero {\n    // 인스턴스가 생성될때 같이 실행할 프로퍼티들 담기\n    constructor(parents) {\n        this.parents = parents;\n        this.hero = this.create_hero();\n        this.hero_position = 400;\n\n        window.onkeydown = this.move_hero.bind(this);\n    }\n    // 김영웅 등장쓰!\n    create_hero() {\n        let elhero = document.createElement(&#39;div&#39;);\n        elhero.className = &#39;hero&#39;;\n        this.parents.appendChild(elhero);\n        return elhero;\n    }\n    move_hero(event) {\n        switch(event.keyCode) {\n            case 37:\n            this.hero.style.backgroundPositionX = 70+&#39;px&#39;\n            this.hero_position -= 10;\n            this.hero.style.left = this.hero_position +&#39;px&#39;\n            if (this.hero_position &lt;= 0 ) {\n                this.hero_position = 0;\n            }\n            break;\n            \n            case 39:\n            this.hero.style.backgroundPositionX = 35+&#39;px&#39;\n            this.hero_position += 10;\n            this.hero.style.left = this.hero_position +&#39;px&#39;\n            if(this.hero_position &gt;= 762) {\n               this.hero_position = 762; \n            }\n            break;\n        }\n    }\n}\n\nlet parentsMainDiv = document.getElementById(&quot;bg&quot;);\nlet hero = new Hero(parentsMainDiv);</code></pre></div>\n<p>사실 김영웅씨 파트는 class로 구현했을 때의 메리트를 별로 못 느끼겠다 ㅠㅠ\n유령 파트를 class로 구현하면 뭔가 아!! 이거였어? 하는 느낌이 올텐데.. 유령은 동작 구현을 class로 하지 못해서 포기한 상태 ㅠㅠ 월요일날 위코드 멘토 ♥예리님♥께서 봐주실 예정쓰</p>\n<p>글이 너무 많으면 지루해지니깐 위의 식을 그림으로 분석해봤다 ㅋㅋ</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/1aec0100-bc0a-11e9-b5c2-e3ccef6334a9/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>class 하단에 배경화면을 불러와서 우리가 부모라고 설정한 다음 김영웅과 연결</li>\n<li>dom에서처럼 document.getElementsbyClassName 를 써서 hero를 불러왔었는데 div부터 새로 만들어야 한다는 사실..</li>\n<li>위에서 생성한 element와 parent를 꼭 <code class=\"language-text\">appendChild</code>로 묶어줘야 한다!</li>\n</ul>\n<p>appendChild하니까 최근에 꾼 꿈이 생각난다…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/1693adf0-bc0b-11e9-9347-7dd419aba616/train-7970721920.jpg\" alt=\"train-797072_1920.jpg\"></p>\n<p>기차역이 배경이었던 꿈.. 도착지까지 캐리어가 4개나 있어서 미리 화물칸에다 부쳤는데 도착하고 나니 나만 못 받았어… 그래서 직원한테 내 짐 어딨냐고 따지니까 appendChild를 안 해줬다고 오히려 나를 꾸짖었다 ㅎ</p>\n<p>appendChild의 중요성을 또 한번 깨닫게 되는 소중한 꿈이었다…☆\n다시 본론으로 들어가서…</p>\n<p><img src=\"https://images.velog.io/post-images/dooreplay/dbd37a90-bc0c-11e9-b176-a3b978566f4d/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>event의 target(?)을 설정하는 부분이 제일 헷갈렸다. 이벤트가 걸리는 건 window라고 생각해서 <code class=\"language-text\">this.event.keyCode = event.keyCode;</code>와 같은 식을 constructor에 넣었는데 역시나 안됐다. 함수 switch문에 event.keyCode를 넣으니 해결쓰!</li>\n<li>이벤트에 on땡땡 기능을 넣을땐 bind를 이용해 this와 묶어줘야 함수가 실행이 될 수 있다.</li>\n</ul>\n<p>유령부분은.. 랜덤으로 위치가 바뀌는 것 까진 했는데 class로 setInterval과 기타등등을 구현하려니 너무 너무 힘들었다… 포기하기 까지 정말 나름의 고민과 고통을 겪었는데.. 이 또한 지나가면 아무것도 아니겠지!!</p>\n<p>다른 공부를 위해 오늘의 포스팅은 짧게 여기서 끄읕~~</p>","fields":{"slug":"/posts/wecode2_6_TIL_js/","tagSlugs":["/tag/wecode/","/tag/codingbootcamp/","/tag/javascript/","/tag/위코드/"]},"frontmatter":{"date":"2019-08-10T22:40:32.169Z","description":"위코드 13일차 js의 ES6문법인 class를 이용해서 게임을 재구성해보았다! 정말 정말 많은 분들의 도움을 받았다..! 감사합니다!","tags":["wecode","codingbootcamp","javascript","위코드"],"title":"wecode 2주차_6일 TIL_게임에 class 적용해보기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/wecode2_6_TIL_js/"}}}