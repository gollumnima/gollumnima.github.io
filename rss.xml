<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[둘둘`s dooreplay!]]></title><description><![CDATA[Doo Reply!]]></description><link>https://gollumnima.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 07 Dec 2019 10:22:44 GMT</lastBuildDate><item><title><![CDATA[백엔드 개발자없이 데이터베이스 만들기 2탄- Cloud firestore 활용]]></title><description><![CDATA[지난번 firebase 소개편에 이어 firebase에서 가져온 data를 적용하는 포스팅! 포스팅 한 편이 너무 긴 느낌이라 미래의 독자들을 위해 앞으론 이렇게 짤막하게 끊어볼 예정이다 ㅋㅋ]]></description><link>https://gollumnima.github.io//posts/firebase_applying</link><guid isPermaLink="false">https://gollumnima.github.io//posts/firebase_applying</guid><pubDate>Sat, 07 Dec 2019 19:02:29 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1e8dfb60-18da-11ea-8759-35ac578710df/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;firebase-데이터-정보를-객체에-담기&quot;&gt;&lt;a href=&quot;#firebase-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%8B%B4%EA%B8%B0&quot; aria-label=&quot;firebase 데이터 정보를 객체에 담기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;firebase 데이터 정보를 객체에 담기&lt;/h2&gt;
&lt;h4 id=&quot;1-첫번째-시도&quot;&gt;&lt;a href=&quot;#1-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84&quot; aria-label=&quot;1 첫번째 시도 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 첫번째 시도&lt;/h4&gt;
&lt;p&gt;state에 빈 객체를 넣어두고, setState함수를 이용해 객체에 데이터를 담으려고 했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; this.state = {
      pre_number: 0,
      main_number: 0,
      field_list: {}
    };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;요로코롬.. 빈 객체를 선언해준 다음!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidMount() {
    const docRef = db.collection(&amp;quot;left_seat&amp;quot;).doc(&amp;quot;wecoder_6&amp;quot;);

    docRef
      .get()
      .then(function(doc) {
        if (doc.exists) {
          this.setState({
            field_list: doc.data()
          });
        } else {
          console.log(&amp;quot;No such document!&amp;quot;);
        }
      })
      .catch(function(err) {
        console.log(&amp;quot;Error getting document&amp;quot;, err);
      });
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컴디마 안에서 left_seat 콜렉션에 담긴 데이터들을 소환한 다음 &lt;br /&gt;
setState를 이용해 빈 객체에 데이터를 담아주려고 하는데…&lt;/p&gt;
&lt;p&gt;return 전에 field_list를 콘솔 찍어보니…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f86bfd50-18b7-11ea-af62-df20a61bae43/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뚜둔~~ 에러 발생!
구글링 시작!&lt;br /&gt;
arrow function을 쓰라고 한다… ㅋ&lt;br /&gt;
this 정리 빨리 끝내야겠네 휴~~&lt;/p&gt;
&lt;h4 id=&quot;2-두번째-시도--arrow-function-쓰기&quot;&gt;&lt;a href=&quot;#2-%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84--arrow-function-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;2 두번째 시도  arrow function 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 두번째 시도 : Arrow function 쓰기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const docRef = db.collection(&amp;quot;left_seat&amp;quot;).doc(&amp;quot;wecoder_6&amp;quot;);

    docRef
      .get()
      .then(doc =&amp;gt; { // 여기가 달라진 부분쓰
        if (doc.exists) {
          // console.log(&amp;quot;Document data: &amp;quot;, doc.data());
          this.setState({
            field_list: doc.data()
          });
        } else {
          console.log(&amp;quot;No such document!&amp;quot;);
        }
      })
      .catch(function(err) {
        console.log(&amp;quot;Error getting document&amp;quot;, err);
      });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then 이후에 원래는 function이었던 것을 화살표함수로 바꿔주었다.&lt;br /&gt;
Stackoverflow 에 있는 답변을 읽어보니.. (나와 비슷한 상황의 질문글)&lt;br /&gt;
내가 쓴건 일반함수이기 때문에 this가 호출되는 대상에 묶여 있고,&lt;br /&gt;
클래스형 컴포넌트 안에서 코드가 자동적으로 strict mode에서 돌아가기 때문에 &lt;br /&gt;this가 undefined인거고 그래서 에러가 발생한거라고 한다.&lt;/p&gt;
&lt;p&gt;앗 그럼 함수형에선 괜찮을지.. 나중에 훅스로 한번 도전고고!&lt;/p&gt;
&lt;p&gt;여튼 띄우기 성공!&lt;/p&gt;
&lt;h2 id=&quot;적용하기&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;적용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9a5b5a40-18ca-11ea-9952-d3095b7d2e3b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;원래의 화면쓰..!&lt;/p&gt;
&lt;p&gt;투명 input창을 만들고 거기다가 입력한 값을 받아다가 저장버튼을 누르면&lt;br /&gt;
아예 placeholder에 숫자가 저장이 되도록 만들었는데&lt;br /&gt;
placeholder에 state에 있는 값 말고 firebase에 있는 데이터를 불러왔다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/82a66780-18cc-11ea-acff-03cf24cb2941/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/61c0c600-18cc-11ea-acff-03cf24cb2941/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이건 내가 입력한 값이 절대 아니다. firebase에 내가 설정한 데이터를 받아온거다!&lt;/p&gt;
&lt;p&gt;와.. 그럼 handleChange값을 안 받아도 되는거니까 진짜 핵 간단한거네..?? 와우!!!&lt;br /&gt;
앞으로 코드가 훨씬 짧아질 것 같은 느낌적인 느낌이 든다 ㅋㅋㅋ&lt;/p&gt;
&lt;h3 id=&quot;-더불어&quot;&gt;&lt;a href=&quot;#-%EB%8D%94%EB%B6%88%EC%96%B4&quot; aria-label=&quot; 더불어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ 더불어…&lt;/h3&gt;
&lt;p&gt;위의 포스팅은 어떠한 기관과 관련된 게 절대 아닙니다! 값도, 이름도 제가 막 설정한 임의의 값입니다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[백엔드 개발자없이 데이터베이스 만들기 1탄 - Cloud Firestore 소개]]></title><description><![CDATA[회사에 백앤드 개발자가 없거나 혹은 너무 바쁘다? 그럴때 백앤드 개발자 없이도 혼자 개발할수 있어bility! Firebase - cloud firestore 활용법을 알아보자!]]></description><link>https://gollumnima.github.io//posts/firebase_start</link><guid isPermaLink="false">https://gollumnima.github.io//posts/firebase_start</guid><pubDate>Fri, 06 Dec 2019 21:17:29 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/48292eb0-175c-11ea-b9a7-a78e4358fcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;firebase란&quot;&gt;&lt;a href=&quot;#firebase%EB%9E%80&quot; aria-label=&quot;firebase란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Firebase란?&lt;/h2&gt;
&lt;p&gt;구글에서 만든 애플리케이션인데, 로그인(인증), 데이터베이스 등 다양한 기능들을 제공한다.
자세한건 아래의 이미지 참고쓰..!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f4682f00-175c-11ea-b9a7-a78e4358fcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사이트 보니까 A/B Test 무료로 제공하는 것 같던데.. 한번 시도해보고 싶다.
언젠간 해보겠지..?ㅋㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;cloud-firestore&quot;&gt;&lt;a href=&quot;#cloud-firestore&quot; aria-label=&quot;cloud firestore permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cloud Firestore&lt;/h2&gt;
&lt;p&gt;요건 firebase에서 제공하는 NoSQL 문서 중심의 데이터베이스이다.
원래 백앤드에서 데이터 만들어줄땐 table이나 row 같은 값들이 있는데 그거와는 달리
field-value 쌍의 document가 있고 이 document들이 모여 collection이 되는 구조..?&lt;/p&gt;
&lt;p&gt;일단 데이터구조를 만들어보자!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collection ID 생성
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3b727ec0-1760-11ea-b9a7-a78e4358fcc9/image.png&quot; alt=&quot;image.png&quot;&gt;
Collection ID는 일단 컴포넌트와 같다고 생각을 해서 가장 큰 범위로 생각을 했다.&lt;/li&gt;
&lt;li&gt;document 생성
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/859b2ce0-1760-11ea-b9a7-a78e4358fcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c2c06770-1760-11ea-b57e-ef599b453888/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;field의 type은 다양하게 설정할 수 있다.
일단 이렇게 해보았다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/28d36d40-1762-11ea-b9a7-a78e4358fcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;firebase-설치하기&quot;&gt;&lt;a href=&quot;#firebase-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;firebase 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Firebase 설치하기&lt;/h2&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;build
&lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt;
firebase 툴을 설치하기 전에 빌드를 먼저 해야한다고.. 근데 난 build를 나중에 했다 뚀륵 ㅠ&lt;/li&gt;
&lt;li&gt;firebase 설치하기
&lt;code class=&quot;language-text&quot;&gt;npm install -g firebase-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;firebase 로그인
&lt;code class=&quot;language-text&quot;&gt;firebase login&lt;/code&gt; 명령어 입력하면 갑자기 아래의 링크로 이동해서 구글로그인이 뙇!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/34f295b0-17ee-11ea-aaec-fb1399513b37/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;firebase에 등록된 계정을 선택한 후, 허용을 눌러주면.. Woohoo~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5d26a350-17ee-11ea-bc33-6d3d69e20820/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;우후~ 성공쓰&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;firebase 프로젝트 초기화
&lt;code class=&quot;language-text&quot;&gt;firebase init&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 명령어를 치면..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f126ab40-17ee-11ea-bc33-6d3d69e20820/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;초기화 완료쓰!
아 근데..공식문서 보고 이렇게 설치는 다 해놨는데…&lt;br /&gt;
React Firebase에 대한 공식문서가 따로 있네?? 띠용?? &lt;br /&gt;
tool을 깔고 firebase를 react에 설치하는 순서가 정확한진 모르겠다.&lt;br /&gt;
일단 했으니… 가본다!!!!&lt;/p&gt;
&lt;h2 id=&quot;firebase-setting&quot;&gt;&lt;a href=&quot;#firebase-setting&quot; aria-label=&quot;firebase setting permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;firebase setting&lt;/h2&gt;
&lt;p&gt;script 태그를 가져다 쓰거나 npm이나 yarn으로 설치하는 방법이 있다!&lt;br /&gt;
일단 script 태그를 가져다 쓰는 방법이다.&lt;br /&gt;
index.html에 요 아래의 태그를 넣어준다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!-- The core Firebase JS SDK is always required and must be listed first --&amp;gt;
    &amp;lt;script src=&amp;quot;https://www.gstatic.com/firebasejs/7.5.1/firebase-app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries --&amp;gt;
    &amp;lt;script src=&amp;quot;https://www.gstatic.com/firebasejs/7.5.1/firebase-analytics.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
      // Your web app&amp;#39;s Firebase configuration
      var firebaseConfig = {
        apiKey: &amp;quot;비밀쓰&amp;quot;,
        authDomain: &amp;quot;비밀쓰,
        databaseURL: &amp;quot;비밀쓰&amp;quot;,
        projectId: &amp;quot;비밀쓰&amp;quot;,
        storageBucket: &amp;quot;비밀쓰&amp;quot;,
        messagingSenderId: &amp;quot;비밀쓰&amp;quot;,
        appId: &amp;quot;비밀쓰&amp;quot;,
        measurementId: &amp;quot;비밀쓰&amp;quot;
      };
      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
      firebase.analytics();
    &amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아니면 걍 깔아준다!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add firebase&lt;/code&gt; 명령어 궈궈!&lt;/p&gt;
&lt;p&gt;그 담에 나는 src/firebase.js 파일을 만들어주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// src/firebase.js 파일 내용물

import * as firebase from &amp;quot;firebase/app&amp;quot;;
// firebase/app에서 받아오는 모든 메소드를 firebase라는 이름으로 쓸거라는 뜻

import &amp;quot;firebase/firestore&amp;quot;;

const config = {
  apiKey: &amp;quot;비밀쓰&amp;quot;,
  authDomain: &amp;quot;비밀쓰,
  databaseURL: &amp;quot;비밀쓰&amp;quot;,
  projectId: &amp;quot;비밀쓰&amp;quot;,
  storageBucket: &amp;quot;비밀쓰&amp;quot;,
  messagingSenderId: &amp;quot;비밀쓰&amp;quot;,
  appId: &amp;quot;비밀쓰&amp;quot;,
  measurementId: &amp;quot;비밀쓰&amp;quot;
};
firebase.initializeApp(config);

export const db = firebase.firestore();
// db라는 이름으로 export 해서 사용할거임&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 내가 쓰던 파일에 firebase에 있는 데이터를 가져와볼거다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { useState, useEffect } from &amp;quot;react&amp;quot;;
import { db } from &amp;quot;../../firebase&amp;quot;;

// 생략쓰..

var docRef = db.collection(&amp;quot;left_seat&amp;quot;).doc(&amp;quot;wecoder_6&amp;quot;);
// 내가 만든 컬렉션과 도큐먼트 이름을 괄호 안에 넣는다.

  docRef
    .get()
    .then(function(doc) {
      if (doc.exists) {
        console.log(&amp;quot;Document data: &amp;quot;, doc.data());
      } else {
        console.log(&amp;quot;No such document!&amp;quot;);
      }
    })
    .catch(function(err) {
      console.log(&amp;quot;Error getting document&amp;quot;, err);
    });

 // 생략쓰&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 콘솔창을 열어서 확인해보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b3d66e30-18a0-11ea-8507-09d39c6bc422/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠! 내가 임의로 넣어놓았던 데이터들이 뜬다!&lt;br /&gt;
이제 이 데이터들을 함수 적용해서 지지고 볶고 하는게 문젠데…&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;그것에 대해선 다음 이 시간에 이어서…!!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Next.js 초기세팅 삽질기. 정답이 아닙니다. 삽질기입니다]]></title><description><![CDATA[임시저장글 목록을 뒤적이다.. 발견한 Next.js 초기세팅 글. 저장글이 쌓여감에 따라 언젠가는 잊혀지겠구나 싶어서 이제서야 풀어본다. 정리가 아직도 안 된 느낌이지만 일단 쓰고 수정해볼 예정!!]]></description><link>https://gollumnima.github.io//posts/nextJS_setting</link><guid isPermaLink="false">https://gollumnima.github.io//posts/nextJS_setting</guid><pubDate>Sun, 01 Dec 2019 20:19:29 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9b7491d0-143d-11ea-a41b-e7a7edc6a163/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;주의사항-이-포스팅은-정답이-아닌-삽질기이고-앞으로도-이-여정은-계속될-예정입니다&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EC%9D%B4-%ED%8F%AC%EC%8A%A4%ED%8C%85%EC%9D%80-%EC%A0%95%EB%8B%B5%EC%9D%B4-%EC%95%84%EB%8B%8C-%EC%82%BD%EC%A7%88%EA%B8%B0%EC%9D%B4%EA%B3%A0-%EC%95%9E%EC%9C%BC%EB%A1%9C%EB%8F%84-%EC%9D%B4-%EC%97%AC%EC%A0%95%EC%9D%80-%EA%B3%84%EC%86%8D%EB%90%A0-%EC%98%88%EC%A0%95%EC%9E%85%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;주의사항 이 포스팅은 정답이 아닌 삽질기이고 앞으로도 이 여정은 계속될 예정입니다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의사항 이 포스팅은 정답이 아닌 삽질기이고, 앞으로도 이 여정은 계속될 예정입니다.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.appbase.io/part1-getting-started-with-react-and-nextjs-4f28a6a0c38e&quot;&gt;이아저씨 포스팅&lt;/a&gt; 보고 약간 따라함.&lt;/p&gt;
&lt;h2 id=&quot;시작&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91&quot; aria-label=&quot;시작 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gollumnima.github.io/posts/wecode10_1TIL_nextjs&quot;&gt;지난번 포스팅&lt;/a&gt;과 동일&lt;/p&gt;
&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; aria-label=&quot;express permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Express&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add express&lt;/code&gt; 명령어로 설치 고고! &lt;br /&gt;
express를 하냐 안 하냐의 차이는.. 잘은 모르지만 custom API routes를 다룰때 좋다 함!&lt;br /&gt;
이어서…&lt;/p&gt;
&lt;p&gt;server.js를 파일을 만드는데, 꼭 package.json과 동일한 위치에 놔야함&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//server.js
const express = require(&amp;#39;express&amp;#39;);
const next = require(&amp;#39;next&amp;#39;);

const port = parseInt(process.env.PORT, 10) || 3000;
const dev = process.env.NODE_ENV !== &amp;#39;production&amp;#39;;
const app = next({ dev });
const handle = app.getRequestHandler();
app.prepare().then(() =&amp;gt; {
  const server = express();
  server.get(&amp;#39;*&amp;#39;, (req, res) =&amp;gt; handle(req, res));
  server.listen(port, (err) =&amp;gt; {
    if (err) throw err;
    // console.log(`🤘 on http://localhost:${port}`);
  });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;console 찍히는 부분은 Eslint 때문인지 뭔지 자꾸 귀찮게 Problem이 떠서 주석처리했다&lt;br /&gt;
여튼 처음에 경로가 중요하다고 써놨는데… 경로설정을 제대로 하지 않으면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/155106a0-e64e-11e9-9324-4fb150f05a53/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MoDULE_NOT_FOUND&lt;/code&gt;라는 error 발생!
그럴땐, 두 가지를 확인해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;node_modules 유무&lt;/li&gt;
&lt;li&gt;경로확인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;나는 일단 &lt;code class=&quot;language-text&quot;&gt;rm -rf node_modules&lt;/code&gt; 명령어로 node_modules를 삭제해주고&lt;br /&gt;
&lt;code class=&quot;language-text&quot;&gt;npm isntall&lt;/code&gt;로 다시 깔아주었다.&lt;br /&gt;
하지만 yarn start를 하는 순간 결과는 똑같은 MNF(Module not found의 줄임말쓰~)&lt;br /&gt;
그래서 다른분께 여쭤봤더니 경로가 잘못된것 같다고 하셔서.. server.js 파일 경로를 보니
pages 안에 들어있었다!!!! 그래서 이걸 다시 밖으로 뺌 ㄱㄱ&lt;/p&gt;
&lt;p&gt;그랬더니 에러는 빠염~&lt;/p&gt;
&lt;h2 id=&quot;eslint-깔기&quot;&gt;&lt;a href=&quot;#eslint-%EA%B9%94%EA%B8%B0&quot; aria-label=&quot;eslint 깔기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Eslint 깔기&lt;/h2&gt;
&lt;p&gt;CRA의 방식과 약간 다른것 같음&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add -D babel-eslint eslint eslint-config-airbnb eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-babel eslint-plugin-import&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 명령어로 시작! 난 수도 없으면 안돼~
그리고 .eslintrc.js라는 파일 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//eslintrc.js file
module.exports = {
 extends: [&amp;#39;airbnb&amp;#39;],
 env: {
  browser: true,
 },
 parser: &amp;#39;babel-eslint&amp;#39;,
 rules: {
  indent: 0,
  &amp;#39;no-tabs&amp;#39;: 0,
  &amp;#39;eol-last&amp;#39;: [&amp;#39;error&amp;#39;, &amp;#39;always&amp;#39;],
  &amp;#39;no-underscore-dangle&amp;#39;: 0,
  &amp;#39;react/jsx-indent&amp;#39;: 0,
  &amp;#39;react/jsx-indent-props&amp;#39;: 0,
  &amp;#39;react/jsx-filename-extension&amp;#39;: 0,
  &amp;#39;react/forbid-prop-types&amp;#39;: 0,
  &amp;#39;react/require-default-props&amp;#39;: 0,
 },
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;혹시나 prettier를 안 깐 분들은 vscode 스토어?에서 설치고고&lt;br /&gt;
그다음에 명령어 입력 고고 &lt;code class=&quot;language-text&quot;&gt;yarn add -D prettier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그담엔 settings에 들어가서 json파일에 이걸 추가해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;editor.formatOnSave&amp;quot;: true,
  &amp;quot;prettier.eslintIntegration&amp;quot;: true
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 빨간줄이 뙇!! 행복쓰~&lt;/p&gt;
&lt;h2 id=&quot;eslint-rules-off&quot;&gt;&lt;a href=&quot;#eslint-rules-off&quot; aria-label=&quot;eslint rules off permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Eslint rules off&lt;/h2&gt;
&lt;p&gt;.eslintrc.js 파일을 보면 객체안에 rules라는 값들이 있는데..&lt;br /&gt;
0은 off 1은 on이다. true/false 값을 이용해서 그렇게 한듯..?! 똑똑해~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; rules: {
    indent: 0,
    &amp;quot;no-tabs&amp;quot;: 0,
    &amp;quot;eol-last&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;always&amp;quot;],
    &amp;quot;no-console&amp;quot;: 0,
    &amp;quot;no-underscore-dangle&amp;quot;: 0,
    &amp;quot;react/jsx-indent&amp;quot;: 0,
    &amp;quot;react/jsx-indent-props&amp;quot;: 0,
    &amp;quot;react/jsx-filename-extension&amp;quot;: 0,
    &amp;quot;react/react-in-jsx-scope&amp;quot;: 0,
    &amp;quot;react/forbid-prop-types&amp;quot;: 0,
    &amp;quot;react/require-default-props&amp;quot;: 0
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위에서 Eslint가 잘 구동되서 빨간줄 나와서 행복했던 것도 잠시…&lt;br /&gt;
빨간줄 땜에 넘나 스트레스를 받아서 구글링 해본 결과물로 off 효과주기!&lt;br /&gt;
검색하면 굉장히 항목이 많다.. 난 일단 이정도로만 설정해놓았다&lt;/p&gt;
&lt;h2 id=&quot;폴더구조-확인&quot;&gt;&lt;a href=&quot;#%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;폴더구조 확인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;폴더구조 확인&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c8dbb3e0-e712-11e9-9e4c-35b0af6c260b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;일단은 이렇게 세팅해놓은 상태이다.&lt;br /&gt;
화면에 구현되어야 하는 모든 기능과 페이지들은 pages 디렉토리 안에 들어가야 한다.&lt;br /&gt;
하나씩 찬찬히 살펴보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.js : /로 시작하는 루트 디렉토리! 걍 메인이라고 보면 된다.&lt;/li&gt;
&lt;li&gt;_app.js : 공통레이웃을 위한 공간이라는데.. 난 Layout.js를 따로 만들어놨는데 이거랑 같이 써야하나?&lt;/li&gt;
&lt;li&gt;_document.js : index.html과 같은 역할. 온갖 script tag와 기타등등은 다 여기다가 저장쓰!&lt;/li&gt;
&lt;li&gt;_error.js : 에러가 났을때 나오는 화면&lt;/li&gt;
&lt;li&gt;next.config.js : path 설정 및 기타 등등 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;난 material-ui와 Next.js를 함께 쓴 예시를 클론받아서 거기를 통해 _app.js와 _document.js 양식을 채워나갔다 ㅋㅋ
src 디렉토리의 Link, theme,ProTip도 무슨 기능을 하는진 모르겠으나 일단 추가해보았다.
그래야 에러가 안 날거같아ㅓ ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;static-폴더의-위치&quot;&gt;&lt;a href=&quot;#static-%ED%8F%B4%EB%8D%94%EC%9D%98-%EC%9C%84%EC%B9%98&quot; aria-label=&quot;static 폴더의 위치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;static 폴더의 위치&lt;/h2&gt;
&lt;p&gt;와… 엄청난 통수를 맞았던 static 폴더.&lt;br /&gt;
모든 게 다 pages 안에 들어가있어야 할 것 같아서 당연히 pages에 넣었는데&lt;br /&gt;
아무리 노력을 해봐도 이미지가 안 뜨는 것…&lt;/p&gt;
&lt;p&gt;열심히 구글구글링을 해본 결과…&lt;br /&gt;
static 폴더는 root 경로에 있어야 한다고… pages와 동일 선상에..! 소오름&lt;br /&gt;
옮기니까 사진 바로 왕 크게 뜬다 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 오예&lt;/p&gt;
&lt;h2 id=&quot;nextjs에서-sass-사용하기&quot;&gt;&lt;a href=&quot;#nextjs%EC%97%90%EC%84%9C-sass-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;nextjs에서 sass 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next.js에서 SASS 사용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add @zeit/next-sass node-sass&lt;/code&gt; 설치는 이렇게&lt;br /&gt;
근데 설치한다고 다가 아니다.. 또 뭔갈 해줘야지 에러가 안난다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const withSass = require(&amp;#39;@zeit/next-sass&amp;#39;);

const commonsChunkConfig = (config, test = /\.css$/) =&amp;gt; {
  config.plugins = config.plugins.map((plugin) =&amp;gt; {
    if (
      plugin.constructor.name === &amp;#39;CommonsChunkPlugin&amp;#39;
      // disable filenameTemplate checks here because they never match
      // (plugin.filenameTemplate === &amp;#39;commons.js&amp;#39; ||
      //     plugin.filenameTemplate === &amp;#39;main.js&amp;#39;)
      // do check for minChunks though, because this has to (should?) exist
      &amp;amp;&amp;amp; plugin.minChunks != null
    ) {
      const defaultMinChunks = plugin.minChunks;
      plugin.minChunks = (module, count) =&amp;gt; {
        if (module.resource &amp;amp;&amp;amp; module.resource.match(test)) {
          return true;
        }
        return defaultMinChunks(module, count);
      };
    }
    return plugin;
  });
  return config;
};

module.exports = withSass({
  cssModules: true,
  webpack: (config) =&amp;gt; {
    config = commonsChunkConfig(config, /\.(sass|scss|css)$/);
    return config;
  },
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 폴더구조에서 살펴보았던 next.config.js 파일에 이걸 추가해준다.&lt;br /&gt;
추가해주지 않으면 CSSLoader 어쩌구 하면서 에러가 난다.&lt;br /&gt;
구글링의 힘이 정말 대단하다.. 다들 똑같은 데서 에러가 발생하는구나 정말ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;layout-활용&quot;&gt;&lt;a href=&quot;#layout-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;layout 활용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layout 활용&lt;/h2&gt;
&lt;p&gt;사실 이 레이아웃 컴포넌트를 _app.js에 넣는게 맞는지, index.js에 넣는게 맞는지 모른다.
근데 일단 index.js에 넣어보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;
import Container from &amp;#39;@material-ui/core/Container&amp;#39;;
import Typography from &amp;#39;@material-ui/core/Typography&amp;#39;;
import Box from &amp;#39;@material-ui/core/Box&amp;#39;;
import MuiLink from &amp;#39;@material-ui/core/Link&amp;#39;;
import ProTip from &amp;#39;./src/ProTip&amp;#39;;
import Link from &amp;#39;./src/Link&amp;#39;;
import Layout from &amp;#39;./global/Layout&amp;#39;;

function Copyright() {
  return (
    &amp;lt;Typography variant=&amp;quot;body2&amp;quot; color=&amp;quot;textSecondary&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;
      Copyright ©
      &amp;lt;MuiLink color=&amp;quot;inherit&amp;quot; href=&amp;quot;https://material-ui.com/&amp;quot;&amp;gt;
        Your Website
      &amp;lt;/MuiLink&amp;gt;
      {new Date().getFullYear()}
    &amp;lt;/Typography&amp;gt;
  );
}

export default function Index() {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;Container maxWidth=&amp;quot;sm&amp;quot;&amp;gt;
        &amp;lt;Box my={4}&amp;gt;
          {/* variant가 화면에 보이는 실제 글씨 크기 */}
          &amp;lt;Typography variant=&amp;quot;h4&amp;quot; component=&amp;quot;h1&amp;quot; gutterBottom&amp;gt;
            Next.js example
          &amp;lt;/Typography&amp;gt;
          &amp;lt;Link href=&amp;quot;/about&amp;quot; color=&amp;quot;secondary&amp;quot;&amp;gt;
            Go to the about page
          &amp;lt;/Link&amp;gt;
          &amp;lt;ProTip /&amp;gt;
          &amp;lt;Copyright /&amp;gt;
        &amp;lt;/Box&amp;gt;
      &amp;lt;/Container&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내가 실습을 나가있던 기업의 경우, material-ui를 사용하기 때문에&lt;br /&gt;
material-ui와 Next.js를 함께 쓴 예시를 깃허브를 통해 클론했다.&lt;br /&gt;
&lt;a href=&quot;https://github.com/mui-org/material-ui&quot;&gt;아마여기 였을듯&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여튼.. Layout 파일에는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Navbar from &amp;#39;./Navbar&amp;#39;;
import Footer from &amp;#39;./Footer&amp;#39;;
import &amp;#39;./Footer.scss&amp;#39;;

const Layout = (props) =&amp;gt; (
  &amp;lt;&amp;gt;
    &amp;lt;Navbar /&amp;gt;
    {props.children}
    &amp;lt;Footer /&amp;gt;
  &amp;lt;/&amp;gt;
);

export default Layout;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 해주면 신기하게 이 안에 요소들이 다 들어간다!&lt;/p&gt;
&lt;p&gt;라잌 디스&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fa3ee9a0-e714-11e9-9e4c-35b0af6c260b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;넘나 신기한것ㅋㅋ&lt;/p&gt;
&lt;p&gt;음… 뭔가 굉장히 많이 설치했던것 같은데 글로 써보니 얼마 없네..?&lt;br /&gt;
중간에 써놨던 글이 임시저장 실패해서 좀 날라간거 같기도 하고..?&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;bootstrap--material-icon-사용&quot;&gt;&lt;a href=&quot;#bootstrap--material-icon-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;bootstrap  material icon 사용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;bootstrap &amp;#x26; material icon 사용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo yarn add bootstrap-material-design-icons&lt;/code&gt;
이걸 깔아봐도 아이콘이 안뜨고..&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://google.github.io/material-design-icons/&quot;&gt;방법&lt;/a&gt;은 구글에 있었다.
이 문서에 나온대로 &lt;code class=&quot;language-text&quot;&gt;sudo yarn add material-design-icons&lt;/code&gt; 궈궈
_document.js 파일에 link tag도 넣어주고
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/icon?family=Material+Icons&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그러나 에러가 발생…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c2361c00-e740-11e9-b416-f12e8a5138e9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;바로 구글링 궈궈!&lt;br /&gt;
다양한 답변들이 있었지만 나는 이 방법을 택했다..&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sudo yarn cache clean
sudo yarn install --network-concurrency 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그랬더니 웬걸… 이제 된다 된다!??’&lt;/p&gt;
&lt;p&gt;근데 아이콘은 잠시 보류.. 내가 원하는 아이콘이 아니였음..&lt;/p&gt;
&lt;h2 id=&quot;sass-적용-다시&quot;&gt;&lt;a href=&quot;#sass-%EC%A0%81%EC%9A%A9-%EB%8B%A4%EC%8B%9C&quot; aria-label=&quot;sass 적용 다시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SASS 적용 다시!&lt;/h2&gt;
&lt;p&gt;열심히 구글링 해서 config 파일을 다시 바꿈&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const withSass = require(&amp;#39;@zeit/next-sass&amp;#39;);
const withCSS = require(&amp;#39;@zeit/next-css&amp;#39;);

module.exports = withCSS(
  withSass({
    webpack(config) {
      config.module.rules.push({
        test: /\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,
        use: {
          loader: &amp;#39;url-loader&amp;#39;,
          options: {
            limit: 100000,
          },
        },
      });

      return config;
    },
  }),
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;드디어 SASS가 먹혀벌임!&lt;/p&gt;
&lt;h2 id=&quot;bootstrap-적용&quot;&gt;&lt;a href=&quot;#bootstrap-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;bootstrap 적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;bootstrap 적용&lt;/h2&gt;
&lt;p&gt;Layout에 이거 추가
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;진짜-진짜-이상한-에러&quot;&gt;&lt;a href=&quot;#%EC%A7%84%EC%A7%9C-%EC%A7%84%EC%A7%9C-%EC%9D%B4%EC%83%81%ED%95%9C-%EC%97%90%EB%9F%AC&quot; aria-label=&quot;진짜 진짜 이상한 에러 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;진짜 진짜 이상한 에러&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/aacf6e20-e9a4-11e9-b145-25a68bfbc53d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i -g npm@latest&lt;/code&gt;로 해결하긴 했는데 찝찝쓰~&lt;/p&gt;
&lt;p&gt;아직도 어색한 Next.js… 언제쯤 친해질련지
이 글은 지속적으로 수정할 예정이다&lt;/p&gt;
&lt;h2 id=&quot;다시한번-말하지만-이-글은-정답지가-아닌-삽질기&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%8B%9C%ED%95%9C%EB%B2%88-%EB%A7%90%ED%95%98%EC%A7%80%EB%A7%8C-%EC%9D%B4-%EA%B8%80%EC%9D%80-%EC%A0%95%EB%8B%B5%EC%A7%80%EA%B0%80-%EC%95%84%EB%8B%8C-%EC%82%BD%EC%A7%88%EA%B8%B0&quot; aria-label=&quot;다시한번 말하지만 이 글은 정답지가 아닌 삽질기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다시한번 말하지만 이 글은 정답지가 아닌 삽질기!!&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[리액트에서 mobX 이용해 상태관리 해보자]]></title><description><![CDATA[급하게 만들어보고 싶은 웹페이지가 있는데, 리덕스는 공부하면 할수록 끝이 없을것 같다.. 그래서 도전해본다, mobX. 나에게 몹은 몬스터였는데.. 몹X니까 몬스터 아님쓰?ㅋㅋㅋㅋ]]></description><link>https://gollumnima.github.io//posts/mobX_1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/mobX_1</guid><pubDate>Sat, 30 Nov 2019 14:15:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6e89ea80-13fc-11ea-8254-91d59d50bb4f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;벨로퍼트 님의 글을 보고 따라해 본 mobX&lt;br /&gt;
mobX는 먼저 4가지 개념을 알고 있어야 한다.&lt;/p&gt;
&lt;h2 id=&quot;observable-state&quot;&gt;&lt;a href=&quot;#observable-state&quot; aria-label=&quot;observable state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Observable state&lt;/h2&gt;
&lt;p&gt;말 그대로 관찰받고 있는 상태를 말한다.&lt;br /&gt;
아마 리액트의 state와 비슷하다고 보면 되려나?&lt;/p&gt;
&lt;h2 id=&quot;computed-value&quot;&gt;&lt;a href=&quot;#computed-value&quot; aria-label=&quot;computed value permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Computed Value&lt;/h2&gt;
&lt;p&gt;기존 상태값을 토대로 만들어진 연산된 값.&lt;/p&gt;
&lt;h2 id=&quot;reaction&quot;&gt;&lt;a href=&quot;#reaction&quot; aria-label=&quot;reaction permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reaction&lt;/h2&gt;
&lt;p&gt;Computed Value는 특정 값을 연산해야 할때만 처리가 되는데,
그 중간에! 어떠한 값이 바뀌는 작업에 어떠한 일이 벌어지는걸 reaction이라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;action&quot;&gt;&lt;a href=&quot;#action&quot; aria-label=&quot;action permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Action&lt;/h2&gt;
&lt;p&gt;상태에 변화를 일으키는 것. 쉽게 생각해서 함수 같은 것을 떠올리면 되려나!
근데 여기선 리덕스에서처럼 액션을 객체형태로 만들어 쓰지 않는게 하나의 특징쓰~&lt;/p&gt;
&lt;h4 id=&quot;연습해보자&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%8A%B5%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;연습해보자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연습해보자!&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { observable, reaction, computed, autorun } from &amp;quot;mobx&amp;quot;;

// observable state
const calculator = observable ({
  a: 1,
  b: 2,
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;초기 상태 설정을 위해 observable state를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;reaction(
  ()=&amp;gt; calculator.a,
  (value, reaction) =&amp;gt; {
    console.log(`a값이 ${value}로 바뀌었네요!`);
  }
);

reaction(
  ()=&amp;gt; calculator.b,
  (value, reaction) =&amp;gt; {
    console.log(`a값이 ${value}로 바뀌었네요!`);
  }
);

calculator.a = 10;
calculator.b = 20;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이후 reaction을 통해 값이 변할때 리액션을 이루어질 수 있도록 설정&lt;/p&gt;
&lt;p&gt;콘솔창을 확인해보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1f92d850-13e4-11ea-90bc-61119672f9e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;변화된 값에 대한 콘솔이 찍힌다.&lt;br /&gt;
이번엔 computed를 써보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const sum = computed(() =&amp;gt; {
  console.log(&amp;#39;계산중입니다.&amp;#39;); // observe가 사용될때 이 콘솔이 나온다?
  return calculator.a + calculator.b;
})

sum.observe(()=&amp;gt; calculator.a); // a값을 주시하고 있음
sum.observe(()=&amp;gt; calculator.b) ; // b값을 주시하고 있음

calculator.a = 10;
calculator.b = 20;

console.log(sum.value);
console.log(sum.value);

calculator.a = 20;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔창을 다시 확인해보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b4676e50-13e4-11ea-90bc-61119672f9e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠짠~ 계산중이라는 콘솔과 바뀐 값이 잘 찍히고 있다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;이번엔 auturun을 써볼차례쓰..!&lt;br /&gt;
autorun을 사용하면 reaction을 대신한다고…하는데.. 일단 써보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;autorun(() =&amp;gt; console.log(`a값이 ${calculator.a}로 바뀌었네요!`));
autorun(()=&amp;gt; console.log(`b값이  ${calculator.b}로 바뀌었네요`));
// autorun(()=&amp;gt; sum.get());

calculator.a = 10;
calculator.b = 20;

console.log(sum.value);
console.log(sum.value);

calculator.a = 20;
console.log(sum.value);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위에서 get함수를 쓰면 하나 하나 observe 하지 않아도 된다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a9c3ee50-13e5-11ea-9473-01dd1a17b245/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;get도, observe도 하지 않았을 때의 콘솔창이다.
여기서 observe를 쓴다면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c7cbeb50-13e5-11ea-90bc-61119672f9e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠! 이렇게 나온다.&lt;br /&gt;
위에서 쓴 get 함수에서 주석을 푸르고, observe를 지워준다면&lt;br /&gt;
콘솔에 동일한 결과가 나온다.&lt;/p&gt;
&lt;p&gt;이번엔 클래스를 활용해 식을 깔끔하게 써보자&lt;br /&gt;
cafe에서 메뉴가 추가되는 코드를 짜보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { decorate, observable, computed, autorun } from &amp;quot;mobx&amp;quot;;

class Cafe {
  basket = [];

  get total() {
    console.log(&amp;#39;계산중입니다...!&amp;#39;);
    return this.basket.reduce((pre,cur) =&amp;gt; pre + cur.price, 0);
  }

  select (name, price) {
    this.basket.push({ name, price });
  }
}

// decorate를 통해 각 값에 MobX 함수를 적용
decorate(Cafe, {
  basket: observable,
  total: computed,
});

const cafe = new Cafe();
autorun(() =&amp;gt; cafe.total);
cafe.select(&amp;#39;Iced Latte&amp;#39;, 5000);
console.log(cafe.total);
cafe.select(&amp;#39;Honey Bread&amp;#39;, 6000);
console.log(cafe.total);
cafe.select(&amp;#39;Lemon Ade&amp;#39;, 4000);
console.log(cafe.total);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a043dfb0-13e6-11ea-90bc-61119672f9e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;계산은 잘 되는군 이열~&lt;/p&gt;
&lt;p&gt;이번엔 예제에 조건을 추가하고 마지막줄에 콘솔을 한번 찍었다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const cafe = new Cafe();
autorun(() =&amp;gt; cafe.total);
autorun(() =&amp;gt; {
  if (cafe.basket.length &amp;gt; 0) {
     console.log(cafe.basket[cafe.basket.length -1]);
  }
});

cafe.select(&amp;#39;Iced Latte&amp;#39;, 5000);
cafe.select(&amp;#39;Honey Bread&amp;#39;, 6000);
cafe.select(&amp;#39;Lemon Ade&amp;#39;, 4000);
console.log(cafe.total);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 결과 콘솔창은&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9ac95e50-13e8-11ea-9473-01dd1a17b245/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이걸 이제 transaction으로 감싸주자.&lt;br /&gt;
젤 윗줄에서 transaction을 import 해준 후에..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;transaction(() =&amp;gt; {
 cafe.select(&amp;#39;Iced Latte&amp;#39;, 5000);
 cafe.select(&amp;#39;Honey Bread&amp;#39;, 6000);
 cafe.select(&amp;#39;Lemon Ade&amp;#39;, 4000);
 }
)
console.log(cafe.total);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까의 cafe.select들을 모조리 transaction안에 넣어주면&lt;br /&gt;
콘솔창은 가장 마지막에 딱 한번 찍히게 된다. 이렇게!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e7e69450-13e8-11ea-aeb6-b9ea8e1dd5e0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;약간 더 간편하게 하려면 decorator 문법을 써주면 된다고 한다.
도전도전..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { observable, computed, autorun, action, transaction } from &amp;quot;mobx&amp;quot;;

class Cafe {
  @observable basket = [];

  @computed
  get total() {
    console.log(&amp;#39;계산중입니다...!&amp;#39;);
    return this.basket.reduce((pre,cur) =&amp;gt; pre + cur.price, 0);
  }

  @action
  select (name, price) {
    this.basket.push({ name, price });
  }
}

const cafe = new Cafe();
autorun(() =&amp;gt; cafe.total);
autorun(() =&amp;gt; {
  if (cafe.basket.length &amp;gt; 0) {
     console.log(cafe.basket[cafe.basket.length -1]);
  }
});

transaction(() =&amp;gt; {
  cafe.select(&amp;#39;Iced Latte&amp;#39;, 5000);
  cafe.select(&amp;#39;Honey Bread&amp;#39;, 6000);
  cafe.select(&amp;#39;Lemon Ade&amp;#39;, 4000);
})
console.log(cafe.total);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;decorator 문법은 자바스크립트 뿐만 아니라 파이썬 등에서도 다양하게 쓰이는데&lt;br /&gt;
@ &amp;#x3C;= 요 골뱅이를 불러서 쓰는게 공통이라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/320031d0-13ea-11ea-90bc-61119672f9e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;콘솔을 찍어보면 아까와 동일한 값이 나온다.&lt;br /&gt;
decorate 함수를 쓰는 것 대신 decorator를 통해 좀 더 코드가 간결해진 느낌?&lt;/p&gt;
&lt;h2 id=&quot;리액트에서-mobx-적용해보기&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-mobx-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;리액트에서 mobx 적용해보기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리액트에서 mobX 적용해보기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx create-react-app 프로젝트이름
cd 프로젝트이름
yarn add mobx mobx-react&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mobX는 걍 깔기만 하면 cra에서 쓸 수 있지만,&lt;br /&gt;
위에서 사용한 decorate는 ES7 문법이기 때문에 babel 설정을 따로 해주어야 한다.&lt;/p&gt;
&lt;p&gt;벨로퍼트님은 package.json을 수정해주라고 하는데 안 먹혀서 다른 방법을 찾아보았다.&lt;br /&gt;
어떤 사람은 eject 명령어를 쓰던데, 한번 eject 하면 영원히 못 돌린다고 들어서&lt;br /&gt;
넘 무서우니깐 좀 더 귀찮지만 안 무서운 방법을 사용해봤다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cra 프로젝트에 mobX 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add customize-cra --dev
yarn add react-app-rewired --dev

// cra 버전2를 사용하고 있다면 둘 다 설치
// cra 버전1을 사용하고 있다면 rewired만 설치&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 명령어로 라이브러리를 설치하면 eject 없이도
이미 만들어놓은 cra 프로젝트에 customizing해서 설정값을 바꿀수 있는듯?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/88cc61c0-1401-11ea-b045-c52c09e7df8c/image.png&quot; alt=&quot;image.png&quot;&gt;
근데 댄 아브라모씨가 추천하는 방법은 아니다.. 한번만 쓸게유ㅠㅠ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;바벨 설치
&lt;code class=&quot;language-text&quot;&gt;yarn add @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;package.json 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; &amp;quot;scripts&amp;quot;: {
   &amp;quot;start&amp;quot;: &amp;quot;react-app-rewired start&amp;quot;,
   &amp;quot;build&amp;quot;: &amp;quot;react-app-rewired build&amp;quot;,
   &amp;quot;test&amp;quot;: &amp;quot;react-app-rewired test --env=jsdom&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;config-overrides.js 파일 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const {
    addDecoratorsLegacy,
    disableEsLint,
    override
} = require(&amp;quot;customize-cra&amp;quot;);

  module.exports = {
    webpack: override(
        disableEsLint(),
        addDecoratorsLegacy()
    )
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 작성해주고, root directory에 놓는다.&lt;/p&gt;
&lt;p&gt;자 인제 Counter 라는 컴포넌트를 만들거다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; import React, { Component } from &amp;quot;react&amp;quot;;
 import {decorate, observable, action} from &amp;quot;mobx&amp;quot;;
 import {observer} from &amp;quot;mobx-react&amp;quot;;

 class Counter extends Component {
     number = 0;

     increase = () =&amp;gt; {
         this.number++;
     }

     decrease = () =&amp;gt; {
         this.number--;
     }
     render() {
         return(
           &amp;lt;div&amp;gt;
             &amp;lt;h1&amp;gt;{this.number}&amp;lt;/h1&amp;gt;
             &amp;lt;button onClick={this.increase}&amp;gt;+1&amp;lt;/button&amp;gt;
             &amp;lt;button onClick={this.decrease}&amp;gt;-1&amp;lt;/button&amp;gt;
           &amp;lt;/div&amp;gt;
         );
     }
 }

 decorate(Counter , {
     number : observable,
     increase : action,
     decrease : action
 })

 export default observer(Counter);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;신기하게도 이게 끝이다!
mobX를 쓰면 constructor 안에 state 안 써도 되고,
함수 안에도 setState함수를 안 써도 된다!! 신기신기!!!&lt;/p&gt;
&lt;p&gt;위에서 babel도 설정해줬으니, 이번엔 decorator를 활용해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;quot;react&amp;quot;;
import {observable, action} from &amp;quot;mobx&amp;quot;;
import {observer} from &amp;quot;mobx-react&amp;quot;;

class Counter extends Component {
    @observable number = 0;

    @action increase = () =&amp;gt; {
        this.number++;
    }

    @action decrease = () =&amp;gt; {
        this.number--;
    }
    render() {
        return(
          &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;{this.number}&amp;lt;/h1&amp;gt;
            &amp;lt;button onClick={this.increase}&amp;gt;+1&amp;lt;/button&amp;gt;
            &amp;lt;button onClick={this.decrease}&amp;gt;-1&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        );
    }
}

export default observer(Counter);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cae77d00-1402-11ea-8254-91d59d50bb4f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;날것 그대로의 카운터의 모습이다. 플/마 버튼을 눌러보면 잘 작동한다.&lt;br /&gt;
넘나 신기할 따름이다 ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;지금 만들고 있는 테스트용 페이지가 있는데 거기다가도 적용해 봐야겠다.&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@velopert/MobX-2-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-MobX-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-oejltas52z&quot;&gt;mobX 개념 출처 : 벨로그님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jsh901220/create-react-app%EC%97%90%EC%84%9C-eject%EC%82%AC%EC%9A%A9%EC%95%88%ED%95%98%EA%B8%B0-customize-cra-react-app-rewired-10a83522ace0&quot;&gt;eject 없이 cra 커스터마이징 : 조승현님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[리액트에서 prop-types이용해서 타입 체크해보기]]></title><description><![CDATA[정적언어에서 쓰이는 Type Check.. 리액트에서도 쓸 수 있다??? 바로 바로 prop-types를 이용해서! 오늘은 prop-types를 이용해 타입을 체크하는 법에 대해 간단히 알아보고자 한다.]]></description><link>https://gollumnima.github.io//posts/prop_types</link><guid isPermaLink="false">https://gollumnima.github.io//posts/prop_types</guid><pubDate>Sun, 24 Nov 2019 17:37:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f7498f10-0e7f-11ea-ae3e-b5d32084644b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;정적언어에서 Type을 체크하는 것처럼, React에서도 타입을 체크해볼 수 있다.
바로바로 prop-types를 이용하는 것!&lt;/p&gt;
&lt;p&gt;이게 귀찮은 작업이긴 해도, 일단 써보면 좋은 이유?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 가독성 굿굿&lt;/li&gt;
&lt;li&gt;디버깅 굿굿&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%B9%98&quot; aria-label=&quot;설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설치&lt;/h2&gt;
&lt;p&gt;yarn이나 npm을 이용해 prop-types 패키지를 설치해준다.&lt;/p&gt;
&lt;h2 id=&quot;사용&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;사용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;import 하기! &lt;br /&gt;
여타 다른 패키지들과 동일하게 import해서 쓸 수 있다.
&lt;code class=&quot;language-text&quot;&gt;import PropTypes from &amp;quot;prop-types&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;타입 체크&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) =&amp;gt; (
// 중략
);
Poster.propTypes = {
  id: PropTypes.number.isRequired,
  imageUrl: PropTypes.string,
  title: PropTypes.string.isRequired,
  rating: PropTypes.number,
  year: PropTypes.string,
  isMovie: PropTypes.bool
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수형 컴포넌트에서는 인자로 들어가는 값들을 그 함수 아래에서 타입 체크 해줄수 있다.&lt;br /&gt;
클래스형에서도 마찬가지로 props로 넘김받는 값들의 타입을 체크 해주면 된다.&lt;/p&gt;
&lt;h2 id=&quot;어떤-타입들이-있을까&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%A4-%ED%83%80%EC%9E%85%EB%93%A4%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;어떤 타입들이 있을까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떤 타입들이 있을까?&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string,
  optionalSymbol: PropTypes.symbol,


  optionalNode: PropTypes.node,

  optionalElement: PropTypes.element,

  optionalMessage: PropTypes.instanceOf(Message),

  optionalEnum: PropTypes.oneOf([&amp;#39;News&amp;#39;, &amp;#39;Photos&amp;#39;]),

  optionalUnion: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
    PropTypes.instanceOf(Message)
  ]),

  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),

  optionalObjectOf: PropTypes.objectOf(PropTypes.number),

  optionalObjectWithShape: PropTypes.shape({
    color: PropTypes.string,
    fontSize: PropTypes.number
  }),

  requiredFunc: PropTypes.func.isRequired,

  requiredAny: PropTypes.any.isRequired,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자바스크립트의 원시타입 뿐만 아니라 다양하게 타입을 체크해볼 수 있는데&lt;br /&gt;
shape이나 oneOfType 같은것도 설정해볼 수 있고…&lt;br /&gt;
Custom으로 타입을 체크해볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;customProp: function(props, propName, componentName) {
    if (!/matchme/.test(props[propName])) {
      return new Error(
        &amp;#39;Invalid prop `&amp;#39; + propName + &amp;#39;` supplied to&amp;#39; +
        &amp;#39; `&amp;#39; + componentName + &amp;#39;`. Validation failed.&amp;#39;
      );
    }
  },

customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
    if (!/matchme/.test(propValue[key])) {
      return new Error(
        &amp;#39;Invalid prop `&amp;#39; + propFullName + &amp;#39;` supplied to&amp;#39; +
        &amp;#39; `&amp;#39; + componentName + &amp;#39;`. Validation failed.&amp;#39;
      );
    }
  })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;요런 식으로..!&lt;br /&gt;
공식문서에 있는걸 긁어온거고.. 아직까지 써본적은 없다.ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;isrequired&quot;&gt;&lt;a href=&quot;#isrequired&quot; aria-label=&quot;isrequired permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;isRequired&lt;/h2&gt;
&lt;p&gt;필수로 있어야 하는 값에는 가장 끝에 isRequired를 붙여준다.&lt;br /&gt;
isRequired라고 써준 값이 비어있다면 에러 발생!&lt;/p&gt;
&lt;h2 id=&quot;예시&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot; aria-label=&quot;예시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시&lt;/h2&gt;
&lt;p&gt;노마드 강의를 보다 보면 prop-types를 필수적으로 쓰는 것 같다.&lt;br /&gt;
코드를 쓰는 좋은 습관쓰~? 😎&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;많고 많은 컴포넌트 중에 골라온 Section Component&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;quot;react&amp;quot;;
import PropTypes from &amp;quot;prop-types&amp;quot;;
import styled from &amp;quot;styled-components&amp;quot;;

const Container = styled.div`
  margin-bottom: 50px;
  :not(:last-chile) {
    margin-bottom: 50px;
  }
`;

const Title = styled.span`
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 25px;
`;

const Grid = styled.div`
  display: grid;
  margin-top: 25px;
  grid-template-columns: repeat(auto-fill, 125px);
  grid-gap: 25px;
`;

const Section = ({ title, children }) =&amp;gt; (
  &amp;lt;Container&amp;gt;
    &amp;lt;Title&amp;gt;{title}&amp;lt;/Title&amp;gt;
    &amp;lt;Grid&amp;gt;{children}&amp;lt;/Grid&amp;gt;
  &amp;lt;/Container&amp;gt;
);

Section.propTypes = {
  title: PropTypes.string.isRequired,
  children: PropTypes.oneOfType([PropTypes.node])
};

export default Section;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React 공식문서 보면서 PropTypes에 node를 써주는것 보고 넘 신기했는데..&lt;br /&gt;
이미 니꼬가 강의에서 썼었네??&lt;br /&gt;
근데 난 기억이 안나네?? 강의 다시 들어야겠네?? 😂😂&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;급히 끝내보기.. 출처는 리액트 공식문서다.&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs-kr.firebaseapp.com/docs/typechecking-with-proptypes.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://reactjs-kr.firebaseapp.com/docs/typechecking-with-proptypes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[폴리필과 크로스 브라우징이란 무엇인가?]]></title><description><![CDATA[면접 단골질문이기도 하고, 프론트앤드 개발자라면 무조건 알고 있어야 하는, 피할 수 없는 이 개념에 대해 미루고 미루다가 드디어 정리해보기로 결심했다.]]></description><link>https://gollumnima.github.io//posts/cross_brosing</link><guid isPermaLink="false">https://gollumnima.github.io//posts/cross_brosing</guid><pubDate>Sat, 23 Nov 2019 15:24:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b5824e0-0db5-11ea-9b8e-afeb0eb247ad/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위코드 기업협업 중간에 한창 면접을 보러다닐 때의 일이다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;크로스 브라우징이 뭔지 아는지, 폴리필이 뭔지 아는지에 대해 물어본 회사도 있었지만&lt;br /&gt;
ES6 문법을 미지원하는 브라우저의 경우 어떻게 할 것인가에 대한 질문이 있었고&lt;br /&gt;
급하게 면접을 준비하던, 아무것도 모르던 나의 대답은…&lt;/p&gt;
&lt;p&gt;Modal창을 만들어서&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a58f94f0-0dba-11ea-81e2-9390052735e1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;죄송합니다-크롬-브라우저를-이용해주세요&quot;&gt;&lt;a href=&quot;#%EC%A3%84%EC%86%A1%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%81%AC%EB%A1%AC-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94&quot; aria-label=&quot;죄송합니다 크롬 브라우저를 이용해주세요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;“죄송합니다. 크롬 브라우저를 이용해주세요”&lt;/h4&gt;
&lt;p&gt;라는 메시지를 띄운다고 패기있게 말했다 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;br /&gt;
면접관들이 얼마나 당황스러웠을까 ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;그래서 오늘은!!!&lt;br /&gt;
면접 단골질문이자 프론트앤드 개발자라면 꼭 알아야하는 이 개념에 대해 정리해보고자 한다!
나같이 바보같이 대답하는 사람들이 이제는 없기를 바라며.. ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;크로스-브라우징cross-browsing&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%9C%EC%8A%A4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95cross-browsing&quot; aria-label=&quot;크로스 브라우징cross browsing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크로스 브라우징(Cross Browsing)&lt;/h2&gt;
&lt;p&gt;크롬, 파폭, 사파리 등등 어떤 브라우저에서 봐도 내가 만든 웹페이지의 뷰가 동일한 것을 말한다.
크로스 브라우징을 위해 우리가 해줘야 하는게 바로 폴리필인데…&lt;/p&gt;
&lt;p&gt;폴리필이 무엇인지 알아보기 전에!&lt;br /&gt;
크롬에선 넘나 정상적으로 보이는 웹 페이지가 IE에서 어떻게 보이는지 살펴보자..&lt;br /&gt;
원래의 페이지는…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fca0b8b0-0e77-11ea-867a-d57598fdeb4b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 멋지게 뙇!&lt;br /&gt;
위코드 3기에서 Stayfolio를 클론한 작품인데…&lt;br /&gt;
IE에서는…
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5da28310-0e77-11ea-867a-d57598fdeb4b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;(이 당시 우분투/윈도우 듀얼부팅을 하던 내 노트북 화면을 TV에 연결한 모습)&lt;br /&gt;
깨지는 것도 정도껏이지.. 부분 부분 안 보일줄 알았는데&lt;br /&gt;
아예 하얀 화면에 아무것도 뜨지 않는다!!!&lt;br /&gt;
모달창을 띄우니 마니 했던 나의 면접 대답이 정말 창피해지는 순간이었다 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;해결책은 폴리필!&lt;/p&gt;
&lt;h2 id=&quot;폴리필polyfill&quot;&gt;&lt;a href=&quot;#%ED%8F%B4%EB%A6%AC%ED%95%84polyfill&quot; aria-label=&quot;폴리필polyfill permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;폴리필(polyfill)&lt;/h2&gt;
&lt;p&gt;단어 그대로의 뜻은 충전솜을 의미한다.&lt;br /&gt;
IE 같은 구형 브라우저에선 최신 자바스크립트 문법이나 CSS 성질들이 먹히지 않는다.&lt;br /&gt;
공들여 쓴 코드가 화면상 깨져보이지 않게 몇 가지 코드를 덧붙이는 작업이 바로 폴리필!
&lt;br /&gt;
위에서 설명한 크로스브라우징을 체크하기 위해 우린 폴리필이란 작업을 해줘야한다!&lt;/p&gt;
&lt;h3 id=&quot;순서&quot;&gt;&lt;a href=&quot;#%EC%88%9C%EC%84%9C&quot; aria-label=&quot;순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;순서&lt;/h3&gt;
&lt;p&gt;(여기에서의 순서는 window에서 git clone받은 이후의 작업 순서이다!)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;로 먼저 개발 환경 세팅쓰&lt;/li&gt;
&lt;li&gt;core.js 설치&lt;/li&gt;
&lt;li&gt;index.js의 첫 줄에 import 하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;내가 코드 치느랴 캡쳐하느라 사진찍느라 정신없어서 글로 제대로 정리를 못했는데
이보다 더 간단한 방법도 있다..!&lt;/p&gt;
&lt;p&gt;바로 facebook에서 권장하는 react-app-polyfill를 설치하는 것&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5134d4f0-0e79-11ea-867a-d57598fdeb4b/image.png&quot; alt=&quot;image.png&quot;&gt;
(위의 이미지는 package.json 캡쳐. 지금은 버전이 더 올라갔으려나 ㅋㅋ)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/40ea4cb0-0e79-11ea-867a-d57598fdeb4b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;index.js의 첫줄에 &lt;code class=&quot;language-text&quot;&gt;import &amp;#39;react-app-polyfill/ie9&amp;#39;;&lt;/code&gt; 붙여넣기&lt;/p&gt;
&lt;p&gt;그럼 간단히 해결쓰~&lt;/p&gt;
&lt;p&gt;글을 마치기 전…&lt;/p&gt;
&lt;h2 id=&quot;그밖에-추천할만한-사이트&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%B0%96%EC%97%90-%EC%B6%94%EC%B2%9C%ED%95%A0%EB%A7%8C%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8&quot; aria-label=&quot;그밖에 추천할만한 사이트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그밖에 추천할만한 사이트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;html5please 닷컴 &lt;a href=&quot;https://html5please.com/&quot;&gt;바로가기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;caniuse 닷컴 &lt;a href=&quot;https://caniuse.com/&quot;&gt;바로가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;둘 다 들어가보면 권장하는 태그, api 등의 정보들을 알려준다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[node.js 를 이용해서 크롤링 도전!]]></title><description><![CDATA[지난 번에 python에서 beautiful soup을 이용해서 크롤링을 해보았는데, 이번엔 node.js를 이용해 크롤링하고 mongoDB에 저장하는 걸 도전!!! 노드알못이라 정확한 설명은 없다, 과정만 적었을 뿐! 자세한 설명은 언제가 될지 모를 다음번 포스팅을 기약하며..]]></description><link>https://gollumnima.github.io//posts/nodeJS_crawling</link><guid isPermaLink="false">https://gollumnima.github.io//posts/nodeJS_crawling</guid><pubDate>Sun, 17 Nov 2019 21:36:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6b38e640-0931-11ea-9719-7d092f99b44c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위코드에 있다보면 다양한 세션들이 많이 열린다.&lt;br /&gt;
선택과 집중을 강조하시기 때문에 모든 세션들은 선택사항 이지만!!!&lt;br /&gt;
이날은.. 죽일놈의 호기심 때문에 선택과 집중을 포기하기로 했다.&lt;/p&gt;
&lt;h2 id=&quot;crawling&quot;&gt;&lt;a href=&quot;#crawling&quot; aria-label=&quot;crawling permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Crawling&lt;/h2&gt;
&lt;p&gt;옛날엔 html안에 모든 데이터를 심은 상태로 페이지를 만들었기 때문에 크롤링이 쉬웠는데&lt;br /&gt;
요즘은 SPA로 페이지 작업을 많이들 하기 때문에 크롤링이 쉽지가 않다.&lt;br /&gt;
그래서 팬텀 JS나 셀레늄 같은걸 써서 비동기로 처리해서 크롤링을 한다고 하는데..&lt;br /&gt;
이날 우리의 목표는 node.js를 이용해 크롤링 하고, 몽고 db에 넣는 것이었다.&lt;/p&gt;
&lt;h2 id=&quot;nodejs-란&quot;&gt;&lt;a href=&quot;#nodejs-%EB%9E%80&quot; aria-label=&quot;nodejs 란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node.js 란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0d122850-0932-11ea-9e05-cf069c31c421/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;node.js는 언어도, 프레임워크도, 라이브러리도 아니다. JavaScript Runtime 환경이다.&lt;br /&gt;
더 간단히 말하자면 백앤드 시스템이 자바스크립트에서도 돌아갈 수 있도록 도와주는 것!&lt;br /&gt;
원래 node.js에서 ES6 문법이 적용이 안 됐었는데 업글 되고 node 12버전부터 최신문법 적용된다!&lt;/p&gt;
&lt;p&gt;여튼 node에서의 require이 import와 같다고 한다.&lt;/p&gt;
&lt;h2 id=&quot;도전-클래스101-크롤링하기&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%A0%84-%ED%81%B4%EB%9E%98%EC%8A%A4101-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0&quot; aria-label=&quot;도전 클래스101 크롤링하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도전! 클래스101 크롤링하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a090a430-0932-11ea-aa94-f3699ad0167a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;오늘의 목표는 클래스101의 카테고리 정보 크롤링하기!&lt;br /&gt;
카테고리가 어딨냐하면… 클래스101 사이트에서 스크롤을 좀 더 내려보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c568dca0-0932-11ea-9e05-cf069c31c421/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;굉장히 어중띈 곳에 카테고리 정보가 뙇!!&lt;/p&gt;
&lt;p&gt;저 카테고리 정보를 가져오려면 먼저 개발자도구를 열고…&lt;br /&gt;
네트워크탭의 XHR눌러서 body에 categorysummarylist 써잇는 쿼리 복붙해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1357e190-0933-11ea-aa94-f3699ad0167a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;신기한건 endpoint가 전부 graphql 한 개로 되어있다는 것…!&lt;br /&gt;
여튼 이게 중요한 게 아니고..!&lt;br /&gt;
스크롤을 내려 Request Payload 에 내가 원하는 정보가 있는걸 확인하고 복붙 고고&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const axios = require(&amp;#39;axios&amp;#39;);

// axios.get(&amp;#39;https://class101.net/&amp;#39;).then((response)=&amp;gt;{
//     console.log(response)
// })

axios.post(&amp;#39;https://gql-prod.class101.net/graphql&amp;#39;, {
    operationName:&amp;quot;CategorySummaryList&amp;quot;,
    variables:{&amp;quot;categoryFilter&amp;quot;:{&amp;quot;isHide&amp;quot;:false},&amp;quot;offset&amp;quot;:0,&amp;quot;limit&amp;quot;:9999},
    query:  `fragment CategorySummary on Category {
             _id
             firestoreId
             title
             iconUrl
             __typename
            }

                query CategorySummaryList($categoryFilter: PreCategoryFilter!, $limit: Int, $offset: Int) {
                    categories: getCategories(categoryFilter: $categoryFilter, limit: $limit, offset: $offset) {
                      ...CategorySummary
                       __typename
                            }
                        }
               `


}).then((response)=&amp;gt; {
    console.log(response.data)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시간 관계상 node.js의 문법 및 코드 한줄한줄을 이해할 수 없었기 때문에&lt;br /&gt;
일단 주어진 양식에 개발자도구에서 긁어온 정보를 복붙 해보았다!&lt;/p&gt;
&lt;h3 id=&quot;여기서-잠깐&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9E%A0%EA%B9%90&quot; aria-label=&quot;여기서 잠깐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여기서 잠깐!&lt;/h3&gt;
&lt;p&gt;node.js 에서 &lt;code class=&quot;language-text&quot;&gt;node 경로&lt;/code&gt;를 입력하면 콘솔창을 사용할 수 있다.&lt;br /&gt;
나는 src디렉토리 아래의 craw파일의 콘솔을 보기 위해 &lt;code class=&quot;language-text&quot;&gt;node src/craw&lt;/code&gt;를 입력해봄&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/395673e0-0549-11ea-ac63-55a9515c3308/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;콘솔로그에 response를 쳐보면 위와같이 뜨고&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e20b0a60-0548-11ea-8b36-0500379121cf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;콘솔로그에 response.data 쳤을땐 위와깉이 뜬다.&lt;/p&gt;
&lt;p&gt;마지막 줄 콘솔찍는 부분을 JSON.stringify로 받아보자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;}).then((response)=&amp;gt; { console.log(JSON.stringify(response.data, null,2)) })&lt;/code&gt;
이렇게 하면..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8707faa0-0549-11ea-ac63-55a9515c3308/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오오 씐기씐기!!
title에 내가 원하는 카테고리명들이 뙇!!!&lt;/p&gt;
&lt;h2 id=&quot;mongodb-설치하기&quot;&gt;&lt;a href=&quot;#mongodb-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;mongodb 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MongoDB 설치하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/93b12170-0934-11ea-8b5e-01a0e8eb699a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;노드도 초록, 몽고도 초록초록 친환경적이고 좋군~&lt;/p&gt;
&lt;p&gt;일단 &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/
&quot;&gt;공식문서&lt;/a&gt; 보고 터미널에서 몽고디비와 친구들을 설치해보았다.&lt;br /&gt;
(아래는 맥 명령어 기준입니다.)&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;brew tap mongodb/brew
brew install mongodb-community@4.2
// 위의 두개 설치하고
brew services start mongodb-community
// 이걸로 실행&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;아-몽고디비-컴파스도-깔아줍니다-검색해서-다운고고&quot;&gt;&lt;a href=&quot;#%EC%95%84-%EB%AA%BD%EA%B3%A0%EB%94%94%EB%B9%84-%EC%BB%B4%ED%8C%8C%EC%8A%A4%EB%8F%84-%EA%B9%94%EC%95%84%EC%A4%8D%EB%8B%88%EB%8B%A4-%EA%B2%80%EC%83%89%ED%95%B4%EC%84%9C-%EB%8B%A4%EC%9A%B4%EA%B3%A0%EA%B3%A0&quot; aria-label=&quot;아 몽고디비 컴파스도 깔아줍니다 검색해서 다운고고 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아!! 몽고디비 컴파스도 깔아줍니다. 검색해서 다운고고!&lt;/h3&gt;
&lt;p&gt;아래의 화면은 몽고디비 컴파스로 보이는 화면. 약간 포스트맨의 역할을 하는 것 같다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6f71ac10-054e-11ea-9105-53a6223ef9ce/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오 신기신기!!!!!!!&lt;br /&gt;
일단 이번 포스팅은 이게 끝이다 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;지난번엔 파이썬으로 크롤링도 해보았고, 이번엔 node.JS 도전!!!&lt;br /&gt;
나중에 좀 더 파보고.. 위코드에서 했던 1차 프로젝트를 한번 손보고싶닼ㅋㅋ&lt;br /&gt;
1년 안에 할 수 있겠지????&lt;/p&gt;
&lt;p&gt;일단 급한건 리액트니깐.. 리액트부터 열심히 파보자. 아자아자!!&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;불코딩열코딩빡코딩죽코딩&quot;&gt;&lt;a href=&quot;#%EB%B6%88%EC%BD%94%EB%94%A9%EC%97%B4%EC%BD%94%EB%94%A9%EB%B9%A1%EC%BD%94%EB%94%A9%EC%A3%BD%EC%BD%94%EB%94%A9&quot; aria-label=&quot;불코딩열코딩빡코딩죽코딩 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔥불코딩!열코딩!빡코딩!죽코딩!🔥&lt;/h2&gt;
&lt;p&gt;지난번 파이썬 크롤링 포스팅이 궁금하다면? &lt;a href=&quot;https://gollumnima.github.io/posts/wecode6_2TIL_crawling&quot;&gt;여기&lt;/a&gt; 클릭&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드 node.js 크롤링 세션&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TypeScript로 블록체인 만들기(feat.니콜라스형)]]></title><description><![CDATA[매주 목요일은 위코드 프론트앤드 스터디(a.k.a 프스) 목요일 전에 미리 타입스크립트 인터페이스를 공부하려다 너무 멀리 와버린 포스팅... 노마드코더 강의를 보고 블록체인을 만들어봤는데, 블록체인의 '블'자도 모르고 걍 타입스크립트 공부하려고 강의 듣고 따라친 글]]></description><link>https://gollumnima.github.io//posts/typescript_blockchain</link><guid isPermaLink="false">https://gollumnima.github.io//posts/typescript_blockchain</guid><pubDate>Sat, 16 Nov 2019 20:42:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f1948710-092e-11ea-9e05-cf069c31c421/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;본 포스팅은 노마드코더 TypeScript로 블록체인 만들기 강의를 보고 따라 친 글입니다.&lt;/p&gt;
&lt;h2 id=&quot;typescript-간단-초기세팅&quot;&gt;&lt;a href=&quot;#typescript-%EA%B0%84%EB%8B%A8-%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85&quot; aria-label=&quot;typescript 간단 초기세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TypeScript 간단 초기세팅&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;yarn init
초기화 명령어를 통해 package.json 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7e981670-090e-11ea-9351-21b3a9e07049/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;yarn global add typescript
글로벌로 깔아주었음&lt;/li&gt;
&lt;li&gt;tsconfig.json 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,
    &amp;quot;target&amp;quot;: &amp;quot;ES2015&amp;quot;,
    &amp;quot;sourceMap&amp;quot;: true
  },
  &amp;quot;include&amp;quot;: [&amp;quot;index.ts&amp;quot;],
  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 설정해주었음&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;index.ts 생성&lt;br /&gt;
&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;quot;hello&amp;quot;)&lt;/code&gt; 라는 간단한 명령어 입력후 터미널에 tsc 명령어를 입력해보면
index.js와 index.js.map 파일이 생성된다!
근데 tsc 명령어 보다 yarn 을 쓰고 싶어서 package.json 수정고고&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;typechain&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node index.js&amp;quot;,
    &amp;quot;prestart&amp;quot;: &amp;quot;tsc&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/86863310-0910-11ea-bba5-27daf000bedd/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짜잔~ 이렇게 터미널 상에 콘솔이 찍힌다.&lt;/p&gt;
&lt;h2 id=&quot;typescript--타입쓰&quot;&gt;&lt;a href=&quot;#typescript--%ED%83%80%EC%9E%85%EC%93%B0&quot; aria-label=&quot;typescript  타입쓰 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TypeScript : 타입쓰&lt;/h2&gt;
&lt;p&gt;간단한 예제로 콘솔을 찍어보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const name = &amp;quot;Doori&amp;quot;,
  age = 28,
  gender = &amp;quot;female&amp;quot;;

const sayHi = (name, age, gender) =&amp;gt; {
  console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);
};

sayHi(name, age, gender);

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제일 마지막줄에 export {}를 하지 않으면 에러 발생!&lt;/p&gt;
&lt;p&gt;이렇게 했을때 터미널에 콘솔이 아주 잘 찍힌다.&lt;br /&gt;
하지만 sayHi라는 함수에서 인자를 하나 빼보면 어떨까?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8e1f6e60-0911-11ea-bba5-27daf000bedd/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;정말 까다로운 녀석이다. 바로 에러를 뱉는다!&lt;br /&gt;
하지만 이렇게 깐깐한 만큼 나중에 디버깅할때 좀 더 수월해진다는 장점쓰~&lt;br /&gt;
인자가 세 개지만 꼭 두 개만 쓰고싶다? 그럼 방법이 또 있쥐&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const name = &amp;quot;Doori&amp;quot;,
  age = 28,
  gender = &amp;quot;female&amp;quot;;

const sayHi = (name, age, gender?) =&amp;gt; {
  console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);
};

sayHi(name, age);

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자 뒤에 물음표를 붙이면 필수적인 인자가 아닌 선택적인 것!&lt;br /&gt;
yarn start를 해보면 대신 콘솔이 &lt;code class=&quot;language-text&quot;&gt;Hello Doori, you are 28, you are a undefined&lt;/code&gt; 이렇게 찍힌다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;자세한건 지난번 타입스크립트 정리 1탄 글을 참고해보자!&lt;br /&gt;
&lt;a href=&quot;https://gollumnima.github.io/posts/typescript_1&quot;&gt;지난번 타입스크립트 정리글 링크&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;tsc-watch&quot;&gt;&lt;a href=&quot;#tsc-watch&quot; aria-label=&quot;tsc watch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TSC watch&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add tsc-watch --dev&lt;/code&gt; 명령어로 tsc watch를 깔아주고…
package.json을 다시 한번 수정!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// package.json
{
  &amp;quot;name&amp;quot;: &amp;quot;typechain&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;tsc-watch --onSuccess \&amp;quot; node dist/index.js\&amp;quot; &amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;tsc-watch&amp;quot;: &amp;quot;^4.0.0&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;crypto-js&amp;quot;: &amp;quot;^3.1.9-1&amp;quot;,
    &amp;quot;typescript&amp;quot;: &amp;quot;^3.7.2&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tsconfig.json도 수정&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// tssconfig.json
{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,
    &amp;quot;target&amp;quot;: &amp;quot;ES2015&amp;quot;,
    &amp;quot;sourceMap&amp;quot;: true,
    &amp;quot;outDir&amp;quot;: &amp;quot;dist&amp;quot;
  },
  &amp;quot;include&amp;quot;: [&amp;quot;src/**/*&amp;quot;],
  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;include쪽을 보면.. 모든 파일을 src 하에 관리하겠단 소리라서
내가 만든 index.ts 파일을 src 밑으로 넣어준다.&lt;/p&gt;
&lt;p&gt;이렇게 설정을 해주면 모든 TypeScript는 src로 들어가고, 컴파일된 것들은 dist로 들어간다.
yarn start 하면 에러가 안 나야 하는데&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8dd12db0-0919-11ea-bba5-27daf000bedd/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이런 에러가 뜬다??? &lt;br /&gt;
&lt;code class=&quot;language-text&quot;&gt;yarn add typescript&lt;/code&gt; 명령어로 조진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a05eef30-0919-11ea-b582-93c0e6ad9fde/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;yarn start를 다시 하면 잘 나온다!&lt;br /&gt;
저게 지금 watch모드가 실행중인건데.. 무언가 변화가 생기면 인제 dist에 기록이 된다&lt;/p&gt;
&lt;h2 id=&quot;interface&quot;&gt;&lt;a href=&quot;#interface&quot; aria-label=&quot;interface permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interface&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4d452c00-091a-11ea-9831-e73723558cd7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 입력했을때 에러 발생..!
그래서 여기에 인터페이스를 적용할거다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;interface Human {
  name: string;
  age: number;
  gender: string;
}

const person = {
  name: &amp;quot;Doori&amp;quot;,
  age: 28,
  gender: &amp;quot;female&amp;quot;
};

const sayHi = (person: Human): string =&amp;gt; {
  return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}!`;
};

console.log(sayHi(person));

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Human이라는 인터페이스를 객체형식으로 만들었고, sayHi라는 함수에 person의 타입을 Human으로 정의해주었다.&lt;br /&gt;
그랬더니 에러가 발생하지 않았다! 오 씐기씐기&lt;br /&gt;
주의할 점은 객체 쓰는것처럼 템플릿 리터럴 안의 변수명을 dot notation을 이용해 써야한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;인터페이스라는 개념은 JS에 없고 TS에만 있는거라는데.. &lt;br /&gt;나중에 한.. ES13쯤 가면 자바스크립트에도 분명 생긴다 ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;class-in-typescript&quot;&gt;&lt;a href=&quot;#class-in-typescript&quot; aria-label=&quot;class in typescript permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class in TypeScript&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Human {
  public name: string;
  public age: number;
  public gender: string;
  constructor(name: string, age: number, gender: string) {
    this.name = name;
    this.age = age;
    this.gender = gender;
  }
}

const chicken = new Human(&amp;quot;NeNe&amp;quot;, 10, &amp;quot;rooster&amp;quot;);

const sayHi = (person: Human): string =&amp;gt; {
  return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}!`;
};

console.log(sayHi(chicken));

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인터페이스와 비슷하지만 class를 이용하는 방법도 있다.&lt;br /&gt;
이걸 왜쓰냐? 자바스크립트가 인터페이스는 인식하지 못하기 때문! 또한 TS를 쓰는 측면에서 좀더 안전한 방법이라고 한다.&lt;/p&gt;
&lt;p&gt;만약에 Human 클래스 내부에 public을 private으로 쓰면 해당하는 인자를 Human 클래스 외부에서 쓸 수 없다. 예시를 한번 보자!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f8e55ed0-091b-11ea-aabc-79c24bf061cc/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;age를 public이 아닌 private으로 설정하면 요렇게 에러 발생!&lt;br /&gt;
코딩알못일땐 굉장히 쓸모없는 기능이라고 생각했을텐데.. 그래도 몇 달 공부했다고 저 기능이 나중에 유용하게 쓰일것 같단 생각이 팍팍ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;block-chain-만들기&quot;&gt;&lt;a href=&quot;#block-chain-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;block chain 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Block Chain 만들기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Block {
  public index: number;
  public hash: string;
  public previousHash: string;
  public data: string;
  public timestamp: number;
  constructor(
    index: number,
    hash: string,
    previousHash: string,
    data: string,
    timestamp: number
  ) {
    this.index = index;
    this.hash = hash;
    this.previousHash = previousHash;
    this.data = data;
    this.timestamp = timestamp;
  }
}

const genesisBlock: Block = new Block(0, &amp;quot;2020202020202&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Hello&amp;quot;, 123456);

let blockchain: Block[] = [genesisBlock];

console.log(blockchain);

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 콘솔도 아주 잘 찍힌다!&lt;br /&gt;
여기서 테스트 한 가지… blockchain에다가 다른걸 푸쉬해보자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;blockchain.push(&amp;quot;gold&amp;quot;);&lt;/code&gt; 를 한번 시험삼아 해보면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4389d730-091d-11ea-b582-93c0e6ad9fde/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠! 이렇게 에러 발생!
클래스 안의 parameter로 쓰이지 않은 값을 푸쉬하려니 당연히 되지 않는다.&lt;/p&gt;
&lt;h2 id=&quot;block-chain---two&quot;&gt;&lt;a href=&quot;#block-chain---two&quot; aria-label=&quot;block chain   two permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Block Chain - Two&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add crypto-js&lt;/code&gt; 명령어로 크립토 설치!&lt;br /&gt;
사실 니코의 다른 블록체인 강의를 듣지 못해서 블록체인 개념은 잘 모른다.&lt;br /&gt;
근데 일단 crypto가 해쉬를 위한 암호화 도구인걸로 이해했다!ㅋㅋ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import * as CryptoJS from &amp;quot;crypto-js&amp;quot;;

class Block {
  public index: number;
  public hash: string;
  public previousHash: string;
  public data: string;
  public timestamp: number;

// 여기서 static을 바깥에서 이 메소드를 부르지 못한다.
  static calculateBlockHash = (
    index: number,
    previousHash: string,
    timestamp: number,
    data: string
  ): string =&amp;gt;
    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();

  constructor(
    index: number,
    hash: string,
    previousHash: string,
    data: string,
    timestamp: number
  ) {
    this.index = index;
    this.hash = hash;
    this.previousHash = previousHash;
    this.data = data;
    this.timestamp = timestamp;
  }
}

const genesisBlock: Block = new Block(0, &amp;quot;2020202020202&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Hello&amp;quot;, 123456);

let blockchain: Block[] = [genesisBlock];

const getBlockchain = (): Block[] =&amp;gt; blockchain;

const getLastestBlock = (): Block =&amp;gt; blockchain[blockchain.length - 1];

const getNewTimeStamp = (): number =&amp;gt; Math.round(new Date().getTime() / 1000);

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;갑자기 알 수 없는 함수들이 많아지고 있는데.. 흠.. 일단.. 따라치고 본다…&lt;br /&gt;
따라치다 보면 타입스크립트가 익숙해지겠지 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;block-chain---three&quot;&gt;&lt;a href=&quot;#block-chain---three&quot; aria-label=&quot;block chain   three permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Block Chain - Three&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import * as CryptoJS from &amp;quot;crypto-js&amp;quot;;

class Block {
  public index: number;
  public hash: string;
  public previousHash: string;
  public data: string;
  public timestamp: number;

  static calculateBlockHash = (
    index: number,
    previousHash: string,
    timestamp: number,
    data: string
  ): string =&amp;gt;
    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();

  constructor(
    index: number,
    hash: string,
    previousHash: string,
    data: string,
    timestamp: number
  ) {
    this.index = index;
    this.hash = hash;
    this.previousHash = previousHash;
    this.data = data;
    this.timestamp = timestamp;
  }
}

const genesisBlock: Block = new Block(0, &amp;quot;2020202020202&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Hello&amp;quot;, 123456);

let blockchain: Block[] = [genesisBlock];

const getBlockchain = (): Block[] =&amp;gt; blockchain;

const getLastestBlock = (): Block =&amp;gt; blockchain[blockchain.length - 1];

const getNewTimeStamp = (): number =&amp;gt; Math.round(new Date().getTime() / 1000);

const createNewBlock = (data: string): Block =&amp;gt; {
  const previousBlock: Block = getLastestBlock();
  const newIndex: number = previousBlock.index + 1;
  const newTimestamp: number = getNewTimeStamp();
  const newHash: string = Block.calculateBlockHash(
    newIndex,
    previousBlock.hash,
    newTimestamp,
    data
  );
  const newBlock: Block = new Block(
    newIndex,
    newHash,
    previousBlock.hash,
    data,
    newTimestamp
  );
  return newBlock;
};

console.log(createNewBlock(&amp;quot;hello&amp;quot;), createNewBlock(&amp;quot;bye bye&amp;quot;));

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔을 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/463048a0-0929-11ea-9e05-cf069c31c421/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;값이 아주 잘 나오고 있다. crypto.js가 만들어낸 hash 넘나 신기..!&lt;br /&gt;
근데 보면 index 값이 동일하게 나온다. 그래서 다시 도전!!&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;block-chain---last&quot;&gt;&lt;a href=&quot;#block-chain---last&quot; aria-label=&quot;block chain   last permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Block Chain - Last&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import * as CryptoJS from &amp;quot;crypto-js&amp;quot;;

class Block {
  static calculateBlockHash = (
    index: number,
    previousHash: string,
    timestamp: number,
    data: string
  ): string =&amp;gt;
    CryptoJS.SHA256(index + previousHash + timestamp + data).toString();

  static validateStructure = (aBlock: Block): boolean =&amp;gt;
    typeof aBlock.index === &amp;quot;number&amp;quot; &amp;amp;&amp;amp;
    typeof aBlock.hash === &amp;quot;string&amp;quot; &amp;amp;&amp;amp;
    typeof aBlock.previousHash === &amp;quot;string&amp;quot; &amp;amp;&amp;amp;
    typeof aBlock.timestamp === &amp;quot;number&amp;quot; &amp;amp;&amp;amp;
    typeof aBlock.data === &amp;quot;string&amp;quot;;

  public index: number;
  public hash: string;
  public previousHash: string;
  public data: string;
  public timestamp: number;

  constructor(
    index: number,
    hash: string,
    previousHash: string,
    data: string,
    timestamp: number
  ) {
    this.index = index;
    this.hash = hash;
    this.previousHash = previousHash;
    this.data = data;
    this.timestamp = timestamp;
  }
}

const genesisBlock: Block = new Block(0, &amp;quot;2020202020202&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Hello&amp;quot;, 123456);

let blockchain: Block[] = [genesisBlock];

const getBlockchain = (): Block[] =&amp;gt; blockchain;

const getLastestBlock = (): Block =&amp;gt; blockchain[blockchain.length - 1];

const getNewTimeStamp = (): number =&amp;gt; Math.round(new Date().getTime() / 1000);

const createNewBlock = (data: string): Block =&amp;gt; {
  const previousBlock: Block = getLastestBlock();
  const newIndex: number = previousBlock.index + 1;
  const newTimestamp: number = getNewTimeStamp();
  const newHash: string = Block.calculateBlockHash(
    newIndex,
    previousBlock.hash,
    newTimestamp,
    data
  );
  const newBlock: Block = new Block(
    newIndex,
    newHash,
    previousBlock.hash,
    data,
    newTimestamp
  );
  addBlock(newBlock);
  return newBlock;
};

const getHashforBlock = (aBlock: Block): string =&amp;gt;
  Block.calculateBlockHash(
    aBlock.index,
    aBlock.previousHash,
    aBlock.timestamp,
    aBlock.data
  );

const isBlockValid = (candidateBlock: Block, previousBlock: Block): boolean =&amp;gt; {
  if (!Block.validateStructure(candidateBlock)) {
    return false;
  } else if (previousBlock.index + 1 !== candidateBlock.index) {
    return false;
  } else if (previousBlock.hash !== candidateBlock.previousHash) {
    return false;
  } else if (getHashforBlock(candidateBlock) !== candidateBlock.hash) {
    return false;
  } else {
    return true;
  }
};

const addBlock = (candidateBlock: Block): void =&amp;gt; {
  if (isBlockValid(candidateBlock, getLastestBlock())) {
    blockchain.push(candidateBlock);
  }
};

createNewBlock(&amp;quot;second block&amp;quot;);
createNewBlock(&amp;quot;third block&amp;quot;);
createNewBlock(&amp;quot;fourth block&amp;quot;);

console.log(blockchain);

export {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어디 콘솔을 한번 찍어보자..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7715bb80-092e-11ea-9e05-cf069c31c421/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;서로 다른 인덱스 넘버, 서로 다른 해시값! 아주 잘 찍히고 있다.&lt;br /&gt;
사실 블록체인은 아직도 모르겠다..ㅋㅋㅋ&lt;br /&gt;
예전같으면 블록체인의 원리와 역사 다 검색해서 포스팅에 넣었을텐데.. 시간이 매우 없다ㅠ&lt;br /&gt;
깊게 파보는건 다음 기회에!!!! 공부할 게 넘넘 많다리~~~&lt;/p&gt;
&lt;p&gt;근데 대충 타입스크립트가 어떻게 적용되는지는 얼추 알겠다.&lt;br /&gt;
빠른 시일 내에 내가 CRA로 만든 페이지들을 타입스크립트로 변형해서 올릴수 있기를..😂😂&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;노마드코더 타입스크립트로 블록체인 만들기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[구글 웹 세미나-Google Search Engine과 이것저것]]></title><description><![CDATA[이번주 수요일에 있었던 구글 웹지식 세미나를 다녀온 후기훅이~ 잘못된 정보는 추후 수정할 예정입니다!]]></description><link>https://gollumnima.github.io//posts/google_searchEngine</link><guid isPermaLink="false">https://gollumnima.github.io//posts/google_searchEngine</guid><pubDate>Fri, 08 Nov 2019 11:54:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e234f8e0-01cc-11ea-b83c-616848bbc88e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;정성스럽게 쓴 글이 구글에 검색이 잘 안 된다면 너무너무너무 슬프겠죠..? ㅠㅠ
내가 쓴 글이 구글 검색결과에 잘 나오게 하려면 Google Search Console을 잘 이용해야 하는데요!
이를 위해 구글에서 개발자들을 위한 세미나를 열어주었죠.. 물론 저도 참석했고요 :)
구글 스타트업 캠퍼스에서 열린 &amp;#x3C;웹 개발자들을 위한 잡다한 웹지식 세미나&gt;를 다녀온 따끈따끈한 후기, 지금 바로 시작합니다 😁 &lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;구글-검색-꿀팁&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EA%B8%80-%EA%B2%80%EC%83%89-%EA%BF%80%ED%8C%81&quot; aria-label=&quot;구글 검색 꿀팁 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구글 검색 꿀팁&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;큰 따옴표 이용
“위코드 후기”
따옴표 안에 입력한 문장과 정확히 일치하는 게시물만 보여줍니다.&lt;/li&gt;
&lt;li&gt;검색어 제외(-)
선릉맛집 -강남
빼기 연산자뒤의 단어를 제외한 검색결과만 보여줍니다.
이 기능은 인스타그램 같은 sns에서 꼭 필요한 기능인데.. 언젠간 개발되겠죠 ?!&lt;/li&gt;
&lt;li&gt;사이트 연산자[site:]
site:naver.com 위코드
입력한 사이트에서만 원하는 키워드에 해당하는 검색결과만 보여줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/caef70a0-0098-11ea-ba64-27b38625d2d6/image.png&quot; alt=&quot;image.png&quot;&gt;
다음과 같이 네이버에서 위코드를 검색한 결과만 보여줍니다.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;data range
datarange:2019-11-01..2019-11-03를 설정하거나
검색결과-도구에서 날짜 지정하면 해당하는 날짜내의 검색결과만 보여줍니다.&lt;/li&gt;
&lt;li&gt;link:url
link:www.naver.com
특정 페이지로 연결된 페이지를 검색해줍니다.&lt;/li&gt;
&lt;li&gt;와일드 카드[*]
특정 키워드 사이에 들어갈 정확한 단어를 모를 때 사용할 수 있습니다.
ex) 위코드 * 부트캠프&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b7759a10-009b-11ea-bf5b-5f5bf406a908/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;계산기
간단한 계산도 검색창에서 가능합니다. 평소에 자주 쓰는 방법인데 테라바이트 계산도 해줄지는 몰랐네요!
ex) 1TB * (1.15^4)&lt;/li&gt;
&lt;li&gt;특정 파일 타입 찾기 [filetype:]
filetype과 키워드를 입력하면 해당하는 키워드의 해당하는 형식의 파일만 보여줍니다.
ex) filetype:pdf 커피 지출 통계&lt;/li&gt;
&lt;li&gt;언어/국가 변경
h1=[language code]
gl=[country code]
h1=ko&amp;#x26;gl=kr 라고 입력하면 한국에서 한국어로 검색한 결과를 보여줍니다.&lt;/li&gt;
&lt;li&gt;bonus!
answer to life and universe and everything
라고 검색하면 42 나옵니다 ㅋㅋ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;소설 은하수를 여행하는 히치하이커들을 위한 안내서에 나오는 구절 중에 하나인데…
영화로 재밌게 봤는데도 이걸 기억하지 못했네요! 조만간 위코드 계정지기는 독서삼매경에 빠질 예정입니다~!&lt;/p&gt;
&lt;h2 id=&quot;구글에-검색이-잘-되게-하려면&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EA%B8%80%EC%97%90-%EA%B2%80%EC%83%89%EC%9D%B4-%EC%9E%98-%EB%90%98%EA%B2%8C-%ED%95%98%EB%A0%A4%EB%A9%B4&quot; aria-label=&quot;구글에 검색이 잘 되게 하려면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구글에 검색이 잘 되게 하려면?&lt;/h2&gt;
&lt;p&gt;시대가 변함에 따라, 구글 검색 알고리즘에도 변화가 생겼는데요!
현재 구글은 사이트 속도, https 사용 유무, 모바일 친화 여부 등을 포함해 다양한 조건들을 통해 검색랭킹을 결정합니다.&lt;/p&gt;
&lt;h3 id=&quot;모바일-친화성-체크하기&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%B9%9C%ED%99%94%EC%84%B1-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;모바일 친화성 체크하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모바일 친화성 체크하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;모바일 친화성 테스트 페이지
아래의 페이지에 접속해서 페이지 주소를 넣으면 구글봇이 테스트한 결과가 나옵니다.
이를 통해 모바일 페이지에서 생길 문제를 알려주고, 내 사이트가 얼마나 모바일에 친화적인지 알 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://search.google.com/test/mobile-friendly?hl=ko&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://search.google.com/test/mobile-friendly?hl=ko&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;search console url 검사도구
위의 사이트보다 좀 더 자세한 정보를 알려줍니다.
본인이 소유한 페이지주소를 입력하면 URL검사를 실행합니다.
이 때, url이 Google에 등록되지 않았다는 메시지가 나온다면 구글에 노출되지 않는다는 말이니까 조치를 취해야겠지요? :)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;https-사용하기&quot;&gt;&lt;a href=&quot;#https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;https 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Https 사용하기&lt;/h3&gt;
&lt;p&gt;https는 HTTP Over Security Socket Layer!
즉, 보안이 강화된 http라고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;그럼 왜 https를 쓸까요?
이유인즉슨, 인터넷사용자와 서비스 제공자가 안전하게 통신하기 위함입니다.
다시 말해..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;제 3자가 중간에서 메시지 가로채지 못하도록&lt;/li&gt;
&lt;li&gt;트래픽을 분석해서 사용자를 특정하지 못하도록&lt;/li&gt;
&lt;li&gt;https가 필수인 최신 웹기술을 사용하도록&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이지요!&lt;/p&gt;
&lt;p&gt;그렇지만 https를 쓰는 방법이 100% 안전한 방법은 아닙니다.&lt;/p&gt;
&lt;p&gt;웹브라우저에서 웹 서버로 가는 통로에 메시지들은 암호화가 되어있지만
그 메시지가 전송되기 전에 제 3자가 메시지가 가로챌 수 있기 때문입니다.
이에 대한 해결방법으론 Trusted Recursive Resolver나 DNS over HTTPS를 이용 혹은 최소 데이터만 전송하는 방법이 있겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hacks.mozilla.or.kr/2019/10/a-cartoon-intro-to-dns-over-https/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://hacks.mozilla.or.kr/2019/10/a-cartoon-intro-to-dns-over-https/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위의 Hacks 웹 기술 블로그를 참고하시면 이 과정에 대해 잘 나와있습니다!&lt;/p&gt;
&lt;h3 id=&quot;light-house-사용하기&quot;&gt;&lt;a href=&quot;#light-house-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;light house 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Light House 사용하기&lt;/h3&gt;
&lt;p&gt;라이트하우스는 웹앱 품질 개선 도구입니다. 개발자도구 탭의 Audits를 클릭해보면 확인해볼 수 있습니다.
이를 통해 웹앱의 성능, 접근성, SEO를 검사할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/de108130-0087-11ea-b8e4-c31c48ace1f7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그 밖에…&lt;/p&gt;
&lt;h2 id=&quot;구글은-자바스크립트를-싫어한다&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EA%B8%80%EC%9D%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%8B%AB%EC%96%B4%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;구글은 자바스크립트를 싫어한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구글은 자바스크립트를 싫어한다???&lt;/h2&gt;
&lt;p&gt;JavaScript를 많이 쓰면 구글 검색노출이 잘 안된다는 뜬소문도 있었다봅니다..!
하지만 자바스크립트가 웹에서 점점 더 중요해짐에 따라 많은 것들을 지원하고 있습니다.&lt;/p&gt;
&lt;p&gt;구글봇 41에서 현재는 에버그린으로 변화도 했고,
크롬이 새로운 버전을 출시하면 구글봇도 이에 따라 버전을 업그레이드합니다.
예를 들어.. 최근에는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6+ &lt;/li&gt;
&lt;li&gt;새로운 web API &lt;/li&gt;
&lt;li&gt;Less polyfills&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등의 요소들을 지원하고 있지요!&lt;/p&gt;
&lt;p&gt;구글봇이 궁금하다면 하단의 링크로 들어가시면 됩니다!
bit.ly/evergreen-googlebot&lt;/p&gt;
&lt;h2 id=&quot;다양한-랜더링-방식&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%9E%9C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;다양한 랜더링 방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다양한 랜더링 방식&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Universal Javascript
자바스크립트가 서버에서도, 클라이언트에서도 돌아갈 수 있게 하는 것을 옛날에 저렇게 불렀습니다.&lt;/li&gt;
&lt;li&gt;Server-side rendering
페이지가 자주 바뀌지 않는 경우는 pre-rendering이라고 해서 페이지가 바뀔 때 랜더링 되게 하는 방식입니다. 요즘 많이들 쓰는 방식이지요.&lt;/li&gt;
&lt;li&gt;SSR + hydration
서버사이드 랜더링 + 사용자의 인터랙션에 따라 페이지가 랜더링 되는 것입니다.&lt;/li&gt;
&lt;li&gt;Dynamic Rendering
구글봇이 들어올때와 사용자가 접속했을때 각각 다른페이지를 보여주는 방식입니다.
구글 측에선 굳이 이렇게 설정할 필요 없다고 하네요! 그냥 사용자가 보는 그대로를 구글봇에게 보여주면 된다고 합니다~!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;server-side-renderingssr&quot;&gt;&lt;a href=&quot;#server-side-renderingssr&quot; aria-label=&quot;server side renderingssr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Server Side Rendering(SSR)&lt;/h2&gt;
&lt;p&gt;프론트앤드 단에서 어떤 툴을 쓰느냐에 따라 서버사이드 랜더링을 하는 방법은 다양합니다 :)&lt;/p&gt;
&lt;h4 id=&quot;리액트를-쓴다면&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%93%B4%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;리액트를 쓴다면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리액트를 쓴다면?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;react-snap&lt;/li&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;뷰를-쓴다면&quot;&gt;&lt;a href=&quot;#%EB%B7%B0%EB%A5%BC-%EC%93%B4%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;뷰를 쓴다면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뷰를 쓴다면?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue-server-renderer&lt;/li&gt;
&lt;li&gt;prerender-spa-plugin&lt;/li&gt;
&lt;li&gt;Nuxt.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;앵귤러를-쓴다면&quot;&gt;&lt;a href=&quot;#%EC%95%B5%EA%B7%A4%EB%9F%AC%EB%A5%BC-%EC%93%B4%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;앵귤러를 쓴다면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;앵귤러를 쓴다면?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;server.engine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 구글은 SSR을 권장하지 않는다고 하네요..!
제가 아직 서버사이드랜더링 방식을 제대로 이해하지 못해서 그 이유에 대해선 조금 더 알아봐야 겠지만..
구글에서의 SEO 때문에 SSR 방식을 선택한거라면 굳이 그럴 필욘 없을것도 같네요!
(이 부분은 좀 더 조사한 후에 덧붙이겠습니다!!!!)&lt;/p&gt;
&lt;h2 id=&quot;lazy-loading&quot;&gt;&lt;a href=&quot;#lazy-loading&quot; aria-label=&quot;lazy loading permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Loading&lt;/h2&gt;
&lt;p&gt;새 화면이 로드 될때마다 매번 이미지가 동시다발적으로 화면에 뜬다면 메모리 소모가 굉장히 큽니다.
그래서 이미지나 비디오를 로드할때는 lazy loading방식을 적용해야 하는데요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6e67d250-01ce-11ea-80da-adf3f5cc6cf2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 방식으로 이미지를 로드하면 사용자의 intersection을 통해 표준화된 방식으로 lazy-loading된 콘텐츠를 볼 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bit.ly/native-lazyload&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://bit.ly/native-lazyload&lt;/a&gt;
위의 페이지를 접속해보면 native lazy-loading 방식에 대해 자세히 나와있는데요.
크롬 75버전부터는 img와 video태그에 &lt;code class=&quot;language-text&quot;&gt;loading=&amp;quot;lazy&amp;quot;&lt;/code&gt; 속성을 적용하면 레이지로딩을 native로 지원한다고 하네요!&lt;/p&gt;
&lt;p&gt;발표하신 엔지니어 분께서 강조하신 부분을 다시금 정리하자면.. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지를 이해하는데 필요한 서버 리소스들이 열려있어야 합니다.&lt;/li&gt;
&lt;li&gt;lazy-loading content를 이해할 수 있도록 만드는 게 중요합니다.&lt;/li&gt;
&lt;li&gt;모바일 친화적으로 페이지를 만들어야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;페이지를 만들땐, 구글 검색이 어떻게 잘 될까를 고민하기 보다는 사용자에게 어떻게 좋게 보이는지를 고민해야 한다고 하네요!
사용자 친화적인 페이지를 만들면 구글은 그걸 따라간다고 했습니다! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[AWS EC2 서버뚫기 성공기!]]></title><description><![CDATA[위코드 AWS 세션 때 EC2 서버 뚫기를 도전했다가 실패를 했고, 세션을 한 번 더 들은 이후 드디어 성공한 과정을 써본다.]]></description><link>https://gollumnima.github.io//posts/aws_ec2_re</link><guid isPermaLink="false">https://gollumnima.github.io//posts/aws_ec2_re</guid><pubDate>Wed, 06 Nov 2019 15:38:23 GMT</pubDate><content:encoded>&lt;p&gt;지난번 EC2 뚫기를 실패했던 나의 포스팅..
지난번에 이어 다시 도오전!!!!!!!! 💪💪&lt;/p&gt;
&lt;p&gt;키 발급에 대한 절차는 &lt;a href=&quot;https://gollumnima.github.io/posts/wecode6_3TIL_AWS_server
&quot;&gt;지난번 포스팅&lt;/a&gt;에 있고, 이번 포스팅은 AWS에서 EC2 서버 뚫는 과정과
그 서버에 깃 클론 및 업데이트하는 방법을 다뤄보았다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4a3d8c30-fea4-11e9-91aa-f1a56bb2ab64/image.png&quot; alt=&quot;image.png&quot;&gt;
(사진은 무료이미지 사이트인 pixabay에서 아마존 검색해서 나온 사진ㅋㅋ)&lt;/p&gt;
&lt;h2 id=&quot;시작은-1달러-지불부터&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%EC%9D%80-1%EB%8B%AC%EB%9F%AC-%EC%A7%80%EB%B6%88%EB%B6%80%ED%84%B0&quot; aria-label=&quot;시작은 1달러 지불부터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작은 1달러 지불부터..&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fbe2d390-0058-11ea-be1d-51a61fcaa9c7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS에 횐갑하고, 카드 정보를 등록하면 1달러가 나간다.&lt;br /&gt;
나중에 다시 환급 되긴 하는데.. 나는 돈이 두번 나갔다…왜죠..? 😭&lt;/p&gt;
&lt;p&gt;EC2 용량 많이 준다 했지만.. 한 달 열어놓으니 돈이 저정도 나온다&lt;br /&gt;
백앤드는 치킨값 뽑은 분도 있다 ㅋㅋㅋㅋㅋ 다들 과금 조심!&lt;/p&gt;
&lt;h2 id=&quot;인스턴스-시작&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%8B%9C%EC%9E%91&quot; aria-label=&quot;인스턴스 시작 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인스턴스 시작&lt;/h2&gt;
&lt;h4 id=&quot;1단계-ami-선택&quot;&gt;&lt;a href=&quot;#1%EB%8B%A8%EA%B3%84-ami-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;1단계 ami 선택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1단계 AMI 선택&lt;/h4&gt;
&lt;p&gt;3번째에 있는 우분투 서버 18.04
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ad4e2920-e035-11e9-b95d-93ba0d1a0cbf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2단계-인스턴스-유형-선택&quot;&gt;&lt;a href=&quot;#2%EB%8B%A8%EA%B3%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%9C%A0%ED%98%95-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;2단계 인스턴스 유형 선택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2단계 인스턴스 유형 선택&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b7efdef0-e035-11e9-b95d-93ba0d1a0cbf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3단계-인스턴스-구성&quot;&gt;&lt;a href=&quot;#3%EB%8B%A8%EA%B3%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;3단계 인스턴스 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3단계 인스턴스 구성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3d1bf910-e036-11e9-a5fc-75251a85beee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;종료방지 기능 활성화를 눌렀기 때문에 ec2를 종료하려면 미리 설정변경하고 종료해야됨!&lt;/p&gt;
&lt;h4 id=&quot;4단계-스토리지-추가&quot;&gt;&lt;a href=&quot;#4%EB%8B%A8%EA%B3%84-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;4단계 스토리지 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4단계 스토리지 추가&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a514a440-e036-11e9-a5fc-75251a85beee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;5단계-태그추가&quot;&gt;&lt;a href=&quot;#5%EB%8B%A8%EA%B3%84-%ED%83%9C%EA%B7%B8%EC%B6%94%EA%B0%80&quot; aria-label=&quot;5단계 태그추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5단계 태그추가&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cc3a4f20-e036-11e9-8e95-fffafd57bcb8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;key를 Name으로, 값은 프로젝트 이름으로 설정해준다!&lt;/p&gt;
&lt;h4 id=&quot;6단계-보안-그룹-구성&quot;&gt;&lt;a href=&quot;#6%EB%8B%A8%EA%B3%84-%EB%B3%B4%EC%95%88-%EA%B7%B8%EB%A3%B9-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;6단계 보안 그룹 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6단계 보안 그룹 구성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/21024210-e037-11e9-a5fc-75251a85beee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;매번 새로 만들 필요 없고 지난번에 만든 보안그룹 불러오기 하면 됨&lt;/p&gt;
&lt;h4 id=&quot;7단계-검토&quot;&gt;&lt;a href=&quot;#7%EB%8B%A8%EA%B3%84-%EA%B2%80%ED%86%A0&quot; aria-label=&quot;7단계 검토 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7단계 검토&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/536cc090-e037-11e9-b95d-93ba0d1a0cbf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;나는 포트를 공용포트인 3000으로 설정해놨기 때문에 보안 경고가 뜨긴 하는데 무시 ㄱㄱ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b719b850-e037-11e9-ad63-333d6909c4f1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;기존 키 갖다쓰기 클릭하면…&lt;/p&gt;
&lt;p&gt;짠! Ec2서버가 두개 되었다!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f43dc4f0-e038-11e9-b95d-93ba0d1a0cbf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;다시 우분투 서버 접속하기 &lt;br /&gt;
각자 경로와 ip주소에 맞게 아래의 명령어 바꾸기 !! 😆  &lt;br /&gt;
&lt;code class=&quot;language-text&quot;&gt;ssh -i 다운로드/dooreplay.pem ubuntu@13.124.97.235&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5adcac80-e039-11e9-b95d-93ba0d1a0cbf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;yes 하면 됨. 처음 접속하는 ip라서 일단 경고창 처럼 나오는 것.&lt;/p&gt;
&lt;h2 id=&quot;node랑-다-설치하기&quot;&gt;&lt;a href=&quot;#node%EB%9E%91-%EB%8B%A4-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;node랑 다 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;node랑 다 설치하기&lt;/h2&gt;
&lt;p&gt;아래의 명령어 3개 고대로 입력하시면 됩니다~&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;sudo apt-get update&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(우분투 유저들을 위한 sudo 버전 ㅋㅋ!)&lt;/p&gt;
&lt;h2 id=&quot;버전확인쓰&quot;&gt;&lt;a href=&quot;#%EB%B2%84%EC%A0%84%ED%99%95%EC%9D%B8%EC%93%B0&quot; aria-label=&quot;버전확인쓰 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;버전확인쓰&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/496a50a0-e03a-11e9-b269-af6cf637a48e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;project-clone&quot;&gt;&lt;a href=&quot;#project-clone&quot; aria-label=&quot;project clone permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;project clone&lt;/h2&gt;
&lt;p&gt;다들 아는 방법쓰~ &lt;code class=&quot;language-text&quot;&gt;git clone 프로젝트 깃 주소&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;npm-혹은-yarn-깔기&quot;&gt;&lt;a href=&quot;#npm-%ED%98%B9%EC%9D%80-yarn-%EA%B9%94%EA%B8%B0&quot; aria-label=&quot;npm 혹은 yarn 깔기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;npm 혹은 yarn 깔기&lt;/h2&gt;
&lt;p&gt;지난번에 npm 깔았다 sass 문제가 생겼기 때문에 yarn 깔아주기
&lt;code class=&quot;language-text&quot;&gt;sudo apt-get install yarn&lt;/code&gt;
npm 깔 사람은 &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;고고!&lt;/p&gt;
&lt;p&gt;이 블로그 참고해서 했음
&lt;a href=&quot;https://blkcoding.blogspot.com/2019/04/yarn-install-instead-of-cmdtest.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blkcoding.blogspot.com/2019/04/yarn-install-instead-of-cmdtest.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; aria-label=&quot;express permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;express&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add express&lt;/code&gt; express를 프로젝트 폴더 내부에서 해줘야 함!&lt;/p&gt;
&lt;h2 id=&quot;로컬-서버-바꿔주기&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EC%BB%AC-%EC%84%9C%EB%B2%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;로컬 서버 바꿔주기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로컬 서버 바꿔주기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vi&lt;/code&gt; 치고 i 눌러서 입력모드로 들어가기
근데 여기서 잠깐! 제목을 입력 안해주면 안된다리&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vi server.js&lt;/code&gt; 라고 써주기
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/329dcca0-e03d-11e9-a5fc-75251a85beee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const express = require(&amp;#39;express&amp;#39;);
const path = require(&amp;#39;path&amp;#39;);
const env = process.env.ENV;
const app = express();
app.get(&amp;#39;/ping&amp;#39;, function(req, res) {
 res.send(&amp;#39;pong&amp;#39;);
});
app.use(&amp;#39;/&amp;#39;, express.static(path.join(__dirname, &amp;#39;build&amp;#39;)));
app.get(&amp;#39;/*&amp;#39;, function (req, res) {
 res.set({
   &amp;quot;Cache-Control&amp;quot;: &amp;quot;no-cache, no-store, must-revalidate&amp;quot;,
   &amp;quot;Pragma&amp;quot;: &amp;quot;no-cache&amp;quot;,
   &amp;quot;Date&amp;quot;: new Date()
 });
 res.sendFile(path.join(__dirname, &amp;#39;build&amp;#39;, &amp;#39;index.html&amp;#39;));
});
app.listen(8080, () =&amp;gt; {
 console.log(&amp;#39;listening: &amp;#39; + env);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이거 쓴 다음에 밑에서 두번째 줄 port 8080-&gt;3000으로 바꾸기&lt;br /&gt;
(내가 ec2 port를 위에서 3000으로 설정해주었기 때문)&lt;/p&gt;
&lt;h2 id=&quot;build&quot;&gt;&lt;a href=&quot;#build&quot; aria-label=&quot;build permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;build&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo yarn build&lt;/code&gt; 해주고&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f615c700-e03d-11e9-8e95-fffafd57bcb8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뭔가 성공적인 느낌쓰…! 그래도 명령어를 또 입력해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;node server.js&lt;/code&gt; server.js 파일을 읽어서 node가 돌아간것&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nohup node server.js &amp;amp;&lt;/code&gt; 이걸 해줘야지 서버를 꺼도 주소창 입력하면 됨&lt;/p&gt;
&lt;p&gt;드디어 성공했슴다 오예!!!&lt;/p&gt;
&lt;h2 id=&quot;추후-repo가-업데이트-되었다면&quot;&gt;&lt;a href=&quot;#%EC%B6%94%ED%9B%84-repo%EA%B0%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%90%98%EC%97%88%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;추후 repo가 업데이트 되었다면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추후.. Repo가 업데이트 되었다면..&lt;/h2&gt;
&lt;p&gt;분명 최종본을 git에서 merge했는데 그게 안 뜬다!!
그 이유는.. 나의 로컬 서버는 업데이트를 했지만 우분투 서버는 업데이트 해주지 않았기 때문 ㅠㅠ
그럴땐..!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;우분투 서버 접속&lt;/li&gt;
&lt;li&gt;cd 명령어로 내 프로젝트 디렉토리에 접근&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git pull origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sudo yarn build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pull과 build까지 마치면 성공적으로 아마존 서버에 있는 작업물도 업데이트 할 수 있다!!&lt;br /&gt; 룰루~~♬&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React에서 자식 컴포넌트끼리의 데이터 교환]]></title><description><![CDATA[2차 프로젝트 때 나에게 두통을 줬던 자식 컴포넌트에서 자식 컴포넌트로 데이터 보내기... 까먹을 수도 있으니 기억을 더듬아 다시 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/react_sibling_component</link><guid isPermaLink="false">https://gollumnima.github.io//posts/react_sibling_component</guid><pubDate>Mon, 04 Nov 2019 21:47:23 GMT</pubDate><content:encoded>&lt;hr&gt;
&lt;p&gt;2차 프로젝트 때의 기억을 더듬어 써보는 포스팅..
코드 엉성함 주의 😂😂😂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/45e0c9f0-e125-11e9-ac74-991045cdf4ca/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;sibling-component간-데이터-교환&quot;&gt;&lt;a href=&quot;#sibling-component%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%90%ED%99%98&quot; aria-label=&quot;sibling component간 데이터 교환 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sibling component간 데이터 교환&lt;/h2&gt;
&lt;p&gt;일반적으로 우리가 부모 component에서 자식 component로 데이터를 보낼땐 props를 이용한다.&lt;br /&gt;
하지만, 반대로 자식에서 부모에게 데이터를 보낼 수 있는 것일까?!&lt;br /&gt;
정통(?)적으론 힘든 일이라서 리덕스나 컨텍스트같은 개념들이 나왔겠지..?&lt;br /&gt;
하지만 우리의 리액트세상에 불가능이란 없다!! 할 수는 있다 ㅋㅋ&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;콜백함수&quot;&gt;&lt;a href=&quot;#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98&quot; aria-label=&quot;콜백함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콜백함수&lt;/h2&gt;
&lt;p&gt;그때도 지금도 나에겐 아직 넘나 어색한 콜백함수를 이용하면 자식에서 부모로 정보를 넘길 수 있다.&lt;br /&gt;
그렇다면 콜백함수란 뭘까?&lt;br /&gt;
바로바로!! 함수를 인자로 사용하는 함수를 말한다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;예시를 통해 살펴보자…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d882a770-fe2f-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2차 프로젝트인 애드워드 프로젝트에서 골치 아팠던 것 중 하나..&lt;br /&gt;
동영상 업로드 버튼을 누르면 모달창이 뜨는데!&lt;/p&gt;
&lt;h4 id=&quot;막판에-급하게-모바일-버전으로-수정하느라-css가-깨진건-무시해주세요-ㅋㅋ&quot;&gt;&lt;a href=&quot;#%EB%A7%89%ED%8C%90%EC%97%90-%EA%B8%89%ED%95%98%EA%B2%8C-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%90%EB%9D%BC-css%EA%B0%80-%EA%B9%A8%EC%A7%84%EA%B1%B4-%EB%AC%B4%EC%8B%9C%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94-%E3%85%8B%E3%85%8B&quot; aria-label=&quot;막판에 급하게 모바일 버전으로 수정하느라 css가 깨진건 무시해주세요 ㅋㅋ permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(막판에 급하게 모바일 버전으로 수정하느라 css가 깨진건 무시해주세요 ㅋㅋ)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f736dd0-fe30-11e9-8a44-a5519ded29c0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;왼쪽에 광고영상 업로드, 퀴즈 업로드라는 두개의 탭이 있고,
각각의 탭을 누를 경우 오른쪽 빈 공간에 해당 탭의 컴포넌트를 불러오는 식이다.&lt;/p&gt;
&lt;p&gt;근데 우리 프로젝트 특성상, 광고영상 고유의 id가 있어야 했고,
그 아이디는 광고정보를 ‘POST’로 보냈을 때 모든 정보가 유효하면 백앤드쪽에서 넘어 오는 id였고,
나는 해당하는 id를 퀴즈 업로드 시 ‘POST’로 같이 부쳐줘야 했다!&lt;/p&gt;
&lt;p&gt;이틀을 고민해도 답이 안 나왔는데..
동기 사랑~ 나라 사랑~~ 광훈님의 도움으로😆 콜백함수를 이용하게 되었다!&lt;/p&gt;
&lt;p&gt;일단.. 코드를 보기 전 내 컴포넌트 구조를 다시 한번 살펴보자면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9622be30-fe32-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;ModalForm이라는 부모 컴포넌트 하에
AdVideoForm과 AdQuizForm이라는 자식 컴포넌트들이 있는 건데..&lt;br /&gt;
resId라는 값을 자식=&gt;부모=&gt;자식 컴포넌트 순으로 전달을 해야 하는 것!&lt;/p&gt;
&lt;p&gt;일단 부모 컴포넌트에 콜백함수를 작성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// ModalForm.js(부모 컴포넌트)
class ModalForm extends Component {
  constructor() {
    super();
    this.state = {
      activeTab: &amp;quot;videoTab&amp;quot;,
      visible: true,
      resId: 0
    };
  }

  onUpdateResId = resId =&amp;gt; {
    this.setState({
      resId: resId
    });
  };

  switchMenu = activeTab =&amp;gt; {
    this.setState({ activeTab: activeTab });
  };

  onClose = () =&amp;gt; {
    const { visible } = this.state;
    if (visible === !!visible) {
      this.setState({
        visible: false
      });
    } else {
      this.setState({
        visible: true
      });
    }
  };

  render() {
    let subView = [
      { videoTab: &amp;lt;AdVideoForm onUpdateResId={this.onUpdateResId} key=&amp;quot;0&amp;quot; /&amp;gt; },
      { quizTab: &amp;lt;AdQuizForm key=&amp;quot;1&amp;quot; resId={this.state.resId} /&amp;gt; }
    ];

    return (
      &amp;lt;ModalBackground canSee={this.visible}&amp;gt;
        &amp;lt;ModalWrapper&amp;gt;
          &amp;lt;TitleWrapper&amp;gt;
            &amp;lt;TitleLetters&amp;gt;Adwards&amp;lt;/TitleLetters&amp;gt;
          &amp;lt;/TitleWrapper&amp;gt;
          &amp;lt;AdVideoWrapper&amp;gt;
            &amp;lt;AdLeft&amp;gt;
              &amp;lt;LeftUL&amp;gt;
                &amp;lt;AdSideLILef
                  active={this.state.activeTab === &amp;quot;videoTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;videoTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;광고 영상 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLILef&amp;gt;
                &amp;lt;AdSideLIRig
                  active={this.state.activeTab === &amp;quot;quizTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;quizTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;퀴즈 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLIRig&amp;gt;
              &amp;lt;/LeftUL&amp;gt;
            &amp;lt;/AdLeft&amp;gt;
            &amp;lt;AdRight&amp;gt;
              {subView.map((el, key) =&amp;gt; {
                el.key = key;
                return el[this.state.activeTab];
              })}
            &amp;lt;/AdRight&amp;gt;
          &amp;lt;/AdVideoWrapper&amp;gt;
          &amp;lt;CloseOK&amp;gt;
            &amp;lt;CloseLetter cancel onClick={this.onClose}&amp;gt;
              취소
            &amp;lt;/CloseLetter&amp;gt;
            &amp;lt;Link to=&amp;quot;/biz_main&amp;quot; style={{ textDecoration: &amp;quot;none&amp;quot; }}&amp;gt;
              &amp;lt;CloseLetter&amp;gt;확인&amp;lt;/CloseLetter&amp;gt;
            &amp;lt;/Link&amp;gt;
          &amp;lt;/CloseOK&amp;gt;
        &amp;lt;/ModalWrapper&amp;gt;
      &amp;lt;/ModalBackground&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하나하나 코드를 다시 뜯어보자면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8a5256f0-fe33-11e9-8a44-a5519ded29c0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;먼저 부모 컴포넌트의 state에 resId를 0으로 초기화 시켜주고..&lt;br /&gt;
onUpdateResId 라는 함수를 만들고, 들어오는 값과 동일한 값으로 state값을 업데이트 시키기&lt;/p&gt;
&lt;p&gt;이제 자식컴포넌트로 가서…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// AdVideoForm(resId를 받는 자식컴포넌트)
// .... 중략..
  onClickSave = e =&amp;gt; {
    const {
      videoTitle,
      videoLink,
      videoThumbnail,
      videoCate,
      videoDesc,
      videoBudget,
      videoPrice,
      tags,
      videoInterests
    } = this.state;

    const title = videoTitle.trim();
    const link = videoLink.trim();
    const thumbnail = videoThumbnail.trim();
    const desc = videoDesc.trim();
    const cate = videoCate;
    const budget = videoBudget.trim();
    const price = videoPrice.trim();
    const interests = videoInterests;
    const tag = tags;

    if (
      title === &amp;quot;&amp;quot; ||
      link === &amp;quot;&amp;quot; ||
      thumbnail === &amp;quot;&amp;quot; ||
      desc === &amp;quot;&amp;quot; ||
      cate === &amp;quot;&amp;quot; ||
      budget === &amp;quot;&amp;quot; ||
      price === &amp;quot;&amp;quot;
    ) {
      alert(&amp;quot;모든 칸을 채워주세요&amp;quot;);
    } else {
      fetch(&amp;quot;http://13.125.254.18:8000/advertisement&amp;quot;, {
        method: &amp;quot;POST&amp;quot;,
        headers: {
          Authorization: `${AuthAd}`
        },
        body: JSON.stringify({
          title: title,
          video_link: link,
          thumbnail: thumbnail,
          ad_category_id: cate,
          description: desc,
          budget: budget,
          price_per_view: price,
          tag: tag,
          interests_type_id: interests
        })
      })
        .then(response =&amp;gt; {
          if (response.status !== 200) {
            return response.json();
          } else {
            alert(&amp;quot;영상 정보가 저장되었습니다.&amp;quot;);
            return response.json();
          }
        })
        .then(response =&amp;gt; {
          this.props.onUpdateResId(response);
          this.setState({
            resId: response
          });
        });
  // 중략...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 코드를 하나 하나 뜯어보자! 씹고 뜯고 맛보고 즐기고~😜&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0ba15df0-fe34-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까와 마찬가지로 resId를 state안에 넣어서 초기화 해주고..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/54255cc0-fe34-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;유저가 입력한 정보가 서버로 잘 보내지면 response에서 resId가 넘어오는데
여기서 부모컴포넌트에 썼던 onUpdateResId라는 함수를 props로 넘겨서 response를 받는다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/bb264f90-fe36-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;개발자도구-네트워크 탭을 확인해보면 값이 아주 잘 들어왔다!&lt;br /&gt;
이렇게 resId를 업데이트 해주고 다시 부모컴포넌트로 돌아가서..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9d0c0a70-fe33-11e9-8a44-a5519ded29c0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;response를 통해 받은 값을 콜백함수를 통해 resId에 담아서 업데이트를 해주었다!&lt;br /&gt;
이제 이 업데이트한 값을 또 다른 자식 컴포넌트로 보내야 하는데..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ffe17170-fe34-11e9-aff5-3513ca67697d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;바로 아래에 또다른 자식컴포넌트를 부르는 탭이 있어서&lt;br /&gt;
저기다가 바로 resId를 부모 컴포넌트의 state의 resId라고 대입을 해준다!&lt;/p&gt;
&lt;p&gt;이제 AdQuizForm 컴포넌트로 넘어가보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  onSaveQuiz = e =&amp;gt; {
    const {
      quizQuestion,
      quizRightAnswer,
      testOne,
      testTwo,
      testThree,
      testFour
    } = this.state;
    const question = quizQuestion.trim();
    question.trim();
    if (
      question === &amp;quot;&amp;quot; ||
      testOne === &amp;quot;&amp;quot; ||
      testTwo === &amp;quot;&amp;quot; ||
      testThree === &amp;quot;&amp;quot; ||
      testFour === &amp;quot;&amp;quot;
    ) {
      alert(&amp;quot;모든 칸을 채워주세요&amp;quot;);
    } else {
      fetch(&amp;quot;http://13.125.254.18:8000/quiz&amp;quot;, {
        method: &amp;quot;POST&amp;quot;,
        headers: {
          Authorization: `${AuthAd}`
        },
        body: JSON.stringify({
          ad_id: this.props.resId.advertisement_id,
          quizzes: [
            {
              content: quizQuestion,
              choices: [testOne, testTwo, testThree, testFour],
              answers: quizRightAnswer
            }
          ]
        })
      }).then(response =&amp;gt; {
        if (response.status !== 200) {
          return response.json();
        } else {
          alert(&amp;quot;퀴즈 정보가 저장되었습니다.&amp;quot;);
        }
      });
    }
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자식=&gt;부모로 넘기는게 진짜 힘든 과정이었는데 이제 정말 다 왔다!&lt;br /&gt;
부모=&gt;자식으로 넘기는건 걍 props 쓰면 되니까 넘나 간단한 것~&lt;/p&gt;
&lt;p&gt;확인차.. render 밑에다 console.log(this.props, ‘props)를 찍어보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ea521dd0-fe36-11e9-8221-0996ebd35fe7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아주 잘 찍히고 있다!
서버로 보낼때는 ad&lt;em&gt;id라는 이름으로 보내야 하기 때문에&lt;br /&gt;
Body에 `ad&lt;/em&gt;id: this.props.resId.advertisement_id`라는 값을 실어준다.
그럼 해결쓰!&lt;/p&gt;
&lt;p&gt;이걸 해결하고 나서의 교훈..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구조는 최대한 간단하게 짜자. depth가 깊어지면 쥬금…ㅠㅠ&lt;/li&gt;
&lt;li&gt;리덕스를 공부하자.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;애초에 리덕스를 공부했으면 이걸로 고민했을 일이 없는 거였는데!
리덕스 안 쓰고 쌩으로 하려니 넘나 힘들었던 것…
기술은 괜히 발전하는게 아니다 ㅋㅋㅋㅋ&lt;/p&gt;</content:encoded></item><item><title><![CDATA[정적언어인 TypeScript에 대해 알아보자 1탄-정적언어와 타입선언]]></title><description><![CDATA[위코드에서의 3개월 과정은 끝났지만 나의 블로깅은 계속된다! 여태 기업협업한다고, 취준한다고 나태해져서 글을 안 쓴지 너무 오래되었다.... 이제 다시 부지런히 쓰자!! 새롭게 마음을 먹은 이후로 쓰는 첫 포스팅 주제는 바로바로 TypeScript!!]]></description><link>https://gollumnima.github.io//posts/typescript_1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/typescript_1</guid><pubDate>Sun, 03 Nov 2019 15:10:23 GMT</pubDate><content:encoded>&lt;p&gt;이번 포스팅부터 맥북으로 작성하였습니다. 😜 &amp;#x3C;- 맥북의 상징 이모티콘&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d91b9b70-fdd4-11e9-971e-89fe6d75cd84/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ts하면 생각나는건.. 왜 타슈밖에 없죠..? 왜 타슈의 이니셜 같죠…?
타슈가 뭔지 모르는 분들을 위해 살짝 알려드리자면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0b8dbb10-fdd5-11e9-8bf4-311cdb2c16fe/image.png&quot; alt=&quot;image.png&quot;&gt;
(이미지 출처 : 타슈 홈페이지)
대전시에서 운영하는 자전거서비스 이름입니다 ㅋㅋㅋㅋ
여튼… 타슈의 Ts 말고 우리는 TypeScript의 Ts를 알아볼겁니다! 룰루~&lt;/p&gt;
&lt;p&gt;그 전에 정적언어와 동적언어에 대해 먼저 알아보고 갑시다!&lt;/p&gt;
&lt;h2 id=&quot;정적언어와-동적언어&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81%EC%96%B8%EC%96%B4%EC%99%80-%EB%8F%99%EC%A0%81%EC%96%B8%EC%96%B4&quot; aria-label=&quot;정적언어와 동적언어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적언어와 동적언어&lt;/h2&gt;
&lt;h4 id=&quot;동적언어&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%96%B8%EC%96%B4&quot; aria-label=&quot;동적언어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적언어&lt;/h4&gt;
&lt;p&gt;정적언어와 동적언어를 언제 써야 하는지에 대한 구분은 바로 “Type”을 언제 결정하느냐에 따라 다른데요.
우리에게 넘나 친숙한 자바스크립트는 동적언어입니다.
그말인즉슨, 타입을 미리 결정하지 않고 변수를 먼저 선언해도 되는것!!
변수를 선언한 이후에 타입을 맘대로 지지고 볶고 해도 에러가 나지 않습니다.
이렇게…!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b0c50a50-fdd7-11e9-8bf4-311cdb2c16fe/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;동적언어의-장점&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%96%B8%EC%96%B4%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;동적언어의 장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적언어의 장점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;타입고민없이 걍 써도 되서 배우기 쉬움&lt;/li&gt;
&lt;li&gt;코드의 양이 적을때 생산성 굿굿&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;동적언어의-단점&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%96%B8%EC%96%B4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;동적언어의 단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적언어의 단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;타입 오류가 런타임시 발견쓰&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;정적언어&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81%EC%96%B8%EC%96%B4&quot; aria-label=&quot;정적언어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적언어&lt;/h4&gt;
&lt;p&gt;오늘 소개해드릴 타입스크립트가 바로 정적언어 중에 하나입니다.
자바스크립트와는 달리 타입을 미리 결정한 후에 변수를 선언해야 합니다.
예를 들어…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d6042570-fdd8-11e9-a470-596c2bdea20d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까와 동일한 코드를 TypeScript에 입력해보면 이러한 타입 에러가 발생합니다.
이런식으로 자동으로 타입을 인식하는 기능을 타입추론(type inference)라고 한다고 하네용!
그렇담 저 코드에 에러가 발생하지 않게 하려면 어떻게 해야할까요!
미리 타입을 선언해줘야 하겠죠?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5075f8b0-fdd9-11e9-a470-596c2bdea20d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠! 미리 변수의 타입을 숫자 혹은 string 이라고 지정해주니 무서운 빨간줄은 안 생겼어요.
Ts에서 변수를 선언할 때는 위와 같이 변수 이름과 콜론, 타입을 써주면 됩니다.&lt;/p&gt;
&lt;h4 id=&quot;정적언어의-장점&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81%EC%96%B8%EC%96%B4%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;정적언어의 장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적언어의 장점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코드의 양이 많을 때 생산성 굿굿&lt;/li&gt;
&lt;li&gt;타입 오류가 컴파일시 발견쓰&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;정적언어의-단점&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81%EC%96%B8%EC%96%B4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;정적언어의 단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적언어의 단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언할때마다 타입 고민쓰… 진입장벽 높음 ㅠㅠ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;타입스크립트의-여러-가지-타입&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%97%AC%EB%9F%AC-%EA%B0%80%EC%A7%80-%ED%83%80%EC%9E%85&quot; aria-label=&quot;타입스크립트의 여러 가지 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타입스크립트의 여러 가지 타입&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/39b398c0-fdda-11e9-971e-89fe6d75cd84/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까 위에서 간략하게 설명하긴 했지만..!&lt;br /&gt;
Ts에서 타입을 선언할 때는 변수 이름과 콜론, 타입을 선언해주어야 합니다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;자, 이제 타입스크립트에서 타입을 다루는 방식에 대해 알아보자能!&lt;/p&gt;
&lt;h4 id=&quot;number-boolead-string&quot;&gt;&lt;a href=&quot;#number-boolead-string&quot; aria-label=&quot;number boolead string permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;number, boolead, string&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const size: number = 123;
const isBig: boolean = size &amp;gt;= 123;
const msg: string = isBig ? &amp;#39;big&amp;#39; : &amp;#39;small&amp;#39;;

console.log(size); // 123
console.log(isBig); // true
console.log(msg); // big&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;number면 number, boolean이면 boolean, string이면 string이라고 선언한다.&lt;br /&gt;
그 와중에 msg 선언하는 거 넘나 신박… 삼항연산자를 이용해서 저렇게 해줄수도 있군..! 😎&lt;/p&gt;
&lt;h4 id=&quot;숫자형-배열-및-혼합형-배열&quot;&gt;&lt;a href=&quot;#%EC%88%AB%EC%9E%90%ED%98%95-%EB%B0%B0%EC%97%B4-%EB%B0%8F-%ED%98%BC%ED%95%A9%ED%98%95-%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;숫자형 배열 및 혼합형 배열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;숫자형 배열 및 혼합형 배열&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 숫자형 배열
const arr1: number[] = [1, 2, 3];
const arr2: Array&amp;lt;number&amp;gt; = [2, 4, 6];
arr1.push(4)
arr2.push(8)
arr2.push(&amp;#39;ten&amp;#39;) // Error!
console.log(arr1) // [1,2,3,4]
console.log(arr2) // [2,4,6,8]

// 혼합형 배열
const size: number = 123;
const isBig: boolean = size &amp;gt;= 123;
const msg: string = isBig ? &amp;#39;big&amp;#39; : &amp;#39;small&amp;#39;;
const data : [string, number] = [msg, size];
console.log(data); // [&amp;#39;big&amp;#39;, 123]
console.log(data[0].substr(1)); // ig
console.log(data[1].substr(1)); // Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;숫자형 배열의 타입은 &lt;code class=&quot;language-text&quot;&gt;number[]&lt;/code&gt; 라고 선언해주거나 &lt;code class=&quot;language-text&quot;&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt;라고 선언한다.
number와 string이 혼합된 배열은 선언할 때 &lt;code class=&quot;language-text&quot;&gt;[string, number]&lt;/code&gt;라고 선언해준다.
data라는 배열을 선언했는데, data의 1번째 값의 타입은 숫자이므로 거기서 substr을 쓸 수 없으니까 Error 발생!!&lt;/p&gt;
&lt;p&gt;여튼 저런 혼합형 배열을 tuple이라고도 한다!&lt;/p&gt;
&lt;h4 id=&quot;null과-undefined&quot;&gt;&lt;a href=&quot;#null%EA%B3%BC-undefined&quot; aria-label=&quot;null과 undefined permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;null과 undefined&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let v1: undefined = undefined;
let v2: null = null;
v1 = 123;

let v3: number | undefined = undefined;
v3 = 123;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;undefined는 undefined로, null은 null로 선언해준다.
JS와의 차이점을 살펴보자면.. &lt;br /&gt;
(이 아래의 캡쳐화면은 JS에서의 화면입니다)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7f361890-fdf4-11e9-a859-9b228597c293/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS에선 null의 type이 object였는데 TS에선 null의 type은 null이다!&lt;/li&gt;
&lt;li&gt;JS에선 초기에 null이나 undefined여도 변수에 새로운 값을 할당하면 변수에 그 값이 대입이 되지만, TS에선 Type Error가 발생한다…!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;문자열-리터럴과-숫자-리터럴-타입&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B3%BC-%EC%88%AB%EC%9E%90-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%83%80%EC%9E%85&quot; aria-label=&quot;문자열 리터럴과 숫자 리터럴 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 리터럴과 숫자 리터럴 타입&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let num: 10 | 20 | 30;
num = 10;
// num = 15; 숫자 10, 20, 30만 가질수 있는 타입으로 정의된 것이라 type error!

let job: &amp;#39;frontend&amp;#39; | &amp;#39;backend&amp;#39;;
// job = &amp;#39;designer&amp;#39; 마찬가지로 type error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;숫자 리터럴 타입을 정의할 때, number가 아니라 직접적인 숫자를 대입하면 해당하는 숫자만 가지도록 정의가 되는 것이라&lt;br /&gt;
변수에 다른 숫자를 할당하면 Type Error가 발생하게 된다!&lt;br /&gt;
문자열 리터럴도 마찬가지다. 선언했을 때 당시의 문자가 아니라면 Type Error 발생!&lt;/p&gt;
&lt;h4 id=&quot;any&quot;&gt;&lt;a href=&quot;#any&quot; aria-label=&quot;any permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Any&lt;/h4&gt;
&lt;p&gt;말 그대로 Any! so cool하게 어떤 타입의 값이든 허용하는 타입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let value: any;
value = 123;
value = &amp;#39;456&amp;#39;;
value = () =&amp;gt; {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 타입을 알 수 없거나 타입 정의가 되지 않은 외부 패키지(자바스크립트라던지.. javascript라던지..)를 사용할때 쓰면 된다.
그치만 남발하지 않는게 좋다. 우리가 TS를 쓰는 이유가 없어지니깐 ㅠㅠ&lt;/p&gt;
&lt;h4 id=&quot;void와-never&quot;&gt;&lt;a href=&quot;#void%EC%99%80-never&quot; aria-label=&quot;void와 never permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;void와 never&lt;/h4&gt;
&lt;p&gt;void는 아무값도 반환하지 않고 종료되는 함수에,&lt;br /&gt;
never은 예외 발생으로 비정상적으로 종료되거나 무한루프 때문에 종료되지 않는 함수에 씀&lt;br /&gt;
이건 깊이 들어가봐야 알겠지만.. 왜 never같은 값을 선언해주는지 아직은 모르겠다 😂&lt;br /&gt;
애초에 무한루프 안 걸리게 로직을 짜야하는거 아닌가 ? ㅠㅠ 모르겠다…&lt;/p&gt;
&lt;p&gt;여튼.. 예시를 함 보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function f1(): void {
    console.log(&amp;#39;hungry&amp;#39;);
}

function f2(): never {
    throw new Error(&amp;#39;some error&amp;#39;);
}

function infiniteLoop(): never {
    while (true) {
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대충 어떤건지 알겠는데 저걸 굳이 왜 써주는지는 아직도 의문쓰..!&lt;br /&gt;
이건 담주 목욜에 있을 위코드 프론트앤드 스터디 이후 더 자세히 알게되지 않을까..😱&lt;/p&gt;
&lt;h4 id=&quot;object&quot;&gt;&lt;a href=&quot;#object&quot; aria-label=&quot;object permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;object&lt;/h4&gt;
&lt;p&gt;예시를 먼저 보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let obj: object;
obj = { name: &amp;#39;Doori&amp;#39; };
console.log(obj.name) // 세상에 타입에러 발생...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;obj라는 변수는 object라고 선언해주었지만, 그 안에 들어가는 값은 정의를 해주지 않아서 Type Error 발생… 진짜 너무하네
일반적으로 객체에서 속성정보를 포함해서 타입을 정의하려면 인터페이스를 이용하는데.. 이건 글이 길어지므로 다음 이 시간에! 🤓&lt;/p&gt;
&lt;h4 id=&quot;교차타입과-유니온타입&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A8%ED%83%80%EC%9E%85%EA%B3%BC-%EC%9C%A0%EB%8B%88%EC%98%A8%ED%83%80%EC%9E%85&quot; aria-label=&quot;교차타입과 유니온타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교차타입과 유니온타입&lt;/h4&gt;
&lt;p&gt;설명은 코드를 먼저 보시오..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let numnum: (1 | 3 | 5) &amp;amp; (3 | 5 | 7);
numnum = 3;
numnum = 1;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;교차타입은 &amp;#x26; 기호로, 유니온타입은 |으로 표시한다.&lt;br /&gt;
위에서 이미 타입을 문자열 혹은 숫자로 정의하고 싶을때 유니온타입을 쓴 적이 있다.&lt;br /&gt;
근데 numnum이 1 또는 3또는 5 이고 3 또는 5또는 7인데&lt;br /&gt;
3과 5가 겹치니까 3 또는 5가 아니면 타입에러가 난다… 당황쓰..&lt;br /&gt;
그러면 1과 7은 억울해서 어떻게 사나…&lt;/p&gt;
&lt;p&gt;이것에 대한 의문도 다음주 목요일에 있을 위코드 프론트앤드 스터디 때 풀 예정!🥺&lt;/p&gt;
&lt;h4 id=&quot;열거형-타입&quot;&gt;&lt;a href=&quot;#%EC%97%B4%EA%B1%B0%ED%98%95-%ED%83%80%EC%9E%85&quot; aria-label=&quot;열거형 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;열거형 타입&lt;/h4&gt;
&lt;p&gt;열거형 타입의 원소는 값으로 사용될 수도, 타입으로 사용될 수도 있음.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
  Apple, Strawberry=2, Kiwi
}

console.log(Fruit.Apple, Fruit.Strawberry, Fruit.Kiwi); // 0 2 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;열거형 타입에서 첫 번째 값에 할당을 해주지 않으면 무조건 0이 할당됨.&lt;br /&gt;
각각의 값들엔 string이나 number의 값을 줄 수 있는데, 할당되지 않은 값에는 이전 값에서 +1 된 만큼의 값이 할당된다!&lt;br /&gt;
위의 예시에서 딸기가 2여서 그 옆의 키위는 자동으로 3이 되었다.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;아래의 예는 열거형 타입의 객체의 속성을 예시로 들어봤다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
  Apple, Strawberry=2, Kiwi
}

console.log(Fruit.Strawberry); // 2
console.log(Fruit[&amp;#39;Strawberry&amp;#39;]); // 2
console.log(Fruit[2]); // Strawberry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세번째 콘솔은 좀 신박하다 ㅋㅋ&lt;br /&gt;
원소의 이름과 값이 양방향으로 매핑되어 있어서 값에 할당된 숫자를 입력해도 해당하는 값이 불러와진다 오오~&lt;/p&gt;
&lt;p&gt;근데 열거형 타입의 값이 문자열일때는 세번째 방식이 통하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Numb {
  One=&amp;#39;first&amp;#39;, Two=&amp;#39;second&amp;#39;, Three=&amp;#39;third&amp;#39;
}
console.log(Numb.One); // first
console.log(Numb[&amp;#39;One&amp;#39;]); // first
console.log(Numb[&amp;#39;first&amp;#39;]) // Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;열거형 타입을 자주 쓰는 경우 몇 가지 유틸리티 함수를 만들어 쓰는게 좋다고 한다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;열거형 타입의 원소의 개수를 알려주는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getEnumLength(enumObject: any) {
  const keys = Object.keys(enumObject);
  return keys.reduce(
    (acc,key)=&amp;gt; (typeof enumObject[key] === &amp;#39;string&amp;#39; ? acc+1 : acc),0
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;열거형 타입에 존재하는 값인지 검사하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function isValidEnumValue(enumObject: any, value: never | string) {
  if (typeof value === &amp;#39;number&amp;#39;) {
    return !!enumObject[value];
  }
  else {
    return (
      Object.keys(enumObject)
      .filter(key =&amp;gt; isNaN(Number(key)))
      .find(key =&amp;gt; enumObject[key] === value) != null
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 그럼 이걸 어떻게 적용하냐가 중요한데!
아래의 예시를 같이 보시죠..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;enum Fruit {
  Apple,
  Banana,
  Orange
}

enum Language {
  Korean = &amp;#39;ko&amp;#39;,
  English = &amp;#39;en&amp;#39;,
  Chinese = &amp;#39;ch&amp;#39;
}

console.log(getEnumLength(Fruit), getEnumLength(Language)); // 3 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 함수에서 첫번째 식을 적용해보면 길이가 3으로 잘 나온다.
근데 두번째 식은 내가 뭔가 잘 못 쓴건지.. 자꾸 에러가 나서 이건 다음 기회에 알아보도록 하자!&lt;/p&gt;
&lt;p&gt;원래는 해당하는 object에 그 값이 있는지 확인할 수 있는 식이다.
Language안에 Jp가 있으면 false가 나오고.. 이런 식인데 왜 에러가 날까~ 😂&lt;/p&gt;
&lt;h4 id=&quot;상수-열거형&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%88%98-%EC%97%B4%EA%B1%B0%ED%98%95&quot; aria-label=&quot;상수 열거형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상수 열거형&lt;/h4&gt;
&lt;p&gt;const 로 선언하는 enum을 상수 열거형이라고 하는데 여기까진 괜찮다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const enum Fruit {
  Apple, Banana, Orange
}

const fruit: Fruit = Fruit.Apple;

const enum Language {
  Korean = &amp;#39;ko&amp;#39;,
  English = &amp;#39;en&amp;#39;,
  Chinese = &amp;#39;ch&amp;#39;
}

const lang: Language = Language.Korean;

console.log(fruit) // 0
console.log(lang) // &amp;#39;ko&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;약간의 특이점이 있다면.. const를 쓰면 객체형을 쓸 수 없다는것..?
아까 객체의 길이를 세주었던 함수를 다시 써보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getEnumLength(enumObject: any) {
  const keys = Object.keys(enumObject);
  return keys.reduce(
    (acc,key)=&amp;gt; (typeof enumObject[key] === &amp;#39;string&amp;#39; ? acc+1 : acc),0
  );
}

const enum Fruit {
  Apple, Banana, Orange
}
console.log(getEnumLength(Fruit))	// Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까였으면 3이 나왔을 값이 에러가 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8dc716e0-fe29-11e9-b56d-6bd204953205/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;const는 변수선언할 때 말고 enum을 써야할 땐 웬만해선 쓰지말자!&lt;/p&gt;
&lt;h4 id=&quot;함수-타입&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85&quot; aria-label=&quot;함수 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 타입&lt;/h4&gt;
&lt;p&gt;함수타입을 정의하려면 매개변수 타입과 반환타입이 있는데..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt(name: string, age: number) : string { // 매개변수 타입
  const nameTxt = name.substr(0, 10);
  const ageTxt = age &amp;gt;= 35 ? &amp;#39;senior&amp;#39; : &amp;#39;junior&amp;#39;;
  return `name : ${nameTxt}, age: ${ageTxt}`
}

const v1: string = getInfoTxt(&amp;#39;mike&amp;#39;, 23);  // 반환타입
console.log(v1) // name : mike, age: junior
const v2: string = getInfoTxt(&amp;#39;mike&amp;#39;, &amp;#39;23&amp;#39;); // Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드의 첫줄에 있는 것처럼 parameter로 들어가는 값에 타입을 정의 한게 바로 매개변수 타입
그리고 함수의 리턴값이 대입되는 변수에 타입을 정의한게 반환타입!&lt;/p&gt;
&lt;p&gt;v2에서의 에러는 매개변수 타입이 age가 number라고 정해져있지만 string이 들어가서 탈락!&lt;/p&gt;
&lt;h4 id=&quot;선택-매개변수&quot;&gt;&lt;a href=&quot;#%EC%84%A0%ED%83%9D-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98&quot; aria-label=&quot;선택 매개변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;선택 매개변수&lt;/h4&gt;
&lt;p&gt;말그대로 써주는 게 필수가 아니라 선택인 매개변수를 말한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt(name: string, age: number, language?: string) : string {
  const nameTxt = name.substr(0, 10);
  const ageTxt = age &amp;gt;= 35 ? &amp;#39;senior&amp;#39; : &amp;#39;junior&amp;#39;;
  const languageTxt= language ? language.substr(0,10): &amp;#39;&amp;#39;;
  return `name : ${nameTxt}, age: ${ageTxt}, language: ${languageTxt}`
}

getInfoTxt(&amp;#39;mike&amp;#39;, 23, &amp;#39;ko&amp;#39;);
getInfoTxt(&amp;#39;mike&amp;#39;, 23); // language는 생략가능쓰 
getInfoTxt(&amp;#39;mike&amp;#39;, 23, 123); // Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 줄에 language가 string이라고 지정되기 전 ? 가 쓰인다.
이렇게 물음표 콜론, 그 다음 타입이 나올 경우가 선택 매개변수!&lt;/p&gt;
&lt;p&gt;두번째 콘솔처럼 선택매개변수는 생략이 가능쓰
But, 써 줬는데 타입이 매칭되지 않으면 에러가 난다!!&lt;/p&gt;
&lt;p&gt;추가로, 선택매개변수는 꼭 필수 매개변수의 오른쪽에 와야 하는데&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt(name: string, language?: string, age: number) : string {.....}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 쓰면 탈락! 그럼 어떻게 써줘야하냐..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt {
	name: string,
    language: string | undefined,
    age: number,
}: string {....}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;선택매개변수가 필수 매개변수 중간에 껴있을 경우 꼭 undefined를 유니온타입으로 써줘야 한다!&lt;/p&gt;
&lt;h4 id=&quot;매개변수의-기본값-정하기&quot;&gt;&lt;a href=&quot;#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;매개변수의 기본값 정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;매개변수의 기본값 정하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt(
    name: string, 
    age: number = 28,
    language = &amp;#39;korean&amp;#39;
  ) : string {
  // 생략.....
}

console.log(getInfoTxt(&amp;#39;mike&amp;#39;)); 
console.log(getInfoTxt(&amp;#39;mike&amp;#39;, 23)); 
console.log(getInfoTxt(&amp;#39;mike&amp;#39;, 23, &amp;#39;en&amp;#39;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 콘솔에 찍은 값 세 가지 모두 에러가 나지 않는다.
기본값이 있는 매개변수들은 모두 선택매개변수라고 했다. 즉, name만 필수란 말씀.&lt;/p&gt;
&lt;p&gt;여기서 의문이 드는것은.. 문자열 리터럴과 숫자 리터럴 변수 선언을 할 땐
해당하는 숫자나 문자열이 아닐경우 에러가 났는데.. 이건 변수 선언이 아니라 함수형이라 예외인건가?&lt;/p&gt;
&lt;p&gt;이것에 대한 궁금증도 목요일 스터디에서 풀릴 예정!&lt;/p&gt;
&lt;h4 id=&quot;나머지-매개변수&quot;&gt;&lt;a href=&quot;#%EB%82%98%EB%A8%B8%EC%A7%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98&quot; aria-label=&quot;나머지 매개변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나머지 매개변수&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getInfoTxt(name: string, ...rest: string[]): string {
//....
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;말그대로 rest를 써서 타입을 정의할 수 있다는 것 같은데 책에는 예시가 부실하다 ㅋㅋ
나중에 차차 알아갈 예정쓰!&lt;/p&gt;
&lt;p&gt;this타입 쓸 차롄데 글이 너무 길어지기도 하고, 재미없어 지는것 같아서 다음 포스팅에 계속!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/basic-types.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.typescriptlang.org/docs/handbook/basic-types.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;도서 실전 리액트 프로그래밍(이재승 저)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 11주차_2일 TIL_JS에서 Number의 값 중 infinity와 NaN에 대해 알아보자]]></title><description><![CDATA[위코드 71일차. 끝나지 않은 Next.js 초기 세팅 포스팅.. 그래서 오늘은 또 위코드에서 던져준 자바스크립트 문제에 대해 정리해보았다. 오늘은 그 두 번째 단계, Number의 값 중 Infinity와 NaN에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode11_2TIL_Num</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode11_2TIL_Num</guid><pubDate>Tue, 08 Oct 2019 12:54:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/92e20700-ea3a-11e9-afe6-196b0b97fa8e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; aria-label=&quot;number permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number&lt;/h2&gt;
&lt;p&gt;자바스크립트에서 Number란 64bit floating point로 이루어진 숫자형 데이터이다.&lt;br /&gt;
정수, 소수 다 Number가 되지만 infinity나 NaN 또한 Number이다!&lt;br /&gt;
infinity와 NaN에 대해서 더 알아보자!&lt;/p&gt;
&lt;h2 id=&quot;nan&quot;&gt;&lt;a href=&quot;#nan&quot; aria-label=&quot;nan permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NaN&lt;/h2&gt;
&lt;p&gt;말 그대로 Not a Number. 숫자가 아니라는 뜻!!
위코드 예시 문제에서 NaN을 리턴하라는 문제가 있어서 도전도전&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function returnNaN() {
  return 3/&amp;#39;가&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제의 예시 해답은 이렇게 주어졌지만 나는 꼼수를 써서&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function returnNaN() {
  return NaN;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그냥 NaN이 리턴되게 했다 ㅋㅋㅋㅋㅋㅋ&lt;br /&gt;
가끔 개발자의 실수로 웹페이지에서 금액 대신 NaN이 뜨는 에러를 볼 수 있다.
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2df2b950-ea3c-11e9-b595-afef7cf6fa1e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 ㅋㅋㅋㅋㅋㅋㅋ&lt;br /&gt;
아니 계산을 어떻게 하라는건가욧ㅋㅋ
여튼.. MDN 문서의 내용을 덧붙이자면..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NaN === NaN;        // false
isNaN(NaN);         // true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NaN과 NaN은 같을 수 없고.. isNaN으로 NaN인지 여부를 확인가능쓰
NaN과 숫자의 연산을 해보면 어떨까?
a는 양의 정수이고, b는 NaN이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3c7f5d90-ea3f-11e9-872c-41fe4572e8d5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;음의 정수로 시도해봐도 똑같다.&lt;br /&gt;
무조건 NaN과의 연산을 통해 NaN이 나오게 된다!&lt;/p&gt;
&lt;p&gt;이제 infinity로 넘어가자!&lt;br /&gt;
내꺼하자 ha~ 의 인피니티 말고 무한대 인피니티!&lt;/p&gt;
&lt;h2 id=&quot;infinity&quot;&gt;&lt;a href=&quot;#infinity&quot; aria-label=&quot;infinity permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Infinity&lt;/h2&gt;
&lt;p&gt;아까 NaN에서도 생략했지만, NaN과 Infinity는 전역객체의 속성이다.&lt;br /&gt;
그 말은 즉슨, 우리가 window에 이미 저장되어있는 값이기 때문에 console.log를 찍었을때 그 값이 바로 나온다는 사실!&lt;/p&gt;
&lt;p&gt;또한.. NaN과는 조금 다르게 Infinity를 이용해 NaN보단 약간 더 다양한 연산이 가능하다는 사실..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a935ad50-ea3e-11e9-b6ee-7fe3815f8a47/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Infinity * 양의정수 === Infinity
Infinity / 양의정수 === Infinity
양의정수 / Infinity === 0
Infinity * 음의정수 === -Infinity
Infinity / 음의정수 === -Infinity
음의정수 / Infinity === -0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-0은… 뭔지 모르겠다..
수학전공인 울 언니한테 물어봐야겠다!ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼.. 위코드에서 준 문제는 더치페이 문제!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function dutch(count, price) {
  const dutchMoney = price/count;
  if (Number.isInteger(dutchMoney)) {
    return dutchMoney
  }
  else if (dutchMoney+1 === Infinity) {
    return 0
  }
  else {
    return +dutchMoney.toFixed(2)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 이 문제를 정수인지, infinity인지, 소수인지로 나눠서 생각해보았다!&lt;br /&gt;
소수일 경우 소수 셋째자리에서 반올림을 해서 자릿수를 두개로 맞춰야하는데.. &lt;br /&gt;찾아보니 toFixed()라는 함수가 있는것!&lt;/p&gt;
&lt;h4 id=&quot;tofixed&quot;&gt;&lt;a href=&quot;#tofixed&quot; aria-label=&quot;tofixed permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;toFixed()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;숫자를 괄호안의 수 만큼의 자릿수를 갖는 숫자로 변형&lt;/li&gt;
&lt;li&gt;괄호안에 숫자가 안들어가면 디폴트값이 0&lt;/li&gt;
&lt;li&gt;소수점이 길면 반올림하고, 짧으면 0으로 채운다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 코드에서 +dutchMoney라고 해준 이유는 Number(dutchMoney) 대신 뒤에 남는 0을 지워주기 위함ㅋㅋ
근데 모델솔루션을 보고 또 깜놀…&lt;/p&gt;
&lt;p&gt;모델솔루션의 해답..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function dutch(count, price) {
  let result = price/count;

  if (!isFinite(result)) return 0;

  return Number((price/count).toFixed(2));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;isFinite로 일단 무한대인지 판별을 하고..
소수인지 정수인지 판별할 필요없이 숫자의 뒤에는 toFixed, 앞에는 Number로 쓰면
소수일땐 소수점 두 자리만 남기고, 정수일땐 알아서 정수로 변형시켜 줄 수있다.&lt;/p&gt;
&lt;p&gt;간단한 문제였는데 한번도 깊이 생각해보지 못했던 Infinity와 NaN에 대해 생각해보고 좋았다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 10주차_6일 TIL_깊은 복사와 얕은 복사 그리고 객체의 참조]]></title><description><![CDATA[위코드 68일차. 현재 Next.js 초기 세팅 하는 법을 열심히 정리중인데 아직 완성은 못했다. 마침 위코드에서 하루에 한 주제씩 자바스크립트에 대해 생각해볼 문제를 던져주셔서 푸는중! 오늘은 그 첫 단계, 깊은 복사와 얕은 복사 그리고 객체의 참조에 대해 써보았다!]]></description><link>https://gollumnima.github.io//posts/wecode10_6TIL_object_ref</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode10_6TIL_object_ref</guid><pubDate>Sat, 05 Oct 2019 10:06:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/00a54810-e707-11e9-973a-55350a1abd48/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;한번쯤은 짚고넘어가야 했던 부분인데 이제서야 정리해본다!&lt;br /&gt;
깊은 복사와 얕은 복사는 뭘까?&lt;/p&gt;
&lt;h2 id=&quot;string-number-boolean에서의-복사&quot;&gt;&lt;a href=&quot;#string-number-boolean%EC%97%90%EC%84%9C%EC%9D%98-%EB%B3%B5%EC%82%AC&quot; aria-label=&quot;string number boolean에서의 복사 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String, Number, Boolean에서의 복사&lt;/h2&gt;
&lt;p&gt;먼저 예제부터 살펴보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let x = &amp;#39;마카롱&amp;#39;
let y = x
y = &amp;#39;바게트&amp;#39;
console.log(x,y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 식에서 y에 x를 대입해서 y는 마카롱이 되었지만
y에 또다시 바게트라는 값을 대입했기 때문에 콘솔을 찍어보면
&lt;code class=&quot;language-text&quot;&gt;마카롱,바게트&lt;/code&gt; 라는 결과가 나오게 된다.&lt;/p&gt;
&lt;p&gt;y의 값은 변해도 x의 값엔 영향을 주지 않는다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/878de9d0-e708-11e9-9db5-fda9d04b0052/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;변수는 모두 메모리의 어딘가에 저장이 되는데, 대입을 하면 그 변수의 이름은 저장된 메모리의 주소를 가리킨다.
객체 말고 string, boolean, number들은 딱 그 값을 복사하는데
객체 같은 경우는 좀 다르다.
배열 또한 객체기 때문에 예시를 배열로 들어보았다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let arr = [1,2,3]
let plus = arr;
plus[0]=0;
console.log(arr);
console.log(plus);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 콘솔에 찍어보면 둘 다 [0,2,3]이 나온다.
메모리에 [1,2,3]이라는 값을 가진 애는 arr와 plus 둘.
값은 하나인데 변수가 여러개일 때 이것을 참조라고 한다.&lt;br /&gt;
마치 내 이름이 김두리지만 둘둘이라던지 킹둘이라던지 별명이 많은 것처럼 훗&lt;br /&gt;
동일한 값에 변수가 여러개기 때문에 변수가 바뀌면 원본도 바뀌게 된다!&lt;br /&gt;
이걸 방지하려면 메모리에 한 값당 한 변수씩! 할당을 해줘야한다.&lt;/p&gt;
&lt;h2 id=&quot;복사&quot;&gt;&lt;a href=&quot;#%EB%B3%B5%EC%82%AC&quot; aria-label=&quot;복사 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;복사&lt;/h2&gt;
&lt;p&gt;여기서 나오는게 바로 복사라는 개념이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;얕은 복사 : 상위객체만 새로 생성되고 내부 객체는 참조관계&lt;/li&gt;
&lt;li&gt;깊은 복사 : 내부객체까지 전부 다 새로 생성되는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;예제&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%A0%9C&quot; aria-label=&quot;예제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예제&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let profile = {
  name: &amp;quot;김개발&amp;quot;,
  address: {
    home: &amp;quot;한강아파트&amp;quot;,
    company: &amp;quot;위워크 선릉2호점&amp;quot;
  },
  hobby: &amp;quot;programming&amp;quot;
}

const addProperty = info =&amp;gt; {
}

// 호출 예
let newProfile = addProperty({ age: 20 });
console.log(&amp;#39;profile =&amp;gt; &amp;#39;, profile);
console.log(&amp;#39;newProfile =&amp;gt;&amp;#39;, newProfile);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;addProperty 라는 함수를 통해 newProfile에는 새로운 값이 추가되어야 하고, 원본 객체는 손상시키면 안된다.&lt;/p&gt;
&lt;h2 id=&quot;내가-접근한-방법&quot;&gt;&lt;a href=&quot;#%EB%82%B4%EA%B0%80-%EC%A0%91%EA%B7%BC%ED%95%9C-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;내가 접근한 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내가 접근한 방법&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const addProperty = info =&amp;gt; {
  const sth_new = {}
  for(let i in profile) {
    sth_new[i] = profile[i]
  }
  return Object.assign(sth_new, info)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 sth&lt;em&gt;new라는 빈 객체를 만들고 for in 문을 돌려서
profile의 값들을 다 빈 객체에 옮겼고,
리턴 값으론 Object.assign을 이용해 인자를 들어가는 info와 sth&lt;/em&gt;new를 merge시켜주었다.&lt;/p&gt;
&lt;p&gt;근데 굳이 for in 문을 안 돌려도 됐던 것..!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const addProperty = info =&amp;gt; {
  const copyProperty = Object.assign({}, profile);
  return Object.assign(copyProperty, info)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그냥 새 객체를 Object.assign()을 이용해 선언해주고
리턴에 그걸 한번 더 써서 info를 넣어주면 됐다 헐~~&lt;/p&gt;
&lt;p&gt;더 간단하게는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const addProperty = info =&amp;gt; {
  return {
    ...info,
    ...profile
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세상에… 전개연산자로 한큐에 끝낼수 있다
전개연산자를 한정적으로만 써서 이런 기능이 있을줄 몰랐다&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;MDN 전개연산자&lt;/a&gt;에서 딱 처음 두개,
apply 대신이랑 new와 함께 쓰는 것만 해봤는데 복사에 이렇게 유용하게 쓰이다닛..! 자주 활용해봐야겠다.&lt;/p&gt;
&lt;p&gt;더 고난이도 방법으론 재귀를 쓰는 방법이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const addProperty = info =&amp;gt; {
 let newProfile = {};
 // recursion
 function copyObject(data, newData){
   let typeOfInputData = typeof(data);
   if(typeOfInputData != &amp;#39;object&amp;#39;){
       return data;
   }
   else{
     for(let key in data){
         let typeOfData = typeof(data[key]);
         if(typeOfData === &amp;#39;object&amp;#39;){
          if(Array.isArray(data[key])){
               newData[key] = [];
           }
           else{
               newData[key] = {};
           }
           copyObject(data[key], newData[key]);
         }
         else{
           newData[key] = data[key];
         }
     }
   }
   return newData;
 }
 // 원본 복사
 copyObject(profile, newProfile);
 // 객체 추가
 copyObject(info, newProfile);
 return newProfile;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리 기수 동기인 광훈님의 방법..
와… 정말 어나더 클래스 대단쓰
이걸 재귀로 생각할 수 있었다니 와… 그저 감탄만 나온다&lt;/p&gt;
&lt;p&gt;하나의 주제에 대해 서로 다양한 방법으로 생각해볼 수 있는 좋은 시간이었다!
다음 주제는 무엇이 될지 궁금하군 룰루~♬&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;wecode repl.it&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 10주차_2일 TIL_공식문서와 함께하는 둘둘의 Next.js 도전기 2탄]]></title><description><![CDATA[위코드 64일차. 기업협업 이틀차! 하필 휴일과 위워크 가는 날때문에 이틀이나 쉬게(?) 되서 금요일부터 본격적으로 임무가 주어지는데! 그 전까지 Next.js와 코드분석을 해보는 중이다. 지난번 포스팅에 이어 Next.js 2탄이다.]]></description><link>https://gollumnima.github.io//posts/wecode10_2TIL_nextjs</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode10_2TIL_nextjs</guid><pubDate>Tue, 01 Oct 2019 16:19:23 GMT</pubDate><content:encoded>&lt;h2 id=&quot;dynamic-pages&quot;&gt;&lt;a href=&quot;#dynamic-pages&quot; aria-label=&quot;dynamic pages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dynamic Pages&lt;/h2&gt;
&lt;p&gt;이번 챕터에서는 리액트에서처럼 마찬가지로 router 기능을 써볼건데
마찬가지로 Next.js에 기본적으로 내장되어 있는 기능이기 때문에 import만 해오면 된다!&lt;/p&gt;
&lt;p&gt;공식문서 주소에 나온 clone해온 파일의 3번째 index.js를 다음과 같이 수정해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Layout from &amp;#39;../components/MyLayout&amp;#39;;
import Link from &amp;#39;next/link&amp;#39;;

const PostLink = props =&amp;gt; (
  &amp;lt;li&amp;gt;
    &amp;lt;Link href={`/post?title=${props.title}`}&amp;gt;
      &amp;lt;a&amp;gt;{props.title}&amp;lt;/a&amp;gt;
    &amp;lt;/Link&amp;gt;
  &amp;lt;/li&amp;gt;
);
export default function Blog() {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;h1&amp;gt;My Blog&amp;lt;/h1&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;PostLink title=&amp;quot;Hello Next.js&amp;quot; /&amp;gt;
        &amp;lt;PostLink title=&amp;quot;Learn Next.js is awesome&amp;quot; /&amp;gt;
        &amp;lt;PostLink title=&amp;quot;Deploy apps with Zeit&amp;quot; /&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 화면은 이렇게 돻!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9b760a70-e403-11e9-8a8d-f7ea9a766832/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이제 아래의 list에 있는 글씨들을 클릭했을때 화면 연결을 해주기 위해
post.js라는 파일을 하나 만든다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { useRouter } from &amp;quot;next/router&amp;quot;;
import Layout from &amp;quot;../components/MyLayout&amp;quot;;

const Page = () =&amp;gt; {
    const router = useRouter();
    console.log(router, &amp;quot;콘솔&amp;quot;)

    return(
        &amp;lt;Layout&amp;gt;
            &amp;lt;h1&amp;gt;{router.query.title}&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;This is the blog post content.&amp;lt;/p&amp;gt;
        &amp;lt;/Layout&amp;gt;
    )
}

export default Page;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 router에 무슨 값이 들어가는지 궁금해서 콘솔을 찍어봤다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/55702b00-e403-11e9-af17-f94cdb32d073/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;내부에 다양한 값들이 존재하는데, 이 중에서 나는 query의 title을 갖다 써야 하므로!
그걸 써준다 ㅋㅋ
근데 신기한거 발견쓰!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/32e150e0-e404-11e9-b9e2-1ff301bbd93f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;걍 로컬 3000, 그니깐 메인에서 console을 찍었을 때의 query는 빈 객체지만
각각의 리스트에 있는 글자를 클릭하면 title 값이 객체 안에 들어가있다1 오오!!&lt;br /&gt;
성호쓰의 추측에 의하면.. Next.js는 SSR이고.. 페이지의 파일명이 곧 path가 되는거니깐
헤당 페이지에 접근했을 때 비로소 url이 바뀌고 그에 따라 빈 객체에 title이 생긴다는데
맞는말인것 같다 오오.. 천재쓰 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;어찌됐든 useRouter를 통해 우리는 router 객체에 접근할 수 있으며,
이것은 바로 react HOOK과 같은 효과가 있다는 것!!!&lt;/p&gt;
&lt;h2 id=&quot;clean-urls-with-dynamic-routing&quot;&gt;&lt;a href=&quot;#clean-urls-with-dynamic-routing&quot; aria-label=&quot;clean urls with dynamic routing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clean URLs with Dynamic Routing&lt;/h2&gt;
&lt;p&gt;이번엔 시작부터 좀 신기하다
파일이름이 [id].js라니.. 파일에 대괄호가 들어가도 된다니!!!
여튼 공식문서에 나와있는대로 열심히 쳐준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//[id].js
import { useRouter } from &amp;#39;next/router&amp;#39;;
import Layout from &amp;#39;../../components/MyLayout&amp;#39;;

export default function Post() {
  const router = useRouter();

  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;h1&amp;gt;{router.query.id}&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;This is the blog post content.&amp;lt;/p&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여튼 파일이름에 [] &amp;#x3C;- 이걸 써준 이상 동적으로 라우팅되게 할 수 있다고 한다.&lt;br /&gt;
괄호 안에 들어가는 id는 page에 의해 제공되는 query param의 이름이 된다고 한다!
아까 전엔 모두 한 페이지에 들어가게끔 라우팅을 구현했지만..&lt;br /&gt;
이제 각각 서로 다른 페이지에 들어갈 수 있도록 구현해볼 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// index.js
import Layout from &amp;#39;../components/MyLayout&amp;#39;;
import Link from &amp;#39;next/link&amp;#39;;

const PostLink = props =&amp;gt; (
  &amp;lt;li&amp;gt;
    &amp;lt;Link href=&amp;quot;/p/[id]&amp;quot; as={`/p/${props.id}`}&amp;gt;
      &amp;lt;a&amp;gt;{props.id}&amp;lt;/a&amp;gt;
    &amp;lt;/Link&amp;gt;
  &amp;lt;/li&amp;gt;
);

export default function Blog() {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;h1&amp;gt;My Blog&amp;lt;/h1&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;PostLink id=&amp;quot;hello-nextjs&amp;quot; /&amp;gt;
        &amp;lt;PostLink id=&amp;quot;learn-nextjs&amp;quot; /&amp;gt;
        &amp;lt;PostLink id=&amp;quot;deploy-nextjs&amp;quot; /&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 index.js 파일을 바꿔주고…
그 전에 짚고 넘어가야 할 부분!!&lt;br /&gt;
PostLink를 선언해준 부분을 잘 보면..
href는 경로를 나타내고, as는 url bar에 보이는 부분을 나타낸다고 한다.&lt;/p&gt;
&lt;p&gt;as를 지워보면 우리의 url창은 &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000/p/[id]&lt;/code&gt; 이렇게
화면 또한…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c3b0bbe0-e410-11e9-8a8d-f7ea9a766832/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이상해 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;router가 어떻게 찍히는지 궁금하니까 또 콘손을 찍어보았다. 궁금쓰!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/53404720-e40d-11e9-91fd-d7aabdfb5f43/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;역시나 아까의 케이스처럼 메인 화면에서는 빈 객체였는데
리스트의 글자를 누르니 query에 id라는 key와 각 글자라는 value가 생겼다.&lt;br /&gt;
이게 바로 SSR MAGIC-★&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9915ab40-e40e-11e9-855b-c9c70516744a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;화면은 아까와 똑같다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b2d724f0-e40e-11e9-855b-c9c70516744a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;url은 이렇게 찍히는데 나름 클린한건가?ㅋㅋㅋ&lt;br /&gt;
그 전꺼는 얼마나 드러웠는지 확인하려고 다시 3폴더로 이동하고 서버를 실행해보니..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f9a6bd00-e40e-11e9-91fd-d7aabdfb5f43/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;진짜 드러운 url이었다 ㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b7b3d10-e40f-11e9-91fd-d7aabdfb5f43/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;clean한 url을 만든 기념으로 clean한 이미지 투척!&lt;br /&gt;
내 블로그에서 출처를 안 쓰는 이미지들은 모두 pixabay에서 온 것들이다. 저작권 없는 무료이미지 최고 ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;fetching-data-for-pages&quot;&gt;&lt;a href=&quot;#fetching-data-for-pages&quot; aria-label=&quot;fetching data for pages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fetching Data for Pages&lt;/h2&gt;
&lt;p&gt;니꼴라스의 무비앱 만들기와 비슷하게 Next.js 공식문서에선 Batman Movie api를 받아오는 연습이 있다.
지금부터 스타투~~&lt;/p&gt;
&lt;p&gt;먼저 명령어로 라이브러리를 깔아준다. &lt;code class=&quot;language-text&quot;&gt;yarn add isomorphic-unfetch&lt;/code&gt;
공식문서 index.js에 있는 모든 식을 따라치기 이전, 코드를 약간만 치고 console을 찍어보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7f91d2a0-e415-11e9-855b-c9c70516744a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;콘솔 잘 나오고있고.. 코드는 아래까지만 쳐봤다 일단&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Layout from &amp;#39;../components/MyLayout.js&amp;#39;;
import Link from &amp;#39;next/link&amp;#39;;
import fetch from &amp;#39;isomorphic-unfetch&amp;#39;;

const Index = props =&amp;gt; (
  &amp;lt;Layout&amp;gt;
    &amp;lt;h1&amp;gt;Batman TV Show&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
      {console.log(props, &amp;quot;프롭스&amp;quot;)}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/Layout&amp;gt;
)

Index.getInitialProps = async function() {
  const res = await fetch(&amp;#39;https://api.tvmaze.com/search/shows?q=batman&amp;#39;);
  const data = await res.json();
  console.log(`Show data fetched. Count: ${data.length}`)
  return {
    shows: data
  }
}

export default Index;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;props로 들어가는 값을 비동기로 받아와서 json으로 변형한 후 data라고 선언해주는데
보통 fetch를 쓸 땐 .then으로 연결했던걸 이렇게 변수로 뙇!! 나타내니 더 보기가 편하네?!?
내가 이해하기론 getInitailProps가 then을 안 써도 fetch에서 바로 데이터를 변수에 넣고 사용할 수 있는듯..? 여튼…&lt;/p&gt;
&lt;p&gt;이제 다시.. 남은 코드를 쳐보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Layout from &amp;#39;../components/MyLayout.js&amp;#39;;
import Link from &amp;#39;next/link&amp;#39;;
import fetch from &amp;#39;isomorphic-unfetch&amp;#39;;

const Index = props =&amp;gt; (
  &amp;lt;Layout&amp;gt;
    &amp;lt;h1&amp;gt;Batman TV Show&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
      {props.shows.map(show =&amp;gt; (
        &amp;lt;li key= {show.id}&amp;gt;
          &amp;lt;Link href=&amp;quot;/p/[id]&amp;quot; as={`/p/${show.id}`}&amp;gt;
            &amp;lt;a&amp;gt;{show.name}&amp;lt;/a&amp;gt;
          &amp;lt;/Link&amp;gt;
        &amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/Layout&amp;gt;
)

Index.getInitialProps = async function() {
  const res = await fetch(&amp;#39;https://api.tvmaze.com/search/shows?q=batman&amp;#39;);
  const data = await res.json();
  console.log(`Show data fetched. Count: ${data.length}`)
  return {
    shows: data.map(entry =&amp;gt; entry.show)
  };
};

export default Index;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8fbf8740-e419-11e9-be0b-83e93a051029/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;좋았어… 리스트대로 아주 잘 나오고 있다.&lt;br /&gt;
값이 잘 뜨는건 확인했고.. 새로고침을 한번 해보자. &lt;br /&gt;그러고 터미널과 브라우저의 콘솔창을 확인해본다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7714b840-e41a-11e9-be0b-83e93a051029/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8572d9d0-e41a-11e9-8a8d-f7ea9a766832/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;브라우저는 아주 깨-끗.
터미널에는 내가 공식문서에 입력된 콘솔처럼 data의 length인 10이 잘 찍힌다.
왜냐.. 서버에서 페이지를 랜더링 했기 때문이다.
우리는 이미 데이터를 가지고 있으니깐 client에서 다시 fetch를 쓸 이유는 없는것… 이라는데&lt;/p&gt;
&lt;p&gt;아무래도 영 찝찝해서 다시 제대로 정리해보았다!&lt;/p&gt;
&lt;h2 id=&quot;getinitialprops줄여서-gip&quot;&gt;&lt;a href=&quot;#getinitialprops%EC%A4%84%EC%97%AC%EC%84%9C-gip&quot; aria-label=&quot;getinitialprops줄여서 gip permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;getInitialProps(줄여서 GIP)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비동기 정적 메소드 (async static method)&lt;/li&gt;
&lt;li&gt;초기에 페이지가 로드될때 GIP은 오직 서버에서만 실행쓰&lt;/li&gt;
&lt;li&gt;link Component나 routing API를 통해 다른 루트로 접근시 오직 client에서만 실행쓰&lt;/li&gt;
&lt;li&gt;무조건 객체 리턴쓰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;궁금해서 찍어본 콘솔라시도~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Index.getInitialProps = async function() {
  const res = await fetch(&amp;#39;https://api.tvmaze.com/search/shows?q=batman&amp;#39;);
  console.log(res, &amp;quot;응답혀&amp;quot;)
  const data = await res.json();
  console.log(data, &amp;quot;데이터여~&amp;quot;)
  console.log(`Show data fetched. Count: ${data.length}`)
  return {
    shows: data.map(entry =&amp;gt; entry.show)
  };
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드에서 res와 data와 data의 length를 각각 찍어보았다.
먼저 res를 살펴보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//res의 콘솔
Response {
  size: 0,
  timeout: 0,
  [Symbol(Body internals)]: {
    body: Gunzip {
      _writeState: [Uint32Array],
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: true,
      _transformState: [Object],
      _hadError: false,
      bytesWritten: 0,
      _handle: [Zlib],
      _outBuffer: &amp;lt;Buffer 5b 7b 22 73 63 6f 72 65 22 3a 32 34 2e 33 39 36 31 31 2c 22 73 68 6f 77 22 3a 7b 22 69 64 22 3a 39 37 35 2c 22 75 72 6c 22 3a 22 68 74 74 70 3a 2f 2f ... 16334 more bytes&amp;gt;,
      _outOffset: 0,
      _chunkSize: 16384,
      _defaultFlushFlag: 2,
      _finishFlushFlag: 2,
      _defaultFullFlushFlag: 3,
      _info: undefined,
      _level: -1,
      _strategy: 0
    },
    disturbed: false,
    error: null
  },
  [Symbol(Response internals)]: {
    url: &amp;#39;https://api.tvmaze.com/search/shows?q=batman&amp;#39;,
    status: 200,
    statusText: &amp;#39;OK&amp;#39;,
    headers: Headers { [Symbol(map)]: [Object: null prototype] },
    counter: 0
  }
} 응답혀&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오.. 200 OK와 url이 젤 먼저 보인다
data도 함 까보자!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/bda1ab90-e426-11e9-855b-c9c70516744a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;생각해보니 data.length가 10인데… 너무 기니까 걍 한 부분 캡쳐 고고!&lt;br /&gt;
이걸 console을 찍고 저장하면 바로 보이는 것이 아니라, 브라우저에서 새로고침을 해야 서버의 콘솔에 뜬다.
그리고 브라우저엔 아무 정보도 뜨지 않는다…&lt;/p&gt;
&lt;p&gt;공식문서에 의하면 브라우저에선 Link Component 등으로 접근했을때 client에서만 실행된다고 했는데
진짜다 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/18ed1980-e427-11e9-bdf7-95b1f8e33241/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까까진 콘솔창이 넘나 깨-끗 했지만… 인제 데이터가 온다!!!!!&lt;br /&gt;
그니까 다시 정리해보자면…!&lt;br /&gt;
브라우저 단에서 뭔가를 띄우려면 url을 만지거나 Link 걸린 글자를 만지거나 해야하고
안그럼 다 서버단에서만 정보가 전송이 되는 것 같은 너낌적인 너낌…?!&lt;/p&gt;
&lt;h2 id=&quot;styled-jsx&quot;&gt;&lt;a href=&quot;#styled-jsx&quot; aria-label=&quot;styled jsx permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styled-jsx&lt;/h2&gt;
&lt;p&gt;Next.js에서 CSS 효과를 주는 가장 좋은 방법은 styled-jsx인듯?&lt;br /&gt;
(보통은 material ui 같은 프레임워크를 많이 쓰는듯…?!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/33387f80-e42e-11e9-929c-651a2a4e4521/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사용전에 &lt;code class=&quot;language-text&quot;&gt;ctrl+shift+x&lt;/code&gt;를 눌러서 이 확장판을 깔면 코드치기 더 편할것이다 ㅋㅋ&lt;br /&gt;
아 배고파 꼬르륵 소리 나려고 하네 큰일났다.&lt;/p&gt;
&lt;p&gt;index.js 파일을 이렇게 써준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Layout from &amp;#39;../components/MyLayout&amp;#39;;
import Link from &amp;#39;next/link&amp;#39;;

function getPosts() {
  return [
    { id: &amp;#39;hello-nextjs&amp;#39;, title: &amp;#39;Hello Next.js&amp;#39; },
    { id: &amp;#39;learn-nextjs&amp;#39;, title: &amp;#39;Learn Next.js is awesome&amp;#39; },
    { id: &amp;#39;deploy-nextjs&amp;#39;, title: &amp;#39;Deploy apps with ZEIT&amp;#39; }
  ];
}

export default function Blog() {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;h1&amp;gt;My Blog&amp;lt;/h1&amp;gt;
      &amp;lt;ul&amp;gt;
        {getPosts().map(post =&amp;gt; (
          &amp;lt;li key={post.id}&amp;gt;
            &amp;lt;Link href=&amp;quot;/p/[id]&amp;quot; as={`/p/${post.id}`}&amp;gt;
              &amp;lt;a&amp;gt;{post.title}&amp;lt;/a&amp;gt;
            &amp;lt;/Link&amp;gt;
          &amp;lt;/li&amp;gt;
        ))}
      &amp;lt;/ul&amp;gt;
      &amp;lt;style jsx&amp;gt;{`
        h1,
        a {
          font-family: &amp;#39;Arial&amp;#39;;
        }

        ul {
          padding: 0;
        }

        li {
          list-style: none;
          margin: 5px 0;
        }

        a {
          text-decoration: none;
          color: blue;
        }

        a:hover {
          opacity: 0.6;
        }
      `}&amp;lt;/style&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저기서 getPost라는 함수를 대체 왜 써준진 모르겠다. 만든사람이 함수덕후?&lt;br /&gt;
여튼 styled 태그를 열고 중괄호와 빽틱을 또 열어서 css 요소들을 넣어주면 된다.&lt;br /&gt;
확장팩을 깔았으면 내 색깔! 안 깔았으면 주황색깔이 떠서 혼란혼란쓰~~ 확장팩 까세욧!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2ab128c0-e42f-11e9-b2a9-1d24e2c56ef8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;확장팩 까니까 을매나 보기 편하게요~&lt;/p&gt;
&lt;p&gt;이제 Global Style도 적용해 볼건데, 그전에 react-markdown을 깔아주자
&lt;code class=&quot;language-text&quot;&gt;sudo yarn add react-markdown&lt;/code&gt; 명령어로 설치 고고!
코드를 한번 까봅시다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { useRouter } from &amp;#39;next/router&amp;#39;;
import Markdown from &amp;#39;react-markdown&amp;#39;;
import Layout from &amp;#39;../../components/MyLayout&amp;#39;;

export default () =&amp;gt; {
  const router = useRouter();
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;h1&amp;gt;{router.query.id}&amp;lt;/h1&amp;gt;
      &amp;lt;div className=&amp;quot;markdown&amp;quot;&amp;gt;
        &amp;lt;Markdown
          source={`
This is our blog post.
Yes. We can have a [link](/link).
And we can have a title as well.

### This is a title

And here&amp;#39;s the content.
      `}
        /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;style jsx global&amp;gt;{`
        .markdown {
          font-family: &amp;#39;Arial&amp;#39;;
        }

        .markdown a {
          text-decoration: none;
          color: blue;
        }

        .markdown a:hover {
          opacity: 0.6;
        }

        .markdown h3 {
          margin: 0;
          padding: 0;
          text-transform: uppercase;
        }
      `}&amp;lt;/style&amp;gt;
    &amp;lt;/Layout&amp;gt;
  );
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;react-markdown을 깔아주었으므로 우리는 Markdown Component를 사용할 수 있고
그 컴포넌트 아래에선 마크다운으로 쓰면 된다 레알로 ㅋㅋ 씐기 씐ㄱ!!!&lt;br /&gt;
여태껏 reset.css를 만들거나.. global styles를 만들거나 했었는데&lt;br /&gt;
style jsx는 그냥 태그에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style jsx global&amp;gt;&lt;/code&gt;만 붙이면 된다ㅋㅋ&lt;br /&gt;
근데 아직 내가 이게 미숙해서 그런지.. style jsx는 좀 불편해보인다 ㅠ&lt;/p&gt;
&lt;p&gt;deploy는 다음기회에…
사실 한거 같긴한데 PORT 여러개 쓰는 부분이 잘 이해가 안가서 잠시 내려놓았다 ㅋㅋ&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 10주차_1일 TIL_공식문서와 함께하는 둘둘의 Next.js 도전기]]></title><description><![CDATA[위코드 63일차. 기업협업 간 첫 날! 내가 출근한 기업에서는 Next.js라는 프레임워크를 이용하고 있어서 본격 Next.js를 사용해보기 전, 공식문서로 공부를 해보았다]]></description><link>https://gollumnima.github.io//posts/wecode10_1TIL_nextjs</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode10_1TIL_nextjs</guid><pubDate>Mon, 30 Sep 2019 16:05:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/627c4b00-e35c-11e9-a56b-8914a6ec2e86/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next.js를 한번 써보았다!
리액트랑 비슷한데.. 리액트만 쓰다가 이걸 써보니 진짜 신박하다!&lt;/p&gt;
&lt;p&gt;내가 썼던 React가 Client Side Rendering(CSR) 방식 이었다면, Next는 Server Side Rendering(SSR)방식이다.
리액트에선 프론트부분을 작성하고 데이터는 백앤드 서버에서 받아오는 방식이었다.
클라이언트 따로, 서버 따로.. 각각 작성해야 했는데!
Next.js는 이 과정을 따로 해줄 필요 없이 한방에 뙇!!! 하는거라고… 이해하면 되려나?&lt;/p&gt;
&lt;h2 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0&quot; aria-label=&quot;시작하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir hello-next // 아무 이름의 폴더 생성
cd hello-next // 만든 폴더로 이동고고
yarn init -y // 초기화 해주기
yarn add react react-dom next // next와 react 깔기
mkdir pages // pages 폴더 만들기&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여튼… 내 프로젝트 안에 pages 폴더를 만들고 &lt;code class=&quot;language-text&quot;&gt;code .&lt;/code&gt;으로 vscode를 켜준다!
여기서 젤 중요한게 pages 폴더를 만드는 일이다.
React는 모든 js파일을 src폴더 하에서 시작하는것처럼 Next.js는 pages에서 모든 것이 시작된다고 한다!&lt;/p&gt;
&lt;h2 id=&quot;packagejson에-추가&quot;&gt;&lt;a href=&quot;#packagejson%EC%97%90-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;packagejson에 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;package.json에 추가&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;hello-next&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
     &amp;quot;dev&amp;quot;: &amp;quot;next&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;next build&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot;next start&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;next&amp;quot;: &amp;quot;^2.1.0&amp;quot;,
    &amp;quot;react&amp;quot;: &amp;quot;^15.4.2&amp;quot;,
    &amp;quot;react-dom&amp;quot;: &amp;quot;^15.4.2&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이걸 추가해줌으로 우린 &lt;code class=&quot;language-text&quot;&gt;yarn run dev&lt;/code&gt; 명령어로 프로젝트를 시작할 수 있다.&lt;/p&gt;
&lt;p&gt;어찌됐든 명령어를 입력하면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c9986e80-e380-11e9-83c5-b5732aa124ce/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;터미널에 ready, event, wait 등의 메시지가 색깔색깔별로 뜬다.
명령어 입력 후 3000 port로 접속해 보자..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fe4c19b0-e380-11e9-8d67-1ddd28a8c819/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;404 error가 뜬다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/18e11000-e381-11e9-8d67-1ddd28a8c819/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next.js 공식 문서의 learn 페이지에 가면 퀴즈와 함께 설명이 있는데
에러가 날지 모르고 3번을 눌렀으나 답은 2번이였닼ㅋㅋ 왜 에러가 난거지
index.js 파일이 없어서 그런듯?? 만들어주자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Index = () =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;Hello Next.js&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
)

export default Index;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;신기하게 Next.js는 react를 import 안해와도 된다 ㅋㅋ 신기씐기!&lt;/p&gt;
&lt;h2 id=&quot;about-page-만들기&quot;&gt;&lt;a href=&quot;#about-page-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;about page 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About page 만들기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;export default () =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;This is the about page&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0cce8490-e35f-11e9-b0fe-0bdcf6561528/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;터미널엔 이러한 글자들이 뜬다!!!
react때랑은 다르게 페이지 하나 하나마다 build되고 compile되는 과정을 글자로 알려준다 ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;link태그&quot;&gt;&lt;a href=&quot;#link%ED%83%9C%EA%B7%B8&quot; aria-label=&quot;link태그 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Link태그&lt;/h2&gt;
&lt;p&gt;컴포넌트를 만들고 나서 import를 안 해도 되는것도 신기했지만 더 신기했던건 Link.
Next.js 안에 Router가 내장되어있기 때문이다 ㅋㅋ
Link 기능을 쓰려면 &lt;code class=&quot;language-text&quot;&gt;import Link from &amp;#39;next/link&amp;#39;&lt;/code&gt; 이거 한줄 써서 import 해야하긴 한다.
router를 다운로드는 안 받아도 된다 ㅋㅋ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Link from &amp;#39;next/link&amp;#39;

const Index = () =&amp;gt; (
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;
            안녕, Next.js
        &amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;
            &amp;lt;Link href=&amp;quot;/about&amp;quot;&amp;gt;
                &amp;lt;a&amp;gt;소개&amp;lt;/a&amp;gt;
            &amp;lt;/Link&amp;gt;
        &amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
);

export default Index;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;리액트는 Link 안에 to를 썼지만, Next는 to 대신 href를 써준다.
그리고 Link Component 내부엔 또 다른 컴포넌트가 들어가거나 element가 들어가야 한다!!&lt;/p&gt;
&lt;p&gt;공식문서에 따르면…
We know that Next.js is all about pages. We can create a page by exporting a React component, and putting that component inside the pages directory. Then it will have a fixed URL based on the file name.&lt;/p&gt;
&lt;p&gt;그니까 파일이름 그 자체가 걍 url의 이름이 되는 것..!!
리액트땐 Routes.js 들어가서 직접 이름을 설정해줬는데 Next는 걍 파일이름 자체가 url 경로&lt;/p&gt;
&lt;h2 id=&quot;header-만들기&quot;&gt;&lt;a href=&quot;#header-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;header 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Header 만들기&lt;/h2&gt;
&lt;p&gt;component라는 폴더를 만들고 그 안에 Header.js 파일은 만들어놓은 상태다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Link from &amp;#39;next/link&amp;#39;;

const linkStyle = {
    marginRight: &amp;#39;1rem&amp;#39;
}
const Header = () =&amp;gt; {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;Link href=&amp;quot;/&amp;quot;&amp;gt;&amp;lt;a style={linkStyle}&amp;gt;홈&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;
            &amp;lt;Link href=&amp;quot;/about&amp;quot;&amp;gt;&amp;lt;a style={linkStyle}&amp;gt;소개&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};

export default Header;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 Header라는 파일에 home과 about으로 가는 경로가 써 있으니깐
이걸 또 import 해서 모든 페이지에 붙이면 되겠지!
근데 이것보다 더 간편한 방법이 있다..&lt;/p&gt;
&lt;h2 id=&quot;layout-만들기&quot;&gt;&lt;a href=&quot;#layout-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;layout 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layout 만들기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Header from &amp;quot;./Header&amp;quot;

const layoutStyle = {
    margin: 20,
    padding: 20,
    border: `1px solid #DDD`
};


const Layout = props =&amp;gt; (
    &amp;lt;div style={layoutStyle}&amp;gt;
        &amp;lt;Header /&amp;gt;
        {props.children}
    &amp;lt;/div&amp;gt;
);

export default Layout;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Header Component를 불러오고 그 밑엔 props의 자식 컴포넌트가 들어오도록 props로 넘겨주는 방식..!
오.. 신박해!&lt;/p&gt;
&lt;p&gt;이렇게 해줬으면 인제 각 페이지에서 Header 컴포넌트를 제거하고
가장 바깥쪽 div를 Layout Component로 감싸주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import MyLayout from &amp;quot;../comp/MyLayout&amp;quot;

export default function About() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;MyLayout /&amp;gt;
      &amp;lt;p&amp;gt;This is the about page&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;요런식으로! ㅋㅋㅋㅋㅋ
그럼 이렇게 뙇!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a01a39c0-e3e5-11e9-812e-b93d8ea65a84/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;근데… 암만 봐도 난 이 과정들이 넘 비효율적인것 같다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;리액트에선 NavBar 컴포넌트 만든걸 그냥 Routes.js파일 안에 넣으면 끝이었는데
뭐가 이렇게 번거로운지… 내가 아직 잘 몰라서 그런건가!
분명 더 간편한 방법이 있을것 같은데.. 지금으로썬 모르겠다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2a7d78c0-e3e6-11e9-96af-c59b887e2153/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;공식문서 퀴즈에서.. props.children 지워보래서 지워봤는데 아무일도 일어나지 않았고
그래서 1번을 골랐을 뿐인데 틀렸댄다 ㅠㅠㅠ&lt;/p&gt;
&lt;p&gt;그래서 정말 파일 토씨 하나 틀리지 않게 하려고 완전한 복붙 후 다시 props.children을 지워보았다.
Like this!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Header from &amp;#39;./Header&amp;#39;

const layoutStyle = {
  margin: 20,
  padding: 20,
  border: &amp;#39;1px solid #DDD&amp;#39;
}

export default function Layout(props) {
  return (
    &amp;lt;div style={layoutStyle}&amp;gt;
      &amp;lt;Header /&amp;gt;
      {/* {props.children} */}
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그랬더니…!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4fa952a0-e3ea-11e9-812e-b93d8ea65a84/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;드디어 아무 내용도 뜨지 않았다!!!
역시 공식문서의 말을 잘 들어야 한다…ㅋㅋㅋ
여튼… 위와 같은 Layout 파일을 만들거면 인자로 props를.. 그 아래엔 props.children을 꼭 써주자.&lt;/p&gt;
&lt;h2 id=&quot;hoc-방식으로-해보기&quot;&gt;&lt;a href=&quot;#hoc-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%95%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;hoc 방식으로 해보기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HOC 방식으로 해보기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Header from &amp;#39;./Header&amp;#39;;

const layoutStyle = {
  margin: 20,
  padding: 20,
  border: &amp;#39;1px solid #DDD&amp;#39;
};

const withLayout = Page =&amp;gt; {
  return () =&amp;gt; (
    &amp;lt;div style={layoutStyle}&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;Page /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default withLayout;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;withLayout을 정의해주고…
각각의 컴포넌트에 withLayout을 export 해준다 이렇게!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import withLayout from &amp;#39;../components/MyLayout&amp;#39;;

const Page = () =&amp;gt; &amp;lt;p&amp;gt;Hello Next.js&amp;lt;/p&amp;gt;;

export default withLayout(Page);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;넘나 신기한것…
아직 HOC 방식으로 코드를 쳐보지 않았는데 대충 이런 느낌이었군!&lt;/p&gt;
&lt;h2 id=&quot;props로-넘겨주는-방법쓰&quot;&gt;&lt;a href=&quot;#props%EB%A1%9C-%EB%84%98%EA%B2%A8%EC%A3%BC%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%93%B0&quot; aria-label=&quot;props로 넘겨주는 방법쓰 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;props로 넘겨주는 방법쓰&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Header from &amp;#39;./Header&amp;#39;;

const layoutStyle = {
  margin: 20,
  padding: 20,
  border: &amp;#39;1px solid #DDD&amp;#39;
};

const Layout = props =&amp;gt; (
  &amp;lt;div style={layoutStyle}&amp;gt;
    &amp;lt;Header /&amp;gt;
    {props.content}
  &amp;lt;/div&amp;gt;
);

export default Layout;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;같은 방식이긴 한데.. 인자로 props가 들어가고 아래엔 props.content를 써준다.&lt;br /&gt;
이 Layout을 적용할 각각의 폴더에는..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Layout from &amp;#39;../components/MyLayout.js&amp;#39;;

const indexPageContent = &amp;lt;p&amp;gt;Hello Next.js&amp;lt;/p&amp;gt;;

export default function Index() {
  return &amp;lt;Layout content={indexPageContent} /&amp;gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;props의 content에 들어갈 부분을 변수로 정의해주고
return 값에는 Layout Component를 불러주고 그 요소로 contetn={위에서 선언한 변수}를 넣어준다.
아… 이건 진짜 핵 귀찮은 방법인거 같다 ㅠㅠㅠㅠ&lt;/p&gt;
&lt;p&gt;일단은 글이 길어질것 같으니 다음 포스팅에 이어서…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 9주차_7일 TIL_Git에서 pull request가 안 될때 문제 해결방법]]></title><description><![CDATA[위코드 62일차. 2차 프로젝트를 마무리 지어야 하는데.. git에서 pull request를 하는 데 문제가 발생..! 생각보다 간단한 문제였는데 빨간 글씨로 can't라니까 넘나 무서웠던 것.... 여튼 해결 방법에 대해 써보았다!]]></description><link>https://gollumnima.github.io//posts/wecode9_7TIL_git_error</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode9_7TIL_git_error</guid><pubDate>Sun, 29 Sep 2019 15:41:23 GMT</pubDate><content:encoded>&lt;h2 id=&quot;cant-automatically-merge&quot;&gt;&lt;a href=&quot;#cant-automatically-merge&quot; aria-label=&quot;cant automatically merge permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can’t automatically merge&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6a424fa0-e281-11e9-9cc9-c52279a372a5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;분명 master branch에서 pull 받았을 때 아무 문제가 없었는데…
feature/css_little이라는 branch에서 master로 pull request를 날리려고 하는데
&lt;code class=&quot;language-text&quot;&gt;can&amp;#39;t automatically merge&lt;/code&gt; 라는 에러가 발생..!&lt;/p&gt;
&lt;p&gt;고 옆에 글씨를 읽어보면… 걱정 ㄴㄴ pr은 날릴수 있다능!!
이라고 써있지만.. 그 어딜 봐도 pull request 버튼은 보이지 않는다
근데 이상한게.. 분명 conflict가 났어야 하는데… 충돌이 일어나지 않았다…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/600559a0-e282-11e9-a13e-c1f521813d57/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;왜지…?
충돌이 났어야하는데…
문제의 원인은 거기에 있었던 것 같다 ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31973318/github-cant-automatically-merge&quot;&gt;여기 답변&lt;/a&gt;을 살펴보면 해결방법을 알 수있다.
다른 branch에서 이미 conflict가 났었고.. 아마 그게 제대로 해결이 안 됐던 모양?! 맞나?? 아닌가??
모르겠다 ㅋㅋㅋㅋㅋ
여튼… 이럴땐 master branch에서 강제로 pull을 해주는 방법밖에 없다!&lt;/p&gt;
&lt;h2 id=&quot;해결책&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EC%B1%85&quot; aria-label=&quot;해결책 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결책&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout 내 브랜치&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git merge master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;공동으로 작업할 땐 웬만해선 master branch를 건드리면 안되는데
이건 진짜 도저히 방법이 없고.. 난 pr을 꼭 날려야 했기에
팀원분의 양해를 구하고 위의 해결책에 따라 명령어를 입력쓰~~&lt;/p&gt;
&lt;p&gt;그랬더니 드디어 conflict가 났다!!!!!!
conflict가 이렇게 반가울수가…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/af681d60-e283-11e9-a13e-c1f521813d57/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;conflict를 해결하고.. add, commit에 push.. pr까지 무사히 끝냈다.&lt;br/&gt;
영상 촬영까지 끝냈기 때문에 넘나 뿌듯!!&lt;br/&gt;
2차 프로젝트는 아쉽지만 이만 바이바이…☆&lt;br/&gt;
더 구현해보고 싶은 기능들이 많지만 나는 또 다른 공부를 해야하기 때문에…!!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 9주차_6일 TIL_CRA 실행시 yarn start가 안되는 에러 해결]]></title><description><![CDATA[위코드 61일차. 이번주는 2차 프로젝트 마무리 짓느라 포스팅이 많이 밀렸는데.. 앞으로 쭉 해나갈 예정이다. 오늘은 날 2시간동안 힘들게 했던 CRA에서 yarn start 명령어 입력시 생긴 에러에 대해서 써보았다!]]></description><link>https://gollumnima.github.io//posts/wecode9_6TIL_react_error</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode9_6TIL_react_error</guid><pubDate>Sat, 28 Sep 2019 12:07:23 GMT</pubDate><content:encoded>&lt;p&gt;2차 프로젝트 마무리 짓느라 많이도 밀린 포스팅..
이제 프로젝트도 끝났으나 여유 시간이 약간 생겨서 못했던 공부와 포스팅을 병행할 예정~&lt;/p&gt;
&lt;p&gt;오늘의 주제는…&lt;/p&gt;
&lt;h2 id=&quot;cra-실행시-yarn-start가-안돼요&quot;&gt;&lt;a href=&quot;#cra-%EC%8B%A4%ED%96%89%EC%8B%9C-yarn-start%EA%B0%80-%EC%95%88%EB%8F%BC%EC%9A%94&quot; aria-label=&quot;cra 실행시 yarn start가 안돼요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CRA 실행시 yarn start가 안돼요!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b351c560-e25c-11e9-a7eb-9d155685d206/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;언제 안되느냐…
바로 지금이다 나에겐&lt;br&gt;
에러 생긴 김에 블로그 포스팅을 하기로 마음먹었다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ecd05430-e25e-11e9-a7eb-9d155685d206/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 순서대로 해보라는데.. pacakage-lock.json이나 yarn.lock은 없어서 1번은 패쓰~
2번… node_modules를 지우라는데… 진짜???? 일단 지워본다 ㄱㄱ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4f65c170-e25f-11e9-a7eb-9d155685d206/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;또다시 yarn start 했는데 127에러… 구글링 하기전에 나는 이미 다른 사람의 해결책을 보고 따라했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot; https://github.com/facebook/create-react-app/issues/5825 &quot;&gt;이 글을 보고 했는데&lt;/a&gt;
하리프리야가네산이라는 분의 답변을 보고 했는데 왜 안되지..?&lt;br&gt;
다시 react에서 알려준 순서대로 도전도전&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a0a50d60-e260-11e9-bbca-93d7aa4138bb/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;package.json 안의 webpack을 지우란다… 지워보았다.
그런 다음 npm이나 yarn을 다시 깔래서 깔아보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/054fc610-e261-11e9-a4c2-fdfd8195e079/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;yarn 명령어로 yarn을 설치한 모습.
4번까지 하면 웬만해선 문제가 해결된다는데… 난 해결되지 않았기 때문에 5번부터 다시 꼼꼼히 정독쓰…&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;If you used npm, install yarn (&lt;a href=&quot;http://yarnpkg.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://yarnpkg.com/&lt;/a&gt;) and repeat the above steps with it instead.
This may help because npm has known issues with package hoisting which may get resolved in future versions.&lt;/li&gt;
&lt;li&gt;Check if /home/dooreplay/node_modules/babel-eslint is outside your project directory.
For example, you might have accidentally installed something in your home folder.&lt;/li&gt;
&lt;li&gt;Try running npm ls babel-eslint in your project folder.
This will tell you which other package (apart from the expected react-scripts) installed babel-eslint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5번을 읽고 yarn.lock 파일 지우고 다시 &lt;code class=&quot;language-text&quot;&gt;yarn start&lt;/code&gt; 해봤는데 그래도 안된다.
&lt;code class=&quot;language-text&quot;&gt;sudo yarn start&lt;/code&gt;도 안먹힌다… 황당쓰… 그럴땐 6번으로 고&lt;/p&gt;
&lt;p&gt;보니까 node_modules 폴더가 홈 폴더에 있는데… 원래 있었나..? 언제부터 거기에 있었지?
7번의 babel-eslint 파일은 죽어라 찾아봐도 없는데…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dd99c540-e264-11e9-a4c2-fdfd8195e079/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;CRA를 네 번정도를 반복한거 같다 이 문제를 해결하려고 ㅠㅠ 화나!!
아침에 일찍 왔는데 에러 해결하려고 2시간은 쏟아부은거 같다 ㅠㅠ
여튼 동기님의 도움으로 해결쓰! 어떻게 했냐…&lt;/p&gt;
&lt;p&gt;일단 시작을 &lt;code class=&quot;language-text&quot;&gt;npx create-react-app 폴더명&lt;/code&gt;으로 했고..(그전까진 npx 안하고 cra만 했다)
npx를 써줘야 최신 버전을 뭐 자동으로 업데이트 해준다는거 같다
리액트 공식 페이지에서도 npx를 쓰라고 권장하라고 하니 앞으로 쭉 써야겠다!&lt;/p&gt;
&lt;p&gt;여튼… yarn start를 했는데 또 안돼!!!!
그래서 홈 폴더에 있는 node_modules를 바탕화면으로 옮겼다 ㅋㅋㅋ 삭제하긴 무서우니까&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2ba6d980-e265-11e9-bbca-93d7aa4138bb/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오????/ 된다된다!!! 드디어 된다!!
못본 새에 디자인이 많이 바뀌었군… &lt;br&gt;원래는 하늘색이었는데 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼… 오늘의 에러는 이렇게 해결쓰…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 8주차_4일 TIL_프로젝트에 해시태그 추가기능을 넣어보자!]]></title><description><![CDATA[위코드 52일차. 한창 2차프로젝트가 진행중인 지금. 프로젝트에 해시태그 추가 및 제거기능을 넣어보았다. 라이브러리를 쓰지 않고도 js와 css를 이용해서 태그 넣는 방법을 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode8_4TIL_css_hashtag</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode8_4TIL_css_hashtag</guid><pubDate>Thu, 19 Sep 2019 17:48:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/843a3db0-dd12-11e9-906f-2bc170a4c86a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;요즘 다들 정말 많이 하는 인스타그램! 나도 정말 많이 한다
먹을거 사진 올리는 재미가 쏠쏠~~
인스타그램에서만 해시태그를 쓰는건 아니지만 가장 대표적인 예라서 썸네일은 인서타로 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;팀원분이 2차 프로젝트에 태그 추가하는 기능을 넣어달라고 요청하셔서
열심히 구글링한 결과.. 찾아냈다!!!
그냥 하드코딩만 하면 실력이 늘지 않으니 분석하려고 포스팅해본다 ㅋㅋ
(참고로 나는 styled-component를 사용했다.)&lt;/p&gt;
&lt;p&gt;코드 먼저 봅시다.&lt;/p&gt;
&lt;h2 id=&quot;state객체-내부에-선언&quot;&gt;&lt;a href=&quot;#state%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B6%80%EC%97%90-%EC%84%A0%EC%96%B8&quot; aria-label=&quot;state객체 내부에 선언 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state객체 내부에 선언&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.state = {tags: [&amp;quot;핵꿀잼&amp;quot;, &amp;quot;리워드대박&amp;quot;]}&lt;/code&gt;
먼저 state 안에 tags라는 배열을 선언해주고, 그 안에 디폴트 태그값을 넣어준다!&lt;/p&gt;
&lt;h2 id=&quot;태그-제거하는-기능&quot;&gt;&lt;a href=&quot;#%ED%83%9C%EA%B7%B8-%EC%A0%9C%EA%B1%B0%ED%95%98%EB%8A%94-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;태그 제거하는 기능 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;태그 제거하는 기능&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  removeTags = i =&amp;gt; {
    const newTags = [...this.state.tags];
    newTags.splice(i, 1);
    this.setState({ tags: newTags });
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;엔터로-추가-백스페이스로-제거-기능&quot;&gt;&lt;a href=&quot;#%EC%97%94%ED%84%B0%EB%A1%9C-%EC%B6%94%EA%B0%80-%EB%B0%B1%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%EC%A0%9C%EA%B1%B0-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;엔터로 추가 백스페이스로 제거 기능 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;엔터로 추가, 백스페이스로 제거 기능&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  inputKeyDown = e =&amp;gt; {
    const val = e.target.value;
    if (e.key === &amp;quot;Enter&amp;quot; &amp;amp;&amp;amp; val) {
      if (
        this.state.tags.find(tag =&amp;gt; tag.toLowerCase() === val.toLowerCase())
      ) {
        return;
      }
      this.setState({ tags: [...this.state.tags, val] });
      this.tagInput.value = null;
    } else if (e.key === &amp;quot;Backspace&amp;quot; &amp;amp;&amp;amp; !val) {
      this.removeTag(this.state.tags.length - 1);
    }
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;엔터를 쳤을 때 값이 추가될 수 있도록 하는 기능인데..
솔직히 LowerCase 부분은 왜 넣었는지 모르겠… 어서 지우고 테스트를 해봤다 룰루~&lt;/p&gt;
&lt;p&gt;저걸 지우면 똑같은 문자를 대소문자 바꿔썼을때 추가가 되고, 저게 있어야 중복이 방지된다 ㅋㅋ
여튼 입력한 글자를 setState를 이용해 tags 배열에 추가를 하고..
아래는 백스페이스 눌렀을 때 태그를 지우는 기능쓰~&lt;/p&gt;
&lt;p&gt;리턴 전에 디스트럭처링을 먼저 해주고..
&lt;code class=&quot;language-text&quot;&gt;const { tags } = this.state;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;태그-구조&quot;&gt;&lt;a href=&quot;#%ED%83%9C%EA%B7%B8-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;태그 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;태그 구조&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;TagWrapper&amp;gt;
            &amp;lt;TagUL&amp;gt;
              {tags.map((tag, i) =&amp;gt; (
                &amp;lt;TagLI key={tag}&amp;gt;
                  {tag}
                  &amp;lt;TagBtn
                    onClick={() =&amp;gt; {
                      this.removeTags(i);
                    }}
                  &amp;gt;
                    +
                  &amp;lt;/TagBtn&amp;gt;
                &amp;lt;/TagLI&amp;gt;
              ))}
              &amp;lt;TagSpace&amp;gt;
                &amp;lt;TagInput
                  onKeyDown={this.inputKeyDown}
                  ref={c =&amp;gt; {
                    this.tagInput = c;
                  }}
                /&amp;gt;
              &amp;lt;/TagSpace&amp;gt;
            &amp;lt;/TagUL&amp;gt;
          &amp;lt;/TagWrapper&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;생긴건 간단하게 생겨가지고 꽤나 html 요소들이 필요하다 ㅋㅋㅋ
TagInput이 태그를 입력하는 입력칸이고.. 그렇게 입력하면 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;TagLI&amp;gt;&lt;/code&gt;버튼들이 생겨난다!
css 속성도 함께 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const TagWrapper = styled.div`
  width: 363px;
  background: white;
  border-radius: 2px;
  display: flex;
  flex-wrap: wrap;
  padding: 5px 5px 0;
`;

const TagUL = styled.ul`
  display: inline-flex;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;
  width: 100%;
`;

const TagLI = styled.li`
  align-items: center;
  background: linear-gradient(
    to right top,
    #233e6a,
    #44417c,
    #6c3f86,
    #953785,
    #bb2979
  );
  border-radius: 2px;
  color: white;
  display: flex;
  font-weight: 300;
  list-style: none;
  margin-bottom: 5px;
  margin-right: 5px;
  padding: 5px 10px;
`;

const TagBtn = styled.button`
  align-items: center;
  appearance: none;
  background: #333333;
  border: none;
  border-radius: 50%;
  color: white;
  cursor: pointer;
  display: inline-flex;
  font-size: 12px;
  height: 15px;
  justify-content: center;
  line-height: 0;
  margin-left: 8px;
  transform: rotate(45deg);
  width: 15px;
`;

const TagSpace = styled.li`
  background: none;
  flex-grow: 1;
  padding: 0;
`;

const TagInput = styled.input.attrs({
  type: &amp;quot;text&amp;quot;,
  placeholder: &amp;quot;원하는 태그를 최대 5개까지 입력해주세요&amp;quot;
})`
  border: 1px solid #bdbdbd;
  border-radius: 4px;
  width: 100%;
  height: 43px;
`;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 다 써본 다음에 개발자도구를 열어서 바꾸고 싶은 속성값들은 바꿔주면 된다 ㅋㅋ
이렇게까지 하면 어떠한 결과물이 나오냐..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f29a1a0-dd15-11e9-906f-2bc170a4c86a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 뙇!!
나는 우리 프로젝트의 로고 색깔에 맞춰 파+보로 bg color를 설정했는데 단색으로 해도 예쁠듯&lt;/p&gt;
&lt;p&gt;사실 placeholder에 태그 5개 입력하라고 했는데.. 아직 제한 기능은 못 넣었다.
급한불부터 끄고 나중에 작업할 시간 있을때 해봐야지 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jerrylowm/build-a-tags-input-react-component-from-scratch-1524f02acb9a&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://medium.com/@jerrylowm/build-a-tags-input-react-component-from-scratch-1524f02acb9a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 8주차_3일 TIL_프로젝트 할 때 코드구조 깔끔하게 잡아보자]]></title><description><![CDATA[위코드 51일차. 훌륭한 개발자의 덕목 중 하나인 유지보수능력.. 그걸 위해선 애초에 코드를 적을때 깔끔하게 적는 것이 좋다! 오늘은 프로젝트용 혹은 개인습관을 위해 코드구조를 깔끔하게 잡아보는 방법들을 적어보았다!]]></description><link>https://gollumnima.github.io//posts/wecode8_3TIL_project_code_clean</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode8_3TIL_project_code_clean</guid><pubDate>Wed, 18 Sep 2019 10:46:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9505e600-dcd4-11e9-9f0d-b11d7ac62e29/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;훌륭한 개발자의 덕목 중 하나인 유지보수 능력!
그걸 잘 하려면 코드의 어느 위치에 무엇이 있는지 잘 알아야 한다.
그러기 위해선 처음에 코드를 칠 때부터 깔끔하게 치면 좋을것..! 오늘은 그 팁에 대해 알아보려고 한다~&lt;/p&gt;
&lt;h2 id=&quot;bem&quot;&gt;&lt;a href=&quot;#bem&quot; aria-label=&quot;bem permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BEM&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d836de10-dcd5-11e9-896f-973158c4c46a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뱀… 우리가 아는 그 뱀이 아니다. Block Element Modifier의 줄임말이다.
클래스명을 지을 때 아무렇게나 짓지말고 그 클래스가 속한 범위내의 구조대로 이름을 짓는것이다.
근데 BEM 규칙을 따르자고 만들긴 했지만 실제 업무 들어가면 회사마다 스타일이 다르니 회사의 방침을 따를 것..!!
(경험상 회사 들어가기 전에 한번 써보는것도 나쁘지 않을것 같음)&lt;/p&gt;
&lt;p&gt;쓰는 방법은 대충 이러하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&amp;quot;card&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;card__header&amp;quot;&amp;gt;

        &amp;lt;h2 class=&amp;quot;card__header__title&amp;quot;&amp;gt;Title text here&amp;lt;/h2&amp;gt;

    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;card__body&amp;quot;&amp;gt;

        &amp;lt;img class=&amp;quot;card__body__img&amp;quot; src=&amp;quot;some-img.png&amp;quot;&amp;gt;

        &amp;lt;p class=&amp;quot;card__body__text&amp;quot;&amp;gt;Lorem ipsum dolor sit amet, consectetur&amp;lt;/p&amp;gt;
        &amp;lt;p class=&amp;quot;card__body__text&amp;quot;&amp;gt;Adipiscing elit.
            &amp;lt;a href=&amp;quot;/somelink.html&amp;quot; class=&amp;quot;card__body__text__link&amp;quot;&amp;gt;Pellentesque amet&amp;lt;/a&amp;gt;
        &amp;lt;/p&amp;gt;

    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href =&quot;https://medium.com/fed-or-dead/battling-bem-5-common-problems-and-how-to-avoid-them-5bbd23dee319&quot; target=&quot;_blank&quot;&gt;코드 출처 클릭!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;제일 큰 div의 클래스명인 card가 제일 앞에있고 그 card의 헤더부분과 바디부분으로 나뉘는데..
이렇게 클래스명만 보면 굉장히 직관적이기 때문에 남의 코드라도 쉽게 파악할 수 있다는 장점쓰!
근데 쓰다보면 언더바 파티가 열린다~ 가장 큰 단점쓰 ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;css는-타입별-속성대로-그룹화해서-적자&quot;&gt;&lt;a href=&quot;#css%EB%8A%94-%ED%83%80%EC%9E%85%EB%B3%84-%EC%86%8D%EC%84%B1%EB%8C%80%EB%A1%9C-%EA%B7%B8%EB%A3%B9%ED%99%94%ED%95%B4%EC%84%9C-%EC%A0%81%EC%9E%90&quot; aria-label=&quot;css는 타입별 속성대로 그룹화해서 적자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS는 타입별 속성대로 그룹화해서 적자&lt;/h2&gt;
&lt;p&gt;위에서 html 태그 구조를 BEM method로 쓰는 방법을 알아보았는데 CSS 적는대로 나름의 규칙들이 많다.
그 중에 하나인… 타입별 속성대로 그룹화해서 적자는 방법을 적어본다.
abc 순으로 적는 방법도 있다는데 그것보다는 타입별로 나눠서 쓰는 이 방법이 좀 더 괜찮아보인다 ㅋㅋ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layout Properties (position, float, clear, display)&lt;/li&gt;
&lt;li&gt;Box Model Properties (width, height, margin, padding)&lt;/li&gt;
&lt;li&gt;Visual Properties (color, background, border, box-shadow)&lt;/li&gt;
&lt;li&gt;Typography Properties (font-size, font-family, text-align, text-transform)&lt;/li&gt;
&lt;li&gt;Misc Properties (cursor, overflow, z-index)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 방법의 예시..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.button {
    display:inline-block;
    margin:1em 0;
    padding:1em 4em;

    color:#fff;
    background:#196e76;
    border:0.25em solid #196e76;
    box-shadow:inset 0.25em 0.25em 0.5em rgba(0,0,0,0.3),
               0.5em 0.5em 0 #444;

    font-size:3em;
    font-family:Avenir, Helvetica, Arial, sans-serif;
    text-align:center;
    text-transform:uppercase;
    text-decoration:none;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href =&quot;https://webdesign.tutsplus.com/articles/outside-in-ordering-css-properties-by-importance--cms-21685&quot; target=&quot;_blank&quot;&gt;코드 출처 클릭!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;확실히 이렇게 나눠서 적으니까 훨씬 깔끔하다!
CSS 수정할때도 두리번두리번 거리지 않아도 뭐가 어디에 있는지 눈에 잘 들어온다ㅋㅋ&lt;/p&gt;
&lt;p&gt;이렇게 쓰는 습관을 들여야하는데… 생각없이 코드 치다보면 내 책상처럼 더러워져있는 코드판 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;destructuring&quot;&gt;&lt;a href=&quot;#destructuring&quot; aria-label=&quot;destructuring permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;destructuring&lt;/h2&gt;
&lt;p&gt;ES6에서 처음 나온 개념이다. 이건 나중에 다시 정리할거긴한데 간단히 코드로 보자면!&lt;/p&gt;
&lt;p&gt;Routes 이름 하나하나 다 변수화 시켜서 고고고&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    const title = this.state.videoTitle.trim();
    const link = this.state.videoLink.trim();
    const thumbnail = this.state.videoThumbnail.trim();
    const cate = this.state.videoCate.trim();
    const desc = this.state.videoDesc.trim();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 코드가 있는데.. 오른쪽 항에 있는 것들은 다 state안에 있는 값이다.
그러므로 우리는 선언을 해준다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const {
      videoTitle,
      videoLink,
      videoThumbnail,
      videoCate,
      videoDesc
    } = this.state;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 선언을 해주면 위의 코드에서 this.state를 생략할 수 있다 개이득! 다시 써보면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   const title = videoTitle.trim();
    const link = videoLink.trim();
    const thumbnail = videoThumbnail.trim();
    const cate = videoCate.trim();
    const desc = videoDesc.trim();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 깔끔하게 딱 떨어진다!&lt;/p&gt;
&lt;h2 id=&quot;변수화를-생활화-하자&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%ED%99%94%EB%A5%BC-%EC%83%9D%ED%99%9C%ED%99%94-%ED%95%98%EC%9E%90&quot; aria-label=&quot;변수화를 생활화 하자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수화를 생활화 하자&lt;/h2&gt;
&lt;p&gt;토큰이나 url같은 공통적인 값들은 src폴더 아래 config 폴더를 따로 파서 정리해놓으면 좋다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { ADDRESS } from &amp;quot;Config/Config.js&amp;quot;;
//중략
let request = fetch(ADDRESS + &amp;quot;recipe/category&amp;quot;);
//중략&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드를 다 쓰지 않아서 약간 이상하긴한데! 여튼 이런식으로.. 변수화를 생활화 한다면 훨씬 보기 좋은 깔끔한 코드 완성쓰!
자주 쓰는 함수는 src폴더 아래 utils 폴더에 정리해놓으면 좋다.
이때, 인자 유무가 중요한데, 함수 조건을 인자 있/없으로 구분해서 코드를 짜놓아야 한다!&lt;/p&gt;
&lt;h2 id=&quot;경로설정---packagejs에서-설정&quot;&gt;&lt;a href=&quot;#%EA%B2%BD%EB%A1%9C%EC%84%A4%EC%A0%95---packagejs%EC%97%90%EC%84%9C-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;경로설정   packagejs에서 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;경로설정 - package.js에서 설정&lt;/h2&gt;
&lt;p&gt;../../이렇게 들어가면 너무 복잡해지니깐 아예 경로설정을 해주는 것!
먼저 package.json에 들어간다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;NODE_PATH=./src react-scripts start&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;NODE_PATH=./src react-scripts build&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test&amp;quot;,
    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scripts 객체 안의 start와 build 안에 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;NODE_PATH=./src&lt;/code&gt; 를 추가해준다.
이 말인즉슨, src밑에 있는 경로를 절대경로로 설정하겠다는 뜻이다!&lt;/p&gt;
&lt;p&gt;우리가 보통 리액트에서 import할 때는 경로를 타고타고 들어가서…
&lt;code class=&quot;language-text&quot;&gt;import Main from &amp;quot;Pages/Main/Main&amp;quot;&lt;/code&gt; 이렇게 가거나 쩜쩜을 남발하게 되는데
인제 &lt;code class=&quot;language-text&quot;&gt;import Main from &amp;quot;Pages/Main&amp;quot;&lt;/code&gt; 까지만 쓰도록 바꿔줄 수 있다.
물론 이렇게 하려면 index.js가 각 폴더 안에 있어야 한다.&lt;/p&gt;
&lt;p&gt;Main이라는 폴더 안에는 Main.js와 index.js가 있는 것이고,
그 index.js에는 &lt;code class=&quot;language-text&quot;&gt;export { default } from &amp;quot;./Main&amp;quot;&lt;/code&gt; 이렇게 쓰면 된다.
이게 뭘 줄인거냐면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Main from &amp;quot;./MAin&amp;quot;
export default Main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이걸 줄여서 한 줄로 뙇!&lt;/p&gt;
&lt;p&gt;이렇게 쓰는 이유는 경로를 줄이려고도 있지만 로직을 좋게하려는 이유도 있다.
index.js에서 Main을 정의하고 에러가 났을때 index.js가 굉장히 많은데 어떤 경로의 index.js에서 에러가 난지 모른다…
여튼 바꾸면 사용하는 쪽에서 Main을 접근하게 되서 디버깅을 할때도 훨씬 수월하다는 점..!&lt;/p&gt;
&lt;h2 id=&quot;styled-component-쓸-때-export-위에다-쓰기&quot;&gt;&lt;a href=&quot;#styled-component-%EC%93%B8-%EB%95%8C-export-%EC%9C%84%EC%97%90%EB%8B%A4-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;styled component 쓸 때 export 위에다 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styled component 쓸 때 export 위에다 쓰기&lt;/h2&gt;
&lt;p&gt;나같은 경우는 깔끔함(?)을 위해 export 위에 styled component 요소들을 나열하곤 했는데
그것보단 export는 가장 하단에 있는게 낫다고 한다!&lt;/p&gt;
&lt;h2 id=&quot;import-순서&quot;&gt;&lt;a href=&quot;#import-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;import 순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;import 순서&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;react 먼저&lt;/li&gt;
&lt;li&gt;library ex) Link 같은 것,&lt;/li&gt;
&lt;li&gt;util (config.js)&lt;/li&gt;
&lt;li&gt;component 아래 있는 것들&lt;/li&gt;
&lt;li&gt;css 관련된것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;css는 습관적으로 가장 하단에 쓰긴 했는데 라이브러리를 표기할땐 좀 정신없이 썼던것 같다..
앞으론 최대한 이 순서대로 적어야지!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/fed-or-dead/battling-bem-5-common-problems-and-how-to-avoid-them-5bbd23dee319&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://medium.com/fed-or-dead/battling-bem-5-common-problems-and-how-to-avoid-them-5bbd23dee319&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webdesign.tutsplus.com/articles/outside-in-ordering-css-properties-by-importance--cms-21685&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://webdesign.tutsplus.com/articles/outside-in-ordering-css-properties-by-importance—cms-21685&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;위코드 프론트앤드 세션&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 8주차_2일 TIL_Git에서 rebase써서 commit 횟수를 줄여보자!]]></title><description><![CDATA[위코드 50일차. 개발자에겐 뭐라도 한 줄 줄이는게 일상. 오늘은 GitHub에 올라가는 commit 개수를 줄이기 위한 방법으로 rebase에 대해 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode8_2TIL_git_rebase</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode8_2TIL_git_rebase</guid><pubDate>Tue, 17 Sep 2019 19:13:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/85c91cf0-dc13-11e9-920f-9faaccb2a511/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;git이랑 이제 조금 친해졌나 싶었는데 아직 갈 길이 한참 남은 걸 깨달았다.
이번주 위코드 세션에서는 rebase가 무엇인지에 대해 배우게 되었다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;이번 주제의 썸네일이 왜 할로윈 호박이나면.. 호박과 관련되기도 하고.. rebase는 할로윈의 밤처럼 으스스하기 때문이다.&lt;/p&gt;
&lt;h2 id=&quot;rebase란&quot;&gt;&lt;a href=&quot;#rebase%EB%9E%80&quot; aria-label=&quot;rebase란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rebase란&lt;/h2&gt;
&lt;p&gt;단어 그대로 기준을 설정한다는 뜻이다.
쪼꼼 바꿔말하면.. 우리가 Git에 commit한 history를 바꿔버릴 수 있는 무시무시한 녀석이다.
그럼 우리는 이 rebase를 이용해 무엇을 하냐…&lt;/p&gt;
&lt;p&gt;나의 첫 2주짜리 프로젝트 커밋목록을 한번 살펴보자!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f57dd00-da35-11e9-ac20-6f4a737fa10d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;무려 169개의 커밋내역이 있다… 와우!
이제부터는 커밋의 개수가 너무 많지 않게 양을 조절할 것이다!&lt;/p&gt;
&lt;p&gt;본격적으로 rebase를 하기 앞서 우리가 해야할 일…&lt;/p&gt;
&lt;h2 id=&quot;백업&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%85&quot; aria-label=&quot;백업 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백업&lt;/h2&gt;
&lt;p&gt;바로 백업이다! 혹시 날릴수도 있으니 미리 백업을 해둔다. 실제로 동기님중에 rebase땜에 파일도 멘탈도 탈탈 털린분이 있다 ㅠㅠ
그냥 복붙해서 다른폴더에 저장해도 좋지만! 우린 개발을 배우는 사람이니까 명령어를 써보자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cp -rpv adwards-frontend adwards-frontend2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cp -rpv옆에 왼쪽꺼가 현재의 폴더명, 오른쪽이 새로 생성할 폴더명&lt;/p&gt;
&lt;p&gt;이 때 경로를 조심해야 한다! 내 폴더가 속하기 바로 전 단계의 경로에서 저걸 실행해야 한다.
(나의 경우는 front-end 폴더)
명령어를 입력하면 이렇게 쌍둥이 폴더가 뙇! 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e2b0db90-d93b-11e9-b3fc-338dc1bf1c7a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오 씐기씐기!! 진짜 똑같은게 새로 생성되었다!!&lt;/p&gt;
&lt;h2 id=&quot;다시-이동&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%8B%9C-%EC%9D%B4%EB%8F%99&quot; aria-label=&quot;다시 이동 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다시 이동&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd adwards-frontend&lt;/code&gt;
다시 원본폴더로 이동 고고!&lt;/p&gt;
&lt;h2 id=&quot;중간에-tig-깔아주었음&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EA%B0%84%EC%97%90-tig-%EA%B9%94%EC%95%84%EC%A3%BC%EC%97%88%EC%9D%8C&quot; aria-label=&quot;중간에 tig 깔아주었음 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중간에 tig 깔아주었음&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;apt-get install tig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5fdefdc0-d93e-11e9-b3fc-338dc1bf1c7a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;tig 명령어 치면 이렇게 다 내역을 볼 수 있음!
나갈땐 아마 q였나? 치면 나갈 수 있다!&lt;/p&gt;
&lt;h2 id=&quot;gcm&quot;&gt;&lt;a href=&quot;#gcm&quot; aria-label=&quot;gcm permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;gcm&lt;/h2&gt;
&lt;p&gt;rebase를 하기 전에 우리는 로컬에 있는 master 브랜치를 업데이트 해줘야 한다!
그러기 위해선 쳌아웃을 해준다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout master&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;git pull origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;pull까지 땡겼으면 다시 마스터에서 원래 작업하던 브랜치로 돌아간다. 쳌아웃!
그 전에 &lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt; 명령어를 쳐서 내가 정말로 커밋을 다 끝냈는지 확인한다.
rebase는 push 전 단계에서 하는거기 때문에 commit까진 다 해야한다.&lt;/p&gt;
&lt;h2 id=&quot;rebase&quot;&gt;&lt;a href=&quot;#rebase&quot; aria-label=&quot;rebase permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rebase&lt;/h2&gt;
&lt;p&gt;아기다리 고기다리던 rebase 시간!! 몸과 마음을 가다듬고 정신 집중쓰! 아주 중요한 시간
두 가지 방법이 있다.
master에 현재 브랜치를 합치는 방법과 HEAD에서 커밋의 개수만큼 세서 합치는 방법!
난 둘다 해보았다 ㅋㅋ
후자부터 한번 살펴보자.&lt;/p&gt;
&lt;h3 id=&quot;최근-커밋-리스트-개수-세는-rebase&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EA%B7%BC-%EC%BB%A4%EB%B0%8B-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EC%88%98-%EC%84%B8%EB%8A%94-rebase&quot; aria-label=&quot;최근 커밋 리스트 개수 세는 rebase permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최근 커밋 리스트 개수 세는 rebase&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase -i HEAD~3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;난 최근 commit이 3개라서 HEAD~3라고 했음.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/aa6f02e0-da33-11e9-bf68-cd3d4fa5a9f9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;명령어를 치면 최근 커밋한 목록이 3개 나온다.
처음에는 전부 pick으로 되어있는데, pick은 하나만 남기고 전부 squash로 바꿔준다. s로 써도 된다.
그래서 내가 할로윈 호박을 썸네일로 했지 ㅋㅋㅋ
하나만 남기고 전부 찌부찌부해서 커밋을 하나로 줄여준다는 의미쓰~!&lt;/p&gt;
&lt;p&gt;ctrl+x하면 끝내기다. 그다음에 변경사항을 저장하겠습니까?가 뜨면 y. 그다음 엔터누르고 넘어가면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d5b1fe30-da33-11e9-9562-5567d9b20f9d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;커밋 메시지는 최종적으로 한 개만 남겨야 함. #을 이용해 필요없는 커밋메시지는 주석처리 하거나 지워준다!
나는 최종 메시지를 seperated components로 남겼다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b9947780-d940-11e9-a678-0f96d91a512c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이거 한담에 내 branch에서 push하고 pr까지 날리면 성공!
만약에 conflict가 난다면… 아래의 링크를 참조하시오..!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;successfully rebased and updated&lt;/code&gt; 어쩌구가 뜨면 당신은 성공한 것입니다! 추카추카~
이제 평소와 마찬가지로 push 날리고 Github에서 Pull request 날리면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/018c8920-da35-11e9-ac20-6f4a737fa10d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그러면 확실히 보일것이다.
커밋 3개였던걸 1개로 줄였다!! 오ㅋㅋㅋㅋ 신기하구먼&lt;/p&gt;
&lt;p&gt;인제 또 다른 방법을 소개소개쓰~~&lt;/p&gt;
&lt;h3 id=&quot;master-브랜치에-직접-접근하는-방식&quot;&gt;&lt;a href=&quot;#master-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%97%90-%EC%A7%81%EC%A0%91-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;master 브랜치에 직접 접근하는 방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;master 브랜치에 직접 접근하는 방식&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase -i master feature/ad_upload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;저 타이틀이 맞는 말인진 모르겠다.. 아직 아마추어이기 때문이다 나는ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼 git rebase -i를 치고 master와 마스터에 병합할 브랜치명을 순서대로 써준다!
여기서 -i는 interactive하게 처리하겠다는 의미&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b9102ab0-dc11-11e9-920f-9faaccb2a511/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그럼 아까와 동일한 화면이 뜨고, pick은 하나만 남기고 전부 s로 바꿔주면 끝!
두번째 rebase 도전이라 이번엔 commit을 좀 많이 해봤다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f01789e0-dc11-11e9-920f-9faaccb2a511/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fed334c0-dc11-11e9-920f-9faaccb2a511/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3cc27610-dc12-11e9-920f-9faaccb2a511/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;역시나 성공쓰!
사실 이렇게 되기 전에 한번 conflict 나서 당황했던 적이 있다 ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;만약 충돌이 있다면 수정 후 &lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt; 하고 그담에 &lt;code class=&quot;language-text&quot;&gt;git rebase --continue&lt;/code&gt;
그냥 터미널에 써진대로 고대로 읽으면서 하면 된다..ㅋㅋ&lt;/p&gt;
&lt;p&gt;이렇게 나의 rebase 도전은 성공적으로 끝났다.
아 근데 다른 팀원분과 branch 충돌이 별로 안 일어나서 성공이였는데,,,
나중에 계속 충돌날까봐 벌써 무섭다~~~ 커밋 개수대로 충돌을 처리해야해서 넘나 귀찮은 과정인 것!
그래도 난 개발자니까 꼼꼼하게 커밋을 남기는게 나은것 같아서 앞으로 커밋은 더 많이 할 예정!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드 rebase 세션&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 8주차_1일 TIL_리액트에서 탭 이동 및 선택한 탭 색깔 칠하기]]></title><description><![CDATA[위코드 49일차. 어차피 주말에도 매일 나오니까 인제 주말까지 포함해서 세기로 마음먹었다ㅋㅋ 리액트에서 탭 이동하면 각 탭별 화면이 구현되고, 또 선택한 탭의 색깔이 바뀌는 로직을 짜보았다!]]></description><link>https://gollumnima.github.io//posts/wecode8_1TIL_react_switchingTab</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode8_1TIL_react_switchingTab</guid><pubDate>Mon, 16 Sep 2019 20:29:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0f8a3690-dab6-11e9-b89c-ad3a038b9fd8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오늘 점심먹고서부터 시작된 나의 삽질은 저녁먹기 바로 직전에 끝이 났다ㅋㅋ
탭이동 하는 로직은 안 쓰는 사이트가 없기 때문에 꼭 알아야하는 로직이다!
삽질을 꽤나 오래하긴 했지만 일단 정리를 해야 까먹지 않을것 같아서 정리 시작!&lt;/p&gt;
&lt;h2 id=&quot;첫-번째-도전&quot;&gt;&lt;a href=&quot;#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%8F%84%EC%A0%84&quot; aria-label=&quot;첫 번째 도전 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫 번째 도전…&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a16da010-dab6-11e9-b89c-ad3a038b9fd8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;일단 컴포넌트를 쪼개서 각 탭을 눌렀을 때마다 오른쪽 화면에 보이는 구성을 다르게 하려고 했다.
그래서 써본 것..
먼저 render함수 전에 switching이라는 함수를 만들었다.
더 전엔 constructor 안에 &lt;code class=&quot;language-text&quot;&gt;this.state={rightbox:0}&lt;/code&gt; 이라고 선언해줬다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//switching 함수
  switching = e =&amp;gt; {
    if (e.target.key === 0) {
      this.setState({ rightbox: 0 });
    } else if (e.target.key === 1) {
      this.setState({ rightbox: 1 });
    } else {
      this.setState({ rightbox: 2 });
    }
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러고 나서 적용했던 것이 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;AdRight&amp;gt;&lt;/code&gt;라는 div 내부에 컴포넌트를 불러오는 조건문을 넣고,
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;AdSideLi&amp;gt;&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;this.switching&lt;/code&gt;이라는 함수를 실행했다.
이렇게.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ModalBackground&amp;gt;
        &amp;lt;ModalWrapper&amp;gt;
          &amp;lt;TitleWrapper&amp;gt;
            &amp;lt;TitleLetters&amp;gt;Adwards&amp;lt;/TitleLetters&amp;gt;
          &amp;lt;/TitleWrapper&amp;gt;
          &amp;lt;AdVideoWrapper&amp;gt;
            &amp;lt;AdLeft&amp;gt;
              &amp;lt;AdSideUL&amp;gt;
                &amp;lt;AdSideLI
                  onClick={this.switching}
                &amp;gt;
                  &amp;lt;Span&amp;gt;광고 영상 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  onClick={this.switching}
                &amp;gt;
                  &amp;lt;Span&amp;gt;퀴즈 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  onClick={this.switching}
                &amp;gt;
                  &amp;lt;Span&amp;gt;금액 설정&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
              &amp;lt;/AdSideUL&amp;gt;
            &amp;lt;/AdLeft&amp;gt;
            &amp;lt;AdRight&amp;gt;
               {this.state.rightbox === 0 ? (
                &amp;lt;AdVideoForm /&amp;gt;
              ) : this.state.rightbox === 1 ? (
                &amp;lt;AdQuizForm /&amp;gt;
              ) : (
                &amp;lt;AdMoney /&amp;gt;
              )}
            &amp;lt;/AdRight&amp;gt;
          &amp;lt;/AdVideoWrapper&amp;gt;
          &amp;lt;CloseOK&amp;gt;
            &amp;lt;CloseLetter cancel&amp;gt;취소&amp;lt;/CloseLetter&amp;gt;
            &amp;lt;CloseLetter&amp;gt;확인&amp;lt;/CloseLetter&amp;gt;
          &amp;lt;/CloseOK&amp;gt;
        &amp;lt;/ModalWrapper&amp;gt;
      &amp;lt;/ModalBackground&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과는 대 실패!
여러가지 이유가 있지만 일단은 this.state.rightbox가 제대로 돌지 않아 2만 찍혔고…
onClick에도 잘못된 함수를 넣었고, switching이라는 함수도 조건이 이상하다!&lt;/p&gt;
&lt;h2 id=&quot;2차-시도&quot;&gt;&lt;a href=&quot;#2%EC%B0%A8-%EC%8B%9C%EB%8F%84&quot; aria-label=&quot;2차 시도 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2차 시도&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Switching = e =&amp;gt; {
    this.setState({ rightbox: e.currentTarget.id });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 switching이라는 함수를 이런식으로 변형하고..
render 이후에 subView라는 배열을 선언해서 컴포넌트를 그 배열안에 넣고 인덱스 값으로 불러왔다.
이렇게..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이건 subView 배열
let subView = [&amp;lt;AdVideoForm /&amp;gt;, &amp;lt;AdQuizForm /&amp;gt;, &amp;lt;AdMoneyForm /&amp;gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이건 onClick 걸어준 태그
&amp;lt;AdSideLI id=&amp;quot;0&amp;quot; onClick={this.Switching}&amp;gt;
&amp;lt;AdSideLI id=&amp;quot;1&amp;quot; onClick={this.Switching}&amp;gt;
&amp;lt;AdSideLI id=&amp;quot;2&amp;quot; onClick={this.Switching}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러고 나선 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;AdRight&amp;gt;&lt;/code&gt;이라는 div 안에 다음과 같은 조건을 넣어주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{subView[this.state.rightbox]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 탭 이동은 잘 되긴 한다!1
근데 나는 여전히 탭의 색깔을 바꿀수 없었고..
제일 큰 문제는.. react 세상에선 id값을 잘 안준다는 점!!!
id 자체가 고유한 값이라 리액트의 장점 중 하나인 재사용성이라는 성질에 맞지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;그래서 바꾼 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class ModalForm extends Component {
  constructor() {
    super();
    this.state = {
      activeTab: &amp;quot;videoTab&amp;quot;
    };
  }

  switchMenu = activeTab =&amp;gt; {
    this.setState({ activeTab: activeTab });
  };

  render() {
    let subView = [
      { videoTab: &amp;lt;AdVideoForm key=&amp;quot;0&amp;quot; /&amp;gt; },
      { quizTab: &amp;lt;AdQuizForm key=&amp;quot;1&amp;quot; /&amp;gt; },
      { priceTab: &amp;lt;AdMoneyForm key=&amp;quot;2&amp;quot; /&amp;gt; }
    ];

    console.log(this.props.activeTab, &amp;quot;액티브&amp;quot;);
    return (
      &amp;lt;ModalBackground&amp;gt;
        &amp;lt;ModalWrapper&amp;gt;
          &amp;lt;TitleWrapper&amp;gt;
            &amp;lt;TitleLetters&amp;gt;Adwards&amp;lt;/TitleLetters&amp;gt;
          &amp;lt;/TitleWrapper&amp;gt;
          &amp;lt;AdVideoWrapper&amp;gt;
            &amp;lt;AdLeft&amp;gt;
              &amp;lt;AdSideUL&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;videoTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;videoTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;광고 영상 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;quizTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;quizTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;퀴즈 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;priceTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;priceTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;금액 설정&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
              &amp;lt;/AdSideUL&amp;gt;
            &amp;lt;/AdLeft&amp;gt;
            &amp;lt;AdRight&amp;gt;
              {subView.map((el, key) =&amp;gt; {
                el.key = key;
                return el[this.state.activeTab];
              })}
            &amp;lt;/AdRight&amp;gt;
          &amp;lt;/AdVideoWrapper&amp;gt;
          &amp;lt;CloseOK&amp;gt;
            &amp;lt;CloseLetter cancel&amp;gt;취소&amp;lt;/CloseLetter&amp;gt;
            &amp;lt;CloseLetter&amp;gt;확인&amp;lt;/CloseLetter&amp;gt;
          &amp;lt;/CloseOK&amp;gt;
        &amp;lt;/ModalWrapper&amp;gt;
      &amp;lt;/ModalBackground&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;state값-변경&quot;&gt;&lt;a href=&quot;#state%EA%B0%92-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;state값 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state값 변경&lt;/h2&gt;
&lt;p&gt;일단 state 안에 &lt;code class=&quot;language-text&quot;&gt;activeTab: &amp;quot;videoTab&amp;quot;&lt;/code&gt;이라고 디폴트값을 광고업로드 컴포넌트로 설정을 해주었고
switching 함수도 변형을 해주었다.&lt;/p&gt;
&lt;h2 id=&quot;swtich-함수-변경&quot;&gt;&lt;a href=&quot;#swtich-%ED%95%A8%EC%88%98-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;swtich 함수 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;swtich 함수 변경&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  switchMenu = activeTab =&amp;gt; {
    this.setState({ activeTab: activeTab });
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;이름을 동사+명사로 바꾸기(Switching -&gt; switchMenu)&lt;/li&gt;
&lt;li&gt;state객체안의 key값인 activeTab의 value를 setState를 이용해 함수의 인자로 바꾸어주기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;인자도, 키값도, value도 다 activeTab이라서 헷갈릴 수도 있다.
그럼 이름을 바꿔보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; switchMenu = icecreawm =&amp;gt; {
    this.setState({ activeTab: icecream });
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 바꿔줘도 아주 잘 불러와진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/31b8c970-dacf-11e9-a0aa-4de6814e1f34/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오늘은 글이 너무 많은것 같으니 아이스크림짤 투척!
절대 내가 먹고싶어서 그런게 아니다. 정말이다!&lt;/p&gt;
&lt;p&gt;여튼… 다시 이어서!!!!&lt;/p&gt;
&lt;p&gt;컴포넌트를 불러오는 평범한 배열 subView를 객체를 가진 배열로 변형도 했다.&lt;/p&gt;
&lt;h2 id=&quot;자식-컴포넌트-불러오는-배열-변경&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B6%88%EB%9F%AC%EC%98%A4%EB%8A%94-%EB%B0%B0%EC%97%B4-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;자식 컴포넌트 불러오는 배열 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자식 컴포넌트 불러오는 배열 변경&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; let subView = [
      { videoTab: &amp;lt;AdVideoForm key=&amp;quot;0&amp;quot; /&amp;gt; },
      { quizTab: &amp;lt;AdQuizForm key=&amp;quot;1&amp;quot; /&amp;gt; },
      { priceTab: &amp;lt;AdMoneyForm key=&amp;quot;2&amp;quot; /&amp;gt; }
    ];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 때 주의사항!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열 안의 객체의 value를 불러와야 하기 때문에 아래서 map을 돌려야 한다.&lt;/li&gt;
&lt;li&gt;map을 돌려야 해서 jsx 내부에 고유의 key값을 설정해주어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;클릭이-되는-왼쪽-탭-안의-태그-조건-변경&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%A6%AD%EC%9D%B4-%EB%90%98%EB%8A%94-%EC%99%BC%EC%AA%BD-%ED%83%AD-%EC%95%88%EC%9D%98-%ED%83%9C%EA%B7%B8-%EC%A1%B0%EA%B1%B4-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;클릭이 되는 왼쪽 탭 안의 태그 조건 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클릭이 되는 왼쪽 탭 안의 태그 조건 변경&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;            &amp;lt;AdLeft&amp;gt;
              &amp;lt;AdSideUL&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;videoTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;videoTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;광고 영상 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;quizTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;quizTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;퀴즈 업로드&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
                &amp;lt;AdSideLI
                  active={this.state.activeTab === &amp;quot;priceTab&amp;quot;}
                  onClick={() =&amp;gt; this.switchMenu(&amp;quot;priceTab&amp;quot;)}
                &amp;gt;
                  &amp;lt;Span&amp;gt;금액 설정&amp;lt;/Span&amp;gt;
                &amp;lt;/AdSideLI&amp;gt;
              &amp;lt;/AdSideUL&amp;gt;
            &amp;lt;/AdLeft&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;css에서 background-color 변경을 위한 조건. 이건 아래에서 다시 살펴보자
&lt;code class=&quot;language-text&quot;&gt;AdSideLi&lt;/code&gt;태그에 active라는 props값을 주고,
그 props가 this.state.activeTab이 각각의 activeTab이&lt;/li&gt;
&lt;li&gt;state 변경을 위한 조건
onClick 안에 함수선언을 해주었다. 호출 말고 선언!!
함수의 호출은 브라우저가 하는거기 때문에 우리가 미리 호출해버리면 안된다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;함수의 괄호 안에는 subView 함수에 내장되어있는 객체들의 key값을 넣어주었고,
switchMenu라는 함수 자체가 parameter로 받는 값이 곧 activeTab이 되는 함수라서 state값이 각각 “videoTab”, “quizTab”, “priceTab” 으로 변경 되는것이다…
와우…넘나 신기해 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;소환-되는-자식컴포넌트가-들어갈-div안의-조건식-변경&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%99%98-%EB%90%98%EB%8A%94-%EC%9E%90%EC%8B%9D%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EA%B0%80-%EB%93%A4%EC%96%B4%EA%B0%88-div%EC%95%88%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%8B%9D-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;소환 되는 자식컴포넌트가 들어갈 div안의 조건식 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소환 되는 자식컴포넌트가 들어갈 div안의 조건식 변경&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;            &amp;lt;AdRight&amp;gt;
              {subView.map((el, key) =&amp;gt; {
                el.key = key;
                return el[this.state.activeTab];
              })}
            &amp;lt;/AdRight&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;subView는 객체가 아닌 배열! 객체를 품은 배열이다.
그래서 el값의 activeTab을 불러오도록 했고..
key를 넣어주지 않아도 되긴 하지만 개발자 도구에 빨간색으로 경고가 뜬다.
경고 받으면 무서우니까 넣어주자. 이 작업을 위해 컴포넌트 태그 안에 key를 넣어주었다!&lt;/p&gt;
&lt;h2 id=&quot;css에서-props를-통해-탭-이동시-탭-배경색깔-바꾸기&quot;&gt;&lt;a href=&quot;#css%EC%97%90%EC%84%9C-props%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%83%AD-%EC%9D%B4%EB%8F%99%EC%8B%9C-%ED%83%AD-%EB%B0%B0%EA%B2%BD%EC%83%89%EA%B9%94-%EB%B0%94%EA%BE%B8%EA%B8%B0&quot; aria-label=&quot;css에서 props를 통해 탭 이동시 탭 배경색깔 바꾸기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS에서 props를 통해 탭 이동시 탭 배경색깔 바꾸기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const AdSideLI = styled.li`
  display: flex;
  padding-right: 24px;
  font-size: 15px;
  margin: 30px 0;
  background-color: ${props =&amp;gt; (props.active ? `#E2E2E2` : null)};
`;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bgcolor를 바꿔줄건데.. props.active가 true일 경우 회색깔로 바꿔줄거다.
그렇다면 true와 false를 가르게 위한 조건은 뭐였을까! 바로 이거다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;active={this.state.activeTab === &amp;quot;videoTab&amp;quot;}
active={this.state.activeTab === &amp;quot;quizTab&amp;quot;}
active={this.state.activeTab === &amp;quot;priceTab&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각각의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;AdSideLi&amp;gt;&lt;/code&gt; 태그 안의 값이다. 전체식은 아까 위에서 썼다~ 참고쓰~~
클릭을 할때마다 state객체의 activeTab이 바뀌게 되는데
이렇게 설정해주면 클릭할때만 클릭한 탭의 activeTab이 true가 나오기 때문에 css 조건에서의 삼항연산자가 true가 나오게 되서 색깔이 바뀐다.&lt;/p&gt;
&lt;p&gt;조건이 2개까진 괜찮았는데 3개가 되서 좀 헤맸는데 이제 좀 이해가 갔다!!!!
다음번 탭 이동 로직 구할땐 지금처럼 크나큰 삽질은 안할것 같다 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6f46e280-dad0-11e9-a542-5f7fbd479e5b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;어쨌든 지금은 적용 잘 된다는점!
css는 나중에 손볼거다… 기능 구현할게 넘나 많닼ㅋㅋㅋ
2차 프로젝트 화이팅하자 둘둘!!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;예리멘토님 미니 세션 ♥&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_6일 TIL_보험금 처리과정으로 Redux 이해하기]]></title><description><![CDATA[위코드 40일차. 원래는 주말 빼고 숫자를 세곤 했는데 에라모르겠다. 인제부터 블로그 쓸 때마다 플러스 할테다. 여튼.. Udemy에 있는 Redux 강좌를 보며 Redux가 어떤 원리로 돌아가는지 한번 알아보았다.]]></description><link>https://gollumnima.github.io//posts/wecode7_6TIL_redux_1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_6TIL_redux_1</guid><pubDate>Sat, 14 Sep 2019 12:10:23 GMT</pubDate><content:encoded>&lt;h2 id=&quot;redux&quot;&gt;&lt;a href=&quot;#redux&quot; aria-label=&quot;redux permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Redux&lt;/h2&gt;
&lt;p&gt;Redux는 state를 관리해주는 라이브러리다.
일단 로직은 이러하다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Action Creator → Action → Dispatch → Reducers → State&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;각각의 요소들이 무엇인지 파악하기 이전에
보험회사에 보험금을 청구하는 과정으로 Redux를 이해해보자!
해당 내용은 Udemy Modern React with Redux 라는 강의를 듣고 적어보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/817089c0-d698-11e9-8270-13e33fe5a10a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;보험회사에 보험금을 청구하는 과정을 살펴보자면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;고객이 보험회사에 영수증 제출 → 영수증전달 → 접수직원이 받음 → 해당부서로 넘김 → 고객정보 확인 후 보험금 지급&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인데… 위의 Redux의 과정과 동일하다고 보면 된다!
이걸 코드로 써보자.&lt;/p&gt;
&lt;p&gt;codepen의 js탭을 눌른다음 Redux 선택하고 코드를 적으면 된다.
코드를 다 치고나서 결과는 개발자도구의 콘솔창에서 확인할 수 있다!&lt;/p&gt;
&lt;h2 id=&quot;action-creator--action&quot;&gt;&lt;a href=&quot;#action-creator--action&quot; aria-label=&quot;action creator  action permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Action Creator &amp;#x26; Action&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 고객이 영수증 제출
const createPolicy = (name, amount) =&amp;gt; {
  return {
    // Action
    type: &amp;#39;CREATE_POLICY&amp;#39;, // Action에는 꼭 type이 있어야함.
    payload: { // 영수증 세부내역
      name: name,
      amount: amount
    }
  };
};

// 보험회사에서 고객정보 삭제
const deletePolicy = (name) =&amp;gt; {
  return {
    type: &amp;#39;DELETE_POLICY&amp;#39;,
    payload : {
      name: name
    }
  };
};

// 보험회사에서 고객에게 보험금 지급
const createClaim = (name, amountOfMoneyToCollect) =&amp;gt; {
  return {
    type: &amp;#39;CREATE_CLAIM&amp;#39;,
    payload: {
      name: name,
      amountOfMoneyToCollect : amountOfMoneyToCollect
    }
  };
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;reducers&quot;&gt;&lt;a href=&quot;#reducers&quot; aria-label=&quot;reducers permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reducers&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 보험급 지금내역
// parameter 내부에서 default값은 빈 배열로 선언해준다.
const claimHistory = (oldListOfClaims = [], action) =&amp;gt; {
  if (action.type === &amp;#39;CREATE_CLAIM&amp;#39;) {
    return [...oldListOfClaims, action.payload];
    //old에 새로 들어온 action.payload를 push하는 과정
    //reducer 안에 push를 쓰면 안된다!
  }
  return oldListOfClaims;
};

// 보험회사가 가지고 있는 총 자산
// bagOfMoney의 default 값은 100으로 주었다.
const accounting = (bagOfMoney = 100, action) =&amp;gt; {
  if (action.type === &amp;#39;CREATE_CLAIM&amp;#39;) {
  // 고객이 보험금 청구시 보험회사 자산에서 요청한 금액만큼 차감
    return bagOfMoney - action.payload.amountOfMoneyToCollect;
  }
  else if (action.type  === &amp;#39;CREATE_POLICY&amp;#39;) {
  // 신규고객 가입시 보험회사의 자산에 금액이 추가됨
    return bagOfMoney + action.payload.amount;
  }
return bagOfMoney;
}

// 가입회원 목록
const policies = (listOfPolicies = [], action) =&amp;gt; {
  if (action.type === &amp;#39;CREATE_POLICY&amp;#39;) {
    return [...listOfPolicies, action.payload.name];
  }
  else if (action.type === &amp;#39;DELETE_POLICY&amp;#39;) {
    return listOfPolicies.filter(name =&amp;gt; name !== action.payload.name);
  }
  return listOfPolicies;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const { createStore, combineReducers } = Redux;&lt;/code&gt;
이러한 선언을 통해 Redux에서 저 메소드들을 쓸 수 있는 것일듯.. 아마?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const ourDepartments = combineReducers({
  accounting: accounting,
  claimHistory : claimHistory,
  policies: policies
});

const store = createStore(ourDepartments);

store.dispatch(createPolicy(&amp;#39;Alex&amp;#39;, 20));
store.dispatch(createPolicy(&amp;#39;Jim&amp;#39;, 30));
store.dispatch(createPolicy(&amp;#39;Bob&amp;#39;, 40));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 과정까지 마친 다음 콘솔을 찍어보자.
&lt;code class=&quot;language-text&quot;&gt;console.log(store.getState());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9f6b0750-d69a-11e9-b97c-a500ac23aaac/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;현재까지 보험회사 총 자산은 190이고, 고객은 Alex, Jim, Bob 3명이다.&lt;/p&gt;
&lt;p&gt;근데 약간의 변화를 줘보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.dispatch(createClaim(&amp;#39;Alex&amp;#39;, 120));
store.dispatch(createClaim(&amp;#39;Jim&amp;#39;, 50));
store.dispatch(deletePolicy(&amp;#39;Bob&amp;#39;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alex와 Jim이 보험금을 청구했고, Bob은 보험을 해지했다.
다시 한번 콘솔을 찍어보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0de3d220-d69b-11e9-b0dc-55946ccbff49/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;190에서 Alex와 Jim이 청구한 보험금이 빠져나서 보험회사의 자산은 20
claimHistory를 보면 보험금을 청구한 사람과 금액이 나오고,
policies 배열을 보면 Bob이 보험을 해지했기 때문에 2명만 나온다.&lt;/p&gt;
&lt;p&gt;우리가 보통 리액트에서 상태관리 하려면 this.state 어쩌구를 썼는데
Redux 세상에서는 state 관리를 직접적으로 하는것 대신 dispatch를 이용해서 한다!&lt;/p&gt;
&lt;p&gt;일단 대충 Redux의 원리는 이러하고…
그 다읍번 포스팅에서 Redux에 대해 좀 더 자세히 써볼 예정쓰!!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Udemy, Modern React with Redux&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_5일 TIL_styled-component에 대해 알아보자!]]></title><description><![CDATA[위코드 39일차. 2차 프로젝트는 css tool 중에 styled-component를 이용할거라서 미리 공부해보았다. 사실 연습용 포트폴리오 사이트 만들때 약간 써봤지만 이번에 블로그로 정리를 하며 다양한 기능에 대해 알게되었다!]]></description><link>https://gollumnima.github.io//posts/wecode7_5TIL_styled-component</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_5TIL_styled-component</guid><pubDate>Fri, 13 Sep 2019 12:51:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6ccdc6d0-d5db-11e9-b69d-eb338bc0d92e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSS tool에는 다양한 것들이 있는데, 그 중에서 가장 최신의 것인 Styled Component에 대해서 알아볼 것이다!&lt;/p&gt;
&lt;h2 id=&quot;설치&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%B9%98&quot; aria-label=&quot;설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설치&lt;/h2&gt;
&lt;p&gt;터미널에 &lt;code class=&quot;language-text&quot;&gt;yarn add styled-components&lt;/code&gt; 입력 고고!
일반적인 경우라면 저 명령어면 되겠지만~ 나는 우분투유저니까 sudo 필수! 외쳐! 갓수도~~~&lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용&lt;/h2&gt;
&lt;p&gt;import 받아오는 위쪽라인에 &lt;code class=&quot;language-text&quot;&gt;import styled from &amp;quot;styled-components&amp;quot;&lt;/code&gt; 이거 한줄 추가하기!
이것만 있으면 CSS파일을 import 하지 않아도 된다. 왜냐?
우리는 js 파일에 styled-component 태그를 직접적으로 적용시킬거거든&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/57a9c2b0-d5de-11e9-b69d-eb338bc0d92e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 버튼 두개를 만들기 위해선…
버튼태그와 js파일만 필요하다. css는 없어도 된다 씬기씐기!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, {Component} from &amp;quot;react&amp;quot;;
import styled from &amp;quot;styled-components&amp;quot;

class Air extends Component {
    render() {
        return (
        &amp;lt;Container&amp;gt;
            &amp;lt;Button yes&amp;gt;Yes&amp;lt;/Button&amp;gt;
            &amp;lt;Button no&amp;gt;Nope&amp;lt;/Button&amp;gt;
        &amp;lt;/Container&amp;gt;
        )
    }
}

const Container = styled.div`
width: 100%;
background-color: #bdbdbd;
`
const Button = styled.button`
width: 100px;
border-radius: 50px;
padding: 5px;
color: white;
background-color : ${props=&amp;gt; props.yes ? &amp;quot;blue&amp;quot; : &amp;quot;red&amp;quot;}
`

export default Air;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;같은 Button 태그여도 색깔을 다르게 주고싶다면 꺽쇠 안에 특정 이름을 주고, 그걸 props로 넘기면 같은 코드를 두번씩 안 써도 된다! 오!!
이것도 컴포넌트라고 props로 넘기는게 가능하다니.. 넘나 신기한 것&lt;/p&gt;
&lt;p&gt;근데 약간 아쉬운건 개발자도구를 까보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9ebbe200-d5de-11e9-b69d-eb338bc0d92e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 전혀 알수없는 클래스명이 나온다는 점…☆&lt;/p&gt;
&lt;h2 id=&quot;전역에-효과주기&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD%EC%97%90-%ED%9A%A8%EA%B3%BC%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;전역에 효과주기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전역에 효과주기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/07ab40e0-d5ed-11e9-b69d-eb338bc0d92e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;배경색을 한번 입혀봤더니 넘나 margin이 제거 안된 것…
이걸 제거해주기 위해 우리는 명령어를 또 써줘야 한다!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;import styled, { createGlobalStyle } from &amp;quot;styled-components&amp;quot;&lt;/code&gt; styled-components를 불러온 그 공간에 명령어 추가해주고&lt;/p&gt;
&lt;p&gt;전역에 주고싶은 효과를 body에 넣어주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const GlobalStyle = createGlobalStyle `
body {
    margin : 0;
    padding: 0;
    width: 100%;
    background-color: #bdbdbd;
}`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;잠깐! 여기서 끝이 아니다.
이걸 또 태그로 써줘야지 적용이 됩니다요~&lt;/p&gt;
&lt;h3 id=&quot;한-가지-주의사항&quot;&gt;&lt;a href=&quot;#%ED%95%9C-%EA%B0%80%EC%A7%80-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD&quot; aria-label=&quot;한 가지 주의사항 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한 가지 주의사항!&lt;/h3&gt;
&lt;p&gt;좋은 예&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;	&amp;lt;&amp;gt;
 	&amp;lt;GlobalStyle /&amp;gt;
       &amp;lt;Button yes&amp;gt;Yes&amp;lt;/Button&amp;gt;
       &amp;lt;Button no&amp;gt;Nope&amp;lt;/Button&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나쁜 예&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;	&amp;lt;&amp;gt;
 	&amp;lt;GlobalStyle&amp;gt;
    	&amp;lt;Button yes&amp;gt;Yes&amp;lt;/Button&amp;gt;
      	&amp;lt;Button no&amp;gt;Nope&amp;lt;/Button&amp;gt;
     &amp;lt;/GlobalStyle&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음엔 뭣도 모르고 저 태그 사이에 다른 요소를 넣는 식으로 했는데
나쁜 예처럼 하면 화면이 회색으로만 가득 찬다. 버튼은 보이지 않는다!!
Sass의 영향 때문인지 태그 안에 태그를 가둬야 마음의 안정을 얻게 되는데 자꾸..ㅋㅋㅋ GlobalStyle은 그냥 좋은예처럼 자체로 괄호를 닫고 쓰자!&lt;/p&gt;
&lt;h2 id=&quot;styled-reset&quot;&gt;&lt;a href=&quot;#styled-reset&quot; aria-label=&quot;styled reset permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styled-reset&lt;/h2&gt;
&lt;p&gt;우리가 SASS 쓸 땐 reset.css 파일을 따로 만들어줬었는데..
styled-component에선 라이브러리로 다운을 받고 GlobalStyle 태그만 붙여주면 된다!&lt;/p&gt;
&lt;p&gt;사실 요곤 몰랐는데.. 권순규님의 블로그를 보고 알게 되었다!
링크는 여기 ☞ &lt;a href=&quot;https://soongyu.github.io/posts/til-26-react-styled-components/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://soongyu.github.io/posts/til-26-react-styled-components/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;그러기 위해선 먼저 styled-reset을 깔아야 함.
&lt;code class=&quot;language-text&quot;&gt;yarn add styled-reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c1cf69c0-d60f-11e9-8dec-2fcacae714f1/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;근데 또 에러가 나네? sudo를 썼는데도 에러가 남…
보니깐 10.0.0 이상의 node version이 필요한 것 같음. 그래서 업글함&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1efa6d20-d610-11e9-92db-f74ff80686a0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;n latest&lt;/code&gt;라는 명령어로 쉽게 업글 할 수 있는건데 허가거부…
이럴 땐 뭐다????? 외쳐! &lt;code class=&quot;language-text&quot;&gt;갓 sudo!!!!!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/474cd830-d610-11e9-a3d6-5b17e6d58e3d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;node를 업글하고 나니 설치가 제대로 된다 와우!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;import reset from &amp;quot;styled-reset&amp;quot;&lt;/code&gt; import 라인에 이거 추가해주고&lt;/p&gt;
&lt;p&gt;GlobalStyle에 template literal을 이용해 reset을 불러오면 적용 끝~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const GlobalStyle = createGlobalStyle `
  ${reset};
body {
    margin : 0;
    padding: 0;
    width: 100%;
}`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;withcomponent&quot;&gt;&lt;a href=&quot;#withcomponent&quot; aria-label=&quot;withcomponent permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;withComponent&lt;/h2&gt;
&lt;p&gt;만약에 버튼인데 링크를 걸고 싶다면?
&lt;code class=&quot;language-text&quot;&gt;const Anchor = Button.withComponent(&amp;quot;a&amp;quot;);&lt;/code&gt;
이렇게 Button이라는 변수에 .withComponent를 쓴 다음 괄호 열고 원하는 html 태그이름을 넣어준다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Anchor href= &amp;quot;http://google.com&amp;quot; yes&amp;gt;Google it!&amp;lt;/Anchor&amp;gt;&lt;/code&gt;
난 빨강색을 그다지 좋아하지 않기 때문에 위에서 설정한 파랑의 yes라는 값을 주었고 그 결과!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/594421b0-d5f2-11e9-92db-f74ff80686a0/image.png&quot; alt=&quot;image.png&quot;&gt;
이런 결과가 뙇!&lt;/p&gt;
&lt;p&gt;withComponent말고도 한 가지 방법이 더 있는데..
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Button as=&amp;quot;a&amp;quot; href= &amp;quot;http://google.com&amp;quot;&amp;gt;Google it!&amp;lt;/Button&amp;gt;&lt;/code&gt;
속성값에 &lt;code class=&quot;language-text&quot;&gt;as=&amp;quot;html태그명&amp;quot;&lt;/code&gt;을 쓰고 a니까 나는 href까지 써주면 withComponent때와 똑같은 버튼을 간단히 만들수 있다!&lt;/p&gt;
&lt;p&gt;근데 저 밑줄도 너무 보기 싫고.. 옆의 버튼과 너무 다르게 못생겼다.
그럴때 쓸 수 있는게 또 있쥐&lt;/p&gt;
&lt;h2 id=&quot;styled어쩌구&quot;&gt;&lt;a href=&quot;#styled%EC%96%B4%EC%A9%8C%EA%B5%AC&quot; aria-label=&quot;styled어쩌구 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styled(어쩌구)&lt;/h2&gt;
&lt;p&gt;원래는 withComponent에 extend로 효과를 줬는데, 이제는 단순히&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Anchor = styled(Button)`
  text-decoration: none;
`;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;styled(어쩌구)만 쓰면된다.
그니까 그 위의 withComponent는 굳이 안써도 된다는 말씀..!
결과는 아래와 같다~!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d1a9b4c0-d5f3-11e9-92db-f74ff80686a0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;근데 as를 썼을 때는 디자인을 어떻게 바꿔야 할지… 이건 좀 더 찾아보고 나중에 글을 수정할 예정!&lt;/p&gt;
&lt;p&gt;프론트앤드 기술의 변화는 정말정말정말 빠르다.
&lt;a href=&quot;https://formidable.com/blog/2019/upgrade-styled-components/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://formidable.com/blog/2019/upgrade-styled-components/&lt;/a&gt;
요 사이트 들어가면 styled-component에서 사라진 것들과 새로 생긴 것들을 만나볼 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;animation&quot;&gt;&lt;a href=&quot;#animation&quot; aria-label=&quot;animation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Animation&lt;/h2&gt;
&lt;p&gt;먼저 import에 &lt;code class=&quot;language-text&quot;&gt;import styled, { createGlobalStyle , css, keyframes} from &amp;quot;styled-components&amp;quot;&lt;/code&gt; css와 keyframes 추가하기&lt;/p&gt;
&lt;p&gt;그 다음 회전효과를 넣을건데, rotation이라는 변수를 다음과 같이 선언해주기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const rotation = keyframes`
from {
    transform: rotate(0deg);
}
to {
    transform: rotate(360deg);
}
`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 다음 버튼의 styled-component 영역에 가서 효과를 준다.
props.yes 즉 파랑색 버튼만 돌아가게 만들 것이다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Button = styled.button`
width: 100px;
border-radius: 50px;
padding: 5px;
color: white;
background-color : ${props=&amp;gt; props.yes ? &amp;quot;blue&amp;quot; : &amp;quot;red&amp;quot;}
${props =&amp;gt; {
    if(props.yes) {
        return css `animation: ${rotation} 2s linear infinite`;
    }
}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;적용해보면 이렇게 뙇! 아주 잘 돌아간다.
예전에는 그냥 keyframe만 써도 됐지만, 요즘은 css까지 붙여줘야 한다고 ㅠㅠ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cebb8e20-d5f6-11e9-92db-f74ff80686a0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;어찌됐든 잘 돌아가는거 확인쓰~ 애니메이션 넣기 성공쓰!&lt;/p&gt;
&lt;h1 id=&quot;attr&quot;&gt;&lt;a href=&quot;#attr&quot; aria-label=&quot;attr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;.attr&lt;/h1&gt;
&lt;p&gt;이번엔 input박스를 하나 만들건데…
Input이라는 태그를 만드는건 아주 간단하게 할 수 있다 위에서 해왔던 것처럼!
근데 placeholder를 주고싶은데.. &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Input placeholder=&amp;quot;hello&amp;quot;/&amp;gt;&lt;/code&gt; 이렇게 쓰면 뭔가 지저분해보이고..
그럴 때 쓸 수 있는 것이 바로 &lt;code class=&quot;language-text&quot;&gt;.attr&lt;/code&gt;이다!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const Input = styled.input.attrs({ placeholder: &amp;quot;hello&amp;quot; })``&lt;/code&gt;
젤 뒤에 빽틱은 Input에 css 효과를 주기 위한것인데.. 아무효과를 안 주고 attribute 값만 줄때도 빽틱은 꼭 써줘야 에러가 나지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/aa9debc0-d5f9-11e9-ae60-4da4fd3416f2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠. 이렇게 placeholder가 hello인 인풋박스 완성!&lt;/p&gt;
&lt;h2 id=&quot;mixin&quot;&gt;&lt;a href=&quot;#mixin&quot; aria-label=&quot;mixin permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mixin&lt;/h2&gt;
&lt;p&gt;SASS에서 써 봤던 Mixin을 styled-component에서도 동일하게 쓸 수 있다!
이걸 사용하려면 import에 css 값을 넣어줘야 한다.
그 담에&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const DooriColor = css`
  color: white;
  background-color: paleturquoise;
  border-radius: 10px;
  border: none;
`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;원하는 변수 이름 = css 라고 입력 후 빽틱을 열고 원하는 효과를 입력쓰&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Input = styled.input.attrs({
    placeholder: &amp;quot;hello&amp;quot;
})`
    ${DooriColor};
`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까 만들었던 인풋박스의 빽틱 안에 DooriColor를 넣어주면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8397ba50-d5fa-11e9-af2d-3df619bb9f29/image.png&quot; alt=&quot;image.png&quot;&gt;
이렇게 뙇! 공통적인 요소들은 Mixin을 이용해 효과를 한번에 주기 편할 것 같다&lt;/p&gt;
&lt;h2 id=&quot;themeprovider&quot;&gt;&lt;a href=&quot;#themeprovider&quot; aria-label=&quot;themeprovider permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ThemeProvider&lt;/h2&gt;
&lt;p&gt;mixin이랑 비슷하게 ThemeProvider라는게 있다. 일단 코드 먼저 뿌려본다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;quot;react&amp;quot;;
import styled, { createGlobalStyle , ThemeProvider } from &amp;quot;styled-components&amp;quot;
import theme from &amp;quot;./theme&amp;quot;;

const GlobalStyle = createGlobalStyle `
body {
    margin : 0;
    padding: 0;
    width: 100%;
}`

const Container = styled.div`
height: 100vh;
width: 100%;
background-color: palegreen`

const Card = styled.div`
  background-color: white;
`;

const Button = styled.button`
  border-radius: 20px;
  padding: 25px 15px;
  background-color: ${props =&amp;gt; props.theme.successColor}
`;

const Form = () =&amp;gt; (
  &amp;lt;Card&amp;gt;
    &amp;lt;Button&amp;gt;Hungry!&amp;lt;/Button&amp;gt;
  &amp;lt;/Card&amp;gt;
)

class Air extends Component {
    render() {
        return (
            &amp;lt;ThemeProvider theme={theme}&amp;gt;
             &amp;lt;GlobalStyle /&amp;gt;
            &amp;lt;Container&amp;gt;
                &amp;lt;Form /&amp;gt;
              &amp;lt;/Container&amp;gt;
            &amp;lt;/ThemeProvider&amp;gt;

        );
    }
}

export default Air;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오류 땜에 20분 정도 버렸다. 왜 오류가 났냐?
저 요소들을 감싸주는 전체 div를 만들지 않았기 때문…
그래서 Container태그를 다시 만들어주니 오류는 빠이염~&lt;/p&gt;
&lt;p&gt;주목할 점들이 몇 가지 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme.js 폴더 만들고 import 받아오기. Button의 css부분을 살펴보면 알 수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const theme = {
    mainColor: &amp;quot;yellow&amp;quot;,
    dangerColor : &amp;quot;blue&amp;quot;,
    successColor : &amp;quot;aliceblue&amp;quot;,
};

export default theme;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 이렇게 만들었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;틀을 만들어서 컴포넌트로 재활용하기
틀을 만들어서 Form 이라는 변수를 선언하고 그걸 직접 태그로 적용할 수 있다는게 너무 신기씐기!&lt;/li&gt;
&lt;li&gt;props로 theme에서 색깔 받아오기
전반적으로 styled-component를 쓰면 props 이용을 많이 하는 것 같다 오오!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://formidable.com/blog/2019/upgrade-styled-components/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://formidable.com/blog/2019/upgrade-styled-components/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://academy.nomadcoders.courses&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://academy.nomadcoders.courses&lt;/a&gt; (styled-component강의)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.styled-components.com/docs/api#supported-css&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.styled-components.com/docs/api#supported-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://soongyu.github.io/posts/til-26-react-styled-components/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://soongyu.github.io/posts/til-26-react-styled-components/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_4일 TIL_React Lifecyle에 대해 알아보았다]]></title><description><![CDATA[위코드 38일차. 우리에게 익숙한 constructor, render와 componetDidMount 말고도 리액트는 다양한 라이프 사이클 메소드를 가지고 있다. 오늘은 그 과정에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode7_4TIL_Lifecyle</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_4TIL_Lifecyle</guid><pubDate>Thu, 12 Sep 2019 12:51:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/695d77d0-d431-11e9-8e96-67f3919bbc9b/image.png&quot; alt=&quot;image.png&quot;&gt;
(출처 : 대한민국 법제처)&lt;/p&gt;
&lt;p&gt;거지와 노예를 반복하는 인간의 인생처럼 리액트에도 Life Cycle이 존재한다!
지금부터 리액트세상에서의 라이프사이클이 무엇인지 알아보도록 하자!&lt;/p&gt;
&lt;h1 id=&quot;life-cycle&quot;&gt;&lt;a href=&quot;#life-cycle&quot; aria-label=&quot;life cycle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Life cycle&lt;/h1&gt;
&lt;p&gt;컴포넌트가 생성되서 사용되고 소멸될때까지의 과정을 Life Cycle이라고 한다.
아래의 그림을 한번 살펴보면 크게 세 단계로 나눌수 있는데..
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4ecbe080-d3bb-11e9-b310-6b6bd497ab3a/image.png&quot; alt=&quot;image.png&quot;&gt;
(출처 :&lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;mount-초기화-단계&quot;&gt;&lt;a href=&quot;#mount-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;mount 초기화 단계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mount (초기화 단계)&lt;/h2&gt;
&lt;p&gt;컴포넌트가 처음 실행될 때
&lt;code class=&quot;language-text&quot;&gt;constructor → getDerivedStateFromProps → render → componentDidMount&lt;/code&gt; 순으로 작동!&lt;/p&gt;
&lt;h3 id=&quot;constructor&quot;&gt;&lt;a href=&quot;#constructor&quot; aria-label=&quot;constructor permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;constructor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 처음 생성될 때.&lt;/li&gt;
&lt;li&gt;여기서 state와 props의 기본값 설정.&lt;/li&gt;
&lt;li&gt;props 넘길때 꼭 super안에 props를 넣어줘야 함!&lt;/li&gt;
&lt;li&gt;this.state 객체를 직접 할당할 수 있는 유일한 곳. 다른 곳에선 this.setState()를 써야함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static-getderivedstatefrompropspropsstate&quot;&gt;&lt;a href=&quot;#static-getderivedstatefrompropspropsstate&quot; aria-label=&quot;static getderivedstatefrompropspropsstate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;static getDerivedStateFromProps(props,state)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;props에 있는 값을 state로 동기화 할 때 씀.&lt;/li&gt;
&lt;li&gt;시간에 따라 변하는 props로부터 state값을 계산할 때 씀(애니메이션)&lt;/li&gt;
&lt;li&gt;이걸 이용해 메모이제이션 구현도 가능&lt;/li&gt;
&lt;li&gt;어떤객체를 넣어주면 state값이 됨.
여기서 메모이제이션이란 이전에 연산한 결과를 저장하고 있는 객체를 사용하는 최적화 기법을 말하는데..
아직 어렵고 이해 안 가는 부분이라 일단 패쓰!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  static getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.value != prevState.value) {
      return { value: nextProps.value };
    }
    return null;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드는 이러하다.. 그치만 나는 이번 프로젝트에서 props 값을 state로 동기화시킬만한 코드가 없어서 실제로 적용은 못해보았다.&lt;/p&gt;
&lt;h3 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; aria-label=&quot;render permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;render()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 리액트 세상에 존재함을 알리는 단계! 우리가 작성한 코드를 랜더링함.&lt;/li&gt;
&lt;li&gt;콘솔도 여기서 찍얼 볼 수 있음. 리턴 다음에 찍을 수 없어~&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;componentdidmount&quot;&gt;&lt;a href=&quot;#componentdidmount&quot; aria-label=&quot;componentdidmount permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;componentDidMount()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API 호출할 수 있는 곳&lt;/li&gt;
&lt;li&gt;이 단계에서 setState를 호출하면 다시 랜더링 됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;update-업데이트-단계&quot;&gt;&lt;a href=&quot;#update-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;update 업데이트 단계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update (업데이트 단계)&lt;/h2&gt;
&lt;p&gt;state나 props가 업데이트 되는 단계
&lt;code class=&quot;language-text&quot;&gt;getDerivedStateFromProps → shouldComponentUpdate → render → getSnapshotBeforeUpdate → componentDidUpdate&lt;/code&gt; 순으로 작동!&lt;/p&gt;
&lt;p&gt;위에서 정리한 개념은 패쓰~ 새로운 것들만 개념정리 고고!&lt;/p&gt;
&lt;h3 id=&quot;shouldcomponentupdatenextprops-nextstate&quot;&gt;&lt;a href=&quot;#shouldcomponentupdatenextprops-nextstate&quot; aria-label=&quot;shouldcomponentupdatenextprops nextstate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;shouldComponentUpdate(nextProps, nextState)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;props와 state의 값이 변하면 true, 아니면 false를 리턴함&lt;/li&gt;
&lt;li&gt;true일 경우 render되고, false일 경우 업데이트 중단. 기본값은 true이다!&lt;/li&gt;
&lt;li&gt;이건 지극히 성능최적화를 위함..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이거 대신 Pure Component를 써도 된다.
Pure Component 안에 자동으로 shouldComponentUpdate가 적용이 된다고 한다. 아직 슈컴업도 제대로 이해가 안 된 상태라 이거와 동일한 방식의 퓨어컴포넌트는 일단 Reference에 괜찮은 사이트를 걸어놨다.. 좀 더 공부하다보면 둘 다 뭔지 정확하게 알게 되겠지..&lt;/p&gt;
&lt;p&gt;여튼 Home의 자식 컴포넌트인 BestRecipe 컴포넌트에 슈컴업을 적용해보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; shouldComponentUpdate(nextProps) {
    return nextProps.el !== this.props.el;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 props의 element와 다음 props의 element가 다르다는 것을 리턴..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/64b62ed0-d54d-11e9-977b-75c190e82cde/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;화면에 레시피정보가 뜨지 않는걸 보아하니, 업데이트 종료인것이고.. false라는 건데
그럼 현재의 props와 그 다음 props 값이 같다는 건가보다..!
저기서 !==을 ===으로 바꾸면 정상적으로 레시피정보가 뜬다.&lt;/p&gt;
&lt;p&gt;그래도 콘솔에 props를 찍어보면 8개나 찍혀서…(하나당 4개씩)
랜더링이 계속 되는거 보면 식을 코드를 잘못 적용한것 같아서 위코드 전용 스택오버플로우에 물어보고있다!&lt;/p&gt;
&lt;h3 id=&quot;getsnapshotbeforeupdateprevprops-prevstate&quot;&gt;&lt;a href=&quot;#getsnapshotbeforeupdateprevprops-prevstate&quot; aria-label=&quot;getsnapshotbeforeupdateprevprops prevstate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;getSnapshotBeforeUpdate(prevProps, prevState)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;랜더링 한 다음에 그 결과물이 브라우저에 반영되기 직전에 호출됨&lt;/li&gt;
&lt;li&gt;여기서 반환되는 값은 componentDidUpdate의 세번째 인자로 전달됨.&lt;/li&gt;
&lt;li&gt;이건 아직까진 잘 안 쓰는 것 같아서 정보가 많이 없다 ㅠㅠ 나중에 쓰게 되면 다시 포스팅 해봐야지!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;componentdidupdateprevprops-prevstate&quot;&gt;&lt;a href=&quot;#componentdidupdateprevprops-prevstate&quot; aria-label=&quot;componentdidupdateprevprops prevstate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;componentDidUpdate(prevProps, prevState)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;업데이트 단계의 마지막 메소드!&lt;/li&gt;
&lt;li&gt;업데이트된 돔의 state를 가장 빠르게 가져올 수 있는 메소드..!&lt;/li&gt;
&lt;li&gt;컴포넌트 업데이트 이후 DOM을 조작해야 할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unmount-소멸-단계&quot;&gt;&lt;a href=&quot;#unmount-%EC%86%8C%EB%A9%B8-%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;unmount 소멸 단계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unmount (소멸 단계)&lt;/h2&gt;
&lt;h3 id=&quot;componentwillunmount&quot;&gt;&lt;a href=&quot;#componentwillunmount&quot; aria-label=&quot;componentwillunmount permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;componentWillUnmount&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소멸 단계의 유일무이한 메소드!&lt;/li&gt;
&lt;li&gt;끝나지 않는 네트워크 요청 취소, 타이머 해제, 구독 해제 등의 작업할 때 쓴다고 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이거 약간 어디에 써야할 지 알것 같은데…
예전에 html과 js로 게임 만들기 했을 때 유령이 화면상에선 바닥에 머무르지만, 콘솔창에서의 실제적인 숫자는 계속적으로 증가하는 그런 문제가 있었는데..
거기에 적용하면 될것 같다! 근데… 지금 리액트로 게임화면 구현하기엔 시간이 벅찰것 같아 생략쓰..☆&lt;/p&gt;
&lt;h2 id=&quot;ref&quot;&gt;&lt;a href=&quot;#ref&quot; aria-label=&quot;ref permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ref&lt;/h2&gt;
&lt;p&gt;헐 소름… Ref를 한글로 치면 ㄱㄷㄹ.. 내 이니셜이다 ㅋㅋ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리액트에서 component나 element의 id 역할을 하는게 바로 Ref&lt;/li&gt;
&lt;li&gt;작업중인 부모 컴포넌트에서 ref를 통해 자식요소를 쉽게 호출 가능쓰!&lt;/li&gt;
&lt;li&gt;ref 남용 금지! 최대한 state와 props를 이용하는게 유지보수에 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1차 프로젝트에서 어떻게 적용하는지 모르겠어서 제로초님의 강의를 봤다..&lt;/p&gt;
&lt;p&gt;input에 focus 효과를 주기 위해
input 태그 안에 &lt;code class=&quot;language-text&quot;&gt;ref = {c =&amp;gt; { this.input = c; }}&lt;/code&gt; 라는 값을 입력하고,
input 태그가 걸린 함수에는 &lt;code class=&quot;language-text&quot;&gt;this.input.focus();&lt;/code&gt; 라는 함수를 걸어주었다.
이렇게 하면 마우스 입력이 끝나도 focus 깜빡이가 적용이 된다!&lt;/p&gt;
&lt;p&gt;일단 명절맞이 라이프사이클 정리는 여기서 이렇게 마치고…
이 부분은 추가적으로 계속 공부하고, 적용해볼 부분을 찾아봐야 이해가 확실히 될것 같다 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;실전 리액트 프로그래밍 (이재승 저)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://reactjs.org/docs/react-component.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://60devs.com/pure-component-in-react.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://60devs.com/pure-component-in-react.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nsS5mbyDDBw&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=nsS5mbyDDBw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_3일 TIL_Lorem Ipsum이 뭘까?]]></title><description><![CDATA[위코드 37일차. ui 디자인을 참고하려고 이 사이트 저 사이트 돌아다니다 보면 꼭 보이는 그 글귀, Lorem Ipsum... 오늘은 그 뜻에 대해 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode7_3TIL_LoremIpsum</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_3TIL_LoremIpsum</guid><pubDate>Wed, 11 Sep 2019 17:58:23 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cd967020-d527-11e9-8902-458252e23041/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;디자인을 참고하려고 사이트 여기저기를 뒤지다보면 항상 나오는 단어들이 있다.&lt;/p&gt;
&lt;h4 id=&quot;lorem-ipsum-dolor-sit-amet-어쩌구저쩌구&quot;&gt;&lt;a href=&quot;#lorem-ipsum-dolor-sit-amet-%EC%96%B4%EC%A9%8C%EA%B5%AC%EC%A0%80%EC%A9%8C%EA%B5%AC&quot; aria-label=&quot;lorem ipsum dolor sit amet 어쩌구저쩌구 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lorem ipsum dolor sit amet 어쩌구저쩌구&lt;/h4&gt;
&lt;p&gt;이게 무슨 말일지 궁금해서 한번 찾아보았다!&lt;/p&gt;
&lt;p&gt;사실 이 단어들의 조합에 그다지 관심이 없었는데,
자주 보이니까 넘나 신경이 쓰이는 것..!&lt;/p&gt;
&lt;p&gt;이게 무슨 뜻이냐면…&lt;/p&gt;
&lt;h1 id=&quot;아무-의미도-없다&quot;&gt;&lt;a href=&quot;#%EC%95%84%EB%AC%B4-%EC%9D%98%EB%AF%B8%EB%8F%84-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;아무 의미도 없다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아무 의미도 없다&lt;/h1&gt;
&lt;p&gt;ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
그냥 공간 채우기 위해 아무말 대잔치 하는 단어들의 조합이었다.&lt;/p&gt;
&lt;p&gt;근데 마이크로 소프트 고객지원 페이지를 참고해보니, 나름의 역사적인 배경이 있는 단어였다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7f2f5f90-d528-11e9-8902-458252e23041/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;고대 로마시대의 철학자 키케로의 저서 중에 최고 선악론이라고 있는데,
그 책에서 나온 문구인 “Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit…” 를 조합해서 지금의 “Lorem Ipsum 웅앵웅”이 나왔다고 한다!&lt;/p&gt;
&lt;p&gt;저 문구의 뜻은
“고통 그 자체를 즐기는 자도, 이를 쫓는 자도, 이를 원하는 자도 없다. 왜냐하면 고통은 고통스러울 뿐이기 때문이다.”
라고 한다…&lt;/p&gt;
&lt;p&gt;또 다시 시간이 흘러 1500년대…
한 인쇄업자가 샘플 페이지의 질을 높이려고 저 철학자의 문구를 채택한 것이 지금까지 이어져온 것..!!&lt;/p&gt;
&lt;p&gt;특별할 것 없어보이는 로렘 입썸 문구조합을 이용하면 글자의 간격이 잘 드러나고, 글꼴의 두께와 디자인 같은 활자의 중요 특징을 확인하는데 적합하다고 한다! 오…&lt;/p&gt;
&lt;h2 id=&quot;lorem-ipsum-생성하는-사이트영어&quot;&gt;&lt;a href=&quot;#lorem-ipsum-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%98%81%EC%96%B4&quot; aria-label=&quot;lorem ipsum 생성하는 사이트영어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lorem Ipsum 생성하는 사이트(영어)&lt;/h2&gt;
&lt;p&gt;이걸 만들어주는 사이트도 있닼ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lipsum.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.lipsum.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 사이트에 접속한 다음&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/77fff7b0-d529-11e9-8902-458252e23041/image.png&quot; alt=&quot;image.png&quot;&gt;
옵션을 고르고 Generate를 누르면 다음과 같은 문장들이 뙇!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/627aef30-d529-11e9-8902-458252e23041/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;넘나 신기한 것..!
혹시나 한글버전은 없을까 찾아봤는데… 있다!&lt;/p&gt;
&lt;h2 id=&quot;lorem-ipsum-생성하는-사이트한글&quot;&gt;&lt;a href=&quot;#lorem-ipsum-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EC%82%AC%EC%9D%B4%ED%8A%B8%ED%95%9C%EA%B8%80&quot; aria-label=&quot;lorem ipsum 생성하는 사이트한글 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lorem Ipsum 생성하는 사이트(한글)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ada30bf0-d529-11e9-a8d8-f563f0e9c9d2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;텍스트 소스는 청춘예찬과 별 헤는 밤 둘 중에 하나를 고를 수 있다.
나는 별 헤는 밤을 골라보았다!&lt;/p&gt;
&lt;p&gt;결과는…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cc62c030-d529-11e9-96d3-a7f5898d8a7b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;외국인들이 영어 로렘입썸 글귀들을 보면 딱 이런 느낌이려나 ㅋㅋㅋㅋ
뭔가 진짜 아무말 대잔치인데.. 약간 있어빌리티 ㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;찾아보면 로렘입썸 글귀 만드는 사이트들이 굉장히 많다!
잘 활용하면 좋을 듯..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/62621a90-d52a-11e9-96d3-a7f5898d8a7b/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;br /&gt;
사실 너무 졸려서 잠깐 딴짓하느라 쓰는 포스팅이다…
얼른 라이프사이클 공부 끝내고 리덕스 공부 시작해야지 ㅠㅠ&lt;/p&gt;
&lt;p&gt;코드 안 치고 공부만 하려니까 넘나 지친다..!
화이팅 하자 !!!!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/ko-kr/help/114222/description-of-the-lorem-ipsum-dolor-sit-amet-text-that-appears-in-wor&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://support.microsoft.com/ko-kr/help/114222/description-of-the-lorem-ipsum-dolor-sit-amet-text-that-appears-in-wor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_2일 TIL_리액트 상태값 변경+프로젝트 예시]]></title><description><![CDATA[위코드 36일차. 1차 프로젝트를 마치며 다시금 state와 props로 데이터를 변경하는 법을 정리해보았다. (with 1차 프로젝트 코드)]]></description><link>https://gollumnima.github.io//posts/wecode7_2TIL_react</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_2TIL_react</guid><pubDate>Tue, 10 Sep 2019 17:11:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cd2a53e0-d392-11e9-a0b2-e3484432dcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;눈 깜짝할 새에 더위가 한 풀 꺾이고, 1차 프로젝트도 끝이 나고, 추석연휴도 찾아왔다.
벌써 위코드에서 동기들과 함께 생활을 한 지 한 달이 훨씬 지났다는 소리다 와우! &lt;br /&gt;
남은 일주일의 쉬는시간(?)동안 공부 방향을 세 갈래로 나누어 생각해봤는데, 그 중 첫째가 리액트 라이프사이클과 리덕스!&lt;/p&gt;
&lt;p&gt;라이프사이클을 정리하기 전에, 프로젝트 때 코드도 다시 돌아볼 겸 state와 props에 대해 다시 간략히 정리해보려고 한다.&lt;/p&gt;
&lt;h2 id=&quot;react-ui데이터를-관리하는-라이브러리&quot;&gt;&lt;a href=&quot;#react-ui%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC&quot; aria-label=&quot;react ui데이터를 관리하는 라이브러리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React, UI데이터를 관리하는 라이브러리&lt;/h2&gt;
&lt;p&gt;아래 링크에는 3주차 이틀차 되던 날 내가 리액트에 대해 정리했던 내용에 담겨있다.
&lt;a href=&quot;https://gollumnima.github.io/posts/wecode3_2_TIL_react/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://gollumnima.github.io/posts/wecode3_2_TIL_react/&lt;/a&gt;
저 당시엔 state와 props에 대한 이해도가 없는 채로 그냥 알아야 적용하니깐.. 주입식으로 정리했던 것 같다.
물론 지금도 완전히 다 이해한 건 아니지만 프로젝트를 하면서 어떤 느낌인지 감이 왔다!&lt;/p&gt;
&lt;p&gt;여튼… 지난번 포스팅에선 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;리액트는 라이브러리다&amp;quot;&lt;/code&gt; 라고 했는데
정확히 말하자면, &lt;code class=&quot;language-text&quot;&gt;&amp;quot;UI 데이터를 관리하는 라이브러리&amp;quot;&lt;/code&gt;다.
이 데이터는 또 두 갈래로 나눠지는데,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트 내부의 상태값 (state)&lt;/li&gt;
&lt;li&gt;부모 컴포넌트에서 물려받는 속성값 (props)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;리액트는 이러한 UI데이터가 변경이 될때마다 화면을 다시 그리는 속성을 가지고 있다.
html의 DOM 구조를 생각해보자면, 우리는 데이터가 변경될 때마다 dom요소를 직접 설정해야만 했다.&lt;/p&gt;
&lt;p&gt;예시를 보자!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;html+js에서의 이름 클릭시 트윗 삭제기능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function filter() {
  let be_empty = document.getElementsByClassName(&amp;#39;contents_wrap&amp;#39;)[0]
  if (event.target.innerText === &amp;#39;Doori Kim&amp;#39;) {
    be_empty.remove();
    const sum_doorits = document.getElementsByClassName(&amp;#39;sum_doorits&amp;#39;)[0]
    const total_doorits = doorits_box.children.length
    sum_doorits.innerHTML = total_doorits; // 헐 대박..
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저 당시엔 주석으로 헐 대박을 썼지만..
리액트 코드 보다가 이거 보니 넘나 복잡한 것!&lt;/p&gt;
&lt;p&gt;이제 리액트 코드를 보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  removeTweet = () =&amp;gt; {
    this.setState({
      tweetBox: this.state.tweetBox
    });
  };

&amp;lt;div className=&amp;quot;doorits_box&amp;quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    {tweetBox.map((el, idx) =&amp;gt; (
      &amp;lt;li key={idx}&amp;gt;
        &amp;lt;button className=&amp;quot;name_btn&amp;quot; onClick={this.removeTweet}&amp;gt;
        {el.name}
        &amp;lt;/button&amp;gt;
          &amp;lt;span className=&amp;quot;post_time&amp;quot;&amp;gt;{el.time.toString()}&amp;lt;/span&amp;gt;
          &amp;lt;p className=&amp;quot;post_txt&amp;quot;&amp;gt;{el.message}&amp;lt;/p&amp;gt;
       &amp;lt;/li&amp;gt;
     ))}
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;훨씬 더 직관적이다!
removeTweet이라는 함수를 만들어서 tweetBox의 state에 변화를 주고, onClick이벤트에 만든 함수를 적용시키면 끝!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8d5e0670-d398-11e9-a0b2-e3484432dcc9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;어때요? 참 쉽죠?&lt;/p&gt;
&lt;h4 id=&quot;기억할-것은-리액트는-랜더함수를-통해-화면을-자동으로-갱신시킨다는-점&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%96%B5%ED%95%A0-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8A%94-%EB%9E%9C%EB%8D%94%ED%95%A8%EC%88%98%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%99%94%EB%A9%B4%EC%9D%84-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EA%B0%B1%EC%8B%A0%EC%8B%9C%ED%82%A8%EB%8B%A4%EB%8A%94-%EC%A0%90&quot; aria-label=&quot;기억할 것은 리액트는 랜더함수를 통해 화면을 자동으로 갱신시킨다는 점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기억할 것은 리액트는 랜더함수를 통해 화면을 자동으로 갱신시킨다는 점!&lt;/h4&gt;
&lt;h2 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State&lt;/h2&gt;
&lt;p&gt;클래스형 컴포넌트 내부에서 상태를 관리해줄 때 state를 쓴다.
(요즘은 함수형 컴포넌트에서도 state를 쓸 수 있게 훅이라는 게 새로 나오긴 했다 ㅎ)
constructor 안에서 초기 상태를 this.state 객체 안에 변화할 값들을 넣어주고 초기값을 세팅해준다.&lt;/p&gt;
&lt;p&gt;우리가 state를 이용하지 않고, 임의로 데이터값을 바꾼다고 해도 가능은 하다!
하지만 리액트는 바보라서 데이터가 변경되었다는 사실을 모르기 때문에 화면은 그대로 일것이다 ㅠㅠ
그래서 우리는 setState를 써줘야 하는 것!&lt;/p&gt;
&lt;p&gt;우리팀 프로젝트의 어려웠던 부분 중 하나인 뉴스 카테고리 선택하는 뉴스홈 화면 코드를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;quot;react&amp;quot;;
import NewsHomeCategory from &amp;quot;./NewsHomeCategory&amp;quot;;
import { Link } from &amp;quot;react-router-dom&amp;quot;;
import Navbar from &amp;quot;../../Components/Home/Navbar&amp;quot;;
import HomeNewsItem from &amp;quot;../../Components/Home/HomeNewsItem&amp;quot;;
import &amp;quot;./NewsHome.scss&amp;quot;;

class NewsHome extends React.Component {
  constructor() {
    super();
    this.state = {
      category: [],
      newsList: [],
      active_category: 1,
      selectedIndex: 0,
      indexCount: 0
    };
  }

  componentDidMount() {
    fetch(&amp;quot;http://13.209.12.87:8000/news/tags&amp;quot;, {
      method: &amp;quot;GET&amp;quot;,
      headers: {
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;
      }
    })
      .then(response =&amp;gt; {
        return response.json();
      })
      .then(response =&amp;gt; {
        let categoryList = response.map(el =&amp;gt; {
          return el.tag;
        });
		//fetch로 데이터를 받은 후 카테고리 정보를 받아오게끔 setState 함수 설정
        this.setState({
          category: categoryList
        });
      });
    this.requestNewsList(this.state.active_category);
  }

  requestNewsList(categoryItem_number) {
    fetch(
      `http://13.209.12.87:8000/news?offset=1&amp;amp;tag_num=${categoryItem_number}`,
      {
        method: &amp;quot;GET&amp;quot;,
        headers: {
          &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      }
    )
      .then(response =&amp;gt; {
        return response.json();
      })
      // 해당하는 카테고리의 배열만 뜨게 설정하기
      .then(response =&amp;gt; {
        this.setState({
          newsList: response[0].news_data.map(el =&amp;gt; {
            if (el.tag_id === categoryItem_number) {
              return el;
            } else {
              return &amp;quot;&amp;quot;;
            }
          }),
          active_category: categoryItem_number
        });
      });
  }
  onChangeCategory = e =&amp;gt; {
    let categoryItem_number = Number(e.currentTarget.id);
    // 백에서 보내준 데이터가 1부터 시작해서 -1을 해줘야 제대로 작동한다
    this.setState({
      selectedIndex: categoryItem_number - 1
    });
    this.requestNewsList(categoryItem_number);
  };

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;div className=&amp;quot;NewsWrap&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;NewsHome-tag&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;NewsHome page_wrapper&amp;quot;&amp;gt;
              &amp;lt;div className=&amp;quot;tag_round&amp;quot;&amp;gt;
                {this.state.category.map((el, key) =&amp;gt; {
                  let selectedStatus =
                    key === this.state.selectedIndex ? true : false;
                  return (
                    &amp;lt;NewsHomeCategory
                      key={key}
                      name={el}
                      value={key + 1}
                      onChangeCategory={this.onChangeCategory}
                      selected={selectedStatus}
                    /&amp;gt;
                  );
                })}
              &amp;lt;/div&amp;gt;
              &amp;lt;div className=&amp;quot;design&amp;quot;&amp;gt;
                {this.state.newsList.map((item, index) =&amp;gt; {
                  if (item !== &amp;quot;&amp;quot;) {
                    return (
                      &amp;lt;Link to={`/news/${item.id}`}&amp;gt;
                        &amp;lt;HomeNewsItem
                          key={index}
                          category={item.tag}
                          title={item.title}
                          summary={item.content}
                          thumbnail={item.image_url}
                        /&amp;gt;
                      &amp;lt;/Link&amp;gt;
                    );
                  }
                })}
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/&amp;gt;
    );
  }
}

export default NewsHome;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;엄청 복잡한 로직이었다!
일단 클릭한 카테고리에 따라 보이는 화면이 다르게 구현 하는것도 힘들었고,
뉴스와 레시피쪽 데이터 형식이 같진 않아서 fetch함수를 써서 데이터를 가져오고 가공하는데 더 어려움을 겪었던 것 같다.&lt;/p&gt;
&lt;p&gt;NewsHome이라는 컴포넌트는 또 NewsHomeCategory라는 컴포넌트와 이어지는데..
여기서 우리는 props에 대해서 살펴볼 것이다.&lt;/p&gt;
&lt;h2 id=&quot;props&quot;&gt;&lt;a href=&quot;#props&quot; aria-label=&quot;props permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;props&lt;/h2&gt;
&lt;p&gt;부모컴포넌트로 부터 물려 받는 속성값을 props라고 한다.
이는 불변객체(immutable)기 때문에 값을 변경하려고 하면 에러가 난다!&lt;/p&gt;
&lt;p&gt;그렇다면 NewsHome과 이어지는 NewsHomeCategory의 코드를 살펴보자&lt;/p&gt;
&lt;p&gt;살펴보기 전! 내가 처음에 시도했던 방법을 먼저 살펴보자
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ced57f00-d075-11e9-a83f-2d728137bd80/image.png&quot; alt=&quot;image.png&quot;&gt;
(원래 일식 카테고리 누르면 노재팬 뜨게 하려고 했는데 팀원들의 만류로 패쓰~)
여튼 카테고리를 눌렀을 때 해당하는 리스트는 뜨지만, 색깔이 바뀌는 효과를 주고 싶었던 나는…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; onClinkHandler = e =&amp;gt; {
    this.props.onChangeCategory(e);
    this.setState({
      color: &amp;quot;orange&amp;quot;,
      backgroundColor: &amp;quot;3px soild orange&amp;quot;
    })
  };

render() {
    return (
      &amp;lt;div className=&amp;quot;check_box&amp;quot;&amp;gt;
        &amp;lt;div
          className=&amp;quot;RecipeButton&amp;quot;
          style={{ borderBottom: this.state.borderBottom }}
        &amp;gt;
          &amp;lt;p
            id={this.props.value}
            onClick={this.onClinkHandler}
            style={{ color: this.state.color }}
          &amp;gt;
            {this.props.name}
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;state에 color와 backgroundColor를 넣어놓고 Click 이벤트가 일어날 때 style이 바뀌도록 인라인으로 css효과를 작성했다.
그치만… 결과는!!!
누르는 것마다 색깔이 바뀌게 되어서 대실패~&lt;/p&gt;
&lt;p&gt;우리팀 에이스 광훈님의 도움을 받아 다시 작성해본 코드…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;quot;react&amp;quot;;
import &amp;quot;./NewsHome.scss&amp;quot;;

class NewsHomeCategory extends React.Component {
  onClickHandler = e =&amp;gt; {
    this.props.onChangeCategory(e);
  };

  render() {
    let borderColor = this.props.selected
      ? &amp;quot;3px solid orange&amp;quot;
      : &amp;quot;2px solid #bdbdbd&amp;quot;;

    let charColor = this.props.selected ? &amp;quot;orange&amp;quot; : &amp;quot;black&amp;quot;;

    return (
      &amp;lt;div className=&amp;quot;check_box&amp;quot;&amp;gt;
        &amp;lt;div
          className=&amp;quot;NewsButton&amp;quot;
          style={{
            borderBottom: `${borderColor}`
          }}
        &amp;gt;
          &amp;lt;p
            id={this.props.value}
            onClick={this.onClickHandler}
            style={{
              color: `${charColor}`
            }}
          &amp;gt;
            {this.props.name}
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default NewsHomeCategory;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;props가 선택 되었는지 안 되었는지를 알기 위해선 NewsHome 컴포넌트 내부에 selected가 true인지 false인지 판별하는 함수를 넣어줬다. 요렇게!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div className=&amp;quot;tag_round&amp;quot;&amp;gt;
  {this.state.category.map((el, key) =&amp;gt; {
    let selectedStatus = key === this.state.selectedIndex ? true : false;
    return (
      &amp;lt;NewsHomeCategory
        key={key}
        name={el}
        value={key + 1}
        onChangeCategory={this.onChangeCategory}
        selected={selectedStatus}
      /&amp;gt;
    );
  })}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;selectedStatus가 true인 애들만 orange 색으로 바뀌게 하는 코드가 뙇!
이제 증말로 선택한 카테고리만 색깔이 바뀐다 오예!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c70834f0-d3a1-11e9-8f86-5df8e04645de/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;넘나 잘 먹히는 것…☆
나 혼자만의 힘으로 한건 아니지만 원하는 결과가 화면에 나오니 이렇게 기쁠수가 없었다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;3주 전의 나는 이론으로만 대충 이런거다! 하고 state와 props에 대해 포스팅 했었는데
프로젝트에 적용을 해보니까 쪼꼼 알 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;결론-무조건-콘솔-찍어봐라&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%BD%98%EC%86%94-%EC%B0%8D%EC%96%B4%EB%B4%90%EB%9D%BC&quot; aria-label=&quot;결론 무조건 콘솔 찍어봐라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결론, 무조건 콘솔 찍어봐라!&lt;/h3&gt;
&lt;p&gt;this.props가 무엇인지, this.state.newsList에 어떤 데이터가 들어오는지, 진짜로 데이터가 들어오긴 하는건지!
일단 다 찍어봐야 알 수 있다!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;실전 리액트 프로그래밍(이재승 저)&lt;/li&gt;
&lt;li&gt;1차 프로젝트 wooridoori.com 코드&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 7주차_1일 TIL_css 반응형 간단정리+프로젝트 예시]]></title><description><![CDATA[위코드 35일차. 1차 프로젝트의 모든 기능구현 완료! 하지만 반응형 디자인은 적용하지 않았기 때문에 연습해볼겸 간단히 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode7_1TIL_rwd</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode7_1TIL_rwd</guid><pubDate>Mon, 09 Sep 2019 17:11:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/02342c10-d2e8-11e9-935a-83273dbb585d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;기술이 발전함에 따라 다양한 크기의 스크린을 가진 기기들이 등장하게 되고…
사용자는 그냥 쓰기만 하면 되지만 개발자는 다르쥐..
이번에 나온 갤럭시 폴더블… 부들부들… 그건 또 반응형으로 어떻게 만들지?ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼.. 스크린 크기에 상관없이 시각적으로 가독성 좋은 페이지를 만들기 위해 도입된 것이 바로
반응형 웹디자인이다!
개발자는 웹 사이트의 콘텐츠 크기와 웹 사이트가 보여지는 스크린의 크기에 따라 반응형 구조를 짜야 한다.&lt;/p&gt;
&lt;p&gt;먼저 콘텐츠의 크기에 따라서 정리해보았다!&lt;/p&gt;
&lt;h1 id=&quot;컨텐츠의-크기&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%90%EC%B8%A0%EC%9D%98-%ED%81%AC%EA%B8%B0&quot; aria-label=&quot;컨텐츠의 크기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨텐츠의 크기&lt;/h1&gt;
&lt;h2 id=&quot;콘텐츠의-절대-수치&quot;&gt;&lt;a href=&quot;#%EC%BD%98%ED%85%90%EC%B8%A0%EC%9D%98-%EC%A0%88%EB%8C%80-%EC%88%98%EC%B9%98&quot; aria-label=&quot;콘텐츠의 절대 수치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콘텐츠의 절대 수치&lt;/h2&gt;
&lt;p&gt;px을 생각해보자면.. 딱 그 만큼의 크기를 차지하는 hard한 개념이다. 스크린의 크기가 달라져도 원래 정해진 px만큼의 자리를 차지하게 된다.
이걸 보완하려고 나온게 CSS에서의 상대적인 측정값이다.
px과는 다르게 상대적인 측정값을 쓰게 되면 콘텐츠의 크기가 스크린의 크기나 레이아웃에 얽매이지 않게 된다.&lt;/p&gt;
&lt;h2 id=&quot;콘텐츠의-상대-수치&quot;&gt;&lt;a href=&quot;#%EC%BD%98%ED%85%90%EC%B8%A0%EC%9D%98-%EC%83%81%EB%8C%80-%EC%88%98%EC%B9%98&quot; aria-label=&quot;콘텐츠의 상대 수치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콘텐츠의 상대 수치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;em : 사용한 font의 크기를 토대로 변화하는 값. 브라우저에서 기본 폰트가 16px이라면 1em은 16px이다.&lt;/li&gt;
&lt;li&gt;rem : em과 비슷하지만, root element(html)의 font size를 참조한다는 점에서 다르다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;퍼센트&quot;&gt;&lt;a href=&quot;#%ED%8D%BC%EC%84%BC%ED%8A%B8&quot; aria-label=&quot;퍼센트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;퍼센트&lt;/h2&gt;
&lt;p&gt;width나 height, padding, border, margins와 같은 box model 값에 자주 적용 된다.
퍼센트가 padding과 margin에 적용될 땐 부모 div의 width값을 토대로 계산이 된다! padding과 margin의 세로값 또한 부모div의 width값을 토대로 계산이 됨..height이 아니라~ 오 씐기씐기!&lt;/p&gt;
&lt;h2 id=&quot;최대값과-최소값&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EB%8C%80%EA%B0%92%EA%B3%BC-%EC%B5%9C%EC%86%8C%EA%B0%92&quot; aria-label=&quot;최대값과 최소값 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최대값과 최소값&lt;/h2&gt;
&lt;p&gt;상대적인 값을 쓸 때, 우리는 최대값과 최소값을 이용해 콘텐츠의 크기를 제한할 수 있다. 예를 들어…&lt;/p&gt;
&lt;h1 id=&quot;미디어쿼리&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC&quot; aria-label=&quot;미디어쿼리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미디어쿼리&lt;/h1&gt;
&lt;p&gt;웹사이트의 콘텐츠를 다양한 스크린 사이즈에 맞게 적용시키는 것이 바로 CSS의 미디어쿼리다.
CSS가 스크린의 크기를 감지해서 그 스크린의 가로사이즈에 맞게 스타일을 적용시키는 것이 바로 핵심!
용어들을 한번 알아볼까?&lt;/p&gt;
&lt;p&gt;그 전에 예시 코드 하나 투척쓰!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@media only screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;media&quot;&gt;&lt;a href=&quot;#media&quot; aria-label=&quot;media permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@media&lt;/h2&gt;
&lt;p&gt;미디어쿼리 시작할때의 약속! 저렇게 시작해야 한다~~&lt;/p&gt;
&lt;h2 id=&quot;only-screen&quot;&gt;&lt;a href=&quot;#only-screen&quot; aria-label=&quot;only screen permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;only screen&lt;/h2&gt;
&lt;p&gt;어떠한 장치를 써도 이 법칙을 따라야 한다는걸 명시한다.
only가 왜 쓰였냐.. 초창기 미디어 타입에는 screen 말고도 handheld, print가 있었는데
지금의 CSS 법칙은 다른거 다 제끼고 only 스크린에 적용된다는 것!&lt;/p&gt;
&lt;h2 id=&quot;and-max-width-480px&quot;&gt;&lt;a href=&quot;#and-max-width-480px&quot; aria-label=&quot;and max width 480px permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;and (max-width: 480px)&lt;/h2&gt;
&lt;p&gt;CSS법칙이 가로길이 480px이거나 그것보다 더 작은 것들에 적용이 된다는 것. 저 가로길이 이후 중괄호를 열어서 값에 변화를 주면 사용자의 스크린 크기가 480px보다 작아졌을때 원래의 css값이 아닌 미디어쿼리에 적용한 새로운 값이 적용된다.&lt;/p&gt;
&lt;h2 id=&quot;range범위&quot;&gt;&lt;a href=&quot;#range%EB%B2%94%EC%9C%84&quot; aria-label=&quot;range범위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Range(범위)&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@media only screen and (min-width: 320px) and (max-width: 480px) {
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;max 뿐만 아니라 min 값까지 동시에 줄 수 있다!
저건 무슨 뜻이냐면.. 스크린 크기가 320px과 480px 사이일때 저걸 적용해라 라는 뜻..!&lt;/p&gt;
&lt;h2 id=&quot;dpidots-per-inch&quot;&gt;&lt;a href=&quot;#dpidots-per-inch&quot; aria-label=&quot;dpidots per inch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DPI(Dots Per Inch)&lt;/h2&gt;
&lt;p&gt;고해상도 스크린의 반응형 디자인을 하기 위해 고안된 모델. min 혹은 max-resolution을 쓴다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@media only screen and (min-resolution: 300dpi) {
    /* CSS for high resolution screens */
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 코드아카데미 사이트를 보며 여기까지 정리해봤는데…
DPI 2번문제에서 안 넘어가서.. 그 다음껄 정리를 못하고 있다.
일주일 무료기간 끝나면 20만원 과금이 되서 미리 손절해야 하는데!&lt;/p&gt;
&lt;p&gt;여튼.. 정리는 이쯤에서 마치고 실제 프로젝트에 적용한 결과물을 보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6f3e6c50-d3a4-11e9-a484-39249fc66e45/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;현재 우리두리닷컴 페이지의 메인이다.&lt;/p&gt;
&lt;h4 id=&quot;다시-한번-말하지만-절대-이-이름은-내가-지은게-아니다&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%8B%9C-%ED%95%9C%EB%B2%88-%EB%A7%90%ED%95%98%EC%A7%80%EB%A7%8C-%EC%A0%88%EB%8C%80-%EC%9D%B4-%EC%9D%B4%EB%A6%84%EC%9D%80-%EB%82%B4%EA%B0%80-%EC%A7%80%EC%9D%80%EA%B2%8C-%EC%95%84%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;다시 한번 말하지만 절대 이 이름은 내가 지은게 아니다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다시 한번 말하지만 절대 이 이름은 내가 지은게 아니다!&lt;/h4&gt;
&lt;p&gt;여튼 화면 크기가 줄어들 때 Navbar의 글씨가 로고로 바뀌는걸 구현하고 싶었다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.logo_wrap {
        img {
          width: 100px;
          display: none;
          @media only screen and (max-width: 690px) {
            display: block;
          }
        }
        h1 {
          font-size: 35px;
          font-weight: 500;
        }
      }

@media only screen and (max-width: 690px) {
  .logo_wrap {
    h1 {
      display: none;
    }

    // #image_logo {
    //   display: block;
    // }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;원래는 &lt;code class=&quot;language-text&quot;&gt;logo_wrap&lt;/code&gt; 클래스 내부에 h1만 있었으나, img태그를 추가했음
그리고 img에는 &lt;code class=&quot;language-text&quot;&gt;display: none&lt;/code&gt;이라는 효과를 줘서 가렸음
&lt;code class=&quot;language-text&quot;&gt;visibility: hidden&lt;/code&gt;이라는 속성도 있지만, 그걸 쓰면 화면엔 안 보이지만 자리차지는 한다.
완전 눈속임ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;그래도 언제 한번 쓸 일이 있었으면 좋겠다~ 까먹지 않게!&lt;/p&gt;
&lt;p&gt;여튼.. 스크린의 가로길이가 690px이 되는 순간, &lt;code class=&quot;language-text&quot;&gt;wooridoori.com&lt;/code&gt;이라는 글자가 사라지고 로고가 뜨게 하고 싶었다!
처음엔 h1과 같이 아래에 미디어쿼리 효과를 따로 줬지만 이미지는 뜨지 않았다.
아무래도 우선순위에서 밀려서 그런것 같았다(순규님 왈)
그래서 img태그에 직접 미디어쿼리를 주니까 먹혔다!&lt;/p&gt;
&lt;p&gt;화면을 줄이면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b403f1a0-d3a6-11e9-9be1-d7af2d4620a0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뙇! 이렇게 WD 로고가 뜬다!!!
반응형을 한번도 써보지 않아서 어렵게만 생각했었는데.. 생각보다 괜찮네?
이번에 간단하게 함 해봤으니까 다음번에는 좀 더 자연스럽게 콘텐츠 크기가 변화할 수 있도록 적용해보는게 목표!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;codeAcademy&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 6주차_5일 TIL_구글캠퍼스 프론트앤드 밋업 후기 & 기승전 구글이야기]]></title><description><![CDATA[위코드 34일차. 나의 첫 개발자 밋업 참가. 하지만 나는 네트워킹은 참여 안하고 세션만 듣고 프로젝트 막바지 준비를 위해 다시 위워크로 돌아왔다.]]></description><link>https://gollumnima.github.io//posts/wecode6_5TIL_meetup</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode6_5TIL_meetup</guid><pubDate>Fri, 06 Sep 2019 20:54:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5639bb70-d20e-11e9-b025-070267756e7c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;네이버 블로그 쓰던 시절에 Jandi라는 기업의 초대를 받고 구글 캠퍼스 EXIT Party에 참석한 적이 있는데… 후기는 아래의 링크에서 ㅋㅋ
&lt;a href=&quot;https://blog.naver.com/gollumnima/220613852819&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blog.naver.com/gollumnima/220613852819&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여튼 그 당시엔 마케터로 구캠 이벤트를 참석했는데 오늘은 프론트앤드 개발자로 다시금 발걸음을 해보니 감회가 새로웠다!&lt;/p&gt;
&lt;p&gt;오늘 세션은 세 분의 세션과 네트워킹으로 이루어져 있었는데,
나는 1차 프로젝트 마무리를 위해 네트워킹은 생략하고 다시 선릉 위워크 2호점으로 총총…☆&lt;/p&gt;
&lt;h2 id=&quot;session-1-미디어쿼리와-브레이크-포인트&quot;&gt;&lt;a href=&quot;#session-1-%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC%EC%99%80-%EB%B8%8C%EB%A0%88%EC%9D%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8&quot; aria-label=&quot;session 1 미디어쿼리와 브레이크 포인트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session 1. 미디어쿼리와 브레이크 포인트&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ff171a30-d20e-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;rwdresponsive-web-design&quot;&gt;&lt;a href=&quot;#rwdresponsive-web-design&quot; aria-label=&quot;rwdresponsive web design permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RWD(Responsive Web Design)&lt;/h3&gt;
&lt;p&gt;흔히 반응형이라고 말하는 것의 영어 줄임말. RWD라는 용어를 오늘 알게 되었으니 앞으로 구글링 할 때 좀 더 편해질 것 같다!
내가 증말증말 증맬루 약한 부분쓰… 추석연휴 동안 공부해볼 부분이다.&lt;/p&gt;
&lt;p&gt;세션의 내용을 정리해보자면..
RWD는 크게&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flexible Image&lt;/li&gt;
&lt;li&gt;Fluid Grid&lt;/li&gt;
&lt;li&gt;Media Query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;로 나눌 수 있다. Grid는 약간 친해진 것 같은데 미디어쿼리까지 써줘야 제대로 반응형 맛이 나기 때문에 미디어 쿼리도 꼭 알아야한다.&lt;/p&gt;
&lt;h3 id=&quot;media-query&quot;&gt;&lt;a href=&quot;#media-query&quot; aria-label=&quot;media query permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Media Query&lt;/h3&gt;
&lt;p&gt;미디어 유형과 특정 조건을 확인하는 0개 이상의 식으로 구성되어 있음.
W3shcool에 정의된 내용쓰..
근데 W3school 웬만해선 보지 말라고 하셨다. 중간 과정을 많이 생략하기 때문에! 어쩐지 코드 똑같이 따라 쳐도 결과물이 다르게 나오더라. 내가 똥손인게 문제가 아니였음ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3fools.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3fools.com&lt;/a&gt;
이 사이트 들어가면 더블유쓰리 스쿨 참고하지 말아야 하는 이유가 잘 나와있다. 심심할때 보기!&lt;/p&gt;
&lt;h3 id=&quot;break-point&quot;&gt;&lt;a href=&quot;#break-point&quot; aria-label=&quot;break point permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Break Point&lt;/h3&gt;
&lt;p&gt;레이아웃이 바뀌는 기준점.
요즘은 크게 768 이하, 768이상, 992이상, 1200이상으로 나눈다고 한다.
근데 요즘 또 갤럭시에서 폴드형을 개발했기 때문에 프론트 앤드 개발자들은 더 힘들어질 예정.. 반응형 구현 진쫘… 핰…&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;The 100% correct way to do CSS Breakpoint&lt;/code&gt; 검색고고
설명이 잘 되어있다고 한다. 근데 좀 옛날 아이폰버전 기준이라 320 이하도 있다는데 요즘은 320이하는 잘 안 쓴다니 참고 하도록!&lt;/p&gt;
&lt;h3 id=&quot;break-point-변수로-관리하자&quot;&gt;&lt;a href=&quot;#break-point-%EB%B3%80%EC%88%98%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EC%9E%90&quot; aria-label=&quot;break point 변수로 관리하자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Break point 변수로 관리하자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;less/scss 등 프리 프로레스 활용&lt;/li&gt;
&lt;li&gt;추가나 수정이 생길 경우 필수!&lt;/li&gt;
&lt;li&gt;min-width/max-width 관리
(근데 max는 거의 안 쓴다고 한다. 또다시 참고!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;끝으로&quot;&gt;&lt;a href=&quot;#%EB%81%9D%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;끝으로 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;끝으로…&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기획자, 디자이너간의 꾸준한 대화가 필요!&lt;/li&gt;
&lt;li&gt;예측하지 못한 부분에 대한 대응책을 늘 마련하자&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/227f7980-d210-11e9-b025-070267756e7c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뭔가 멋진 말! 나도 이렇게 멋진 말을 남기는 개발자가 되야지 예~&lt;/p&gt;
&lt;h2 id=&quot;session-2-그로스-핵&quot;&gt;&lt;a href=&quot;#session-2-%EA%B7%B8%EB%A1%9C%EC%8A%A4-%ED%95%B5&quot; aria-label=&quot;session 2 그로스 핵 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session 2. 그로스 핵&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/33738830-d210-11e9-938a-67e6dafc9763/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;영업직군에 있을 때 Gross는 많이 봐서 그 그로스인줄 알았으나 Growth Hack이였던 것…!
&lt;a href=&quot;http://icunow.co.kr/growthhacking-series1/amp/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://icunow.co.kr/growthhacking-series1/amp/&lt;/a&gt;
이 사이트에 설명이 잘 나와 있는 것 같으니 참고쓰!&lt;/p&gt;
&lt;p&gt;두 번째 발표자 분께서는 본인이 회사에서 맡은 TF팀? 프로젝트 팀?? 여튼 새롭게 편성된 팀에 들어가면서 겪은 일화와 예시를 들어주셨다.
삽질의 과정을 탈탈 공개쓰~&lt;/p&gt;
&lt;p&gt;이 Growth Hack에 있어서 빠르게 실험을 해보는 것, 반응이 좋으면 더 파보는 것이 중요하다고 하셨는데
나랑 잘 맞는 분야인거 같기도 하고 ㅋㅋㅋㅋ 나중에 찬찬히 다시 알아봐야겠다!&lt;/p&gt;
&lt;h2 id=&quot;session-3-it직군에서의-이직경험담-공유&quot;&gt;&lt;a href=&quot;#session-3-it%EC%A7%81%EA%B5%B0%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%B4%EC%A7%81%EA%B2%BD%ED%97%98%EB%8B%B4-%EA%B3%B5%EC%9C%A0&quot; aria-label=&quot;session 3 it직군에서의 이직경험담 공유 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session 3. IT직군에서의 이직경험담 공유&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/74624de0-d210-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;웹 마스터란 직군을 나는 처음 들어봤는데, 알고 있다면 암모나이트 당첨이라고 하셨닼ㅋㅋㅋ
요즘은 모든 일들이 분업화가 잘 되어있지만 예전에는 웹 서버 관리하면서 프로그래밍에 디자인까지 하는 직업이 있었다고 한다!
굉장히 전문적이게 보이지만, 한 우물을 전문성있게 더 파는게 좋다고 생각하셔서 프론트앤드 개발자로 넘어오셨다고 했다.&lt;/p&gt;
&lt;p&gt;17년이라는 세월동안 다양한 직군에서 다양한 경험과 공부를 해오신 것 같은데 넘나 대단쓰…&lt;/p&gt;
&lt;h2 id=&quot;위기는-기회다라는-말이-흔한-말이지만-정말-와닿았다&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EA%B8%B0%EB%8A%94-%EA%B8%B0%ED%9A%8C%EB%8B%A4%EB%9D%BC%EB%8A%94-%EB%A7%90%EC%9D%B4-%ED%9D%94%ED%95%9C-%EB%A7%90%EC%9D%B4%EC%A7%80%EB%A7%8C-%EC%A0%95%EB%A7%90-%EC%99%80%EB%8B%BF%EC%95%98%EB%8B%A4&quot; aria-label=&quot;위기는 기회다라는 말이 흔한 말이지만 정말 와닿았다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;‘위기는 기회다’라는 말이 흔한 말이지만 정말 와닿았다.&lt;/h2&gt;
&lt;p&gt;내가 위코드에 오기 전 베이비타이거님의 스터디에 들어가게 된 것도 원래 들어가려던 스터디 그룹 인원이 다 차서였는데,
그 당시엔 날 안 받아준 스터디그룹이 내가 실력이 부족해서 일부러 거부했다는 느낌이 있어서 한 이틀 우울했었다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;또 코드스테이츠 IAT 시험을 2차에서 떨어졌던 것도 그 당시엔 굉장히 큰 일이고 우울한 일이였는데,
그 덕에 나는 위코드를 알게되고 넘나 재밌게 다니고 있다!&lt;/p&gt;
&lt;p&gt;진짜 살면서 다양한 선택의 기회가 있는데, 뭐 하나 안 됐다고 우울+쭈굴 하지 말고…
분명 다른 더 좋은 기회가 찾아오기 마련이니까 그때까지 기다릴거다!&lt;/p&gt;
&lt;p&gt;그런 의미에서… 한 가지 더 !&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7aae48b0-d211-11e9-938a-67e6dafc9763/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;원래 일정대로라면 코드스테이츠 이머시브 과정을 마치고 11월쯤 구글캠퍼스를 누비고 있었어야 했는데… 여튼 지금은 캘리포니아 구글캠퍼스가 아닌 서울 구글캠퍼스에서 강연을 들었다리~~
&lt;br /&gt;내년이나 내후년에는 꼭 구글의 초대를 받고 미국땅을 밟게되지 않을까 하는 생각이 든다!
그때까지 개발공부+영어공부 열심히 해야지&lt;/p&gt;
&lt;p&gt;이게 다 뭔 말이냐하면..!
&lt;br /&gt;Google Map에선 Local Guide로 활동하는 사람들을 위해 파티를 열어주는데, 그걸 신청했고 예선전에서 아쉽게도 통과하지 못했다!
다음번엔 신청영상도 더 멋있게, 소개글도 더 멋있게 써봐야지&lt;/p&gt;
&lt;p&gt;여튼 내가 로컬가이드 활동을 하게 된 계기도 다 네이버 블로그 저품질이 걸려서이다. 안 그랬음 지금도 국내파로 머물렀겠지.. 네이버 버리고 인제 세계적인 플랫폼에 내 소중한 후기들을 공유할거다!&lt;/p&gt;
&lt;p&gt;나의 2018년의 왕성한 활동기록들을 공개해보자면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c77436f0-d211-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d2257d20-d211-11e9-938a-67e6dafc9763/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;지금은 레벨7이다. 빨리 취직하고 여기저기 돌아다녀서 최고레벨을 찍을 예정이다.
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dbdd9640-d211-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;기승전 구글 이야기가 되었지만
여튼… 나의 도전은 계속될예정쓰&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 6주차_4일 TIL_2주짜리 1차 프로젝트를 마치며..]]></title><description><![CDATA[위코드 33일차. 첫 번째 프로젝트를 마무리 하면서 느낀 점들을 정리해보았다.]]></description><link>https://gollumnima.github.io//posts/wecode6_4TIL_project</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode6_4TIL_project</guid><pubDate>Thu, 05 Sep 2019 19:24:04 GMT</pubDate><content:encoded>&lt;p&gt;눈 깜짝할 새에 2주짜리 1차 프로젝트가 끝이 났다!
쫑난 기념으로 후기를 써보려고 한다!!&lt;/p&gt;
&lt;h2 id=&quot;기획이-반이다&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%9A%8D%EC%9D%B4-%EB%B0%98%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;기획이 반이다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기획이 반이다&lt;/h2&gt;
&lt;p&gt;클론할 사이트가 명확하지 않아서 프로젝트 내내 헤맸던 기억이 있다
첫 프로젝트 때는 사이트를 클론하는게 좋을것 같다.. 디자이너의 중요성을 뼈저리게 느꼈다
두루뭉실하게 이렇게 갑시다! 좋습니다! 말고
아주 집요하게 파고 또 파고 들어가야 나중에 고생을 안한다&lt;/p&gt;
&lt;h2 id=&quot;공부를-더-하자&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EB%B6%80%EB%A5%BC-%EB%8D%94-%ED%95%98%EC%9E%90&quot; aria-label=&quot;공부를 더 하자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공부를 더 하자&lt;/h2&gt;
&lt;p&gt;프로젝트를 진행하면서 나의 부족한 점들이 너무 많이 보였다. 더 하자, 공부!
팀원들을 이끌어 갈정도는 안 되도 누구 한 명에게 의지하지 않는 사람이 되어야 할 것 같다
특히 백과 프론트의 영역에 대한 개념이 모호해서 내가 요청해야 하는 자료도 백에서 해주길 바랐던것 같다. 프론트의 역할을 명확하게 이해하고, 필요한 자료를 요청해야 할 것 같다.&lt;/p&gt;
&lt;h2 id=&quot;소통의-중요성&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%86%B5%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1&quot; aria-label=&quot;소통의 중요성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소통의 중요성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;회의록을 작성해서 나중에 서로 딴 소리 안 나오게 증거물을 확실히 남기자&lt;/li&gt;
&lt;li&gt;이미 commit 메시지를 남겼어도 그 내용은 팀원들에게 공유하자&lt;/li&gt;
&lt;li&gt;trello 활용을 잘하자(이번 프로젝트 때 첫 3-4일 말고 트렐로에 접속을 잘 안 했다)&lt;/li&gt;
&lt;li&gt;진행상황에 대해선 프론트끼리 뿐만 아니라 백과 프론트끼리도 활발하게 공유하자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;소소하지만-체력관리&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%86%8C%ED%95%98%EC%A7%80%EB%A7%8C-%EC%B2%B4%EB%A0%A5%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;소소하지만 체력관리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소소하지만 체력관리&lt;/h2&gt;
&lt;p&gt;프로젝트는 2주면 끝나지만 내 인생은 2주 후에 끝나는게 아니다!
잘 먹고, 잘 자고, 운동도 열심히 해야한다
물론 저 세 가지를 다 지키는 건 어렵겠지만..!
잠을 잘 못 잔 날엔 달달한 디저트라도 먹는다던지.. 이틀에 한 번이라도 잠들기 전 최소 20분이라도 스트레칭을 한다던지 해줘야 한다&lt;/p&gt;
&lt;p&gt;여튼… 우리의 결과물&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b185bb10-d20d-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b7bb6430-d20d-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;멤버소개 페이지가 핵심인데, 서프라이즈 + 인권보호를 위해 비공개쓰 ㅋㅋㅋ
여튼 부족한 저와 함께 하느라 고생한 팀원분들, 멘토님들, 저에게 도움을 주신 다른팀 사람들 모두모두 감사합니다. 수고 많으셨습니다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 6주차_3일 TIL_도전! AWS 서버 열기]]></title><description><![CDATA[위코드 32일차. 우리가 만든 프로젝트를 로컬서버가 아닌 공공 서버(?)에서 누구나 볼 수 있게 하려면 AWS server를 이용해야 한다. 아마존과의 우당탕탕 험난한 여정을 소개해본다.]]></description><link>https://gollumnima.github.io//posts/wecode6_3TIL_AWS_server</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode6_3TIL_AWS_server</guid><pubDate>Wed, 04 Sep 2019 16:34:04 GMT</pubDate><content:encoded>&lt;p&gt;미리 말하지만 타이틀에 ‘도전’ 이라고 써 있는 것처럼 성공적인 결과물은 아닙니다…
그냥 이런 과정을 거치면 되는구나 정도로 넘어가셔야 합니다.
이번 포스팅의 설명은 친절한 편이 아닙니다.. 중간중간 넘긴 부분이 많습니다 ㅠㅠ
&lt;br /&gt;&lt;br /&gt;왜냐… aws에서 자꾸 인증문제가 생겨서 세션 중간중간에 뻘짓을 했기 때문이져&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8bb9a890-cfa3-11e9-8b44-77b2e387131d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;idcinternet-data-center란&quot;&gt;&lt;a href=&quot;#idcinternet-data-center%EB%9E%80&quot; aria-label=&quot;idcinternet data center란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IDC(Internet Data Center)란?&lt;/h2&gt;
&lt;p&gt;사진과 같은 서버 방 같은거! 층이나 장을 빌려서 서버 쓰는 것.
But, 관리 비효율성, 인건비… 등의 문제로 인해
가상화 해보자! 해서 나온게 바로!&lt;/p&gt;
&lt;h2 id=&quot;ec2&quot;&gt;&lt;a href=&quot;#ec2&quot; aria-label=&quot;ec2 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EC2&lt;/h2&gt;
&lt;p&gt;아마존 입장에선 컴퓨터 하나 만든다고 생각하면 되고, 우리는 아마존한테 서버를 빌린다고 생각하면 된다.&lt;/p&gt;
&lt;p&gt;우리는 돈을 내면 안되니깐 프리티어라고 750시간 무료로 쓸 수 있는 걸 쓸것. 사용한 기준으로 월 750시간이 무료이다! 아마..?ㅋㅋ 자세한 건 aws 홈페이지에서 확인할 수 있다&lt;/p&gt;
&lt;p&gt;그 밖에 알면 좋은 것들…&lt;/p&gt;
&lt;h2 id=&quot;secuirty-group&quot;&gt;&lt;a href=&quot;#secuirty-group&quot; aria-label=&quot;secuirty group permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Secuirty Group&lt;/h2&gt;
&lt;p&gt;IP주소에 대한 방화벽&lt;/p&gt;
&lt;h2 id=&quot;rdsrelational-database-service&quot;&gt;&lt;a href=&quot;#rdsrelational-database-service&quot; aria-label=&quot;rdsrelational database service permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RDS(Relational Database Service)&lt;/h2&gt;
&lt;p&gt;AWS의 데이터베이스 서비스&lt;/p&gt;
&lt;h2 id=&quot;load-balancer&quot;&gt;&lt;a href=&quot;#load-balancer&quot; aria-label=&quot;load balancer permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Load Balancer&lt;/h2&gt;
&lt;p&gt;동일한 서버가 있으면 load balancer가 중간에서 골고루 들어가도록(?) 분배를 해줌&lt;/p&gt;
&lt;h2 id=&quot;ec2-생성해보자&quot;&gt;&lt;a href=&quot;#ec2-%EC%83%9D%EC%84%B1%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;ec2 생성해보자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EC2 생성해보자!&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;서비스탭의 -EC2 클릭 그리고 인스턴스 시작 누름&lt;/li&gt;
&lt;li&gt;우분투서버 18.04 선택(프리티어 사용 가능이라고 써있음)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;인스턴스 세부 정보 구성 설정은 이렇게..&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;인스턴스 개수 : 1&lt;/li&gt;
&lt;li&gt;네트워크 : 기본값&lt;/li&gt;
&lt;li&gt;서브넷(Sub-network) : 기본값 2a(처음껄로)&lt;/li&gt;
&lt;li&gt;퍼블릭 ip 자동할당 : 기본값 활성화로&lt;/li&gt;
&lt;li&gt;종료방식 : 중지 =&gt; 종료 하면 서버 날려버림(우발적인 종료로부터 보호 체크)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;키-발급받기&quot;&gt;&lt;a href=&quot;#%ED%82%A4-%EB%B0%9C%EA%B8%89%EB%B0%9B%EA%B8%B0&quot; aria-label=&quot;키 발급받기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키 발급받기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/66a8d2f0-cfae-11e9-a0b3-652f9ace9760/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;키 생성하고 잘 보관해야함.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1e5ae2d0-cfaf-11e9-82ed-97bde11d53f5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;키 다운하고 인스턴스 시작해야함.
한번 안 받으면 끝임&lt;/p&gt;
&lt;h2 id=&quot;이어서&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%96%B4%EC%84%9C&quot; aria-label=&quot;이어서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이어서&lt;/h2&gt;
&lt;p&gt;터미널에서 &lt;code class=&quot;language-text&quot;&gt;cd ~/.ssh&lt;/code&gt; 한담에&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ssh-keygen&lt;/code&gt; 하면 키를 생성할 수 있음&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/581c5b10-d082-11e9-972a-931afde2dc39/image.png&quot; alt=&quot;image.png&quot;&gt;
엔터 쭉쭉~ 저기서 비번 설정하면 실행 할때마다 비번 입력해야되서 ㄴㄴ&lt;/p&gt;
&lt;p&gt;다시 ssh 디렉토리에서 ls 해보면 &lt;code class=&quot;language-text&quot;&gt;id_rsa id_rsa.pub known_hosts&lt;/code&gt; 세개가 생겼음&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cat id_rsa.pub&lt;/code&gt; 하면 키 생성할 수 있음
키 복붙하고 깃허브로 고고&lt;/p&gt;
&lt;p&gt;github settings 들어가서 SSH Keys 누르면 New SSH Keys 눌러
title은 내맘대로 하삼~ 나는 ubuntusiro로 했음&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b6a71580-d082-11e9-9f4f-632c92c19a43/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;내 repository로 들어가서..
git clone 클릭하면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f267de10-d082-11e9-a122-65ed52d92474/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이게 뜨는데 Use SSH 누르고 주소 복붙&lt;/p&gt;
&lt;p&gt;git clone 하고 복붙한 주소 붙이면 끝~&lt;/p&gt;
&lt;h2 id=&quot;우분투-서버-열기&quot;&gt;&lt;a href=&quot;#%EC%9A%B0%EB%B6%84%ED%88%AC-%EC%84%9C%EB%B2%84-%EC%97%B4%EA%B8%B0&quot; aria-label=&quot;우분투 서버 열기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;우분투 서버 열기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ssh -i 다운로드/dooreplay.pem ubuntu@나의 aws ip주소&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;띄어쓰기 주의! ssh 하고 띄어쓰기 한 담에 -i 고고!&lt;br /&gt;
그담에… 뭐했더라… 일단 이거&lt;/p&gt;
&lt;h3 id=&quot;ssh-키-생성&quot;&gt;&lt;a href=&quot;#ssh-%ED%82%A4-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;ssh 키 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ssh 키 생성&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;이메일주소&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;하면 키가 새로 생성된것임
ssh 디렉토리로 들어간담에 &lt;code class=&quot;language-text&quot;&gt;cat id_rsa.pub&lt;/code&gt; 하시오&lt;/p&gt;
&lt;p&gt;여기서 나온 키값을 예리님께 보내면 성공~
나는 위코드 기준으로 설명을 썼지만.. 누구에게 이 키 값을 공유하면 좋을진 모르겠다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;그러고 나서&lt;/p&gt;
&lt;h3 id=&quot;우분투에-node랑-다시-깔기-왜냐&quot;&gt;&lt;a href=&quot;#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90-node%EB%9E%91-%EB%8B%A4%EC%8B%9C-%EA%B9%94%EA%B8%B0-%EC%99%9C%EB%83%90&quot; aria-label=&quot;우분투에 node랑 다시 깔기 왜냐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;우분투에 node랑 다시 깔기 왜냐&lt;/h3&gt;
&lt;p&gt;우분투 서버엔 아무것도 안 깔려있거든. 내 컴터랑 다르게!
그냥 새 컴터 샀다고 생각하고 개발에 필요한 프로그램들을 다 다운받으면 된다. &lt;br /&gt;
&lt;code class=&quot;language-text&quot;&gt;curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo apt-get update&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;git에서-repository-clone해오기&quot;&gt;&lt;a href=&quot;#git%EC%97%90%EC%84%9C-repository-clone%ED%95%B4%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;git에서 repository clone해오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git에서 repository clone해오기&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git clone 프로젝트 repo 주소&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그러면 우리는 아마존 서버에 repo를 까는거!&lt;/p&gt;
&lt;p&gt;일단 &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt; 하고.. 안되면 갓 sudo 찬양하라!
&lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 명령어를 쓰면 웬만한 건 다 해결쓰&lt;/p&gt;
&lt;p&gt;(과정 중간중간에 &lt;code class=&quot;language-text&quot;&gt;npm -v&lt;/code&gt; 이런식으로 버전 체크 꼭! 그럼 깔았는지 안 깔았는지 알 수 있음)&lt;/p&gt;
&lt;h3 id=&quot;build하기&quot;&gt;&lt;a href=&quot;#build%ED%95%98%EA%B8%B0&quot; aria-label=&quot;build하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;build하기&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; 명령어를 쓰면 모든 개발코드들이 합쳐지게 됨&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vi&lt;/code&gt; 명령어 쓰면 코드편집기 쓸 수 있음&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ddae5430-d088-11e9-a122-65ed52d92474/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오와 신기신기!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const express = require(&amp;#39;express&amp;#39;);
const path = require(&amp;#39;path&amp;#39;);
const env = process.env.ENV;
const app = express();
app.get(&amp;#39;/ping&amp;#39;, function(req, res) {
  res.send(&amp;#39;pong&amp;#39;);
});
app.use(&amp;#39;/&amp;#39;, express.static(path.join(__dirname, &amp;#39;build&amp;#39;)));
app.get(&amp;#39;/*&amp;#39;, function (req, res) {
  res.set({
    &amp;quot;Cache-Control&amp;quot;: &amp;quot;no-cache, no-store, must-revalidate&amp;quot;,
    &amp;quot;Pragma&amp;quot;: &amp;quot;no-cache&amp;quot;,
    &amp;quot;Date&amp;quot;: new Date()
  });
  res.sendFile(path.join(__dirname, &amp;#39;build&amp;#39;, &amp;#39;index.html&amp;#39;));
});
app.listen(8080, () =&amp;gt; {
  console.log(&amp;#39;listening: &amp;#39; + env);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이거 붙붙
서버주소 8080을 3000으로 바꾸고
&lt;code class=&quot;language-text&quot;&gt;esc:wq + Enter&lt;/code&gt;
이 명령어 쓸 때 주의사항.. 한꺼번에 누르지 말고 순차적으로 누르자.
맴이 급해서 한방에 누르면 멋없다&lt;/p&gt;
&lt;p&gt;그 담엔..
&lt;code class=&quot;language-text&quot;&gt;npm install express&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;node server.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;하면 떠야 하는데!!!!난 자꾸 node.scss가 안 깔려 있단 에러가 났다..
이렇게.
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e70d2670-d20c-11e9-93d3-efc48314c767/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7-2019-09-06-20-07-55.png&quot; alt=&quot;스크린샷, 2019-09-06 20-07-55.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;우분투의 문젠가 싶었는데 맥을 쓰는 동기님도 나와 같은 에러가 떴다… 그 분이 맥을 사기 당한 것인가.. 아니면 나와 같은 똥손인가 ㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼 이 에러에 대해 해결하려면 EC2를 생성하는것부터 다시 해야한다는데… 추석연휴때 다시 한번 도전할 예정&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 6주차_2일 TIL_도전! 크롤링 해보기]]></title><description><![CDATA[위코드 31일차. 오랜만에 약간 백 이야기! 언제 한번 해보고 싶었던 크롤링... 위코드에서 세션이 열려서 드디어 나도 한번 해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode6_2TIL_crawling</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode6_2TIL_crawling</guid><pubDate>Tue, 03 Sep 2019 16:16:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/602d4930-d209-11e9-93d3-efc48314c767/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;웹-크롤링이란&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;웹 크롤링이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 크롤링이란?&lt;/h2&gt;
&lt;p&gt;Web scraping. 웹사이트에서 원하는 정보를 추출하는 일!
데이터를 긁어온다는 의미에서 아이스크림을 긁는게 생각나서 오늘의 썸네일은 아이스크림!&lt;/p&gt;
&lt;p&gt;데이터 분석에 대한 수요가 증가하고 이에 따라 자료를 얻는 원천으로 웹을 자주 드는데, 이 웹을 가져와서 분석을 할 수 있는 자료 형태로 바꾸는게 바로 크롤링!&lt;br/&gt;
http request 통해서 http가 출력해주는 api를 통해 json 데이터를 가져오는 것을 말한다.&lt;/p&gt;
&lt;h2 id=&quot;크롤링-관련-사이트&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81-%EA%B4%80%EB%A0%A8-%EC%82%AC%EC%9D%B4%ED%8A%B8&quot; aria-label=&quot;크롤링 관련 사이트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링 관련 사이트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;서울시 공공 데이터 포털&lt;/li&gt;
&lt;li&gt;공공 데이터 포털&lt;/li&gt;
&lt;li&gt;일별 박스 오피스 API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;크롤링은-책임감있게&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81%EC%9D%80-%EC%B1%85%EC%9E%84%EA%B0%90%EC%9E%88%EA%B2%8C&quot; aria-label=&quot;크롤링은 책임감있게 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링은 책임감있게..!&lt;/h2&gt;
&lt;p&gt;크롤링은 자유지만, 웹사이트 무단 크롤링은 &lt;em&gt;불법!&lt;/em&gt; &lt;br /&gt;
개인 영리적 이익을 취하지 않는 경우나 시스템에 가하지 않으면 크게 문제 되지 않지만 저작권에 대해선 항상 염두해두어야 한다. &lt;br /&gt;
&lt;br /&gt;Robots에 disabled 써있으면 크롤링 하지말라는 뜻! 잘 확인하고 항상 조심하자!&lt;/p&gt;
&lt;h2 id=&quot;how-to&quot;&gt;&lt;a href=&quot;#how-to&quot; aria-label=&quot;how to permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;how to?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;scrapy : 규모가 클 때 쓰기, python에 있는 크롤링을 위한 라이브러리 &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;urllib : fetch하는 느낌으로 쓸 수 있음&lt;/li&gt;
&lt;li&gt;selenium : 기억이 안남… 이름 예쁨 원석 이름 같음ㅋㅋ&lt;/li&gt;
&lt;li&gt;beautiful soup : 파싱된 response를 객체화 시켜주는 툴&lt;/li&gt;
&lt;li&gt;requests - 소셜로그인 기능 구현할 때 백에서 쓰는 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
js에서는…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;puppeteer&lt;/li&gt;
&lt;li&gt;apify&lt;/li&gt;
&lt;li&gt;cheerio
같은게 있다고 한다.. 내가 세션때 제대로 받아 적은게 맞는지 모르겠지만 여튼ㅋㅋㅋ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;해보자-실습&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EB%B3%B4%EC%9E%90-%EC%8B%A4%EC%8A%B5&quot; aria-label=&quot;해보자 실습 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해보자 실습!&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;requests 깔기
&lt;code class=&quot;language-text&quot;&gt;pip install requests&lt;/code&gt;
가상환경 구축은 생략~&lt;/li&gt;
&lt;li&gt;bs4 깔기
&lt;code class=&quot;language-text&quot;&gt;pip install bs4&lt;/code&gt;
(beautiful spoon 4탄임.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일단 이 두개 깔면 크롤링할 준비 완료쓰~&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;python 파일 하나 만들기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;request 하면 화면 전체를 다 가져오는 것 -&gt; 터미널에서 확인할 수 있음&lt;/p&gt;
&lt;p&gt;html까지 하면 string만 나와서 복잡쓰
예쁜스푼을 쓰자! 객체형태로 보여줌&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import requests
from bs4 import BeautifulSoup

req = requests.get(&amp;#39;http://www.mnet.com/chart/TOP100/20190826&amp;#39;)


html = req.text

soup = BeautifulSoup(html, &amp;#39;html.parser&amp;#39;)

mnet_songs = soup.select(
    &amp;#39;tr &amp;gt; td.MMLItemTitle &amp;gt; div &amp;gt; div.MMLITitle_Box.info &amp;gt; div.MMLITitleSong_Box &amp;gt; a.MMLI_SongInfo&amp;#39;
)

for song in mnet_songs :
    print(song.text)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for문을 저렇게 쓰는것도 넘 신기하고…
빽의 세계는 암튼 다 신기함!
&lt;br /&gt;그치만 일단 나는 프론트 할거지롱&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;python crawling.py&lt;/code&gt; 입력하면 터미널에 결과 나옴&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f3ad700-c88d-11e9-bc39-4fa6ed49fec8/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;br /&gt;핵신기함ㅋㅋㅋㅋㅋㅋㅋㅋㅋ 대박…
근데 프론트랑 다르게 결과물을 웹페이지가 아닌 터미널로 확인해야 한다는 점이 넘 불편쓰..☆&lt;/p&gt;
&lt;p&gt;중간에 내쪽에서 뭐가 안 되가지고 중간 설명은 생략…!
결과물 공개해본다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import requests
from bs4 import BeautifulSoup
from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.sql import *

engine = create_engine(&amp;#39;sqlite:///music.db&amp;#39;)
Base = declarative_base()

class Music(Base):
    __tablename__ = &amp;#39;musics&amp;#39;
    id = Column(Integer, primary_key=True)
    rank = Column(String(50))
    songs = Column(String(50))
    singer = Column(String(50))
    album = Column(String(50))

Music.__table__.create(bind=engine, checkfirst=True)


Session = sessionmaker(bind=engine)
session = Session()

req = requests.get(&amp;#39;http://mnet.com/chart/TOP100/20190826&amp;#39;)

html = req.text

soup = BeautifulSoup(html, &amp;#39;html.parser&amp;#39;)

rank = soup.select(
    &amp;#39;tr &amp;gt; td.MMLItemRank &amp;gt; div &amp;gt; span&amp;#39;
)

my_songs = soup.select(
    &amp;#39;tr &amp;gt; td.MMLItemTitle &amp;gt; div &amp;gt; div.MMLITitle_Box.info &amp;gt; div.MMLITitleSong_Box &amp;gt; a.MMLI_Song&amp;#39;
)

singer = soup.select(
    &amp;#39;tr &amp;gt; td.MMLItemTitle &amp;gt; div &amp;gt; div.MMLITitle_Box.info &amp;gt; div.MMLITitle_Info &amp;gt; a.MMLIInfo_Artist&amp;#39;
)

album = soup.select(
    &amp;#39;tr &amp;gt; td.MMLItemTitle &amp;gt; div &amp;gt; div.MMLITitle_Box.info &amp;gt; div.MMLITitle_Info &amp;gt; a.MMLIInfo_Album&amp;#39;
)

music_chart = []

for item in zip(rank, my_songs, singer, album):
    music_chart.append(
        {
            &amp;#39;rank&amp;#39; : item[0].text,
            &amp;#39;song&amp;#39; : item[1].text,
            &amp;#39;singer&amp;#39; : item[2].text,
            &amp;#39;album&amp;#39;  : item[3].text,
       }
    )

for element in music_chart:
    print(element)

for element in music_chart:
    result =  Music(rank=element[&amp;#39;rank&amp;#39;],
                    songs=element[&amp;#39;song&amp;#39;],
                    singer=element[&amp;#39;singer&amp;#39;],
                    album=element[&amp;#39;album&amp;#39;]
    )
    session.add(result)
    session.commit()

request = session.query(Music).all()

for row in request:
   print(row.rank,row.songs,row.singer,row.album)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기억이 잘 안나지만 중간에 &lt;code class=&quot;language-text&quot;&gt;pip install sqlalchemy&lt;/code&gt; 설치했음
여튼 중간에 컴터가 멈춰서 강제종료 했던 기억이 있다!&lt;/p&gt;
&lt;p&gt;나의 결과물…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c56ff520-c892-11e9-ad06-c7058f1fcfa5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까 노래제목까진 잘 나왔었는데…아놔 웬 이상한 문자열들이 뙇..!
멘토님의 코드를 똑같이 복붙했는데 나만 왜 이런가 했더니만 우분투 문제였다 &lt;br /&gt;
&lt;br /&gt;애증 말고 증뿐인 우분투.. 증증증이다 증말 ㅡ,.ㅡ
우분투 바보멍청이!&lt;/p&gt;
&lt;p&gt;여튼 나도 해봤다, 크롤링!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 6주차_1일 TIL_fetch 쓸때 주의사항(feat.타요)]]></title><description><![CDATA[위코드 30일차. 지난번 fetch 포스팅에 이어서 또 다시 써 보는 fetch 포스팅. 백엔드에서 주는 실 데이터가 아닌 내가 임의로 만든 데이터json 파일을 fetch로 불러올 때의 주의사항을 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode6_1TIL_fetch</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode6_1TIL_fetch</guid><pubDate>Mon, 02 Sep 2019 16:02:04 GMT</pubDate><content:encoded>&lt;p&gt;2주 프로젝트의 2주일 차 첫 날… 맞나? 아니면 1주차의 주말인가? 블로깅이 밀려서 정확한 날짜는 기억이 나지 않는다 ㅠㅠ&lt;br/&gt;
여튼 .. 원래 레시피 목록에는 하드코딩이 되어 있었는데, 백앤드에서 데이터를 보내줬다고 가정하면서 json data를 fetch로 불러오는 걸 연습해보았다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;quot;react&amp;quot;;
import &amp;quot;./BestRecipe.scss&amp;quot;;

class BestRecipe extends Component {
  constructor(props) {
    super(props);
    this.state = {
      error: null,
      isLoaded: false,
      data: []
    };
  }
  componentDidMount() {
    fetch(&amp;quot;../../Pages/Home/Data.json&amp;quot;)
      .then(response =&amp;gt; response.json())
      .then(
        result =&amp;gt; {
          console.log(result, &amp;quot;b4&amp;quot;);

          this.setState({
            isLoaded: true,
            data: result
          });
          console.log(result, &amp;quot;after&amp;quot;);
        },
        error =&amp;gt; {
          this.setState({
            isLoaded: true,
            error
          });
        }
      );
  }

  render() {
    const { error, isLoaded, data } = this.state;
    if (error) {
      console.log(data, &amp;quot;얍얍1&amp;quot;);
      return &amp;lt;div&amp;gt;Error in loading&amp;lt;/div&amp;gt;;
    } else if (!isLoaded) {
      console.log(data, &amp;quot;얍얍2&amp;quot;);
      return &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt;;
    } else {
      console.log(data, &amp;quot;얍얍3&amp;quot;);
      return (
        &amp;lt;&amp;gt;
          {data.map(food =&amp;gt; (
            &amp;lt;div className=&amp;quot;home_recipe_wrapper&amp;quot;&amp;gt;
              &amp;lt;div className=&amp;quot;home_recipe_container&amp;quot;&amp;gt;
                &amp;lt;div className=&amp;quot;home_recipe_img_container&amp;quot;&amp;gt;
                  &amp;lt;img url={food.img} alt={food.name}&amp;gt;&amp;lt;/img&amp;gt; )
                  &amp;lt;div className=&amp;quot;home_recipe_words_container&amp;quot;&amp;gt;
                    &amp;lt;h4 className=&amp;quot;home_recipe_category&amp;quot;&amp;gt;{food.des}&amp;lt;/h4&amp;gt;
                    &amp;lt;h2 className=&amp;quot;home_recipe_name&amp;quot;&amp;gt;{food.name}&amp;lt;/h2&amp;gt;
                  &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          ))}
        &amp;lt;/&amp;gt;
      );
    }
  }
}

export default BestRecipe;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것이 나의 코드…&lt;br /&gt;
&lt;a href=&quot;https://howtocreateapps.com/json-html-react-tutorial/#3_Fetching_an_API&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://howtocreateapps.com/json-html-react-tutorial/#3_Fetching_an_API&lt;/a&gt; &lt;br /&gt;
이 사이트를 참고해보았다! 근데 나는 역시나 똥손이였다.
분명 함수식에서의 에러는 다 제거했는데… 이미지와 텍스트가 로드되지 않는다!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b55688c0-cbe4-11e9-924b-950387af45d2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;response 부분이 의심스러워서 콘솔도 찍어봤는데 이렇게…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fetch(&amp;quot;../../Pages/Home/Data.json&amp;quot;).then(response =&amp;gt;
      console.log(response.json())
    );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과는…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/65d5a3c0-cbe5-11e9-af3c-f5a01e555467/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Unexpected token &amp;lt; in JSON at position 0&lt;/code&gt;라니.. 띠용????
그래서 wecode 전용 stack overflow에 문의를 해봤다!&lt;/p&gt;
&lt;p&gt;콘솔을 찍어보라고 하셔서 그것도 해보았다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class BestRecipe extends Component {
  constructor(props) {
    super(props);
    this.state = {
      error: null,
      isLoaded: false,
      data: []
    };
  }
  componentDidMount() {
    fetch(&amp;quot;../../Pages/Home/Data.json&amp;quot;)
      .then(response =&amp;gt; response.json())
      .then(response =&amp;gt; console.log(response, &amp;quot;응답하라!&amp;quot;))
      .then(
        result =&amp;gt; {
          this.setState({
            isLoaded: true,
            data: result
          });
        },
        error =&amp;gt; {
          this.setState({
            isLoaded: true,
            error
          });
        }
      )
      .then(result =&amp;gt; console.log(result, &amp;quot;결과!!&amp;quot;));
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;찍어 보았는데… 반응은 result가 undefined라는 것.. 네트워크 탭도 확인해보았는데..&lt;br /&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b1492160-cbe5-11e9-af3c-f5a01e555467/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;br /&gt;
200 OK면 괜찮은거 같은데 왜 안될까 왜 왜???
여기서 문제는 두 가지였는데… 우리는 타요만 기억하면 된다 &lt;br /&gt;
&lt;br /&gt; &lt;img src=&quot;https://images.velog.io/post-images/dooreplay/32896ed0-cc48-11e9-ac8e-357588005325/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;타고-타고타고-집요하게-타고들어가기&quot;&gt;&lt;a href=&quot;#%ED%83%80%EA%B3%A0-%ED%83%80%EA%B3%A0%ED%83%80%EA%B3%A0-%EC%A7%91%EC%9A%94%ED%95%98%EA%B2%8C-%ED%83%80%EA%B3%A0%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0&quot; aria-label=&quot;타고 타고타고 집요하게 타고들어가기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타고 타고타고 집요하게 타고들어가기!&lt;/h1&gt;
&lt;p&gt;그 ‘탄다는 것’에서의 포인트는 두 가지이다.&lt;/p&gt;
&lt;h2 id=&quot;fetch함수를-쓰려면-public-폴더-하에서-관리하기&quot;&gt;&lt;a href=&quot;#fetch%ED%95%A8%EC%88%98%EB%A5%BC-%EC%93%B0%EB%A0%A4%EB%A9%B4-public-%ED%8F%B4%EB%8D%94-%ED%95%98%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;fetch함수를 쓰려면 public 폴더 하에서 관리하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fetch함수를 쓰려면 public 폴더 하에서 관리하기&lt;/h2&gt;
&lt;p&gt;fetch함수 특성상 정해진 url에 접속해서 파일을 불러오는데, 그 대상이 되는게 바로 public 폴더이다. 브라우저에서 public 바로 밑에 있는 index.html에 접근해서 화면을 나오게 하는 것…!
나의 경로를 다시 보자면…&lt;code class=&quot;language-text&quot;&gt;../../Pages/Home/Data.json&lt;/code&gt;
이렇게 두 번 이상 경로를 타게 되면 build 폴더를 벗어나기 때문에 json.data를 불러올 수 없는 것이였다!
이 경우는 public 폴더안에 data.json 파일을 옮기고 &lt;code class=&quot;language-text&quot;&gt;fetch(&amp;quot;./data.json&amp;quot;)&lt;/code&gt; 경로 설정을 다음과 같이 해주면 된다리&lt;/p&gt;
&lt;h2 id=&quot;데이터가-src폴더에-있을땐-import-하기&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-src%ED%8F%B4%EB%8D%94%EC%97%90-%EC%9E%88%EC%9D%84%EB%95%90-import-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;데이터가 src폴더에 있을땐 import 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터가 src폴더에 있을땐 import 하기&lt;/h2&gt;
&lt;p&gt;src폴더 내에 있는 json파일은 import 하기! 브라우저가 화면을 띄울때 index.js 파일부터 읽는데.. 거기선 또 Routes로 연결 되어있고.. Routes로 들어가면 또 거기서 import된 파일들을 확인하고 계속 타고타고타고타고 올라갑니다. 근데! 저는 위에서 json data를 한번도 import 하지 않았기 때문에 undefined 값이 불려진 것이다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;html로 페이지를 만들때는 js파일에서 fetch를 쓰는 게 훨씬 간단했는데
react로 넘어가니까 넘 복잡한것 같다.. 그래도 경로설정만 잘해주면 된다는것&lt;/p&gt;
&lt;p&gt;다시 한번 말하지만 우리가 기억할 것은 타요다!
&lt;br /&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/32896ed0-cc48-11e9-ac8e-357588005325/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;br /&gt;react가 파일을 어떤 경로로 타고타고타고타고 들어가는지 그 원리만 알면 해결쓰~~
백엔드에서 주소 받아와서 한 fetch에 대해선 다음 이 시간에 정리할 예정!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_5일 TIL_Check git out! 자주 쓰는 git 용어 정리 및 간단 팁]]></title><description><![CDATA[위코드 29일차. Git과 조금 멀어졌다 가까워 지는 시간. 개발자면서 Git이랑 안 친하면 개발자라 할 수 없다. Git과 절친이 되기 위한 그 첫 번째 여정이 지금 바로 시작된다.]]></description><link>https://gollumnima.github.io//posts/wecode5_5TIL_git</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_5TIL_git</guid><pubDate>Fri, 30 Aug 2019 11:14:04 GMT</pubDate><content:encoded>&lt;h2 id=&quot;github-repository-만들기&quot;&gt;&lt;a href=&quot;#github-repository-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;github repository 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;github repository 만들기&lt;/h2&gt;
&lt;p&gt;repo 새로 만들 때마다 자꾸 검색하게 되서 이번 기회에 정리하기로 마음먹음!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ed22c560-bccc-11e9-af0d-7bc87d670a4f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;깃허브에서 new repository 클릭해서 먼저 깃허브 상에 repo를 생성&lt;/li&gt;
&lt;li&gt;terminal에 &lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt; 입력. 로컬저장소를 만드는 과정이다. 근데 이미 CRA를 실행했으면 초기화가 된 상태라 이 과정은 생략해도 된다!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt; (상태 확인하는건데 필수는 아님)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt; 파일 전부 올리기. 파일 하나씩 올리기는 &lt;code class=&quot;language-text&quot;&gt;gi add 경로/파일이름&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git commit -m &amp;quot;day1 completed&amp;quot;&lt;/code&gt; 따옴표 안은 원하는 문구를 넣는거지만, 최대한 명확한 문구를 넣기&lt;/li&gt;
&lt;li&gt;git repository 주소를 복사한 다음 &lt;code class=&quot;language-text&quot;&gt;git remote add origin 주소이름&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git remote -v&lt;/code&gt; 로컬저장소와 원격저장소가 연결됨&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin master&lt;/code&gt; 커밋한 파일을 원격저장소에 올리기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;만약에 이게 프로젝트라면 처음 초기 세팅한 사람만 master에 push를 하고,
그 이후에는 각자의 branch로 push를 하면 관리자가 merge 작업을 통해 병합해준다!&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-진행시&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A7%84%ED%96%89%EC%8B%9C&quot; aria-label=&quot;프로젝트 진행시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 진행시…&lt;/h2&gt;
&lt;p&gt;각자 파일을 수정하고 업로드 하려면…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git commit -m &amp;quot;home component completed&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin feature/home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;push까지 하고 프로젝트 repo가 있는 github 페이지로 들어가서 New Pull Request 해준다&lt;/li&gt;
&lt;li&gt;관리자가 merge를 하면 그 master를 받고 또 새 가지를 파서 작업 시작!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;branch-재활용-금지&quot;&gt;&lt;a href=&quot;#branch-%EC%9E%AC%ED%99%9C%EC%9A%A9-%EA%B8%88%EC%A7%80&quot; aria-label=&quot;branch 재활용 금지 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;branch 재활용 금지&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e30ec630-cc5a-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;초기 세팅은 branch가 master이다. 그 이후 파트별로 분업을 하는데.. 각자의 branch를 새로 파야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 확인
&lt;code class=&quot;language-text&quot;&gt;git branch&lt;/code&gt;를 하면 터미널에서 나의 branch 목록을 보여준다. 목록에서 나가려면 &lt;code class=&quot;language-text&quot;&gt;ESC+;+q&lt;/code&gt;를 순서대로 눌러준다!&lt;/li&gt;
&lt;li&gt;브랜치 생성
&lt;code class=&quot;language-text&quot;&gt;git branch feature/home&lt;/code&gt; 이런식으로…!&lt;/li&gt;
&lt;li&gt;체크아웃
&lt;code class=&quot;language-text&quot;&gt;git checkout feature/menu&lt;/code&gt; 쳌아웃 뒤에 이동하고 싶은 브랜치명 입력하기!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여튼 여태 나는 기능별로 브랜치 뚫는것 까진 잘 했는데… 각각 페이지에서 야금야금 수정할 사항이 생기면 이미 pr 날리고 merge된 상태에서 또 다시 작업이 끝난 브랜치로 돌아갔다. &lt;br/&gt;하지만 재활용 금지!! 버리고 새 가지를 파야 한다…!&lt;br/&gt;
내가 처음에 작업하던 브랜치는 맨 처음 master인데… 공동작업을 하다보면 완료 시점이 달라지고, 다들 미래를 향해 가고 있는데 나만 과거에 머무르게 되므로 시점 차이가 나다 보니 자꾸 충돌이 이루어 지는 것..&lt;/p&gt;
&lt;p&gt;나의 예시를 살펴보자.&lt;/p&gt;
&lt;p&gt;충돌남이 났다고 터미널에 뜬다… Like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/bdcea870-c91e-11e9-a47f-e3d5dc19fd81/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;충돌이 나면 화면에 이런게 뜬다. 약간 섬유 뭉쳐놓은 그런 느낌이 난다 엉켜있는게&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3598abf0-cada-11e9-a82a-cffb68435e6d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;저건 직접 지워도 되고 아니면 저 위에 Accept Current Change나 Accept Incoming Change 같은 버튼 눌러도 된다.
여러 브랜치에서 작업을 하기 때문에 프로젝트를 하다 보면 충돌은 피할 수 없다.ㅋㅋㅋ&lt;br/&gt;
&lt;br/&gt;여튼 충돌을 없애보았는데…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6dd426a0-c91f-11e9-a47f-e3d5dc19fd81/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;내 메인화면이 안 뜨고 웬 노랑이만 나온다!
이게 왜 일까 했더니 우리 팀원 분 중 한 분이 작업하다가 div에 yellow를 입힌게 내 파일에도 영향을 미친 것이었다! &lt;br/&gt;SASS nested tag 기능의 중요성…☆&lt;/p&gt;
&lt;p&gt;여튼… css 쪽도 안 알아보고 충돌이 해결됐다고 생각하고 뭐라도 해보겠다고 push를 해버렸다..!
이럴때 시간을 되돌려서 지워주는 명령어가 필요하다&lt;/p&gt;
&lt;p&gt;터미널에 &lt;code class=&quot;language-text&quot;&gt;git log&lt;/code&gt;를 입력해보면 내가 여태 commit 했던 내역과 head가 나오게 된다.
head를 살펴보면 로컬의 소스코드가 어느 위치에 있는지 알 수 있다.
만약 push를 안 했으면 예전의 origin recipe를 커밋한 상태가 뜰텐데 내가 push를 했기 때문에 head에 아래의 캡쳐 이미지와 같은게 뜬다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/42863330-c93d-11e9-a234-d98c498b5e96/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0870db40-c93e-11e9-94f8-973ff48cfb77/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;우리가 checkout은 브랜치를 바꿀 때 주로 쓰지만, 작업 내역을 지울때도 쓸 수 있다.
&lt;code class=&quot;language-text&quot;&gt;git checkout src/Pages&lt;/code&gt; 명령어를 통해 같은 경로에 있는 파일 두개를 지웠다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/27fc6b00-c93e-11e9-94f8-973ff48cfb77/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt;를 입력하면 하면 또 지울게 있음! 그래서 그것도 지워버렸다!
그랬더니 다시 예전의 내 파일로 돌아왔다~&lt;/p&gt;
&lt;p&gt;여튼 팀원분이 css파일 제대로 수정해서 merge가 된 이후로 다시 pull을 받으니 문제 해결쓰!
맨날 혼자 블로그나 작업하다가 이런 프로젝트를 통해 git의 진가를 알게 되는것 같아서 뿌듯했다~&lt;/p&gt;
&lt;h3 id=&quot;근데-만약에-내가-뭔가-실수를-해서-파일을-망쳐버렸으면-그땐-어떻게-하지&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%EB%8D%B0-%EB%A7%8C%EC%95%BD%EC%97%90-%EB%82%B4%EA%B0%80-%EB%AD%94%EA%B0%80-%EC%8B%A4%EC%88%98%EB%A5%BC-%ED%95%B4%EC%84%9C-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%A7%9D%EC%B3%90%EB%B2%84%EB%A0%B8%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%95%90-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EC%A7%80&quot; aria-label=&quot;근데 만약에 내가 뭔가 실수를 해서 파일을 망쳐버렸으면 그땐 어떻게 하지 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근데 만약에… 내가 뭔가 실수를 해서 파일을 망쳐버렸으면 그땐 어떻게 하지..?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0231f150-c8a4-11e9-9813-697e23afe5d4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7206a880-cc5b-11e9-a75b-5d8adc576244/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;세상이-무너져도-다시-클론받으면-그만&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EC%83%81%EC%9D%B4-%EB%AC%B4%EB%84%88%EC%A0%B8%EB%8F%84-%EB%8B%A4%EC%8B%9C-%ED%81%B4%EB%A1%A0%EB%B0%9B%EC%9C%BC%EB%A9%B4-%EA%B7%B8%EB%A7%8C&quot; aria-label=&quot;세상이 무너져도 다시 클론받으면 그만 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세상이 무너져도 다시 클론받으면 그만&lt;/h1&gt;
&lt;p&gt;우리에겐 &lt;code class=&quot;language-text&quot;&gt;git clone&lt;/code&gt;이라는 아주 편리한 명령어가 있다!
세상이 무너져도 다시 클론받으면 그만이라는 걸 잊지말자!&lt;/p&gt;
&lt;p&gt;여튼… git과 좀 더 친해져야 할 것 같다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_4일 TIL_사이드바와 setState]]></title><description><![CDATA[위코드 28일차. 햄버거 메뉴 버튼 클릭하면 사이드바가 나오게 하고 싶었다. 그리하여 시작된 기나긴 여정.....]]></description><link>https://gollumnima.github.io//posts/wecode5_4TIL_sidebar</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_4TIL_sidebar</guid><pubDate>Thu, 29 Aug 2019 10:01:04 GMT</pubDate><content:encoded>&lt;p&gt;돔알못이라 무언가 만드는게 너무너무너무 힘들다…
js에서도 정말 힘들었던 게 함수를 만드는 부분이었는데, react로 넘어오니까 더 어려워 죽겠다 ㅋㅋㅋㅋㅋㅋㅋ&lt;br /&gt;&lt;br /&gt;
햄버거 메뉴 버튼을 클릭하면 사이드바가 나오는 기능을 구현하고 싶었는데
완성하기 까지 우리에게 꼭 필요한 것들이 있다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dfcfa4f0-cc53-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;바로바로 삽질…ㅋㅋㅋㅋㅋㅋ
이틀동안 충분히 머리 아팠던 것 같아서 결국은 예리 멘토님께 질문을 해서 알아냈다!&lt;/p&gt;
&lt;p&gt;일단 나의 코드를 보자면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;div className=&amp;quot;home_container&amp;quot;&amp;gt;
        &amp;lt;&amp;gt;
          &amp;lt;Navbar /&amp;gt;
        &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Home Component에 Navbar라는 Component를 불러오고..
이 Navbar Component에 들어갔을 때 그제서야 Menu라는 이름의 sidebar component를 부르는 형태이다. 아래는 메뉴 컴포넌트 코드!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Menu extends React.Component {
  render() {
    return (
      &amp;lt;div className=&amp;quot;menu_container&amp;quot;&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;About&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Recipes&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Food News&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;자.. 이제 다시 Navbar Component로 돌아가서
내가 어떤 어떤 삽질을 했는지 알아보자!&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;quot;react&amp;quot;;
import Menu from &amp;quot;../../Pages/Menu/Menu&amp;quot;;
import &amp;quot;./Navbar.scss&amp;quot;;
class Navbar extends React.Component {
  constructor() {
    super();
    this.state = {  };
  }
  // openMenu = () =&amp;gt; {
  //   return (
  //     &amp;lt;div className=&amp;quot;menu_container&amp;quot;&amp;gt;
  //       &amp;lt;ul&amp;gt;
  //         &amp;lt;li&amp;gt;X&amp;lt;/li&amp;gt;
  //         &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
  //         &amp;lt;li&amp;gt;About&amp;lt;/li&amp;gt;
  //         &amp;lt;li&amp;gt;Recipes&amp;lt;/li&amp;gt;
  //         &amp;lt;li&amp;gt;Food News&amp;lt;/li&amp;gt;
  //       &amp;lt;/ul&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   );
  // };
  // closeMenu = () =&amp;gt; {};

  render() {
    return (
      &amp;lt;div className=&amp;quot;nav_container&amp;quot;&amp;gt;
        &amp;lt;nav className=&amp;quot;nav_bar&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;menu_wrap&amp;quot;&amp;gt;
            &amp;lt;img
              className=&amp;quot;menu_btn&amp;quot;
              src={require(&amp;quot;../../img/menu_btn.png&amp;quot;)}
              alt=&amp;quot;menu_btn&amp;quot;
              onClick={this.openMenu}
              // onClick={(this.menu_container.style.overflow = &amp;quot;visible&amp;quot;)}
              // onClick={(this.menu_container.style.left = 0 + `px`)}
              // onClick={this.openMenu}
              // onClick={this.openMenu}
            /&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className=&amp;quot;logo_wrap&amp;quot;&amp;gt;
            &amp;lt;img
              className=&amp;quot;logo&amp;quot;
              src={require(&amp;quot;../../img/logo.png&amp;quot;)}
              alt=&amp;quot;logo&amp;quot;
            /&amp;gt;
            &amp;lt;h1&amp;gt;Wooridoori.com&amp;lt;/h1&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div className=&amp;quot;login_wrap&amp;quot;&amp;gt;
            &amp;lt;img
              className=&amp;quot;login_btn&amp;quot;
              src={require(&amp;quot;../../img/chef.png&amp;quot;)}
              alt=&amp;quot;login&amp;quot;
            /&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/nav&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
export default Navbar;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 해결한 코드는 아래에서 공개 ㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;render 전에 메뉴 만드는 함수를 Navbar에서 실행 시킬까도 해보고.. 메뉴 컴포넌트 자체를 불러오는 것도 생각해보고…
아니면 아예 화면 저~ 구석에 띄워놨다가 버튼 누르면 left 값을 0으로 해주는 식의 방식도 해봤는데 도저히 풀리지가 않았다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;여러 가지 방법 중에 클릭시 메뉴 컴포넌트를 불러오는 함수를 작성하기로 해보았다!&lt;/p&gt;
&lt;h2 id=&quot;state-초기값-세팅&quot;&gt;&lt;a href=&quot;#state-%EC%B4%88%EA%B8%B0%EA%B0%92-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;state 초기값 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state 초기값 세팅&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;constructor() {
    super();
    this.state = {
      isOpen: false
    };
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React에서 가장 처음 실행되는게 바로 컨스트럭터 안의 것들인데, 우리는 state의 처음 값을 설정해 주어야 한다. 객체 형식으로!
클릭 때마다 isOpen 함수가 false에서 true로 번갈아가며 바뀌게 하기 위해 초기 값을 false로 설정했다.&lt;/p&gt;
&lt;h2 id=&quot;openmenu-함수-설정&quot;&gt;&lt;a href=&quot;#openmenu-%ED%95%A8%EC%88%98-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;openmenu 함수 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;openMenu 함수 설정&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;openMenu = () =&amp;gt; {
    if (this.state.isOpen === false) {
      this.setState({
        isOpen: true
      });
    } else {
      this.setState({
        isOpen: false
      });
    }
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 랜더 전에 작성되어야 한다.
너무 충격적이었던게 아직도 state가 친숙하지 않다는 점.. ㅠㅠ 아냐.. 하지만 난 해낼거야! 할 수 있어!!!!!!&lt;/p&gt;
&lt;p&gt;여튼… &lt;code class=&quot;language-text&quot;&gt;setState()&lt;/code&gt; 함수로 설정값을 업데이트 한다는 것은 알았으나, 저렇게 조건문 안에 들어갈 수 있다는걸 몰랐다 ㅋㅋㅋㅋㅋ
와우… 이런 식으로 조건을 줄 수 있는 거였다니!!&lt;/p&gt;
&lt;h2 id=&quot;onclick-함수-설정&quot;&gt;&lt;a href=&quot;#onclick-%ED%95%A8%EC%88%98-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;onclick 함수 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;onClick 함수 설정&lt;/h2&gt;
&lt;p&gt;그러고 나서 버튼에 onClick 함수를 달아준다 &lt;code class=&quot;language-text&quot;&gt;onClick={this.openMenu}&lt;/code&gt; 요렇게.&lt;/p&gt;
&lt;p&gt;근데 이렇게만 하면 실행이 되지 않는다. 왜냐?
함수 실행은 되겠지만, isOpen이 true가 되었을 때 메뉴 컴포넌트를 부르게 하는 코드를 작성하지 않았기 때문!
그래서 내가 만든 menu_wrap이라는 클래스에 또 다시 조건을 추가해준다.
&lt;code class=&quot;language-text&quot;&gt;{this.state.isOpen === true ? &amp;lt;Menu /&amp;gt; : null}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;true면 Menu 컴포넌트를 부르고, 아닐 경우 그냥 null을 넣어주면 완성!&lt;/p&gt;
&lt;p&gt;이렇게 간단하게 해결될 문제였는데 넘ㄴ ㅏ충격인 것…☆&lt;/p&gt;
&lt;p&gt;그리하여 완성된… 미완의 사이드 바
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/730ad970-cc58-11e9-9e5f-29cb8d02ba34/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사이드 바 물론 예쁘게 하고 싶지만… 지금 당장은 다른 거 할 게 넘나 많은 것!
디자인은 다음주의 내가 하고 있겠지.. 현재의 나는 기능구현과 css 공부에 충실하고자 한다&lt;/p&gt;
&lt;p&gt;정말 안되면… 라이브러리를 쓰는 방법도 ㅋㅋㅋㅋㅋㅋㅋ
1차 프로젝트 때 라이브러리 쓴 사람은 2차 때 못 쓰는 조건이 있으니깐
지금 많이 많이 쓰고 추석땐 라이브러리 없이 구현하는 방법을 공부해야지! 화이팅 아자아자&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_3일 TIL_Postman으로 데이터 주고받기]]></title><description><![CDATA[위코드 27일차. 페이지를 꾸밀줄만 알면 진정한 프론트가 아니다! 백에서 받아온 데이터를 활용할 줄 알아야 진정한 프론트인인것. 그런 의미에서 오늘은 postman 간단 활용법을 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode5_3TIL_postman</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_3TIL_postman</guid><pubDate>Wed, 28 Aug 2019 09:18:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cddb24f0-cc4d-11e9-910d-0db327a0d842/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;색감이 예뻐서 갖다 붙인 post box image ㅋㅋㅋ
근데 우리가 쓸 프로그램인 postman은 이렇게 예쁘게 생기진 않았다 투박쓰~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4e4ec010-cc4e-11e9-9732-c9f4af8a8c62/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;postman 검색하고 다운로드 고고!
분명 지난번에 깔았는데 우분투의 문제인지 뭔지 파일이 보이지 않아서 다시 깔았다 ㅡㅡ 우분투 너이자식…
여튼 postman은 백에서 개발한 api를 테스트하고 프론트 영역으로 넘길 때 활용도가 높은 프로그램이다.&lt;/p&gt;
&lt;h2 id=&quot;로그인&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8%EC%9D%B8&quot; aria-label=&quot;로그인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그인&lt;/h2&gt;
&lt;p&gt;젤 앞의 탭은 ‘POST’로 설정해주고 백에서 만든 url을 입력
저 url의 end point를 항상 정확하게 입력해야 한다! 기본중의 기본!
여튼 바디에 객체 형식으로 아이디와 비밀번호를 써준다. key값은 백에서 설정한 그 값을 쓰면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b3578650-cae5-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;send를 누르면 SUCCESS라는 메시지가 뜨게 된다!
만약에 같은 아이디로 한번 더 시도하게 되면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ce6f1a20-cae5-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오 신기방기 이미 있는 아이디라고 뜬다.
만약에 이 message가 “same ID exists”라면 “존재하는 아이디 입니다. 다른 아이디를 입력해주세요.” 라는 문구가 뜨는 이런 식의 함수를 프론트에서 만들수 있는 거다 ㅋㅋㅋㅋ 넘나 신기!!!&lt;/p&gt;
&lt;p&gt;그 밖에도…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비번 틀릴때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3f7b12f0-cae6-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아이디 틀릴때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4ed12910-cae6-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;로그인-성공시-토큰-발행&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%84%B1%EA%B3%B5%EC%8B%9C-%ED%86%A0%ED%81%B0-%EB%B0%9C%ED%96%89&quot; aria-label=&quot;로그인 성공시 토큰 발행 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그인 성공시 토큰 발행&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/31199600-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위의 과정을 거쳐 로그인을 성공하게 되면 토큰이 발급되는데…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9d5011f0-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;다시 로그인 시 토큰의 뒷자리가 바뀜! 토큰을 잘 보면 앞자리는 동일한데 뒤의 어느 구간부터 값이 바뀐다. 뒷부분이 중요하다는 말씀..!&lt;/p&gt;
&lt;p&gt;여튼 우리는 이렇게 발급받은 액세스 토큰을 가지고 토큰 해석해주는 사이트에 들어갈 것이다
주소창에 jwt.io 를 치시오. 존맛탱 아님… JWT입니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fb2b2b70-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;좌측에 입력한 토큰 값을 우측에서 해석해주는데 넘나 신기하다 ㅋㅋㅋ
여튼 우리가 만든 토큰인지 남이 만든 토큰인지 확인과정을 거치고 이 정보를 또 저장해야하는데…&lt;/p&gt;
&lt;p&gt;만약에 리액트앱에서 토큰을 가지고 있으면, 새로고침시 토큰 정보들도 모두모두 안녕~~~
일반적으론 브라우저에 저장하는데 세 가지 방법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로컬스토리지에 저장&lt;/li&gt;
&lt;li&gt;세션에 저장(창 끄면 사라짐)&lt;/li&gt;
&lt;li&gt;쿠키(해당 날짜가 지나면 사라짐)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쿠키가 뭣인지도 모르고 주기적으로 쿠키 지우기를 해줬는데..날짜에 따라서 정보를 저장해주는 녀석이였군!!! 세션땐 이런 쏠쏠한 정보들을 알게 될 때마다 넘 뿌듯하다~&lt;/p&gt;
&lt;p&gt;로컬스토리지는 다음번에 다시 정리 해보도록 하고..!
이번엔 코멘트도 함 날려보자!&lt;/p&gt;
&lt;h2 id=&quot;코멘트-보내기&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%A9%98%ED%8A%B8-%EB%B3%B4%EB%82%B4%EA%B8%B0&quot; aria-label=&quot;코멘트 보내기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코멘트 보내기&lt;/h2&gt;
&lt;p&gt;로그인이 성공했다는 전제 하에 진행하는 거라서
Headers에 들어가서 Key에는 Authorization이라고 쓰고, value에는 로그인시 발급받은 액세스 토큰을 입력해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/14724f90-cae8-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게!
그 담에는 body에 또 객체 형태로 message 남겨본다! 그럼 내가 보낸 이 메시지들이 백으로 넘어가는거다. 넘나 씐기씐기!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/21be3dd0-cae8-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;signup-하기&quot;&gt;&lt;a href=&quot;#signup-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;signup 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;signup 하기&lt;/h2&gt;
&lt;p&gt;일단 signup button에 뭔가를 해줘야겠지요?
&lt;code class=&quot;language-text&quot;&gt;value = &amp;quot;Register&amp;quot; onClick={}&lt;/code&gt;
이런식으로 설정을 해준 다음…
render 전에 signup 함수를 작성해줍니다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;signup = () =&amp;gt; {
 fetch()
 };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 fetch로 받아오긴 하는데 최신 문법인 비동기로 받아오면 좀 더 편리쓰~
(async, await : 데이터를 받아오는데 언제 올지 모르는 것에 적용 가능한 함수)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;signup = async() =&amp;gt; {
const response = await fetch(&amp;#39;http://10.58.4.72:8000/signup&amp;#39;, {
 	method:&amp;#39;POST&amp;#39;,
    body:JSON.stringify({
    user_id: &amp;#39;test123&amp;#39;,
    password: &amp;#39;good&amp;#39;
    })
  })
  const result = await response.json()

  console.log(result)


  if (result.message === &amp;#39;same ID exists&amp;#39;) {
     alert(&amp;#39;이미 존재하는 아이디입니다. 다시 가입해주세요.&amp;#39;)
  } else if (result.message === &amp;quot;SUCCESS&amp;quot;) {
     alert(&amp;#39;환영합니다. 가입되었습니다!&amp;#39;)
     this.props.history.push(&amp;#39;/login&amp;#39;)
  	}
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세션 들으면서 썼던 코드라 indent가 맘에 안 들긴 하지만 여튼… 이렇게!
위의 코드 마지막줄에 props.history.push가 있는데 props를 선언 안해줘도 되는지가 궁금했는데, class에 기본 변수로 들어오기 때문에 props를 따로 선언 안해줘도 된다고 한다! 넘나 씐기 씐기&lt;/p&gt;
&lt;p&gt;Router에서 인자를 어떻게 넘기는지에 대해선 아래의 링크에 잘 나와있다
나의 사랑 우리모두의 사랑 stack overflow ~♬ 내 스택에서만 일어나지 말아라.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여튼 전체 코드를 보자면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import { withRouter } from &amp;#39;react-router-dom&amp;#39;;
import &amp;#39;./Signup.scss&amp;#39;;
import Logo from &amp;#39;./logo.png&amp;#39;;
import {Link} from &amp;#39;react-router-dom&amp;#39;;
​
class Signup extends Component {
​
  singup = async () =&amp;gt; {
    const response = await fetch(&amp;#39;http://10.58.4.74:8000/signup&amp;#39;, {
      method: &amp;#39;POST&amp;#39;,
      body: JSON.stringify({
        user_id: &amp;#39;12341234sdfsdfsfsdfsd&amp;#39;,
        password: &amp;#39;good&amp;#39;
      })
    });
​
    const result = await response.json();
​
    console.log(result)
    console.log(&amp;#39;sdfsdf&amp;#39;)
​
    if (result.message === &amp;#39;same ID exists&amp;#39;) {
      alert(&amp;#39;이미 있는 아이디 입니다!! 다시 가입 해주세요.&amp;#39;)
    } else if (result.message === &amp;#39;SUCCESS&amp;#39;) {
      alert(&amp;#39;환영합니다!! 가입 되었습니다!!!&amp;#39;)
      this.props.history.push(&amp;#39;/login&amp;#39;);
    }
​
​
  };
​
  render() {
    return (
      &amp;lt;div className=&amp;quot;signup-page&amp;quot;&amp;gt;
        &amp;lt;article className=&amp;quot;signup-content&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;input-wrap&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;signup-header&amp;quot;&amp;gt;
              &amp;lt;Link to=&amp;quot;/&amp;quot;&amp;gt;&amp;lt;img className=&amp;quot;signup-logo&amp;quot; src={Logo} alt=&amp;quot;logo_img&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/Link&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;signup-info&amp;quot;&amp;gt;
              &amp;lt;div className=&amp;quot;signup-title&amp;quot;&amp;gt;Register.&amp;lt;/div&amp;gt;
              &amp;lt;div className=&amp;quot;signup-subtitle&amp;quot;&amp;gt;Enter your email to create an account.&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;signup-form&amp;quot;&amp;gt;
              &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Please enter your Email&amp;quot; maxLength=&amp;quot;30&amp;quot;/&amp;gt;
              &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your Password&amp;quot; maxLength=&amp;quot;8&amp;quot;/&amp;gt;
              &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your Password&amp;quot; maxLength=&amp;quot;8&amp;quot;/&amp;gt;
              &amp;lt;input
                type=&amp;quot;button&amp;quot;
                className=&amp;quot;signup-btn&amp;quot;
                value=&amp;quot;Register&amp;quot;
                onClick={this.singup}
              /&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/article&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
​
export default withRouter(Signup);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 signup 함수 간단하게 완성쓰!
코드가 길어서 복잡해 보일수도 있지만 원리만 생각하면 간단하다!&lt;/p&gt;
&lt;p&gt;다음 프로젝트 때는 내가 signup page를 맡게 될텐데 그 때가서 헷갈리지 말고 잘 했음 좋겠다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_2일 TIL_프로젝트 시작]]></title><description><![CDATA[위코드 26일차. 2주 프로젝트 첫째날은 초기 세팅과 팀 컨셉을 잡느라 시간을 다 써버려서 본격적인 작업은 이틀차인 화요일부터 시작하게 되었다.]]></description><link>https://gollumnima.github.io//posts/wecode5_2TIL_project_daily1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_2TIL_project_daily1</guid><pubDate>Tue, 27 Aug 2019 08:55:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/815d9c40-cc4b-11e9-bb8d-972accb59aa8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;롤링이미지&quot;&gt;&lt;a href=&quot;#%EB%A1%A4%EB%A7%81%EC%9D%B4%EB%AF%B8%EC%A7%80&quot; aria-label=&quot;롤링이미지 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;롤링이미지&lt;/h2&gt;
&lt;p&gt;돌아가는 화면을 Carousel Slider라고 하더라…
Carousel이라는 단어를 찾아보니 회전목마, 관람차, 회전그네 같은 돌아가는 놀이기구를 가리키는 모든 말이였다 ㅋㅋㅋ 여튼…&lt;/p&gt;
&lt;p&gt;찾아보면 자료가 참 많은데 나는 nuka씨가 만든 라이브러리를 활용했다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add nuka-carousel&lt;/code&gt; 추가하면
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Carousel&amp;gt;&lt;/code&gt; 컴포넌트를 사용할 수 있다.
(내가 라이브러리 받으면 끝인줄 알았는데 팀원 모두가 설치해야 하므로 꼭꼭 공유해야 한다!)&lt;/p&gt;
&lt;p&gt;라이브러리 처음 써보는거라 두근두근 했는데 그냥 갖다 붙이니까 되네???? 넘나 신기한것
드래그 하거나 next 혹은 prev 버튼을 클릭하면 사진이 바뀐다! 오예&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c830ae0-c883-11e9-8801-2f2d07541998/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;일단 잘 나오긴 하는데… 영역을 너무 차지한다는게 문제다
그래서 Home의 div들에 margin-auto를 줬더니 폭이 조절되네???&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1db08800-cc4c-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사이즈 줄어드니까 훨씬 깔끔해졌다 여튼&lt;/p&gt;
&lt;h2 id=&quot;div를-잘-나누시오&quot;&gt;&lt;a href=&quot;#div%EB%A5%BC-%EC%9E%98-%EB%82%98%EB%88%84%EC%8B%9C%EC%98%A4&quot; aria-label=&quot;div를 잘 나누시오 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;div를 잘 나누시오&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;&amp;gt;
      &amp;lt;div className=&amp;quot;home_recipe_wrapper&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;home_recipe_container&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_img_container&amp;quot;&amp;gt;
            &amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;grill&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_words_container&amp;quot;&amp;gt;
            &amp;lt;h4 className=&amp;quot;home_recipe_category&amp;quot;&amp;gt;한식&amp;lt;/h4&amp;gt;
            &amp;lt;h2 className=&amp;quot;home_recipe_name&amp;quot;&amp;gt;떡볶이&amp;lt;/h2&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;겉으로 보기에 문제 없어보이는 코드였다..
나름 div는 누구보다 빠르게 남들과는 다르게 색다르게 비트위에 리듬을 타면서 나눌수 있다고 자부했는데…
화면에 뜨는걸 보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/81a32b10-c8b9-11e9-8dcc-1dd4966cd2dc/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;띠 to the 용 ~
div 잘 묶은줄 알았는데 아니였다. 다시 도전.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   &amp;lt;&amp;gt;
      &amp;lt;div className=&amp;quot;home_recipe_wrapper&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;home_recipe_container&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_img_container&amp;quot;&amp;gt;
            &amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;grill&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
            &amp;lt;div className=&amp;quot;home_recipe_words_container&amp;quot;&amp;gt;
              &amp;lt;h4 className=&amp;quot;home_recipe_category&amp;quot;&amp;gt;한식&amp;lt;/h4&amp;gt;
              &amp;lt;h2 className=&amp;quot;home_recipe_name&amp;quot;&amp;gt;떡볶이&amp;lt;/h2&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0f5df980-c8ba-11e9-8dcc-1dd4966cd2dc/image.png&quot; alt=&quot;image.png&quot;&gt;
다시 이렇게 성공쓰&lt;/p&gt;
&lt;p&gt;근데 문제가 생겼다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6c320450-ca5c-11e9-8443-19a03cc3be4f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;스크린을 줄였더니 이미지가 겹쳐..
천재 오브 천재 예리님의 조언을 들어보니 부모에서 Grid로 값을 주었지만 이미지에 절대값을 줘서 안 먹히는 것…
이럴 땐 이미지 크기를 100%로 하면 먹힌다!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9a3afd70-ca5c-11e9-a81a-b3d65dab3431/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;핵핵핵 핵 신기방기!!!!!!! 예리님을 찬양하라&lt;del&gt;&lt;/del&gt;~~
지금은 디자인을 약간 바꿔서 촌스러움은 벗어났는데 문제가 또 생겼다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7ee37f10-cc4c-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;분명히 Grid로 똑같이 값을 매겨줬는데 왜 아랫줄 첫째, 둘째 애들은 줄이 안 맞는가..?
이건 삽질 좀 하다가 프론트신 예리님께 문의드릴 예정…&lt;/p&gt;
&lt;h2 id=&quot;백과-프론트-콜라보&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EA%B3%BC-%ED%94%84%EB%A1%A0%ED%8A%B8-%EC%BD%9C%EB%9D%BC%EB%B3%B4&quot; aria-label=&quot;백과 프론트 콜라보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백과 프론트 콜라보&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;toppokki&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;원래의 이미지 경로는 하드코딩 했을 때 이러했는데, 백의 서버 주소를 써보았다
&lt;code class=&quot;language-text&quot;&gt;http://10.58.6.255:8000/uploads/photo.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;여기서 작은 팁! 외부 링크를 쓰려면 require을 지워야 한다.
여튼 Back쪽의 서버가 켜져 있다면
그리하여 성공한 화면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b596e8c0-c955-11e9-b6af-0332aa63bb4d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위코드의 대빵 은우님이시다. 그림 바이 름바님
그럼 바이 바이~ 다음 포스팅에서 만나용&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_1일 TIL_프로젝트 시작 전 초기세팅 할 것들]]></title><description><![CDATA[위코드 25일차. 5주차에 들어서면서 2주 프로젝트가 시작 되었다. 프로젝트에 앞서 초기에 세팅해야 할 것들에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode5_1TIL_project_initialSettings</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_1TIL_project_initialSettings</guid><pubDate>Mon, 26 Aug 2019 08:21:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/697fc700-c927-11e9-841b-23b4349b6731/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번주 월요일부터 본격 2주 프로젝트가 시작됐는데.. &lt;br /&gt;
초기 세팅 해야할 것들에 대해 적어보았다!&lt;/p&gt;
&lt;p&gt;Git에 repository 뚫는 과정도 적어보려고 했는데, reset.css 코드 때문에 길어져서 다음 포스팅으로 넘어가야겠다 룰루~ ♬ 그럼 스타트!!&lt;/p&gt;
&lt;h2 id=&quot;router-깔기&quot;&gt;&lt;a href=&quot;#router-%EA%B9%94%EA%B8%B0&quot; aria-label=&quot;router 깔기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Router 깔기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0ab676f0-c487-11e9-aac9-df0beb3e284d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Route는 말 그대로 경로를 말한다! 이걸 통해 원하는 페이지로 자유롭게 이동 가능쓰~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add react-router-dom&lt;/code&gt; 명령어 입력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt;와 같은 디렉토리에 &lt;code class=&quot;language-text&quot;&gt;Routes.js&lt;/code&gt;파일 만들기&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Routes.js&lt;/code&gt;파일 세팅하기&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt;파일 내에 render함수 대상을 &lt;Routes /&gt;로 바꿔주기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이거는 Routes.js
import React from &amp;quot;react&amp;quot;;
import { BrowserRouter as Router, Route, Switch } from &amp;quot;react-router-dom&amp;quot;;
import Home from &amp;quot;./Pages/Home/Home&amp;quot;;

class Routes extends React.Component {
  render() {
    return (
      &amp;lt;Router&amp;gt;
        &amp;lt;Switch&amp;gt;
          &amp;lt;Route exact path=&amp;quot;/home&amp;quot; component={Home} /&amp;gt;
        &amp;lt;/Switch&amp;gt;
      &amp;lt;/Router&amp;gt;
    );
  }
}

export default Routes;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 예시로 &lt;code class=&quot;language-text&quot;&gt;Home Component&lt;/code&gt;만 넣어봤습니다.
우리는 라우터를 통해 자유롭게 이동 가능쓰~~&lt;/p&gt;
&lt;p&gt;url 뒤에 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; 붙여서 이동할 수 있는 기능도 있지만! 페이지에서 페이지끼리의 이동도 가능쓰&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;import { Link } from &amp;quot;react-router-dom&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;먼저 링크라는 Component를 라우터 돔을 통해 받아오고..&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Link to=Home&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;아이콘 태그 위에 Link to 태그와 이동할 컴포넌트를 입혀주면 완성~&lt;/p&gt;
&lt;p&gt;인줄 알았죠?????
이 모든건 index.js에 Routes 태그를 추가해야 가능한 일…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이건 index.js 파일
import React from &amp;quot;react&amp;quot;;
import ReactDOM from &amp;quot;react-dom&amp;quot;;
import &amp;quot;../src/styles/index.scss&amp;quot;;
import &amp;quot;../src/styles/reset.scss&amp;quot;;
import Routes from &amp;quot;./Routes&amp;quot;;

ReactDOM.render(&amp;lt;Routes /&amp;gt;, document.getElementById(&amp;quot;root&amp;quot;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;css-tool-고르기&quot;&gt;&lt;a href=&quot;#css-tool-%EA%B3%A0%EB%A5%B4%EA%B8%B0&quot; aria-label=&quot;css tool 고르기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS tool 고르기~&lt;/h1&gt;
&lt;h3 id=&quot;styled-component&quot;&gt;&lt;a href=&quot;#styled-component&quot; aria-label=&quot;styled component permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Styled Component&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add styled-components&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;sass-설치하기&quot;&gt;&lt;a href=&quot;#sass-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;sass 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SASS 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add node-sass&lt;/code&gt; 명령어로 설치 후, css파일형식을 .scss로 바꾸기&lt;/p&gt;
&lt;p&gt;SASS는 CSS module과 함께 쓸수도 있다는데.. 아직 css module은 써 본적이 없어서 다음 기회에 다뤄볼게유~&lt;/p&gt;
&lt;h2 id=&quot;eslint와-prettier-연동하기&quot;&gt;&lt;a href=&quot;#eslint%EC%99%80-prettier-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0&quot; aria-label=&quot;eslint와 prettier 연동하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint와 Prettier 연동하기&lt;/h2&gt;
&lt;p&gt;이건 지난번에 한번 포스팅해서 링크만 남길게용
&lt;a href=&quot;https://gollumnima.github.io/posts/wecode3_5TIL_eslint&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://gollumnima.github.io/posts/wecode3_5TIL_eslint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;styles-디렉토리-만들기&quot;&gt;&lt;a href=&quot;#styles-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;styles 디렉토리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styles 디렉토리 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;styles 디렉토리 안에 index.css 옮기고, reset.css와 media.css 추가해주세용
-media.css는 화면을 줄였을 때의 breakpoint를 두 개정도 설정해서 넣어놓고 팀원들과 공유하기!&lt;/li&gt;
&lt;li&gt;reset css 파일을 추가해주면 기본 css 설정값들을 다 취소시켜서 좀 더 깔끔쓰~ 아래의 코드를 긁어서 복붙하세유~~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;html,
body,
div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
abbr,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
samp,
small,
strong,
sub,
sup,
var,
b,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
  font-weight: normal;
  letter-spacing: 1px;
}
​ * {
  box-sizing: border-box;
  text-decoration: none;
  list-style: none;
  color: inherit;
}
​ *:focus {
  outline: none;
  border: none;
}
​ body {
  line-height: 1;
}
​ article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
​ nav ul {
  list-style: none;
}
​ blockquote,
q {
  quotes: none;
}
​ blockquote:before,
blockquote:after,
q:before,
q:after {
  content: &amp;quot;&amp;quot;;
  content: none;
}
​ a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}
​
/* change colours to suit your needs */
ins {
  background-color: #ff9;
  color: #000;
  text-decoration: none;
}
​
/* change colours to suit your needs */
mark {
  background-color: #ff9;
  color: #000;
  font-style: italic;
  font-weight: bold;
}
​ del {
  text-decoration: line-through;
}
​ abbr[title],
dfn[title] {
  border-bottom: 1px dotted;
  cursor: help;
}
​ table {
  border-collapse: collapse;
  border-spacing: 0;
}
​
/* change border colour to suit your needs */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #cccccc;
  margin: 1em 0;
  padding: 0;
}
​ input,
select {
  vertical-align: middle;
}
​ textarea {
  resize: none;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_5일 TIL_Semantic-ui로 간단하게 CSS 효과주자]]></title><description><![CDATA[위코드 24일차. Semantic-ui 라이브러리를 활용해서 간단하게 CSS 효과 주는 법을 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode4_5TIL_semantic_ui</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_5TIL_semantic_ui</guid><pubDate>Fri, 23 Aug 2019 15:37:04 GMT</pubDate><content:encoded>&lt;p&gt;semantic-ui를 통해 icon을 추가하는 방법을 알아볼게여&lt;/p&gt;
&lt;h2 id=&quot;semantic&quot;&gt;&lt;a href=&quot;#semantic&quot; aria-label=&quot;semantic permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Semantic&lt;/h2&gt;
&lt;p&gt;영어로는 의미론적인 이라는 뜻을 가지고 있는데요!
오늘 제가 소개해 드릴 Semantic-ui라는 사이트에선 fontawesome과 같이 다양한 icon과 버튼 기타 등등을 만나볼수 있습니다.&lt;/p&gt;
&lt;p&gt;우분투 유저 분들은 저를 follow me~
아니라면 &lt;a href=&quot;https://semantic-ui.com/introduction/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://semantic-ui.com/introduction/getting-started.html&lt;/a&gt; 여기 접속해서 하라는 대로 하면 됩니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;semantic ui 설치하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install semantic-ui --save&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;중간중간 설정 잘해주기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Espress 웅앵웅 엔터&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Is this your project folder ? 확인해서 맞다면 Yes&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Where should we put Semantic Ui inside your project?? semantic/&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;header, icon, image, reveal 스페이스로 체크&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Shold we set permissions on outputted files? No&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Do you use a RTL language? No&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Where should we ouput Semantic UI? out/&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;cd semantic&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;gulp build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 과정까지 마쳤다면 프로젝트 폴더 내에 semantic폴더가 생겼을 거에요.&lt;/p&gt;
&lt;p&gt;그렇다면 인제 &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; 파일로 이동 ㄱㄱ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;semantic/dist/semantic.min.css&amp;quot;&amp;gt;
&amp;lt;script
  src=&amp;quot;https://code.jquery.com/jquery-3.1.1.min.js&amp;quot;
  integrity=&amp;quot;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&amp;quot;
  crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;semantic/dist/semantic.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 링크태그를 추가해주세요&lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용&lt;/h2&gt;
&lt;p&gt;semantic ui 홈페이지에 들어가서 맘에 드는 아이콘의 이름을 className에다가 넣어주세요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Sidemenu extends React.Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;i className=&amp;quot;home mini icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home tiny icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home small icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home large icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home big icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home huge icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;yellow home massive icon&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 웹 페이지에 띄워보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/963b2140-c323-11e9-84a7-e5486936a3ff/image.png&quot; alt=&quot;image.png&quot;&gt;
className에 색상과 사이즈 말고도 다양한 효과들을 줄 수 있는데요
자세한 사항은 홈페이지에서 확인해보세요~~&lt;/p&gt;
&lt;p&gt;제가 오늘 포스팅에서 다룬 내용은 아이콘밖에 없지만!
절대로, icon만 기능적으로 쓸 수 있는건 아닙니다요&lt;/p&gt;
&lt;p&gt;인터넷 강의 보면서 만든걸 보여드릴게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;

const ApprovalCard = (props) =&amp;gt; {
    console.log(props.children);
    return (
        &amp;lt;div className=&amp;quot;ui card&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;{props.children}&amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;extra content&amp;quot;&amp;gt;
                &amp;lt;div className=&amp;quot;ui two buttons&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;ui basic green button&amp;quot;&amp;gt;Approve&amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;ui basic red button&amp;quot;&amp;gt;Reject&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};

export default ApprovalCard;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저기에 className으로 들어간 값들이 다 semantic-ui에서 가져온 것들이에요
결과물을 한번 보실까요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d2c56850-c729-11e9-aaf9-b1760c7fd387/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;div를 css에서 바로 효과를 주는 방법도 있지만
이렇게 라이브러리의 className만을 가져와서 div공간을 꾸미는 방법도 있다는거~
CSS파일 없이 저 코드가 그냥 끝이에요 진짜 신기하죠 ㅋㅋㅋㅋ
이래서 라이브러리를 잘 쓸줄 알아야 하나봐요 큽 ㅠㅠ&lt;/p&gt;
&lt;p&gt;일단 저는 Grid를 마스터해야 프로젝트를 잘 할수 있기 때문에
아이콘 외의 Semantic-ui 활용법은 다음 기회에 좀 더 상세하게 다루도록 하겠습니다!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://react.semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://react.semantic-ui.com/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_4일 TIL_CSS Grid로 레이아웃을 짜보자 2탄]]></title><description><![CDATA[위코드 23일차. 프로젝트에 앞서 css 속성 중 grid에 대해서 공부해보았다, 그 2탄!]]></description><link>https://gollumnima.github.io//posts/wecode4_4TIL_grid_2</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_4TIL_grid_2</guid><pubDate>Thu, 22 Aug 2019 19:45:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/096f8190-c704-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난번 포스팅에 이어 썸네일은 Grid와 직접적인 관련이 있는 Wafers로..ㅎ
웨하스는 일본식 발음이라고 하니 이제부턴 Wafer라는 말을 씁시다!
여튼 시작!&lt;/p&gt;
&lt;h2 id=&quot;fr&quot;&gt;&lt;a href=&quot;#fr&quot; aria-label=&quot;fr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fr&lt;/h2&gt;
&lt;p&gt;부분을 뜻하는 Fraction의 줄임말로, 정확한 픽셀값 대신 숫자+fr을 써주면 알아서 비율에 맞게 화면을 차지하게 된다! 올ㅋ&lt;/p&gt;
&lt;p&gt;html에서 상자를 네 개 만들고.. 아래와 같은 css 속성을 줘볼게요
(1탄과 동일하게 scss파일입니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$red: #ff5e57;
$yellow: #ffdd59;
$blue: #3c40c6;
$green: #05c46b;
.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-rows: 200px;
  grid-template-columns: 1fr 2fr 3fr 4fr;
  div:nth-child(even) {
    background: $yellow;
  }
  div:nth-child(odd) {
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: 1fr 2fr 3fr 4fr;&lt;/code&gt; 지금 grid-template-columns에 왼쪽과 같은 속성값을 줬는데요 어떤 결과가 나올까요! 두둥~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5c91a1d0-c706-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;제일 첫번째 네모는 공간을 1fr만큼 차지해서 제일 작고, 제일 마지막 네모는 공간을 4fr만큼 차지하기 때문에 첫번째 네모의 4배가 됩니다.&lt;/p&gt;
&lt;p&gt;화면을 작게 줄여볼까요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8b8a7930-c706-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그래도 여전히 width의 길이는 1,2,3,4배가 차이 나네요!
이러면 우리가 width값을 따로 주지 않아도 화면에 꽉 차고, 비율대로 나오게 됩니다!&lt;/p&gt;
&lt;h2 id=&quot;repeat&quot;&gt;&lt;a href=&quot;#repeat&quot; aria-label=&quot;repeat permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;repeat()&lt;/h2&gt;
&lt;p&gt;자바스크립트 문법에서도 특정 string을 반복하게 해주는 repeat함수가 있었는데, CSS-grid의 성질 중에도 이런게 있습니다!
괄호 안의 첫번째 인자엔 만들 개수, 두번째 인자엔 크기를 넣어주면 되는데요!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: repeat(1, 1fr);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 코드대로라면 columns이 1fr크기로 1개 생기겠죠? 이렇게..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/064d3620-c708-11e9-a708-75a73d9428ef/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;repeat으로 기둥을 만들어 준 후 옆에다 원하는 만큼 더 추가할 수도 있어요!
예를 들어… &lt;code class=&quot;language-text&quot;&gt;grid-template-columns: repeat(2, 1fr) 4fr;&lt;/code&gt; 이런 코드는&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7b54c690-c708-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게!&lt;/p&gt;
&lt;h2 id=&quot;auto-fill과-auto-fit&quot;&gt;&lt;a href=&quot;#auto-fill%EA%B3%BC-auto-fit&quot; aria-label=&quot;auto fill과 auto fit permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;auto-fill과 auto-fit&lt;/h2&gt;
&lt;p&gt;위의 repeat함수에 auto-fill이라는 속성을 먼저 넣어볼게요. 이름만 들어도 뭔가 채워줄것 같지 않나요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8fa81af0-c70a-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7e89c7f0-c70a-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;실제로 보이는건 위의 그림이지만, 개발자도구 커서를 이용해서 확인해보면, 숨겨진 column들을 화면에 꽉 차게 만든것을 확인할 수 있습니다!&lt;/p&gt;
&lt;p&gt;auto-fit도 함 봅시다!
auto-fi이 최대한으로 채우는거라면, auto-fit은 화면에 맞게 최대한 으로 공간을 차지하는 속성을 가지고 있어요.&lt;/p&gt;
&lt;p&gt;예시를 보기 전에 minmax에 대해 알아봅시다&lt;/p&gt;
&lt;h2 id=&quot;minmax&quot;&gt;&lt;a href=&quot;#minmax&quot; aria-label=&quot;minmax permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;minmax()&lt;/h2&gt;
&lt;p&gt;괄호 안 첫번째 인자엔 최소값, 두번째 인자엔 최대값이 들어가는 함수에요.
최소값을 지정해줄 수 있으니까 반응형 페이지를 만들 때 좀 더 간단하게 만들 수 있겠죠?&lt;/p&gt;
&lt;p&gt;그럼 다시 auto-fit의 예시를 봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  grid-template-columns: repeat(auto-fit, minmax(200px, 4fr));
  grid-template-rows: repeat(auo-fit, minmax(200px, 4fr));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최소값을 200px, 최대값을 4fr로 주면 아래와 같이&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/83480160-c70c-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이러한 화면이 나오게 되는데요!
이 화면을 모바일 사이즈로 줄여보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8ffa47b0-c70c-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;넘나 제가 원했던 화면이 나옵니다…
이번 팀프로젝트때 메인 화면중 일부를 이런식으로 만들고 싶었는데!!
이것만 있으면 flex에서 media query min값 따로 설정 안해줘도 되고 간편할듯!!!&lt;/p&gt;
&lt;h2 id=&quot;justify-content&quot;&gt;&lt;a href=&quot;#justify-content&quot; aria-label=&quot;justify content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;justify-content&lt;/h2&gt;
&lt;p&gt;이거 어디서 많이 본 단어 아닌가요? 네 맞습니다~ flex box에 있던 속성인데 grid에서도 적용할 수 있어요. 가로 기준으로 정렬하는 방법입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-rows: 200px;
  grid-template-columns: repeat(4, 100px);
  justify-content: center;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;부모 div에 위와 같은 값을 주면 결과는&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9e6acde0-c70e-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 가운데로 오게 됩니다!
그 밖에도 start, end 등이 있으니 MDN 같은 공식 문서 참고해보세용&lt;/p&gt;
&lt;h2 id=&quot;align-content&quot;&gt;&lt;a href=&quot;#align-content&quot; aria-label=&quot;align content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;align-content&lt;/h2&gt;
&lt;p&gt;justify-content와는 반대로 세로 기준으로 정렬하는 방법이에요.
그렇기 때문에 부모div에 높이값이 꼭 필요합니다!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;align-content: center;
height: 100vh;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 해보면 결과는!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/34daab10-c714-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오.. 뭔가 핸드폰 배경화면 느낌쓰~ 맘에 드는 분들은 저장하셔도 됩니다 ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;place-content&quot;&gt;&lt;a href=&quot;#place-content&quot; aria-label=&quot;place content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;place-content&lt;/h2&gt;
&lt;p&gt;위의 justify와 align을 합친 거라고 보면 될것 같은데요!
첫번째론 align의 속성이, 두번째는 justify의 속성이 들어갑니다.
페이지의 한 가운데인데 제일 밑에 상자를 위치시키고 싶다면..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  place-content: end center;
  height: 100vh;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a43d1d20-c715-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;식을 두 줄 쓸 필요도 없이 place-content 한 방이면 해결 완료~
여기서 더 나아가서… 자식 div에 들어가는 값도 정렬을 해보려고 하는데요!
위에서 했던 과정과 동일하게…&lt;/p&gt;
&lt;h2 id=&quot;justify-items&quot;&gt;&lt;a href=&quot;#justify-items&quot; aria-label=&quot;justify items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;justify-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;justify-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b36c06c0-c716-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;align-items&quot;&gt;&lt;a href=&quot;#align-items&quot; aria-label=&quot;align items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;align-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9e069430-c716-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;각각 정렬하면 이렇게 되는데… 한 방에 하는 방법이 또 있겠죠?
네 맞습니다 ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;place-items&quot;&gt;&lt;a href=&quot;#place-items&quot; aria-label=&quot;place items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;place-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;place-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/151eb520-c717-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;자식div에게 값을 따로 주지 않아도 부모div에서 알아서 다 설정하면 된다는게 넘 편한거 같고요?!
포스팅이 또 길어지니 다음편에서 계속됩니다&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_grid.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scrimba.com/p/pWqLHa/c7Jqdfa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://scrimba.com/p/pWqLHa/c7Jqdfa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_3일 TIL_CSS Grid로 레이아웃을 짜보자 1탄]]></title><description><![CDATA[위코드 22일차. 프로젝트에 앞서 css 속성 중 grid에 대해서 공부해보았다, 그 1탄!]]></description><link>https://gollumnima.github.io//posts/wecode4_3TIL_grid_1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_3TIL_grid_1</guid><pubDate>Wed, 21 Aug 2019 15:37:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ce448e00-c6cf-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그리드 하면 생각하는게 와플의 정직한 직선들이라 사진에 넣어보았다 ㅋㅋㅋ
이전까지는 flex만 써봤는데(사실 아직 flex를 마스터한것도 아니다.. 다음번에 정리해놔야지)
flex보다 좀 더 유용할 것 같은 Grid에 대해 정리해보려고 한다!&lt;/p&gt;
&lt;h2 id=&quot;왜-grid를-쓸까&quot;&gt;&lt;a href=&quot;#%EC%99%9C-grid%EB%A5%BC-%EC%93%B8%EA%B9%8C&quot; aria-label=&quot;왜 grid를 쓸까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 Grid를 쓸까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2차원 레이아웃을 짜기 쉽다&lt;/li&gt;
&lt;li&gt;부트스트랩보다 심플한 마크업 구조!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;grid&quot;&gt;&lt;a href=&quot;#grid&quot; aria-label=&quot;grid permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Grid&lt;/h2&gt;
&lt;p&gt;Grid, 말 그대로 격자선을 말한다.
크게 전체를 감싸는 container와 그 안의 요소들로 나눌 수 있는데
더 크게 나눠보자면 row와 column으로도 나누어지겠지! flex처럼&lt;/p&gt;
&lt;p&gt;먼저 html 구조를 짜보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scss 기능을 약간 활용한 css 구조도 함께 볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$yellow: #ffdd59;
$blue: #3c40c6;
.container {
  display: grid;
  div {
    width: 100px;
    height: 80px;
  }
  div:nth-child(even) {
    background: $yellow;
  }
  div:nth-child(odd) {
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 하단의 구조가 나올거에요. (듀얼모니터 쓰는 중이라 스크롤도 애매하게 캡쳐됐지만 무시하세여 ㅋㅋ)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f80e8870-c6d0-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;
먼저 container에는 &lt;code class=&quot;language-text&quot;&gt;display: grid;&lt;/code&gt;라는 속성을 주었고요.
화면에 상자를 보이게 하려고 자식 div들에게 크기를 따로 주었지만 이렇게 하지 않아도 됩니다.
부모div인 container에 rows와 columns 크기를 지정하면 자식들이 따라갑니다.&lt;/p&gt;
&lt;h2 id=&quot;grid-template-columnnsrows&quot;&gt;&lt;a href=&quot;#grid-template-columnnsrows&quot; aria-label=&quot;grid template columnnsrows permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-template-columnns/rows&lt;/h2&gt;
&lt;p&gt;자식 div에 준 width와 height을 지우고, container에 두 줄을 추가해볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px 100px;
grid-template-columns: 50px 50px 50px;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c038fc70-c6d3-11e9-8b9d-cb65853403a4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 보니 감이 안 오죠? rows에서 50px 하나를 제거해볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;
grid-template-columns: 50px 50px 50px;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e49463c0-c6d3-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;약간 감이 오시나요??&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;&lt;/code&gt;는 세로 100px짜리를 2행으로 만들어라 라는 뜻이였고요,
&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: 50px 50px 50px;&lt;/code&gt;는 가로 50px짜리를 3열로 만들어라 라는 뜻이에요!&lt;/p&gt;
&lt;p&gt;많이 헷갈리죠? 그치만 익숙해지면 손쉽게 쓸 수 있을거에요!
근데 네모가 붙어있어서 좀 답답한데 떨어뜨리고 싶어요.. 그럴땐 어떻게 할까요?&lt;/p&gt;
&lt;h2 id=&quot;grid-gap&quot;&gt;&lt;a href=&quot;#grid-gap&quot; aria-label=&quot;grid gap permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-gap&lt;/h2&gt;
&lt;p&gt;갭이라는 속성이 있어서 사이사이를 띄워줄 수 있어요!
아까 줬던 container의 css에 &lt;code class=&quot;language-text&quot;&gt;grid-gap: 5px;&lt;/code&gt; 이걸 추가해볼게요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dd5bd420-c6d4-11e9-8b9d-cb65853403a4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그러면 이렇게 간격이 뙇!!&lt;/p&gt;
&lt;h2 id=&quot;auto-flow와-auto-rowscolumns&quot;&gt;&lt;a href=&quot;#auto-flow%EC%99%80-auto-rowscolumns&quot; aria-label=&quot;auto flow와 auto rowscolumns permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;auto-flow와 auto-rows/columns&lt;/h2&gt;
&lt;p&gt;위에서 자식div가 9개였는데 &lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;&lt;/code&gt; 으로 설정해줘서 2행까지밖에 뜨지 않죠! 지금의 상황처럼 숨겨진 자식div를 자동으로 화면에 띄워주는 것이 바로 grid-auto뭐시깽이들이에요&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-auto-rows: 200px&lt;/code&gt; 이라고 한 줄 추가해볼게요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f0c22a0-c6dc-11e9-8ebd-0d28270a60b3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 숨겨졌던 세 개의 div들이 세로가 200px인 상태로 화면에 나타나게 됩니다!
우리가 만들 웹페이지나 모바일 화면은 위에서 아래로 스크롤을 내리는 형식이니까 이 성질을 잘 활용하면 좋겠죠?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-auto-columns: 200px&lt;/code&gt; 이라고 써보면 어떨까요?
정답은 아무 일도 일어나지 않는다!
왜냐… grid-auto 뭐시기의 default값은 row로 설정이 되어있기 때문이죠!
그럴 때 써주는게 &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;위에서 설정한 코드 밑에 &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow: columns&lt;/code&gt; 이 속성을 추가해보면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f4d20f30-c6dd-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까는 아무 일도 일어나지 않았지만 보다시피 column 속성이 채워집니다!&lt;/p&gt;
&lt;h2 id=&quot;grid-template-areas&quot;&gt;&lt;a href=&quot;#grid-template-areas&quot; aria-label=&quot;grid template areas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-template-areas&lt;/h2&gt;
&lt;p&gt;왠지 grid에서의 핵심 특징인것 같은 느낌적인 느낌인 이 template-areas!
제가 설정한 템플릿에 따라 화면구성을 만들어주는 친구입니다.&lt;/p&gt;
&lt;p&gt;아까는 div가 9개인 상태에서 시작했지만 지금은 4개로 시작할거에요.
각각의 className은 first~fourth까지!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Grid = () =&amp;gt; {
    return(
      &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;first&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;second&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;third&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;fourth&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;/div&amp;gt;

    )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;css 코드도 함 봅시다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$red: #ff5e57;
$yellow: #ffdd59;
$blue: #3c40c6;
$green: #05c46b;
.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-flow: column;
  grid-auto-rows: 200px;
  grid-template-areas: &amp;quot;head head head&amp;quot;
                       &amp;quot;content content side&amp;quot;
                       &amp;quot;content content side&amp;quot;
                       &amp;quot;footer footer footer&amp;quot;
  div:first-child {
    grid-area: head;
    background: $green;
  }
  .second {
    grid-area: content;
    background: $yellow;
  }
  .third {
    grid-area: side;
    background: $red;
  }
  .fourth {
    grid-area: footer;
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;부모div에는 “head head head” 이런식의 string 값을 4개 주었구요
각각의 자식 div에 &lt;code class=&quot;language-text&quot;&gt;grid-area&lt;/code&gt;라는 속성을 추가하고 value에는 부모div에서 정의한 template들을 적용시켜봤어요&lt;/p&gt;
&lt;p&gt;그러면 화면구성은 어떻게 될까요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3107f900-c6e4-11e9-b6d6-1fdc05f3cd3a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠~ 이렇게 멋있게 구역이 나누어집니다!
저 상태에서 개발자도구의 커서를 갖다 대면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ca5b0c10-c701-11e9-bcd4-4b91f5ecbff0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;우리가 template area를 설정한 대로 정확하게 나뉘어서 나온게 보이시죠? (글씨는 원래 안 뜨는건데 보기 쉽게 제가 추가해놓은거에요.)
이 방법을 쓰면 margin이나 width, height 기타 등등의 속성을 따로 주지 않아도 되니까 진짜 편한거 같아요!&lt;/p&gt;
&lt;p&gt;글이 너무 길어지는거 같으니 다음편으로 계속…&lt;/p&gt;
&lt;p&gt;출처에 있는 srimba 사이트 꼭 들어가보세요!
영상 들으면서 직접 그 화면에서 실습도 해볼수 있어요 넘나 신기한것…
이렇게..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3c5b7700-c702-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_grid.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scrimba.com/p/pWqLHa/c7Jqdfa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://scrimba.com/p/pWqLHa/c7Jqdfa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_2일 TIL_Emmet 단축키로 html 핵 간단하게 짜보자]]></title><description><![CDATA[위코드 21일차. 쓰면 있어 보이기도 하고, 진짜로 핵 유용한 Emmet 단축키를 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode4_2TIL_emmet</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_2TIL_emmet</guid><pubDate>Tue, 20 Aug 2019 21:51:32 GMT</pubDate><content:encoded>&lt;p&gt;1번 타자는 Emmet 단축키는 아니지만 구조부터 찬찬히 만들어 보자는 의미에서 추가..!&lt;/p&gt;
&lt;h2 id=&quot;html-구조-만들기&quot;&gt;&lt;a href=&quot;#html-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;html 구조 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;html 구조 만들기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 누르고 &lt;code class=&quot;language-text&quot;&gt;tab&lt;/code&gt;키 누르면 뙇!! 뜬다는 사실은 이미 널리 알려져 있어서 패쓰&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;요렇게 간편하게 뙇!!!
그치만 Emmet은 진짜 진짜 진짜로 신박한데 많이 알려져 있는거 같진 않다!
그래서 써보는 오늘의 포스팅.&lt;/p&gt;
&lt;h2 id=&quot;자식요소는-를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%8B%9D%EC%9A%94%EC%86%8C%EB%8A%94-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;자식요소는 를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자식요소는 &gt;를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nav&amp;gt;ul&amp;gt;li&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 구조가 뙇!&lt;/p&gt;
&lt;h2 id=&quot;자매-형제요소는-를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A7%A4-%ED%98%95%EC%A0%9C%EC%9A%94%EC%86%8C%EB%8A%94-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;자매 형제요소는 를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자매? 형제?요소는 +를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;div+p+bq&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&lt;/code&gt;를 입력하면 부모-자식 관계가 되지만, &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;를 입력하면 동등한 관계로 태그가 생성됩니다!&lt;/p&gt;
&lt;h2 id=&quot;여러개의-동일한-속성은--를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EB%8F%99%EC%9D%BC%ED%95%9C-%EC%86%8D%EC%84%B1%EC%9D%80--%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;여러개의 동일한 속성은  를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여러개의 동일한 속성은 * 를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ul&amp;gt;li*5&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list 일일히 다 쓰는게 얼마나 귀찮게요! 원하는 개수만큼 곱해주면 끝!&lt;/p&gt;
&lt;h2 id=&quot;id는--class는-&quot;&gt;&lt;a href=&quot;#id%EB%8A%94--class%EB%8A%94-&quot; aria-label=&quot;id는  class는  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;id는 # class는 .&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#header&lt;/code&gt; 입력시 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.header&lt;/code&gt;입력시 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
여기서 알 수 있는 사실! div는 딱히 div라고 안 써줘도 id나 class 이름만 줘도 자동으로 적용됩니다요&lt;/p&gt;
&lt;h2 id=&quot;text는-안에&quot;&gt;&lt;a href=&quot;#text%EB%8A%94-%EC%95%88%EC%97%90&quot; aria-label=&quot;text는 안에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;text는 {}안에&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;a{Click me}&lt;/code&gt; 입력하고 엔터 치면
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt; Click me라는 text를 클릭시 링크이동하는 anchor 태그가 뙇!&lt;/p&gt;
&lt;h2 id=&quot;-사인으로-숫자-매기기&quot;&gt;&lt;a href=&quot;#-%EC%82%AC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%88%AB%EC%9E%90-%EB%A7%A4%EA%B8%B0%EA%B8%B0&quot; aria-label=&quot; 사인으로 숫자 매기기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;$ 사인으로 숫자 매기기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ul&amp;gt;li.item$*5&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class=&amp;quot;item1&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item2&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item4&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item5&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;짠~ $사인이 있는 곳에 번호가 자동으로 생겼슴돠
그렇다면 응용문제…&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;h$[title=item$]{Header $}*3&lt;/code&gt; 이걸 치면 뭐가 나올까요?&lt;/p&gt;
&lt;p&gt;정답은…&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1 title=&amp;quot;item1&amp;quot;&amp;gt;Header 1&amp;lt;/h1&amp;gt;
&amp;lt;h2 title=&amp;quot;item2&amp;quot;&amp;gt;Header 2&amp;lt;/h2&amp;gt;
&amp;lt;h3 title=&amp;quot;item3&amp;quot;&amp;gt;Header 3&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Emmet 치트키가 편해진다면 코드 칠때 진짜 편할거 같지 않나요?ㅋㅋ
더 자세한 문법은 &lt;a href=&quot;https://docs.emmet.io/cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.emmet.io/cheat-sheet/&lt;/a&gt; 요기 들어가시면 예시와 함께 다 나와있습니다!!&lt;/p&gt;
&lt;p&gt;안그래도 코드치는데 손가락을 많이 혹사시키는데…
단축키 쓰면 건강지수도 2% 정도 올라가고.. 일단 멋있어보입니다 ㅎ&lt;/p&gt;
&lt;p&gt;연습만이 살길!!!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.emmet.io/cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.emmet.io/cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_1일 TIL_Sudo란 뭘까?]]></title><description><![CDATA[위코드 20일차. 매일 쓰는 sudo 명령어가 무슨 뜻인지 알고 쓰고 싶어서 정리해본 글이다!]]></description><link>https://gollumnima.github.io//posts/wecode4_1TIL_sudo</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_1TIL_sudo</guid><pubDate>Mon, 19 Aug 2019 19:38:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/444a9fb0-c20f-11e9-b606-158c631d0945/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;맨날 &lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 명령어 써서 수도세 너무 많이 나올것 같은 저의 터미널…
뭐만 안되면 일단 수도를 쓰곤 하는데.. 이걸 남용해도 되나 싶어서 써보는 포스팅입니다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;블로그에 글을 쓸 때만 봐도 sudo 명령어를 쓰지 않으면 항상 저런 에러가 나는데요!
&lt;code class=&quot;language-text&quot;&gt;sudo yarn develop&lt;/code&gt; 명령어를 쓰면 그제서야 로컬서버를 볼 수 있습니다 ㅠㅠ
&lt;code class=&quot;language-text&quot;&gt;Command failed with exit code 1.&lt;/code&gt; 에러는 시간 날때 한번 분석해봐야겠어요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b300500-c26a-11e9-9ae2-2dea29e05eb4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;sudo란&quot;&gt;&lt;a href=&quot;#sudo%EB%9E%80&quot; aria-label=&quot;sudo란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sudo란?&lt;/h2&gt;
&lt;p&gt;Super User DO 의 줄임말로, 액세스가 거부되거나 super user의 권한이 필요할 때 이 명령어를 사용할 수 있습니다~ 여기서 Superuser란 시스템 관리를 위한 특별한 사용자 계정을 말합니다 ㅎㅎ&lt;/p&gt;
&lt;p&gt;sudo를 써야 해결이 되는 에러들은 우분투와 같은 리눅스 배포판을 사용할 때 자주 일어납니다… 애증의 우분투.. 좋은게 뭐니…ㅠㅠ
여튼 좋을거 하나 없는 이 우분투는 root user(super user) 계정이 비활성화 되어있기 때문에 sudo 명령어를 써서 권한을 상승시켜 줘야 에러없이 명령어를 실행할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/347540b0-c1bd-11e9-8201-3992f806871d/image.png&quot; alt=&quot;image.png&quot;&gt;
(서버관리자 유우머 출처 : &lt;a href=&quot;https://swiftcoding.org/sysadmin-humour&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://swiftcoding.org/sysadmin-humour&lt;/a&gt;)
서버관리자 유우머도 한번 보고가시죠~ ㅎ&lt;/p&gt;
&lt;h2 id=&quot;ubuntu에서-sudo를-안-쓰는-방법은-없을까&quot;&gt;&lt;a href=&quot;#ubuntu%EC%97%90%EC%84%9C-sudo%EB%A5%BC-%EC%95%88-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80-%EC%97%86%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;ubuntu에서 sudo를 안 쓰는 방법은 없을까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ubuntu에서 sudo를 안 쓰는 방법은 없을까?&lt;/h2&gt;
&lt;p&gt;있다! 하지만 추천하는 방법은 아니라고 한다..ㅋㅋ
혹시 해보실 분들은 &lt;a href=&quot;https://askubuntu.com/questions/44418/how-to-enable-root-login&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://askubuntu.com/questions/44418/how-to-enable-root-login&lt;/a&gt; 이 사이트에 있는 답변을 참고하시기 바랍니다.
하지만 답변자가 추천하진 않는다고 했으므로 저는 패쓰~ 귀찮지만 sudo와 함께 가겠습니다!
물론 저 방법을 써도 큰 문제는 없다고 합니다.. 저는 linux에 대한 기초지식이 부족한 저로써는 안전하게 sudo를 쓰는게 맞는것 같네요!&lt;/p&gt;
&lt;h2 id=&quot;sudo-꼭-귀찮고-안-좋은것일까&quot;&gt;&lt;a href=&quot;#sudo-%EA%BC%AD-%EA%B7%80%EC%B0%AE%EA%B3%A0-%EC%95%88-%EC%A2%8B%EC%9D%80%EA%B2%83%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;sudo 꼭 귀찮고 안 좋은것일까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sudo, 꼭 귀찮고 안 좋은것일까?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 명령어를 쓰려면 비밀번호를 한번 더 치고 넘어가야 하기 때문에 사용자의 실수를 미연에 방지할 수 있을 것 같아요! 물론 뇌보다 손이 더 빠르다면 어쩔수 없지만…&lt;/p&gt;
&lt;p&gt;sudo 명령어를 찾다가 알게 된 무시무시한 사실…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sudo rm -rf /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아무리 싫은 사람이 있어도 이 명령어를 그 사람 컴퓨터에 치지 마시오!
아무리 회사가 싫어도 퇴사전에 이 명령어를 쓰지 마시오! (재물손괴죄로 처벌받을수 있어요~)&lt;/p&gt;
&lt;p&gt;저 명령어를 입력하게 되면 하드까지 싹~~ 다 날릴수 있다고 하네요
실제로 저 명령어를 입력해서 곤혹을 치룬 아주 유명한 기업이 있죠.. Pixar라고..ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c9f9f9f0-c217-11e9-ab13-fd453fdce69a/image.png&quot; alt=&quot;image.png&quot;&gt;(리눅스와 우디 ㅋㅋ, 이미지 출처: &lt;a href=&quot;https://www.imdb.com/title/tt0120363/mediaviewer/rm1978252800&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.imdb.com/title/tt0120363/mediaviewer/rm1978252800&lt;/a&gt;)
sudo를 썼는진 모르겠지만.. 토이스토리2 제작 당시 &lt;code class=&quot;language-text&quot;&gt;rm-rf /&lt;/code&gt; 명령어 때문에 파일이 다 날라간 적이 있다고 합니다 ㅎ
&lt;code class=&quot;language-text&quot;&gt;rm -r -f *&lt;/code&gt; 이 명령어를 쓰면 현재 디렉토리에 있는 파일을 삭제하는 건데.. 순간의 실수로 삐끗해서 영화 개봉을 앞두고 전체 파일을 날려버렸다는 슬픈 전설이…&lt;/p&gt;
&lt;p&gt;아쉽지만 오늘의 포스팅은 여기서 끝내겠습니다~
사실 저 토이스토리 얘기랑 수도세 드립 치고 싶어서 쓴 글이였습니다.. 그럼 궁금증도 풀렸으니 리액트 공부하러 총총…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_5일 TIL_React의 친구 ESLint]]></title><description><![CDATA[위코드 19일차. 리액트로 보다 깔끔한 코드를 작성하기 위해 Eslint가 무엇인지, 어떻게 설치하는지 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_5TIL_eslint</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_5TIL_eslint</guid><pubDate>Fri, 16 Aug 2019 23:45:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1e892810-c1b4-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;React와 뗄래야 뗄 수 없는 Eslint에 대해 알아봅시다.&lt;/p&gt;
&lt;h2 id=&quot;eslint란&quot;&gt;&lt;a href=&quot;#eslint%EB%9E%80&quot; aria-label=&quot;eslint란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint란?&lt;/h2&gt;
&lt;p&gt;위키백과에 따르면 lint 혹은 linter는 프로그래밍 내부의 에러나 버그를 잡아내는 툴을 말한다고 하네요. 영어사전에 찾아보니 lint가 보푸라기라는 뜻이 있던데! 보풀 하나 없이 깨끗한 코드를 만들어내겠다!! 저는 이런 의미로 받아들였습니다.ㅋㅋ&lt;/p&gt;
&lt;p&gt;사실 조사하기 전까지 ESLint가 Prettier의 React 버전이라고 생각했는데.. 완전 잘못 짚었네요 ㅠㅠ (조사해보라고 숙제 내주신 위코드 2기 권진세님 감사합니다~!)&lt;/p&gt;
&lt;p&gt;여튼 기본적으로 EsLint는 코드를 검사해서 잘못된 부분들을 짚어주기도 하고, Prettier와 함께 사용하면 EsLint 규칙에 맞게 코드를 쫙~ 정리해줍니다!&lt;/p&gt;
&lt;p&gt;ESLint의 규칙은 기본적으로 React에 내장되어 있다는데.. 우리가 정해진 규칙에 맞게 코드를 쓰고 있는건지, 추가적인 에러가 또 있는지는 확인을 못한다..
그래서 CRA에 직접 ESLint를 설치해줘야 합니다~
(설치 방법은 yeri-kim님의 블로그를 참고했습니다. 세상에서 젤 정확한 설치방법이니까 출처의 첫 줄 블로그로 이동 고고!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/08865220-c1b6-11e9-89bf-bf019f725a6c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ctrl+shift+x&lt;/code&gt; 를 눌러서 VScode 내부에서 ESLint 확장팩을 설치해주세요~&lt;/li&gt;
&lt;li&gt;현재 내 프로젝트의 root파일 안에 &lt;code class=&quot;language-text&quot;&gt;.eslintrc.json&lt;/code&gt; 파일 추가 후,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;react-app&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 내용을 써줍니다!&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Prettier 깔기. 저는 이미 설치해서 패쓰~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;npm i prettier eslint-config-prettier eslint-plugin-prettier -D&lt;/code&gt; 이 작업을 통해 prettier와 eslint를 연결해줍니다.&lt;/li&gt;
&lt;li&gt;2번의 코드를 업데이트 해주세요~&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;extends&amp;quot;: [&amp;quot;react-app&amp;quot;, &amp;quot;plugin:prettier/recommended&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;—&gt; 저는 일단 여기까지 해보고 있습니다.. 지난번에 ESLint 깔다가 localhost가 안 켜지는 불상사가 있었기 때문에.. 별로 안 중요한 CRA에 ESLint를 다시 깔아보고 있습니다!&lt;/p&gt;
&lt;p&gt;—&gt; 휴… 다행히 아무 문제 없어서 다시 6번부터 이어가겠습니다!&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;VScode의 setting에 들어가서 우측 상단 {}를 눌러주세요. 아래 캡쳐에서 종이에 화살표 있는 아이콘을 눌러주세요~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/587b2740-c1b8-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;원래 있던 객체 파일안에 아래의 프로퍼티를 추가해주세요! 객체니까 쉼표에 유의해주세요~ 저는 이날 너무 멘붕이라 그런게 1도 안 보였어요 ㅠㅠ&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;editor.formatOnSave&amp;quot;: true,
&amp;quot;[javascript]&amp;quot;: {
  &amp;quot;editor.formatOnSave&amp;quot;: false
},
&amp;quot;eslint.autoFixOnSave&amp;quot;: true,
&amp;quot;eslint.alwaysShowStatus&amp;quot;: true,
&amp;quot;prettier.disableLanguages&amp;quot;: [&amp;quot;js&amp;quot;],
&amp;quot;files.autoSave&amp;quot;: &amp;quot;onFocusChange&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;끝~ 여태 썼던 코드를 확인해보면 희한한 모양으로 바뀌어 있을거에요.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c581eb80-c1b8-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이런식으로 뭔가 코드가 얇아진 느낌적인 느낌…? 아직 이 스타일이 넘 어색하고 이상하지만.. 대세를 따라서 Airbnb 스타일로 쓰면 모두에게 읽기 편한 코드가 되겠죠?&lt;/p&gt;
&lt;h2 id=&quot;에러에-대처하는-자세&quot;&gt;&lt;a href=&quot;#%EC%97%90%EB%9F%AC%EC%97%90-%EB%8C%80%EC%B2%98%ED%95%98%EB%8A%94-%EC%9E%90%EC%84%B8&quot; aria-label=&quot;에러에 대처하는 자세 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;에러에 대처하는 자세..&lt;/h2&gt;
&lt;p&gt;stackoverflow 누가 만든 사이튼지 참.. 솔루션 맛집이네요!
어제 참 이런저런 에러가 떠서 멘붕이였는데.. stackoverflow에서 다 알아냈어요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/082788f0-c1b9-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;진짜 이런 저런 방법을 다 시도해봤어요..
package.json을 삭제 해보고, node module도 삭제해보고, npm과 yarn도 삭제하고 재설치하고… 삽질 오브 삽질을 했습니다!&lt;/p&gt;
&lt;h3 id=&quot;eslint를-설치하는-다양한-방법이-있는데-제발-꼭-하나만-보고-쓰세요&quot;&gt;&lt;a href=&quot;#eslint%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%B4-%EC%9E%88%EB%8A%94%EB%8D%B0-%EC%A0%9C%EB%B0%9C-%EA%BC%AD-%ED%95%98%EB%82%98%EB%A7%8C-%EB%B3%B4%EA%B3%A0-%EC%93%B0%EC%84%B8%EC%9A%94&quot; aria-label=&quot;eslint를 설치하는 다양한 방법이 있는데 제발 꼭 하나만 보고 쓰세요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint를 설치하는 다양한 방법이 있는데.. 제발! 꼭! 하나만 보고 쓰세요!!!!&lt;/h3&gt;
&lt;p&gt;제가 하나의 포스팅 대충 보고 안되니까 다른 포스팅도 보다가 망한 케이스입니다.
하나의 포스팅을 정독 또 정독 하세요!
그리고 -g는 갖다 버리세요!! global로 깔면 오류가 진짜 진짜 잘 나는것 같아요.
제가 우분투 유저라서 그런줄 알았는데 다 그냥 제 탓입니다 ㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼.. 다음번에 기회가 된다면 sass에 대해서도 쓰고 싶네요~!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yeri-kim.github.io/posts/eslint-prettier/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://yeri-kim.github.io/posts/eslint-prettier/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_(software&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Lint_(software&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://eslint.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_4일 TIL_리액트를 이용해 미니트위터 만들기]]></title><description><![CDATA[위코드 18일차. 지난번 개념 정리에 이어.. 리액트로 미니트위터를 만들면서 맞딱뜨린 에러와 오해에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_4TIL_react</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_4TIL_react</guid><pubDate>Thu, 15 Aug 2019 09:40:32 GMT</pubDate><content:encoded>&lt;p&gt;눈으로 보고 치는 눈코딩과 직접 치는 코드가 정말 정말 다르다는 것을 또 다시 느낀 한 주였습니다… 리액트 때문에 계속 멘붕이였죠!
하지만 곧 익숙해질거라 믿으며.. 저의 삽질 과정을 올려봅니다!&lt;/p&gt;
&lt;h2 id=&quot;오류가-왜-이리-많이-생기니&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EB%A5%98%EA%B0%80-%EC%99%9C-%EC%9D%B4%EB%A6%AC-%EB%A7%8E%EC%9D%B4-%EC%83%9D%EA%B8%B0%EB%8B%88&quot; aria-label=&quot;오류가 왜 이리 많이 생기니 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오류가 왜 이리 많이 생기니?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;no-unused-vars
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1ce8b630-be8d-11e9-a771-e153ddc68ff9/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b92add0-be8d-11e9-a771-e153ddc68ff9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;import 선언은 해놓고 안 쓰는 애들에 대한 경고가 뜹니다.
이럴 경우 간편하게 주석처리하거나 저 코드를 지우면 됩니다~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Module not found&lt;br&gt;
캡쳐를 다 해놓은줄 알았는데 저게 끝이네요… ㅠㅠ 저건 대부분 경로설정을 잘못해서 생긴거니까 파일의 상대경로를 잘 설정하세요!&lt;/li&gt;
&lt;li&gt;inline-style 방식에서의 에러&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1abde180-c1af-11e9-b953-25aefde875fe/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이건 아마 처음에 인라인으로 태그에 스타일요소를 넣으려고 했을때 발생한 에러같은데… JSX에서는 중괄호를 두번씩 써서 인라인으로 쓸 수 있습니다! 그치만 프로답게 css파일에 스타일을 정의하는 습관을 기릅시다!&lt;/p&gt;
&lt;p&gt;그 밖에 오타로 인한 에러가 참 많이 났었는데… 매의 눈 필수!!!
언제 한번 리액트 에러 모음집 글을 써보겠습니다~ 대부분의 오류는 주위 사람들에게 도움을 청하거나.. 구글링으로 해결했습니다!&lt;/p&gt;
&lt;h2 id=&quot;컴포넌트-쪼개기가-너무-어려워&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%AA%BC%EA%B0%9C%EA%B8%B0%EA%B0%80-%EB%84%88%EB%AC%B4-%EC%96%B4%EB%A0%A4%EC%9B%8C&quot; aria-label=&quot;컴포넌트 쪼개기가 너무 어려워 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트 쪼개기가 너무 어려워…&lt;/h2&gt;
&lt;p&gt;처음엔 단순히 레이아웃별로 쪼갰습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/05469f30-c1b0-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;
&amp;lt;Top /&amp;gt;
&amp;lt;Left /&amp;gt;
&amp;lt;Right /&amp;gt;
&amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;render함수의 return값 안에 저런식으로 넣었지만..
컴포넌트를 쓰는 이유가 재사용성 때문인데.. 제가 일단 쪼개긴 했어도 재활용은 전혀 하지 않았기 때문에 다시 쪼개봤습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a449dde0-c1b0-11e9-b4da-37fdbf89eb79/image.png&quot; alt=&quot;image.png&quot;&gt;
사실 재사용 할만한 모양이 별로 없어서 Top Component에 속해있던 흰색 바 안의 구성요소들을 Top2nd라는 컴포넌트로 따로 빼서 Left Component와 Right Component에 이어붙여줬습니다..&lt;/p&gt;
&lt;p&gt;이렇게 하는게 제대로 하는건진 모르겠지만.. 일단 월요일에 피드백 받기 전까지 주말까지의 저의 삽질은 여기까지!!&lt;/p&gt;
&lt;h2 id=&quot;부모-컴포넌트에-대한-오해&quot;&gt;&lt;a href=&quot;#%EB%B6%80%EB%AA%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%A4%ED%95%B4&quot; aria-label=&quot;부모 컴포넌트에 대한 오해 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부모 컴포넌트에 대한 오해…&lt;/h2&gt;
&lt;p&gt;저는 그냥 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Top /&amp;gt;&amp;lt;Left /&amp;gt;&amp;lt;Right /&amp;gt;&lt;/code&gt;가 합쳐지는 최종 컴포넌트가 부모 컴포넌트라고 생각했는데… 그게 아니였어요!!! 부모 컴포넌트는 react app에서 무조건 하나만 존재할거라 생각했는데…
그냥 props를 물려주는 쪽은 다 부모라고 할 수 있는거에요! 앞서 react 개념 정리할 때 각 컴포넌트간 데이터 교류를 무역이라고 정의 내렸는데.. &lt;br&gt;그냥 그 무역이 부모와 자식간의 거래(?) 였네요 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;부모 컴포넌트에 대해서 제대로 알고있지 못해서 props를 활용하는 부분도 어렵게 생각했는데, 한번 이해하고 나니 이제 간단한 코드는 쓸 수 있게 되었어요!&lt;/p&gt;
&lt;p&gt;예를 들어…&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Top2nd&lt;/code&gt;라는 위는 굵은 글씨, 아래는 얇은 글씨의 형식을 만들어주는 컴포넌트가 있습니다. 이걸 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt;이라는 컴포넌트에 붙여볼겁니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Top2nd extends React.Component {

    render() {
    return (
        &amp;lt;div className=&amp;quot;doorits_box&amp;quot;&amp;gt;
            &amp;lt;ul&amp;gt;
            &amp;lt;li className=&amp;quot;bold&amp;quot;&amp;gt;{this.props.bold}&amp;lt;/li&amp;gt;
            &amp;lt;li className=&amp;quot;light&amp;quot;&amp;gt;{this.props.light}&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;아래는 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt; 컴포넌트 중 일부&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;     &amp;lt;div
      className=&amp;quot;bar_wrap&amp;quot;
      &amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Doorits&amp;quot;
      light={this.state.tweetBox.length}
      /&amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Followers&amp;quot;
      light=&amp;quot;24&amp;quot;
      /&amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Followings&amp;quot;
      light=&amp;quot;2&amp;quot;
      /&amp;gt;
      &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Top2nd&lt;/code&gt; 컴포넌트의 bold라는 className에 넣고 싶은 글씨를 넣을 수도 있고,
아니면 state객체를 이용해서 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt;안의 값을 대입하는 방법도 있습니다!
넘나 신기한 리액트의 세계~~
아직은 어렵고, 잘 안되면 화도 나지만 재미는 있으니깐! 더 발전할 수 있겠죠? XD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_3일 TIL_재귀함수(Recursion)에 대해 정리해보기]]></title><description><![CDATA[위코드 17일차. 코딩을 하면서 꼭 한번쯤은 맞딱뜨리게 되는 재귀함수에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_3_TIL_recursion/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_3_TIL_recursion/</guid><pubDate>Wed, 14 Aug 2019 09:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/90548c30-c1a7-11e9-a617-2b7b8642c92b/mathematics-696806640.png&quot; alt=&quot;mathematics-696806_640.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;학창시절.. 수학시간에 프랙탈이라는 구조에 대해서 한번쯤은 들어봤을 것이다. 동일한 모양이 계속해서 반복되는 그러한 구조…!! 사진 속 시에르핀스키 피라밋처럼!
프로그래밍 세계에서도 동일한 함수가 계속 반복되는 재귀(Recursion)라는 개념이 있다.&lt;/p&gt;
&lt;h2 id=&quot;왜-재귀를-공부해야-할까&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 재귀를 공부해야 할까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 재귀를 공부해야 할까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간결하고 직관적인 코드를 제공한다!&lt;/li&gt;
&lt;li&gt;설계와 개발, 디버깅 과정모두 재귀적인 사고를 요구한다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;재귀란&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EB%9E%80&quot; aria-label=&quot;재귀란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자기 자신을 호출하는 행위&lt;/li&gt;
&lt;li&gt;주어진 문제를 자기 반복적인 문제들로 잘게 분해한 후, 이들을 다시 조합해 원래 문제의 정답을 찾는 것을 말한다~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;재귀와-콜스택&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EC%99%80-%EC%BD%9C%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;재귀와 콜스택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀와 콜스택&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스택(Stack)이란?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-함수를 호출한 후 원래 자리로 돌아오려면, ‘원래 자리’를 어딘가에 저장해야하는데 그 어딘가를 가리켜 Stack이라고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호출스택(Call Stack)이란?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-프로그램상 어디에 있는지 기록하는 자료구조를 말한다&lt;/p&gt;
&lt;p&gt;cf) MDN 호출스택 정의 : &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/Call_stack&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Glossary/Call_stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-함수를 실행하면 stack위에 push를 하게 됩니다.(쌓이고~)&lt;br&gt;
-return 시 stack의 맨 윗값(가장 최근 데이터)을 pop합니다.(가져오면 그 함수가 cal l stack에서 제거됩니다.)&lt;/p&gt;
&lt;p&gt;==&gt; 그래서 return 이란~!&lt;/p&gt;
&lt;p&gt;Stack에 저장된 최근 주소값, 나를 실행시킨 것의 바로 다음 step의 주소로 돌아간다는 의미입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/8a5620f6efe44958bd1670e6a630869f#b6a59504701d43c4a392b08bbafdef12&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/p4qNK6maB5eamv9M-g3ca_wKdRwe7iDddOLA5fEkTJPlgaRGj8qD2AJ8nGetZJNsbOcV6yHH1BtPf7-IjCyWuIX_E8FWCEFGy_vO7yfLF5FgoW3iYg-Wb4ACiGmYC1L4PtIW1Gr9&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/2QGahcO74QQDksY8oSaCU3bPpEjHIsKFiD9IlXra6KDaZAOs4ACZpPwcMOrW2r_lrvPTZdGVjjrT47XWOfVsbsBdVmIwvykFVqsWf5nrRvbSrLT2EmHiDo_onifjUJvVBWlOCTrP&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/1XVkduAkp0ku6LOZiFPNbLLOpnHCko4oBo9uRx6vGPKQx3YHk9xnLo_viYWCxjzgby57cDWK81n5RvgI9bO_KsP5cN4_vjJr1bQUCBFC_LiBoHgfLWpAbd6zvyAKZtk6mrkk79_K&quot;&gt;&lt;/p&gt;
&lt;p&gt;-값이 return 되기 전에 call stack이 쌓이면 호출스택의 최대 수용치를 넘게 되고… stack overflow 발생!!&lt;br&gt; -종료조건을 달아줘야 stack overflow를 막을 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;재귀함수-응용&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EC%9D%91%EC%9A%A9&quot; aria-label=&quot;재귀함수 응용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수 응용&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6b145840-c1a9-11e9-abb1-7bd155a4a0a8/cute-2500929640.jpg&quot; alt=&quot;cute-2500929_640.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x3C;1&gt;피보나치 수열&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 달은 아기 토끼 한 쌍에서 시작합니다.&lt;/li&gt;
&lt;li&gt;아기 토끼는 한 달이 지나면 어른토끼가 됩니다.&lt;/li&gt;
&lt;li&gt;어른 토끼는 한 달에 한 쌍의 아기토끼를 낳습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==&gt; 0,1,1,2,3,5,8 …
위의 결과가 나오도록 함수를 만들어 보면.. 🙂&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    function fibo(n) {
        if (n &amp;lt; 2)
            return n;
        return fibo(n-1) + fibo(n-2);
    }

    fibo(6) // 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제가 이 코드를 칠 때 우리의 컴퓨터우리의 컴퓨터는…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    call fibonacci(6)
      call fibonacci(5)
        call fibonacci(4)
          call fibonacci(3)
            call fibonacci(2)
              call fibonacci(1)
              return 1
              call fibonacci(0)
              return 0
            return 1
            call fibonacci(1)
            return 1
          return 2
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
        return 3
        call fibonacci(3)
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
          call fibonacci(1)
          return 1
        return 2
      return 5
      call fibonacci(4)
        call fibonacci(3)
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
          call fibonacci(1)
          return 1
        return 2
        call fibonacci(2)
          call fibonacci(1)
          return 1
          call fibonacci(0)
          return 0
        return 1
      return 3
    return 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 식으로 6번째 피보나치 수를 구하는데 무려 함수의 호출이 25번 일어납니다 ㅠㅠ..
14번째 피보나치 수를 구할땐 호출수는 1019…&lt;/p&gt;
&lt;p&gt;console.log(fibo(100)) 을 찍어보면 함수의 호출이 몇 번 일어날까요? (컴퓨터 살려…)&lt;/p&gt;
&lt;h2 id=&quot;재귀함수의-문제점&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;재귀함수의 문제점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수의 문제점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출의 비용&lt;/li&gt;
&lt;li&gt;Stack의 깊이&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그렇다면 해결책은 없을까요…?!&lt;/p&gt;
&lt;h2 id=&quot;해결책--함수-호출하지말고-반복문-쓰기&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EC%B1%85--%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C%ED%95%98%EC%A7%80%EB%A7%90%EA%B3%A0-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;해결책  함수 호출하지말고 반복문 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결책 : 함수 호출하지말고 반복문 쓰기&lt;/h2&gt;
&lt;p&gt;-반복 단계별 계산 결과를 반복이 끝날 때까지 특정 변수에 저장하는 방식으로 풀어볼 수 있습니다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    function fibo(n) {
    var cur, pre = 1, prepre = 0;
    if (n &amp;lt; 2)
    return n;
    for ( var i = 2 ; i &amp;lt;= n ; i++ ) {
    cur = pre + prepre;
    prepre = pre;
    pre = cur;
    }
    return cur;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다른 해결책으론 꼬리호출이라는 방식이 있는데.. 이건 제가 아직 제대로 이해하지 못해서 다음 기회에…&lt;br&gt;
아직 이 방식을 적용하는 브라우저도 많지 않아서 천천히 알아도 될 것 같고요..?&lt;/p&gt;
&lt;h2 id=&quot;재귀함수-활용한-알고리즘-문제들&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%EB%93%A4&quot; aria-label=&quot;재귀함수 활용한 알고리즘 문제들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수 활용한 알고리즘 문제들&lt;/h2&gt;
&lt;p&gt;전체코드를 다 보기 전에 타이틀만 보고 꼭 한번씩 생각해보세요~&lt;/p&gt;
&lt;h2 id=&quot;최소공배수와-최대공약수-구하기&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98%EC%99%80-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;최소공배수와 최대공약수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최소공배수와 최대공약수 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function solution(n, m) {
  function u(n, m) { return m % n ? u(m % n, n) : n; }
  const gcd = u(n, m);
  return [gcd, n * m / gcd];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;유클리드 호제법이라는 것도 한번 찾아보세요~ 아직도 너무 너무 헷갈리는 이 공식 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;문자열-반복하기&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;문자열 반복하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 반복하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function repeatString(string, num) {
  if(num &amp;lt;= 0) {
    return &amp;#39;&amp;#39;
  }
  else {
    return string + repeatString(string,num-1)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;주어진-두-수-사이의-숫자들-구하기&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%91%90-%EC%88%98-%EC%82%AC%EC%9D%B4%EC%9D%98-%EC%88%AB%EC%9E%90%EB%93%A4-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;주어진 두 수 사이의 숫자들 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주어진 두 수 사이의 숫자들 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const range = (start = 0, end = 0) =&amp;gt; {
  let arr = [];
  start &amp;gt; end &amp;amp;&amp;amp; ([start, end] = [end, start]);
  arr.push(start);
  return start === end ? arr : [...arr, ...range(start + 1, end)]
}
console.log(range(2, 5)); // [2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;n번째-짝수-구하기&quot;&gt;&lt;a href=&quot;#n%EB%B2%88%EC%A7%B8-%EC%A7%9D%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;n번째 짝수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;N번째 짝수 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getNthEvenNum (n) {
    if (n &amp;lt;= 1) {
        return 0;
    } else {
        return getNthEvenNum(n-1) + 2;
    }
};

getNthEvenNum(3) //4
//0,2,4,6,8,10,12...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;특정숫자의-n제곱-구하기&quot;&gt;&lt;a href=&quot;#%ED%8A%B9%EC%A0%95%EC%88%AB%EC%9E%90%EC%9D%98-n%EC%A0%9C%EA%B3%B1-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;특정숫자의 n제곱 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;특정숫자의 n제곱 구하기&lt;/h2&gt;
&lt;p&gt;아래의 코드는 2의 n제곱이지만 다른 숫자를 넣으면 그 수의 제곱을 구할수 있겠죠? :)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getPowerOf2 (n) {
  if(n) &amp;lt;=0) {
    return 1
  }
  else {
    return getPowerOf2(n-1)*2
  }
}

getPowerOf2(4)//16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;순차검색법&quot;&gt;&lt;a href=&quot;#%EC%88%9C%EC%B0%A8%EA%B2%80%EC%83%89%EB%B2%95&quot; aria-label=&quot;순차검색법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;순차검색법&lt;/h2&gt;
&lt;p&gt;이건 아직도 헷갈려서 이번에 정리하는 김에 다시 보고 있어요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function searchArraySequentially (array, i, j, x) {
    if (i &amp;lt;= j) {
        if (array[i] === x) { // 같으면 i return
            return i;
        } else { //같지 않으면 하나씩 늘려서 간격 줄여가기
            return searchArraySequentially(array, i + 1, j, x);
        }
    } else { //끝까지 줄였는데도 안 나오면 i와j사이에 없는거니깐 -1 return
        return -1;
    }
}

var array = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;];
var result1 = searchArraySequentially(array, 0, 4, &amp;#39;e&amp;#39;);
var result2 = searchArraySequentially(array, 0, 3, &amp;#39;e&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;문자열-역순으로-정리하기&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;문자열 역순으로 정리하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 역순으로 정리하기&lt;/h2&gt;
&lt;p&gt;거꾸로 하는건 reverse지만.. 언어유희 좀 해봤어요 ㅎ 이 코드를 알고있어서 위코드 1주차 코드카타 문제를 재귀로도 접근해볼수 있었네요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function rebirth(s) {
  if(s === &amp;#39;&amp;#39;) {
    return &amp;#39;&amp;#39;
  }
  else {
    return rebirth(s.substring(1))+s.charAt(1)
  }
}
console.log(rebirth(&amp;#39;hello&amp;#39;))
//ello + h
//llo + e + h
//lo + l + e + h
//o + l + l + e+ h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 재귀에 대해 간단히 알아보았는데요..!
개발자라면 피할 수 없는 부분이라고 생각합니다.. 탈출조건을 생각하고 로직을 짜는게 참 어려운 일이지만..&lt;br&gt; 익숙해지면 잘 할수 있겠죠???!ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ryulib.tistory.com/318&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://ryulib.tistory.com/318&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;원래 출처가 몇 군데 더 있었는데.. 예전에 에버노트에서 한번 날리는 바람에…ㅠㅠ&lt;br&gt;
출처 중 두번째 블로그는 읽어보시면 꼭 도움 될겁니다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_2일 TIL_React의 기초개념을 알아보자]]></title><description><![CDATA[위코드 16일차. 프론트엔드 개발자로 성장하는 첫 걸음마로 리액트의 기초개념에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_2_TIL_react/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_2_TIL_react/</guid><pubDate>Tue, 13 Aug 2019 10:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/51e4aa80-bdc8-11e9-a959-a5309cf0f824/books-16557831920.jpg&quot; alt=&quot;books-1655783_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;리액트는 자바스크립트 라이브러리 중의 하나이다. 그렇다면 라이브러리란 뭘까?&lt;/p&gt;
&lt;h2 id=&quot;library&quot;&gt;&lt;a href=&quot;#library&quot; aria-label=&quot;library permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Library&lt;/h2&gt;
&lt;p&gt;라이브러리란 유용한 함수 메소드의 꾸러미라고 생각하면 될 것 같다. 라이브러리를 통해 코드 쓰는 시간의 약 20% 정도를 줄일수 있다고 한다 와우! 예전에 개발자들이 자주 쓰던 jQuery또한 라이브러리 중의 하나이다!&lt;/p&gt;
&lt;h2 id=&quot;react의-폴더-구성&quot;&gt;&lt;a href=&quot;#react%EC%9D%98-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;react의 폴더 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React의 폴더 구성&lt;/h2&gt;
&lt;p&gt;글만 쓰는게 싫어서 캡쳐한 후 설명을 달았습니다..ㅎㅎ;;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/aa9d4e60-bf22-11e9-93f4-9b2a14d0ffa2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;create-react-app 디렉토리이름&lt;/code&gt; 명령어를 입력하고 VS코드를 열어보면 이러한 파일들이 있을건데요, 우리는 여기서 src폴더에 Component와 js,css 파일들을 만들고 그것을 통해 웹페이지를 구현할 거에요!&lt;/p&gt;
&lt;p&gt;그렇다면 리액트에는 어떠한 요소들이 있을지 하나하나 살펴봅시다~&lt;/p&gt;
&lt;h2 id=&quot;jsxjavascript-xml&quot;&gt;&lt;a href=&quot;#jsxjavascript-xml&quot; aria-label=&quot;jsxjavascript xml permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSX(Javascript XML)&lt;/h2&gt;
&lt;p&gt;html문법을 javascript파일 안에다가 쓴 것. 이것은 js도 html도 아니기 때문에 React 내에서 이걸 페이지내에서 읽히도록 Compile 해주는 과정이 들어갑니다~&lt;/p&gt;
&lt;p&gt;기억해야 할 것들…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중첩된 요소는 소괄호 닫아주기.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const good = (
&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;hi&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;하나의 태그로 시작쓰.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const wrong = (
&amp;lt;p&amp;gt;list1&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;list2&amp;lt;/p&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 쓰면 안됩니다! 제대로 쓰려면 저 두 p태그들을 하나로 묶어주는 div가 필요합니다~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class나 id 말고 className 쓰기
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p className=&amp;quot;sleepy&amp;quot;&amp;gt;넘나 졸려요&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;주석처리 할 때 태그 사이는 &lt;code class=&quot;language-text&quot;&gt;//&lt;/code&gt;, 바깥은 &lt;code class=&quot;language-text&quot;&gt;{/**/}&lt;/code&gt; 이렇게! 이건 어차피 &lt;code class=&quot;language-text&quot;&gt;ctrl+shift&lt;/code&gt; 하면 자동으로 입력 되니까 일단 알아만 두세요~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;component&quot;&gt;&lt;a href=&quot;#component&quot; aria-label=&quot;component permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c41eeda0-c14b-11e9-8c06-7968c705c2e5/hands-6004971920.jpg&quot; alt=&quot;hands-600497_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;컴포넌트는 요소라는 뜻인데, 나라라고 생각하면 됩니다! 여러 나라들의 협력을 통해서 지구(Web page)에 메시지를 띄워서 외계인(user)한테 보내는거라고 생각해봅시다 ㅎ&lt;/p&gt;
&lt;p&gt;근데 중요한 점은 단순히 여러개가 합쳐져서 하나를 만드는 것이 아닌, 동일한 것이 있다면 비효율적인 작업을 줄여주는 재사용 가능한 함수에요. 마치 js에서의 class처럼~&lt;/p&gt;
&lt;p&gt;컴포넌트는 함수형과 클래스형 둘로 나뉘는데, 그 전에 컴포넌트를 한번 파헤쳐봅시다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5bb55830-c14b-11e9-bbdb-150d07ce600c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;컴포넌트파일이 같은 폴더에 있다고 해도 각각의 파일은 아예 다른 나라라고 생각하면 됩니다. 국경을 넘으려면 수출과 수입을 해야 해요! 자세한 설명은 그림을 참고하시면 됩니다. 이렇게 여러 나라의 협력을 통해서…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/018d1810-c14c-11e9-bbdb-150d07ce600c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 외계인에게 보낼 메시지를 띄울 수 있는거죠! 자 그럼 함수형과 클래스형 컴포넌트에 대해 간단히 짚고 넘어갑시다.&lt;/p&gt;
&lt;h4 id=&quot;함수형&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%ED%98%95&quot; aria-label=&quot;함수형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수형&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Hungry = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;I am hungry. Please give me your {props.name} &amp;lt;/h1&amp;gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;클래스형&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95&quot; aria-label=&quot;클래스형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스형&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Hungry extends React.Component {
	render() {
  		return &amp;lt;h1&amp;gt;I am hungry. Please give me your {props.name} &amp;lt;/h1&amp;gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 공통점이 보이시나요? 네 맞습니다! component는 늘 대문자로 써야해요.
차이점을 볼까요? 함수형과 달리 클래스형은 &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt; 전에 &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt;를 꼭 써야합니다. 그렇다면 props라는건 뭘까요?!&lt;/p&gt;
&lt;h2 id=&quot;props&quot;&gt;&lt;a href=&quot;#props&quot; aria-label=&quot;props permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;props&lt;/h2&gt;
&lt;p&gt;props는 properties의 줄임말로 js에서의 객체와 똑같은 의미인데요, 부모 컴포넌트에서 자식 컴포넌트로 넘겨주는 값입니다. 함수형 컴포넌트에선 props가 인자로 들어갑니다. 위에서 봤던 hungry함수를 받아서 쓰는 컴포넌트가 있으면 결과값이 나오겠죠? 봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import Hungry from &amp;#39;./Hungry&amp;#39;;

class Food extends Component {
  render() {
    return (
      &amp;lt;Hungry name=&amp;quot;chicken&amp;quot; /&amp;gt;
    );
  }
}

export default Food;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hungry컴포넌트와 Food컴포넌트가 합쳐져서 &lt;code class=&quot;language-text&quot;&gt;I am hungry. Please give me your chicken&lt;/code&gt; 라는 메시지가 완성됩니다. 물론 외계인에게 보여주려면 ReactDOM.render 함수도 따로 써줘야하겠죠~?
props말고 state라는 값도 있는데 그건 class 내부에서만 쓸 수 있는 성질이에요.&lt;/p&gt;
&lt;h2 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state&lt;/h2&gt;
&lt;p&gt;말 그대로 컴포넌트의 상태를 말합니다. props와 마찬가지로 객체에요! 이걸 사용하려면 constructor 내부에 꼭 &lt;code class=&quot;language-text&quot;&gt;this.state = {}&lt;/code&gt;이런 식으로 초기화를 해줘야합니다~ 그러고 나서 함수안에 &lt;code class=&quot;language-text&quot;&gt;this.setState()&lt;/code&gt;라는 식을 통해 state의 상태값을 바꿔줄 수 있어요. 예리킴님의 블로그에서 퍼온 아래의 코드를 함께 살펴봅시다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Button extends React.Component {

  constructor() {
    super();

    this.state = {
      click: false
    }
  }

  render() {
    return (
      &amp;lt;div
        className=&amp;quot;btn&amp;quot;
        onClick={()=&amp;gt;{this.setState({ click: !this.state.click })}}
      &amp;gt;
        {this.state.click ? &amp;#39;좋아요&amp;#39; : &amp;#39;싫어요&amp;#39;}
      &amp;lt;/div&amp;gt;
    );
  }
}

ReactDOM.render(
  &amp;lt;Button /&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클릭을 할 때마다 좋아요 혹은 싫어요가 번갈아 가면서 나오는 코드입니다.&lt;br&gt;
먼저 생성자 함수 내부에서 state의 click값이 false로 초기화 된 상태인데요! onClick함수 내의 setState함수에서 click이라는 state값이 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 부정되었기 때문에 클릭을 한번 하면 true가 되겠죠? 그 다음엔 삼항연산자에서 true면 좋아요, false면 싫어요가 나오게 됩니다. onClick 함수 내부의 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 때문에 클릭을 할 때마다 true, false값이 계속해서 바뀌게 되는거죠~&lt;/p&gt;
&lt;p&gt;분명 이렇게 이해하면 잘 알겠는데, 왜 항상 활용은 어려울까요.. ㅠㅠ
지난번에 만든 미니트위터를 Component 형식으로 쪼개는 것부터 props와 state를 이용해 데이터 값을 바꿔주는데 애를 먹고있네요 큽… 하다 보면 늘겠죠????????&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yeri-kim.github.io/posts/react-jsx/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://yeri-kim.github.io/posts/react-jsx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/top-javascript-frameworks-libraries-tools-use/#libraries&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.sitepoint.com/top-javascript-frameworks-libraries-tools-use/#libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velopert.com/3626&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://velopert.com/3626&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_1일 TIL_Linux의 기초를 알아보자]]></title><description><![CDATA[위코드 15일차. 송은우님의 강연을 바탕으로 개발자에게 있어서 뗄래야 뗄 수 없는 리눅스의 기초개념에 대해 정리해보았다.]]></description><link>https://gollumnima.github.io//posts/wecode3_1_TIL_linux/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_1_TIL_linux/</guid><pubDate>Mon, 12 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4a5a69a0-be93-11e9-9e21-fd5890a496e3/image.png&quot; alt=&quot;image.png&quot;&gt;
까만 터미널이 무서워서 색깔을 입혀본 나의 터미널쓰.. 터미널 너무 무서워서 싫어하는데… 개발 하려면 이제는 친해져야겠지! 하는 의미에서 써보는 포스팅 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; aria-label=&quot;linux permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h2&gt;
&lt;p&gt;대부분의 서버가 linux로 되어 있어서 개발하는 사람들이라면 짱짱 중요한 운영체제.( window는 서버로 잘 안쓴다고 한다.. 열일해라 윈도우). 일단 리눅스를 피할수없는 운명이므로…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;잘 알아야하고&lt;/li&gt;
&lt;li&gt;반복적으로 써서 익숙해져야 한다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3dc0a9a0-c0de-11e9-a81c-3590d60861a3/image.png&quot; alt=&quot;image.png&quot;&gt;(Linus Torvals)&lt;/p&gt;
&lt;p&gt;리눅스는 1991년도에 Linus Torvals가 개발함. 리눅스를 개발한것 치고는 연봉이 6만 5천불 정도..!???? 원래는 더 받을 능력이 있지만 그냥 이 사람은 개발이 좋아서 하는 것… 대단쓰..!! 리눅스 말고 깃도 만들었는데 돈은 깃허브가 다 가져가네~~ 와우 ㅋㅋ&lt;/p&gt;
&lt;p&gt;리눅스의 뿌리는 유닉스. 뿌리가 깊기 때문에 처음부터 끝까지 알긴 어렵고,..
리눅스 전문 직군도 따로 있음! 그 정도로 학문의 깊이가 깊음
그러니까 우리는 개발자 선에서 필요한 정도만 알고 있으면 됨.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리눅스의 디렉토리 구조&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오늘 포스팅에선 이 정도를 살펴보려고 한다!&lt;/p&gt;
&lt;h3 id=&quot;리눅스의-file-system&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-file-system&quot; aria-label=&quot;리눅스의 file system permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리눅스의 file system&lt;/h3&gt;
&lt;p&gt;리눅스는 기본적인 폴더 구조는 트리형태! &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;가 각각의 directory를 나타낸다. 윈도우에서는 &lt;code class=&quot;language-text&quot;&gt;\&lt;/code&gt; 백슬러시. 디렉토리 구조는 두 가지 형태로 나뉘는데…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시스템 디렉토리
운영체제 관련한 것들이 담김.&lt;/li&gt;
&lt;li&gt;유저 디렉토리
홈 디렉토리를 말한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex) 유저 디렉토리 이동방법 활용쓰&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd /&lt;/code&gt; 입력시 홈 디렉토리로 이동~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt;만 치고 아무 것도 안 치면 홈 디렉토리로 이동!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt;(틸다) 치면 홈디렉토리로 감&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(틸다라는 용어를 알았으니 이제붙턴 물결말고 틸다를 자주 써줘야겠다! 내가 아는 틸다는 틸다스윈튼밖에…☆)&lt;/p&gt;
&lt;h3 id=&quot;경로&quot;&gt;&lt;a href=&quot;#%EA%B2%BD%EB%A1%9C&quot; aria-label=&quot;경로 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;경로&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;절대경로
내 위치랑 상관없이 절대적인 경로. root부터 타고 감.&lt;/li&gt;
&lt;li&gt;상대경로
내 위치에 따라 움직임.
&lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; : 현재 내 위치
&lt;code class=&quot;language-text&quot;&gt;..&lt;/code&gt;: 현재 내 위치보다 더 상위 디렉토리
&lt;code class=&quot;language-text&quot;&gt;./&lt;/code&gt;: 같은 폴더안에 있다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이거 진짜 왕 중요!! 터미널이나 비주얼 스튜디오에서 진짜진짜 자주 쓴다. 아직 헷갈려서 쳐보면서 확인하는데.. 한번 정리해놨으니 이제는 기억하겠지!&lt;/p&gt;
&lt;p&gt;ex) &lt;code class=&quot;language-text&quot;&gt;cd ./temp&lt;/code&gt;
현재 내가 위치해있는 디렉토리 내부의 temp 디렉토리.&lt;/p&gt;
&lt;h3 id=&quot;설정configs&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%A0%95configs&quot; aria-label=&quot;설정configs permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설정(configs)&lt;/h3&gt;
&lt;p&gt;우리가 코드 치면서 자주 보는 config file… 이건 환경을 설정하다라는 의미의 configure의 줄임말 이였다!
여튼 리눅스에서의 설정은 주로 파일을 통해서 하는데, 크게 시스템 설정과 유저 설정으로 나눠볼 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시스템 설정
-&gt; 어려우니까 다음기회에 정리할 예정쓰!&lt;/li&gt;
&lt;li&gt;유저 설정
-&gt; file에 있는 값들을 바꿔서 설정을 해줌.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;다양한 설정파일들이 있는데… 그 중 제일 중요한건 shell이다! 우리는 보통 설정을 터미널 창을 통해 하게 되는데.. 그렇다면 shell가 terminal은 무슨 차이일까! shell이 회장님, terminal은 비서라고 생각하면 쉬울 것 같다.&lt;/p&gt;
&lt;p&gt;사용자가 terminal에 명령어를 입력하면 그 명령어를 받아서 운영체제에 전달해주고, 운영체제가 그걸 실행시키면 결과값을 다시 전송하는게 바로 shell이 하는 역할이다. 이렇게 shell은 유저와 운영체제간의 중간다리 역할을 한다!!&lt;/p&gt;
&lt;p&gt;shell의 종류도 여러가지가 있는데..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash : 내가 윈도우 시절에 썼던 git bash 같은 애들&lt;/li&gt;
&lt;li&gt;z shell(Zsh) : 요즘 핫한 shell. 터미널을 예쁘게 꾸밀수도 있고, 유용한 명령어가 많아서 생산성을 높일 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shell 설정을 하려면.. 예를 들어 Zsh을 깐다고 생각해보자!
홈 디렉토리에 있지만 우리 눈엔 안 보인다… 착한 사람 눈에만 보인다 ㅎ
zshrc파일은 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;으로 시작되는 숨겨진 파일이라서 &lt;code class=&quot;language-text&quot;&gt;ls -a&lt;/code&gt;라는 명령어를 입력하면 그제서야 볼 수 있다!&lt;/p&gt;
&lt;h2 id=&quot;환경변수path-environment-variable&quot;&gt;&lt;a href=&quot;#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98path-environment-variable&quot; aria-label=&quot;환경변수path environment variable permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;환경변수(path environment variable)&lt;/h2&gt;
&lt;p&gt;환경변수란 linux라는 운영체제의 환경설정값을 저장하고 있는 변수를 말한다.(여기서 환경은 shell을 말한다.) 이렇게 말하면 잘 이해가 가지 않으니 예를 들어보겠다!!!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 우리가 자주 쓰는 이 명령어 cd는 놀랍게도 프로그램이다. 이미 경로설정이 잘 됭있기 때문에 path를 입력하지 않고 cd만 쳐도 실행이 되는것…! 넘나 씐기~
그 밖에도…
&lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mv&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cp&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cat&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;nohup&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;clear&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;chown&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grep&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;history&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;ps&lt;/code&gt;
path 설정이 잘 되어있는 이러한 명령어들이 있다!&lt;/p&gt;
&lt;p&gt;우리가 프로그램을 새로 설치했을 때 실행이 잘 안 될 경우가 있는데, 그건 바로 path 설정이 제대로 안 되어 있어서이다 ㅠㅠ 나도 이번에 eslint를 설치하느라 고생을 넘 많이 했는데 그게 다 path설정 때문에 발생한 문제였구나…&lt;/p&gt;
&lt;p&gt;환경변수를 설정하는 방법에 대해서는 다음 기회에 저 명령어들과 함께 다룰 예정!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_7일 TIL_웹의 역사와 이것저것쓰]]></title><description><![CDATA[위코드 14일차 위코드 송은우님의 강연을 바탕으로 웹의 역사에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_7_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_7_TIL_js/</guid><pubDate>Sun, 11 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4abe4cd0-bc28-11e9-891f-a7a04360ad5c/world-13029591920.jpg&quot; alt=&quot;world-1302959_1920.jpg&quot;&gt;
위코드 멘토님 송은우님의 강연을 바탕으로 쓴 포스팅입니다 :)&lt;/p&gt;
&lt;h2 id=&quot;웹서비스&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot;웹서비스 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹서비스&lt;/h2&gt;
&lt;p&gt;그냥 개발공부를 시작하는 것보다는 한번쯤은 짚고 넘어가면 좋을 부분이 바로 웹의 역사! 뭐든 역사와 의미를 알고가면 좀 더 재밌게 공부할 수 있으니깐~!ㅋㅋ&lt;/p&gt;
&lt;p&gt;먼저 인터넷이라는 개념은 1960년대에 처음 나왔는데,군사목적으로 문서를 빨리 빨리 전송하려고 나온것! 그 당시에는 물리적으로 떨어져있는 컴퓨터와 컴퓨터와의 연결을 뜻하는게 바로 인터넷이었음. 지금과는 완전히 다른 개념쓰~
우리와 좀 더 친숙한 의미의 인터넷은 1960년대에 나왔져! World Wide Web. 줄여서 WWW. 10년만에 상용화가 될 정도로 빠른 발전이 있었지요~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c81dcc0-bc2a-11e9-8397-2b5ddb762b18/memory-28824811920.jpg&quot; alt=&quot;memory-2882481_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;저의 초등학교 시절 과제는 이 디스켓과 함께 했었는데.. 지금은 사용하지 않는 비운의 디스켓…☆ 여튼.. 그당시만 해도 CD를 굽는다거나 플로피 디스크에 문서를 저장했었는데, 요즘은 다운로드만 하면 끝! 해외에 기술을 수출하려고 해도 배타고 비행기타고 난리난리 했지만 요즘은 인터넷만 연결하면 되지요. 개이득!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인터넷이 가져온 가장 큰 혁신이 바로 이렇게 공간적인 제약을 없앤 것!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;초창기-web-service-architecture&quot;&gt;&lt;a href=&quot;#%EC%B4%88%EC%B0%BD%EA%B8%B0-web-service-architecture&quot; aria-label=&quot;초창기 web service architecture permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;초창기 Web Service Architecture&lt;/h2&gt;
&lt;p&gt;이걸 짚고 넘어가기 전에, 요즘의 야후와 어린시절의 야후를 비교해보자..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/77e2f910-bc2b-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/42f18190-bc2b-11e9-877b-2fffbf6a152c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2000년대의 Yahoo는 거의 신문인줄… 야후 꾸러기 들어가서 플래시게임 하고 놀았었는데 그 당시엔 별로 촌스럽다고 생각을 안 했지만 지금 보니 ㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;웹의 발달과 함께 닷컴붐 혹은 닷컴버블현상이 일어났음. 이 당시에 너도 나도 IT사업을 하다 보니 망한곳도 많고 ㅠㅠ 여튼 이 과정 속에서 UI가 중요해졌음! html만으론 한계쓰~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper Text Markup Language
HTML이 뭐의 줄임말인줄은 알았으나 마크업과 마크다운의 차이를 잘 몰랐다. 근데 마크업은 태그를 통해 표시(Mark up)하는 것. 글만 보면 이게 div인지 p인지 몰라.. 어떻게 랜더링해야 하는지 고민쓰..! 근데 내가 쓰고 있는 이 개츠비 블로그는 마크다운 형식이라 ’## 이것은 큰글씨’ 이런식으로 직관적으로 효과를 줘서 딱 알아볼 수 있음!! 제일 앞에 붙은 hyper는 html이 link 위주의 글이라는 걸 알려준다.(하이퍼링크 소곤소곤…)&lt;/li&gt;
&lt;li&gt;Cascading Stytle Sheet
html과 마찬가지로 css로도 로직을 구현할 수 없음. 얘는 그저 꾸며주기만 할 뿐…!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;그래서 우리는 다양한 로직을 구현하기 위해 Javascript가 필요한거다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;네이버 실시간 검색순위를 생각해보자!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7a2a37b0-bc30-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;실검의 네모박스는 한번 랜더링되면 바뀌지 않지만(정적)
실검의 키워드는 실시간으로 바뀌고 있다(동적) 크롬 개발자도구 툴을 이용해보면 우리 눈에 보이지 않는 투명 실검영역이 점차 위로 올라가고 있음을 확인할수 있다~&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;/p&gt;
&lt;h2 id=&quot;왜&quot;&gt;&lt;a href=&quot;#%EC%99%9C&quot; aria-label=&quot;왜 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜&lt;/h2&gt;
&lt;p&gt;다른 언어를 웹사이트에 쓰지 못했을까? 우리가 가진 프로그래밍 언어는 많은데..
못생겨서? 컴파일이 안되서? 전부 아니다. 웹 브라우저가 C언어 같은 애들을 실행하지 못했기 때문에 걔네가 실행할 수 있는 언어가 필요했던 것!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ff9d45e0-bc30-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트는 넷스케이프라는 회사의 브렌던 아이크(Brendan Eich)씨가 만들었는데, 넷스케이프는 그당시 최초로 상용화된 웹 브라우저였고 인기도 퍽발! 그럼 왜 자바 스크립트일까? java랑 대체 무슨 관련이 있길래… 사실 직접적인 관련은 없다 ㅎ&lt;/p&gt;
&lt;p&gt;원래 java는 Sun Microsystems라는 회사가 개발했는데 망… 그래서 Oracle이 인수했음!ㅠㅠ java랑 비슷한데 웹적으로, 동적으로 구현할 수 있는 언어를 만들자 그게 javascript인 것! java인데 script 기능이 되는 것이죠~&lt;/p&gt;
&lt;p&gt;이후, java는 applet이라는걸 따로 만듬. 약간 flash 같은거!? 근데 얘는 망한듯.. 약간 무겁다네요&lt;/p&gt;
&lt;h2 id=&quot;2세대-web--동적인-요소가-가미됨&quot;&gt;&lt;a href=&quot;#2%EC%84%B8%EB%8C%80-web--%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%9A%94%EC%86%8C%EA%B0%80-%EA%B0%80%EB%AF%B8%EB%90%A8&quot; aria-label=&quot;2세대 web  동적인 요소가 가미됨 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2세대 Web : 동적인 요소가 가미됨&lt;/h2&gt;
&lt;p&gt;html로 정적인 부분을 구현하고 script 태그에 있는 부분을 랜더링해서 동적이게 만든 것. 하나의 웹서버가 브라우저에 html,js,xml 다 전송쓰~ &lt;/p&gt;
&lt;h2 id=&quot;요즘은-spa-무조건-동적쓰-주객전도쓰&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%A6%98%EC%9D%80-spa-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EB%8F%99%EC%A0%81%EC%93%B0-%EC%A3%BC%EA%B0%9D%EC%A0%84%EB%8F%84%EC%93%B0&quot; aria-label=&quot;요즘은 spa 무조건 동적쓰 주객전도쓰 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요즘은 SPA 무조건 동적쓰! 주객전도쓰~&lt;/h2&gt;
&lt;p&gt;주객전도쓰~ 이제는 html이 아닌 javascript 위주로 돌아간다네~~
=&gt; django 같이 한 서버에서 다 처리하는 애들은 api에 적합하지 않음. 너무 헤비해! 그래서 우리는 Single Page Application을 쓰는데, React가 이 처리를 도와줌.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single Page Application
하나의 페이지로 전체 애플리케이션을 구현할수 있음. html마저도 js를 통해서 생성하는것..! js가 그때그때 필요한 태그들을 생성해버린다…! 예를 들어, file 하나에 html 페이지에서 body태그는 div 하나정도만 잡고, link라는 태그에 js 파일 링크 걸고, 그 본체인 js 에서 다 구현쓰~ 이열! (사실 SPA에 대해선 아직 자세히 알지 못하므로 시간날때 다음번 포스팅에서 자세히 다뤄볼것이다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 과정에서 브라우저는 서버랑 데이터만 주고받으면 되는것이고, 개발자 세계를 생각해보면..&lt;/p&gt;
&lt;h4 id=&quot;uiux를-담당하는-front와-서버-데이터를-담당하는-back의-구분이-명확해짐&quot;&gt;&lt;a href=&quot;#uiux%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-front%EC%99%80-%EC%84%9C%EB%B2%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-back%EC%9D%98-%EA%B5%AC%EB%B6%84%EC%9D%B4-%EB%AA%85%ED%99%95%ED%95%B4%EC%A7%90&quot; aria-label=&quot;uiux를 담당하는 front와 서버 데이터를 담당하는 back의 구분이 명확해짐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ui/ux를 담당하는 front와 서버/ 데이터를 담당하는 back의 구분이 명확해짐.&lt;/h4&gt;
&lt;h2 id=&quot;빅데이터가-중요해진-시대&quot;&gt;&lt;a href=&quot;#%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%B4%EC%A7%84-%EC%8B%9C%EB%8C%80&quot; aria-label=&quot;빅데이터가 중요해진 시대 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빅데이터가 중요해진 시대..&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/31eff270-bc38-11e9-a402-4726289e189d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;트위터를 생각해보자. 기능적으론 꽤 구현하기 쉬운 편이다. 그치만 동시에 전세계에서 몇 백만명이 써도 나 혼자 쓰고있는 듯한 속도감이 아주 좋다… 그렇게 만드는게 참 어려운데 대단한 기술이라는 것만 알겠다..! 그래서 페북은 엔지니어가 만명정도 된다고 우와…&lt;/p&gt;
&lt;p&gt;데이터 양이 너무 많아지면 데이터를 여러 서버에 분산시켜서 저장한 담에 분석할 때 각자 독립적으로 하고, 분석결과를 하나로 조합해서 데이터베이스에 넣고.. 여튼 빅데이터가 중요해짐!&lt;/p&gt;
&lt;p&gt;갑분…&lt;/p&gt;
&lt;h2 id=&quot;개발팀-구성&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%8C%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;개발팀 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발팀 구성&lt;/h2&gt;
&lt;p&gt;늘 궁금했던 건데 이번 은우님 강연을 통해서 개발팀에 역할이 어떻게 나누어져 있는지 알게되서 넘나 뿌듯뿌듯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;front
-Product Manager: 어떤 시스템을 만들지 기획. 뭘뭘 먼저 개발할지 순서를 결정하기도 하고, user feedback을 받기도 하고, business와 개발팀의 중간 역할을 함
-designer : ui, ux 디자인
-frontend developer: 말그대로 앞단에서 일하는 개발자. 우리나라는 퍼블리셔라고 html, css 해주는사람 따로 있음&lt;/li&gt;
&lt;li&gt;back
-빽의 앞: api 담당 -&gt; 실검순위가 나오는 테이블은 프론트, 실제 실검 데이터는 빽이 담당. 로그인 페이지 꾸미는게 프론트라면 빽은 프론트가 보내준 아이디와 비번을 가지고 맞으면 맞다 아니면 아니다 반응 해주는 알고리즘을 만든다.
-빽의 뒤 :데이터 수집, 분석, 관리 등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-devops : 빽 개발자가 system infa 관리도 함. aws같은 클라우드 서비스가 발전하면서 하드웨어를 몰라도 시스템 인프라 관리 가능쓰
-sysops : 서버관리쓰. 하드웨어적
-data scientist : 머신러닝, ai 등 데이터 분석 알고리즘과 데이터 분석 모델링 구현
-data engineer : ds 도와서 데이터 모델링 구현해줌
-tester : QA- 직접 메뉴얼 테스팅쓰. sw enginnerr in test/ test automation 자동테스트 시스템 전문 구현&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/js-spa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/js-spa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_6일 TIL_게임에 class 적용해보기]]></title><description><![CDATA[위코드 13일차 js의 ES6문법인 class를 이용해서 게임을 재구성해보았다! 정말 정말 많은 분들의 도움을 받았다..! 감사합니다!]]></description><link>https://gollumnima.github.io//posts/wecode2_6_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_6_TIL_js/</guid><pubDate>Sat, 10 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fea3ee60-bc07-11e9-b5c2-e3ccef6334a9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 시간에 class 공부를 마쳐서 class로 구현할 수 있을줄 알았는데 아니였고… 영웅을 화면에 띄우는 것부터 시작해서 동작 구현 등을 같은 기수 광훈님의 도움을 엄청 많이 받았다. 감사합니다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;함수로 쓴 코드와 클래스로 쓴 코드를 먼저 비교해보자!&lt;/p&gt;
&lt;h2 id=&quot;함수로-구현&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;함수로 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수로 구현&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var hero_position = 400
var hero = document.getElementById(&amp;#39;hero&amp;#39;)

function left() {
    hero.style.backgroundPositionX = 70+&amp;#39;px
    //이 부분을 처음에 background-position-x로 써서 오류가 났음
    hero_position -= 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 0일때 멈추게 하는 법
    if(hero_position &amp;lt;= 0) {
        hero_position = 0 
    }
}

function right() {
    hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
    hero_position += 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 764일때 멈추게 하는 법
    if(hero_position &amp;gt;= 762) {
        hero_position = 762
    }
}

function moving(event) {
    if(event.keyCode === 37) {
        left()
    }
    if(event.keyCode === 39) {
        right()
    }
}

window.addEventListener(&amp;#39;keydown&amp;#39;,function(event) {
    moving(event)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;처음에-실수했던-부분&quot;&gt;&lt;a href=&quot;#%EC%B2%98%EC%9D%8C%EC%97%90-%EC%8B%A4%EC%88%98%ED%96%88%EB%8D%98-%EB%B6%80%EB%B6%84&quot; aria-label=&quot;처음에 실수했던 부분 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;처음에 실수했던 부분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;backgroundPositionX를 CSS에서 쓰던 대로 하이픈(-)을 썼다가 오류가 발생. Camel case로 적어보니 그 오류는 해결쓰!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아직 나는 초보자이고, 게임을 구현하는 게 생소하다 보니 이미지를 자르는 데서부터 시간이 굉장히 오래 걸렸는데 함수 자체는 간단쓰!
이게 될까??? 하는 의심으로 쉽사리 식을 써내려가지 못했다 ㅋㅋ &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;기계를 좀 더 믿자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;class로-구현&quot;&gt;&lt;a href=&quot;#class%EB%A1%9C-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;class로 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class로 구현&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Hero {
    // 인스턴스가 생성될때 같이 실행할 프로퍼티들 담기
    constructor(parents) {
        this.parents = parents;
        this.hero = this.create_hero();
        this.hero_position = 400;

        window.onkeydown = this.move_hero.bind(this);
    }
    // 김영웅 등장쓰!
    create_hero() {
        let elhero = document.createElement(&amp;#39;div&amp;#39;);
        elhero.className = &amp;#39;hero&amp;#39;;
        this.parents.appendChild(elhero);
        return elhero;
    }
    move_hero(event) {
        switch(event.keyCode) {
            case 37:
            this.hero.style.backgroundPositionX = 70+&amp;#39;px&amp;#39;
            this.hero_position -= 10;
            this.hero.style.left = this.hero_position +&amp;#39;px&amp;#39;
            if (this.hero_position &amp;lt;= 0 ) {
                this.hero_position = 0;
            }
            break;
            
            case 39:
            this.hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
            this.hero_position += 10;
            this.hero.style.left = this.hero_position +&amp;#39;px&amp;#39;
            if(this.hero_position &amp;gt;= 762) {
               this.hero_position = 762; 
            }
            break;
        }
    }
}

let parentsMainDiv = document.getElementById(&amp;quot;bg&amp;quot;);
let hero = new Hero(parentsMainDiv);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 김영웅씨 파트는 class로 구현했을 때의 메리트를 별로 못 느끼겠다 ㅠㅠ
유령 파트를 class로 구현하면 뭔가 아!! 이거였어? 하는 느낌이 올텐데.. 유령은 동작 구현을 class로 하지 못해서 포기한 상태 ㅠㅠ 월요일날 위코드 멘토 ♥예리님♥께서 봐주실 예정쓰&lt;/p&gt;
&lt;p&gt;글이 너무 많으면 지루해지니깐 위의 식을 그림으로 분석해봤다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1aec0100-bc0a-11e9-b5c2-e3ccef6334a9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class 하단에 배경화면을 불러와서 우리가 부모라고 설정한 다음 김영웅과 연결&lt;/li&gt;
&lt;li&gt;dom에서처럼 document.getElementsbyClassName 를 써서 hero를 불러왔었는데 div부터 새로 만들어야 한다는 사실..&lt;/li&gt;
&lt;li&gt;위에서 생성한 element와 parent를 꼭 &lt;code class=&quot;language-text&quot;&gt;appendChild&lt;/code&gt;로 묶어줘야 한다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appendChild하니까 최근에 꾼 꿈이 생각난다…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1693adf0-bc0b-11e9-9347-7dd419aba616/train-7970721920.jpg&quot; alt=&quot;train-797072_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;기차역이 배경이었던 꿈.. 도착지까지 캐리어가 4개나 있어서 미리 화물칸에다 부쳤는데 도착하고 나니 나만 못 받았어… 그래서 직원한테 내 짐 어딨냐고 따지니까 appendChild를 안 해줬다고 오히려 나를 꾸짖었다 ㅎ&lt;/p&gt;
&lt;p&gt;appendChild의 중요성을 또 한번 깨닫게 되는 소중한 꿈이었다…☆
다시 본론으로 들어가서…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dbd37a90-bc0c-11e9-b176-a3b978566f4d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event의 target(?)을 설정하는 부분이 제일 헷갈렸다. 이벤트가 걸리는 건 window라고 생각해서 &lt;code class=&quot;language-text&quot;&gt;this.event.keyCode = event.keyCode;&lt;/code&gt;와 같은 식을 constructor에 넣었는데 역시나 안됐다. 함수 switch문에 event.keyCode를 넣으니 해결쓰!&lt;/li&gt;
&lt;li&gt;이벤트에 on땡땡 기능을 넣을땐 bind를 이용해 this와 묶어줘야 함수가 실행이 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;유령부분은.. 랜덤으로 위치가 바뀌는 것 까진 했는데 class로 setInterval과 기타등등을 구현하려니 너무 너무 힘들었다… 포기하기 까지 정말 나름의 고민과 고통을 겪었는데.. 이 또한 지나가면 아무것도 아니겠지!!&lt;/p&gt;
&lt;p&gt;다른 공부를 위해 오늘의 포스팅은 짧게 여기서 끄읕~~&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_5일 TIL_setInterval로 특정행동 초마다 반복시키기]]></title><description><![CDATA[위코드 12일차 js. setInterval함수를 이용해 게임 캐릭터의 행동을 초마다 반복시켜 보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_5_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_5_TIL_js/</guid><pubDate>Fri, 09 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;원래 지난번 썼던 함수식을 class로 변형시킨 것을 써보려고 했지만, 임시저장해 놓은 글이 너무 아까워서 setInterval도 한번 짚고 넘어가겠다~ &lt;/p&gt;
&lt;p&gt;아래서부턴 임시저장했던 글! (사실 별 내용 없다~ setInteval 개념과 내가 실패한 함수식만 있을뿐)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e783ccf0-b969-11e9-880d-9fcc7e1f2b82/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;어제 집 가기까지 만든 화면!
별 거 아닌것 같이 보이지만 여기까지 오느라 너무너무 힘들었다 ㅠㅠㅠ
이제 유령 파트를 구현해야 하는데!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로고침 시 유령 랜덤하게 등장하기&lt;/li&gt;
&lt;li&gt;일정시간이 경과하면 유령 자동으로 떨어지게 하기&lt;/li&gt;
&lt;li&gt;유령이 김영웅과 만나면 피바다! + 으악 bgm 넣기&lt;/li&gt;
&lt;li&gt;피바다가 된 유령을 저 세상으로 보내기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어제 Math.random()을 이용해서 유령이 랜덤하게 등장하게까지는 만들었는데, set Interval이 약간 까다로울듯
한번 해보자!!!!&lt;/p&gt;
&lt;h2 id=&quot;set-interval&quot;&gt;&lt;a href=&quot;#set-interval&quot; aria-label=&quot;set interval permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set Interval&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;setInterval(function, milliseconds, param1, param2, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;첫 번째 인자로 함수가, 두 번째 인자로 시간이 들어가는 이 함수는 지정한 시간마다 함수를 반복해주는 메소드이다. 여기서 주의할 사항! 1000 milliseconds는 1 second와 같다는 점~
그럼 허접한 나의 식을 공개쓰..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var enemy = document.getElementById(&amp;#39;enemy&amp;#39;)
var enemy_position = 400;
var enemy_top = 0;

function live() {
    enemy.style.left = Math.floor(Math.random()*762) + &amp;#39;px&amp;#39;
}

function raining() {
    enemy_top += 30
    enemy.style.top = enemy_top + &amp;#39;px&amp;#39;;
    
    if (enemy_top &amp;gt;= 545) {
        enemy.style.top = 545+&amp;#39;px&amp;#39;
    }
}

let enemy_rain = setInterval(raining, 150)

window.addEventListener(&amp;#39;load&amp;#39;,function(event) {
    live(event)
    enemy_rain // 처음엔 여기에 소괄호 넣었는데 error가 떠서 지워줬다. 괄호를 쳐도 실행은 잘됨
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난번에 김영웅씨를 띄우기 성공하고 나니 유령 부분은 약간 더 쉬워진 느낌적인 느낌?? 굿굿~
live함수에선 유령이 랜덤으로 나타나게 했는데 저렇게 쓰는게 맞는진 모르겠다.. 약간 버벅거리면서 나타나서 맘에 들진 않는다 ㅋㅋ &lt;/p&gt;
&lt;p&gt;raining이라는 함수를 만들어서 유령의 top 위치를 변하게 만들었고, 바닥에 닿으면 더이상 이동 못하게 막아놨다. 더 기능을 넣고 싶은 욕심이 생기지만.. 난 이미 이미지 sprite 하는 부분과 우분투 설치하는 부분에서 시간을 많이 잡아먹었기 때문에 나중에 시간이 날때 보충해볼 생각이다!&lt;/p&gt;
&lt;p&gt;여튼 raining 함수를 setInterval 안에 넣어주고.. 인자를 1000 ms로 설정했더니 너무 느려서 화끈하게 150으로 줄였더니 적당한 빠르기가 나왔다리~ 함수 만든걸 다 load 함수 안에 넣으면 완성! 생각보다 간단쓰~?&lt;/p&gt;
&lt;h2 id=&quot;collision-detection&quot;&gt;&lt;a href=&quot;#collision-detection&quot; aria-label=&quot;collision detection permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collision Detection&lt;/h2&gt;
&lt;p&gt;이 키워드까지 오는데 여러 키워드가 필요했다..ㅎ
영웅이랑 유령이랑 만나면? 닿으면 ? 겹치면? 부딪힌다면? 충돌한다면? 아!!! collision detection!!!!! 좋았어~&lt;/p&gt;
&lt;p&gt;나의 첫 시도. MDN 공식문서에 있는 Axis-Aligned Bounding Box(AABB)를 이용해 코드를 작성해보았다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function blood() {
    let hero_xy = {x: hero.style.backgroundPositionX, y :hero.style.backgroundPositionY, width: 35, height:54}
    let enemy_xy = {x: enemy.style.backgroundPositionX, y: enemy.style.backgroundPositionY, width: 45, height: 54}

    if(hero_xy.x &amp;lt; enemy_xy.x + enemy_xy.width &amp;amp;&amp;amp; hero_xy.x+hero_xy.width &amp;gt; enemy_xy.x &amp;amp;&amp;amp; hero_xy.y &amp;lt; enemy_xy.y + enemy_xy.height &amp;amp;&amp;amp; hero_xy.y + hero_xy.height &amp;gt; enemy_xy.y) {
        enemy.style.backgroundPositionX = 45 + &amp;#39;px&amp;#39;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;놀랍게도 아무일도 일어나지 않았다 ㅎ
유령을 잡아서 피바다를 만들어야 하는데… 죽이기가 너무 힘들다. 생명의 소중함을 다시 한번 깨닫게 되는 시간~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/05d3fae0-b988-11e9-bc02-13036cebe418/image.png&quot; alt=&quot;image.png&quot;&gt;
아무일도 일어나지 않은건 훼이크…! 오타를 발견해서 수정해보니…
유령이 죽은채로 내려온다… 벌써 죽으면 안되는데… 영웅이랑 만나서 죽어야 하는데 또르륵…&lt;/p&gt;
&lt;p&gt;앗..근데 찾아보니 저 방법은 canvas를 썼을 때 쓸 수 있는 방법 같다… &lt;/p&gt;
&lt;p&gt;다시다시… 정석대로 2차 시도! left 값 변화에 따라 함수를 작성해보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function blood() {
    let hl = hero.style.left
    let ht = hero.style.top
    let hw = hero.style.width
    let el = enemy.style.left
    let et = enemy.style.top
    let ew = enemy.style.width

    if ((el &amp;lt; hl-ew) || (hl &amp;lt; el-hw) || (ht-ew &amp;gt; et)) {
        enemy.style.backgroundPositionX = 45+&amp;#39;px&amp;#39;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다시 아무 일도 일어나지 않았다.
아까의 식은 유령이 죽어서 내려오긴 해도 여튼 죽긴 죽는데… 2차 시도때 식은 유령을 죽일수가 없다!&lt;/p&gt;
&lt;p&gt;멘토님의 조언을 받고 class 형태로 다시 식을 써내려가 보기로 했다.
다음번 포스팅에선 클래스의 정의와 새로 구현한 식을 공유할 예정쓰~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어제와 오늘의 결론
너무 조급해 하지 말자. 아주 조금이라도 하던걸 갈아엎게 되었을때 흔들리지 않는 강려크한 멘탈의 소유자가 되자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/met_win_setinterval.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/jsref/met_win_setinterval.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection?source=post_page&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection?source=post_page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_4일 TIL_객체의 생성자, 프로토타입,클래스              ]]></title><description><![CDATA[위코드 11일차 js의 객체 생성자, 프로토타입 상속, 클래스에 대해 알아보았다! 클래스를 충분히 공부했다고 생각했지만 적용하기가 아직도 너무 힘들다!]]></description><link>https://gollumnima.github.io//posts/wecode2_4_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_4_TIL_js/</guid><pubDate>Thu, 08 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c1b6b2f0-b9c6-11e9-a5b2-7b59e5bd28b3/drink-31699771920.jpg&quot; alt=&quot;drink-3169977_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;커피나 홍차에 설탕이 빠질수 없듯이! 컴퓨터 세상에서도 설탕역할을 하는 달콤한 녀석들이 이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Syntactic sugar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;우리말로 하면 문법적 설탕정도..? 어려운 컴퓨터 세상 언어를 좀 더 달콤하게, 문법적인 거부감 없이 쓸 수 있게 만들어주는 애들을 Syntactic sugar라고 한다.&lt;/p&gt;
&lt;p&gt;오늘 우리가 알아볼 javascript의 class도 이에 속한다고 할 수 있다. 나도 동의한다… 왜냐… 나는 플라시보 효과를 믿거든 ㅜㅜ 지금 class에 대한 개념이 너무너무너무 어려우니까 설탕이라고 생각하고 달게 삼킬란다!&lt;/p&gt;
&lt;p&gt;여튼… 클래스를 알아보기 전에 객체의 상속에 대해 먼저 알아보자!!!!&lt;/p&gt;
&lt;h2 id=&quot;객체의-생성자&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90&quot; aria-label=&quot;객체의 생성자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 생성자&lt;/h2&gt;
&lt;p&gt;ES6문법인 class가 나오기 전에 우리는 객체의 생성자를 통해 메소드를 물려주곤 했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/27a4be70-ba32-11e9-b1d9-437764c6bb4d/image.png&quot; alt=&quot;image.png&quot;&gt;(사진출처 : G마켓 &lt;a href=&quot;http://item.gmarket.co.kr/Item?goodscode=1263969902&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://item.gmarket.co.kr/Item?goodscode=1263969902&lt;/a&gt;) 광고아님ㅋㅋ 이미지가 맘에들었을 뿐 T^T&lt;/p&gt;
&lt;p&gt;세 가지 맛 붕어빵을 만든다고 생각해보자. 객체를 만드는 과정을 세 번 반복할 수도 있지만, 우리는 생성자와 new 연산자를 이용해 좀 더 쉽고, 간단하게 같은 property를 가진 객체들을 만들어낼 수 있다! 요렇게~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Fish_bread(flavour,mix,brand) {
    this.flavour = flavour;
    this.mix = mix;
    this.brand = brand;
}

let redbean =  new Fish_bread(&amp;#39;redbean&amp;#39;,{&amp;#39;whaet&amp;#39;:70, &amp;#39;rice&amp;#39;: 30},&amp;#39;둘둘철강&amp;#39;)
let choco = new Fish_bread(&amp;#39;chocolate&amp;#39;,{&amp;#39;wheat&amp;#39;:80, &amp;#39;rice&amp;#39;:20},&amp;#39;이레철강&amp;#39;)
let creamcheese = new Fish_bread(&amp;#39;creamcheese&amp;#39;, {&amp;#39;wheat&amp;#39;: 65, &amp;#39;rice&amp;#39;:35},&amp;#39;가마니철강&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;생성자(constructor) : 객체를 생성할 수 있는 함수. 여기선 Fish_bread가 생성자! 생성자 안에 &lt;code class=&quot;language-text&quot;&gt;this.property이름&lt;/code&gt;이라는 property를 써서 그 값이 할당된 객체를 만든다. &lt;/li&gt;
&lt;li&gt;new 연산자 : 객체의 생성, 프로토타입 설정, 객체의 초기화 과정을 통해 같은 property를 가진 새로운(new) 객체를 만든다&lt;/li&gt;
&lt;li&gt;인스턴스(instance) : new 연산자로 생성한 객체. 여기서 인스턴스는 redbean, choco, creamcheese이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로토타입-상속&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%83%81%EC%86%8D&quot; aria-label=&quot;프로토타입 상속 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로토타입 상속&lt;/h2&gt;
&lt;p&gt;우리의 자바스크립트는 프로토타입 상속을 기반으로 하는 객체지향언어이다. 여기서 객체지향이란건 객체의 특성 중 하나인 &lt;code class=&quot;language-text&quot;&gt;재사용성&lt;/code&gt;이 좋다는 점을 이용하는건데! 공통적인 요소들을 새롭게 만드는 것이 아닌 부모로 부터 상속 받을 수 있도록 하고, 새로운 요소는 자식에 저장을 하는 것을 말한다.&lt;/p&gt;
&lt;p&gt;이 말이 나는 뭔진 알겠는데 뭔지 모르겠다.. 근데 그러면 그건 걍 모르는거다! 이번 기회에 이게 무슨 뜻인가 생각하면서 정리해보기로 마음 먹었다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ab1297b0-ba3b-11e9-877c-59b9c3aec7b8/dna-18890851920.jpg&quot; alt=&quot;dna-1889085_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;DNA를 통해 유전정보를 상속받는 인간처럼 객체 또한 부모객체로부터 상속을 받을 수 있다. Java와 같은 객체지향 언어에서는 class를 통해 상속이 이루어진다는데, 자바스크립트에선 생성자(constructor)를 통해 상속쓰~ ES6문법에서 클래스라는 개념이 등장했지만, 우리의 js는 굳건히 프로토타입 상속을 기반으로 한다.&lt;/p&gt;
&lt;p&gt;여튼.. ES6 클래스가 나오면서 좀 더 이 개념이 쉬워졌다는데(정말?) 일단 기존의 프로토타입 상속에 대해서 먼저 살펴보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let macaron_1 = {
    name : &amp;#39;salted caramel&amp;#39;,
    introduce : function() {
        return `This is ${this.name} macaron`
    }
}

let macaron_2 = {
    name : &amp;#39;mint chocolate&amp;#39;
}

macaron_2.__proto__ = macaron_1
console.log(macaron_2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;macaron&lt;em&gt;2의 콘솔을 찍어보면 macaron&lt;/em&gt;1에서 초기화 된 객체의 틀을 이어받아서 &lt;code class=&quot;language-text&quot;&gt;{name: &amp;quot;mint chocolate&amp;quot;}&lt;/code&gt;라는 결과값이 나오게 된다. introduce라는 값은 상속을 받긴 했지만 콘솔엔 macaron_2만 찍었기 때문에 안 나온다. &lt;/p&gt;
&lt;p&gt;다시 콘솔창에 macaron_2.introduce()를 찍어보면 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;This is mint chocolate macaron&amp;quot;&lt;/code&gt;라는 값이 나오게 된다. &lt;/p&gt;
&lt;p&gt;이번에는 macaron_2의 유전정보를 파헤쳐보자!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8cc9c780-ba43-11e9-92c6-e18f3f433915/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt; 부분을 살펴보면 macaron&lt;em&gt;1 객체에 저장되어 있던 정보들을 확인해 볼 수 있다. `&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;macaron&lt;/em&gt;2.introduce()`&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;의 결과값이 나오는 과정을 좀 더 자세히 알아보자면..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;macaron_2에서 introduce()라는 프로퍼티를 가지고 있는지 확인해본다.&lt;/li&gt;
&lt;li&gt;macaron&lt;em&gt;2에 없으니까 얘의 조상님인 macaron&lt;/em&gt;1으로 거슬러 올라간다.&lt;/li&gt;
&lt;li&gt;macaron_1에 introduce()가 있네? 이제 그걸 사용한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 식으로 자기가 가지고 있지 않은 프로퍼티를 &lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt;정보를 보며 거슬러 올라가는 것을 프로토타입 체인이라고 한다. 우리는 객체의 연결고리를 통해 원하는 정보를 효율적으로 저장할 수 있다. 이러한 과정을 거쳐 프로토타입 상속을 객체지향 언어가 바로 우리의 친구, 자바스크립트!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Macaron_1(amount,price) {
    this.amount = amount;
    this.price = price;
}

Macaron_1.prototype.total = function() {
    return this.amount*this.price
}

let m2 = new Macaron_1(2,2500)
console.log(m2.total()) // 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반적으로 객체 생성하는 방식으로 객체를 만들어 보았다. 이걸 클래스로 바꾸어보자!&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;class&lt;/h2&gt;
&lt;p&gt;객체를 찍어내는 일종의 함수를 클래스라고 말한다. 사실 MDN을 봐도 class가 딱히 뭐다! 하고 시원하게 정의내려주진 않는다.. 내가 난독증이라 못 찾는건가 ㅠㅠ 그냥 super나 constructor 같은 클래스 멤버들을 쓰기 위한 틀 정도로 이해하면 될까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Macaron_1 {
    constructor(amount, price) {
        this.amount = amount;
        this.price = price;
    }
    total() {
        return this.amount*this.price;
    }
}

let m2 = new Macaron_1(2,2500)
console.log(m2.total())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여튼 위에서 만든 식을 이렇게 클래스로 다시 만들어도 결과값은 동일하다! 각각의 구성에 대해 자세히 살펴보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ac2b3800-ba59-11e9-a094-599e2759e54d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다음 파트로 넘어가기 전, 호이스팅에 대해 잠깐 짚고 넘어가보자&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;함수 선언문으로 정의한 생성자는 호이스팅이 되지만, 함수 표현식, 클래스 선언문, 클래스 표현식으로 정의한 애들은 호이스팅이 되지 않는다. 이 점을 주의해야 할 것 같다. 시간 관계상 식을 따로 만들기보단, 모던 자바스크립트 입문 도서에 있는 재미없는 식을 콘솔창에 찍어 비교해봤다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c2ba200-ba5f-11e9-9608-a1894510510f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사실 클래스에선 호이스팅이 일어날수도 있다! 우리 눈에 안 보일뿐… 여튼 콘솔창에 찍으면 웹 브라우저에선 에러가 나는데.. 브라우저 문제 일수도?! 여튼.. 에러가 나니까 일단은 쓰지 말자!&lt;/p&gt;
&lt;h2 id=&quot;class-멤버--constructor-extends-super&quot;&gt;&lt;a href=&quot;#class-%EB%A9%A4%EB%B2%84--constructor-extends-super&quot; aria-label=&quot;class 멤버  constructor extends super permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;class 멤버 : constructor, extends, super&lt;/h2&gt;
&lt;p&gt;클래스 멤버들을 살펴보기 전에 식을 하나 띄울거다. Anurag Majumdar님이 쓴 포스팅을 보면서 공부해봤다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Food {
  constructor(name, country) {
    this.name = name;
    this.country = country;
  }
  yum() {
    return `${this.name} is JMT.`
  }
  spicy() {
    return `${this.name} is spicy.`
  }
  available() {
    return `${this.name} is available now.`
  }
}

class Chicken extends Food {
  constructor(name, country) {
    super(name, country);
  }
  favorite() {
    return `${this.name} is one of my favorites.`
  }
  hanNyibMan() {
    return `Can I try this ${this.name}?`
  }
  friends() {
    return `${super.yum()} ${this.hanNyibMan()}`
  }
}

function display(content) {
  console.log(content)
}

const chicken = new Chicken(&amp;#39;twotwochicken&amp;#39;, &amp;#39;Korea&amp;#39;)
display(chicken.favorite())
display(chicken.friends())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;constructor : 맨 처음에 객체의 생성자 파트에서 나왔던 그 친구, 맞다. 우리말로 하면 생성자 함수. function 역할을 대신해서 객체가 생성될 때 그 객체의 초기상태를 세팅하는 것! 객체가 만들어지기 직전에 실행되도록 약속된거라고 한다.. 말이 너무 어렵다. 걍 함수메이커라고 보자! 근데 1클래스당 1생성자다. 2개 이상 만든다면 Syntax Error가 생길 것!&lt;/li&gt;
&lt;li&gt;extends : 부모 클래스와 자식 클래스를 연결해주는 ↘연↗결↘고↗리↗ 역할쓰&lt;/li&gt;
&lt;li&gt;super : 부모클래스의 constructor를 호출하기 위해 필요한 애. 때론 객체로, 때론 함수로 쓰인다. 함수로 쓰일 땐, 자식 클래스에 부모 클래스가 가진 함수를 불러준다. 객체처럼 쓰일 땐,  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;글이 너무 길어 지는거 같기도 하고, 좀 더 알아보기 쉽게 하기 위해 위의 식을 그림으로 나타내보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a29cbc40-bbe0-11e9-87e8-a3e7a5dae513/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;클래스가 더 간편한 거라고 했는데 너무 복잡하게 생겼는데요?? 라고 할 수도 있다. 구버전으로도 한번 써 보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Food.prototype.yum = function() {
    return `${this.name} is JMT`
}

function Chicken(name, country) {
    Food.call(this, name, country)
}

Chicken.prototype = Object.create(Food.prototype)
Chicken.prototype.constructor Chicken&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 푸드의 프로토타입은 이거고 저거고..기타 등등을 다 짚고 넘어가야 한다. 개발자들은 이런 길고 비효율적인 식을 싫어하기 때문에 클래스라는 신기술을 만들었겠쥐?ㅋㅋ&lt;/p&gt;
&lt;p&gt;포스팅이 참 길어졌는데… 클래스에 대해서 파보려면 한도 끝도 없을 것 같아서 일단 여기서 멈추려고 한다리 ㅠㅠ
내용은 계속 추가하거나 미래의 포스팅 목록에 작성을 해봐야겠다.. 클래스를 공부하면서 깨달은 점이 있다면&lt;/p&gt;
&lt;h4 id=&quot;아무리-피해보려고-해도-class는-도저히-못-피한다-프론트를-가도-빽을-가도-class를-이해하지-못하면-아무것도-할-수-없다-꾸준히-공부하는-수밖에&quot;&gt;&lt;a href=&quot;#%EC%95%84%EB%AC%B4%EB%A6%AC-%ED%94%BC%ED%95%B4%EB%B3%B4%EB%A0%A4%EA%B3%A0-%ED%95%B4%EB%8F%84-class%EB%8A%94-%EB%8F%84%EC%A0%80%ED%9E%88-%EB%AA%BB-%ED%94%BC%ED%95%9C%EB%8B%A4-%ED%94%84%EB%A1%A0%ED%8A%B8%EB%A5%BC-%EA%B0%80%EB%8F%84-%EB%B9%BD%EC%9D%84-%EA%B0%80%EB%8F%84-class%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%98%EB%A9%B4-%EC%95%84%EB%AC%B4%EA%B2%83%EB%8F%84-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4-%EA%BE%B8%EC%A4%80%ED%9E%88-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-%EC%88%98%EB%B0%96%EC%97%90&quot; aria-label=&quot;아무리 피해보려고 해도 class는 도저히 못 피한다 프론트를 가도 빽을 가도 class를 이해하지 못하면 아무것도 할 수 없다 꾸준히 공부하는 수밖에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아무리 피해보려고 해도 class는 도저히 못 피한다. 프론트를 가도, 빽을 가도, class를 이해하지 못하면 아무것도 할 수 없다. 꾸준히 공부하는 수밖에..!&lt;/h4&gt;
&lt;p&gt; 일단 실전연습이 중요한 것 같아서 지난번에 만들었던 게임함수를 class로 다시 구현해보려고 한다. 빨리 게임을 끝내고 python 공부로 넘어가고 싶다 ㅠㅠ&lt;/p&gt;
&lt;p&gt; 다음번에 객체지향에 대해서 좀 더 심도있게 정리해보고 싶기도 하다~ 파면 팔수록 재밌는 개발세계~♬&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opentutorials.org/module/4047/24614&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://opentutorials.org/module/4047/24614&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/es6-class&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/es6-class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;도서 - 모던자바스크립트 입문&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_3일 TIL_게임에서 keyevent로 캐릭터 이동하기]]></title><description><![CDATA[위코드 10일차 js. 자바스크립트로 게임만들기를 시작하기 중 키보드 이벤트를 넣어보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_3_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_3_TIL_js/</guid><pubDate>Wed, 07 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;지난번에 캐릭터를 자르는데까지 정말 오랜 시간이 걸렸다. 이제 key event를 넣어서 좌우로 이동할 수 있도록 식을 만드는 시간쓰~&lt;/p&gt;
&lt;h2 id=&quot;key-code-number-알아내기&quot;&gt;&lt;a href=&quot;#key-code-number-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0&quot; aria-label=&quot;key code number 알아내기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key code Number 알아내기&lt;/h2&gt;
&lt;p&gt;캐릭터를 좌우로 이동하려면 좌키, 우키 각각에 해당하는 숫자를 알아내서 각각의 값에 이벤트를 걸어줘야 한다.
&lt;a href=&quot;https://keycode.info&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://keycode.info&lt;/a&gt; 키 값은 여기 들어가면 원하는 키를 눌러보면 쉽게 알아낼 수 있다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/59da6c40-b8bc-11e9-b8f8-7d296a837f8b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/752cbf20-b8bc-11e9-b06a-a38d4a6f85a7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이로써 좌키의 keycode는 37, 우키의 keycode는 39라는걸 알게되었다리~
이제 addEventlistener를 작성해보자.&lt;/p&gt;
&lt;h2 id=&quot;key-event의-종류&quot;&gt;&lt;a href=&quot;#key-event%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;key event의 종류 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key event의 종류&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;keydown : 사용자가 키보드를 누르는 순간 발생&lt;/li&gt;
&lt;li&gt;keyup : 사용자가 키보드에서 손을 떼는 순간 발생&lt;/li&gt;
&lt;li&gt;keypress : 사용자가 키보드를 누르고 있을 때 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;keydown 이벤트를 적용하면 우리가 좌키, 우키를 누를 때마다 이벤트가 발생하게 된다.
keypress 이벤트랑은 무슨 차이가 있을지 한번 직접 써보면서 비교를 해보려고 했는데 안 먹힌다 ㅎ 이럴때 쓰라고 있는 함수가 아닌가보다~~~&lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;나의 첫번째 시도&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function left() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.left= parseInt(hero.style.left-1)+&amp;#39;px&amp;#39;
}

function right() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.right= parseInt(hero.style.left+1)+&amp;#39;px&amp;#39;
}

function moving(event) {
    if(event.keyCode === 37) {
        left()
    }
    if (event.keyCode === 39) {
        right()
    }
}

window.addEventListener(&amp;#39;keydown&amp;#39;,function(event) {
    moving(event)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 왼쪽으로 너무 확 간다.. 오른쪽으론 가지도 않는다.
아무래도  function left와 right가 잘못 된 것 같아서 다시 한번 작성해보았다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나의 두번째 시도&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var hero_position = 400

function left() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.backgroundPositionX = 70+&amp;#39;px&amp;#39;
    hero_position -= 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 0일때 멈추게 하는 법
    if(hero_position &amp;lt;= 0) {
        hero_position = 0 
    }
}

function right() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
    hero_position += 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 764일때 멈추게 하는 법
    if(hero_position &amp;gt;= 764) {
        hero_position = 764
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 backgroundPositionX를 CSS에 나와있는 대로 background-position-x 라고 썼다가 오류가 났다. 찾아보니 Camel case로 써야 하는것 같아서 바꿔보니 캐릭터 도리도리는 성공!&lt;/p&gt;
&lt;p&gt;position도 생각처럼 쉬운 문제는 아니였는데…
처음엔 아예 left에다가 직접 숫자를 더하고 뺐다가 아닌것 같아서 &lt;code class=&quot;language-text&quot;&gt;hero_position&lt;/code&gt;이라는 변수를 하나 만들어서 적용했더니 성공!
이동하는걸 성공하고 나니 경계선에 도달했을 때 더이상 못 움직이게 하는 로직은 쉬웠다. 그냥 특정한 숫자에 도달했을 때 고정된 값을 주면 되는거였다!!!!&lt;/p&gt;
&lt;p&gt;하지만 진정한 고통은 class를 공부하면서 왔는데… 다음타자는 클래스인가 두둥!!!!&lt;/p&gt;
&lt;h3 id=&quot;to-be-continued&quot;&gt;&lt;a href=&quot;#to-be-continued&quot; aria-label=&quot;to be continued permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To be continued…&lt;/h3&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;h4 id=&quot;key-eventbr&quot;&gt;&lt;a href=&quot;#key-eventbr&quot; aria-label=&quot;key eventbr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key event&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://keycode.info&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://keycode.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/event_onkeypress.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/jsref/event_onkeypress.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8ZPlNOzLrdw&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=8ZPlNOzLrdw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vbnjxXCq5HQ&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=vbnjxXCq5HQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_2일 TIL_CSS와 js로 이미지자르기(feat. Sprites) ]]></title><description><![CDATA[위코드 9일차... css라 해야할지 js라 해야할지 조금 애매한데, 주 내용은 css로 이미지를 자르는거라서 css에 넣기로 마음먹음. 쪼꼼 고생했던 부분이었다! 하지만 이후 더 고생을 하게 되는데....☆]]></description><link>https://gollumnima.github.io//posts/wecode2_2_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_2_TIL_css/</guid><pubDate>Tue, 06 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/033ac490-b8e7-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;스프라잇 샤워가 아닌 답답함과 고통만 가득이였던 sprites..
찾아본 sprites는 쪽화면이라는 뜻이었다. 업계에선 많이 쓰이는 용어같은데 나만 몰랐어~&lt;/p&gt;
&lt;p&gt;그리하여 시작된 나의 힘겨운 여정쓰…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 시도 : p5 library를 이용해 json 파일로 이미지 쪼개기 (p5 알못이라 실패)&lt;/li&gt;
&lt;li&gt;2차시도 : canvas로 이미지 자르기 성공! but 함수 넣기 힘들어서 결국 포기&lt;/li&gt;
&lt;li&gt;3차시도 : 멘붕상태에서 결국 help 요청해 css로 이미지 자르기 성공!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이걸로 꼭 해봐야겠어!! 하고 마음 먹었다가 계속 안되고, 실패하고 갈아엎다보니 멘탈이 탈탈 털리는 하루였다. 앞으로 프로젝트 들어가면 이런 일들이 많아질텐데.. 지금 이 사소한 이미지 자르는 것에서부터 집착을 했으니 정말 ㅠㅠ 멘탈 관리를 잘 해야 할 것 같다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;css-imgae-sprites&quot;&gt;&lt;a href=&quot;#css-imgae-sprites&quot; aria-label=&quot;css imgae sprites permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS Imgae Sprites&lt;/h2&gt;
&lt;p&gt;sprites라고 검색하면 사실 내용이 잘 나오지 않는다.. 죄다 캔버스를 이용하거나 sprite.js 였나 외부 프로그램을 쓰는 것밖에 안 나온다. W3 school에 나오는 글도 잘 이해가 되지 않아서 3기 동기 가마니쓰의  도움을 받았다 ㅠㅠ 동기사랑은 나라사랑~~♬&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background: url(이미지 경로) 0 0;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;CSS 속성에 background 라는 attribute을 적고, image 경로와 좌표값(left, top)을 찍어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#hero{
    background: url(&amp;#39;./images/hero.png&amp;#39;); 
    background-position-x: 140px;
    position: absolute;
    width: 35px;
    height: 54px;
    left : 400px;
    top : 545px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hero라는 id에 위와 같은 값들을 넣어주면…
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dd42f5e0-b8e7-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뙇! 이미지가 이렇게 뜬다.
지금 배경 위에 김영웅씨 이미지가 올라가 있지만.. 원래는 네 장짜리 그림이다. 이렇게!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5fe88c30-b8e8-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;근데 아무리 좌표값을 찍어봐도 도저히 이해가 가지 않았다… 왼쪽부터 아닌가.. 이상한데
그래서 또다시! 동기인 아기호랑이님의 도움을 받았다 ㅜㅜ 사고회로가 정지했다…사ㄹ…려ㅜ줘… baby Tiger 최고 ♥&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5f1a69f0-b8ec-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;저 네모네모한 그림을 원기둥모양으로 돌돌 말았다고 생각해보자
그러면 저 좌표가 찍히는 원리가 이해가 얼추 간다.
나는 왼쪽부터 숫자를 세어야 한다고 생각 했는데 그 반대였다..! 와우…!&lt;/p&gt;
&lt;p&gt;여튼… 저 상태에서 left값과 bottom값을 추가해서 김영웅씨의 로딩 위치를 정해주면 된다.
영웅쓰를 중간에 띄웠으므로 인제 키보드 이벤트를 추가해줘야 한다&lt;/p&gt;
&lt;p&gt;하루종일 이거 붙잡고 있으면서 블로그에 내용 정리하느라 시간을 굉장히 많이 썼는데.. 집 갈쯤 되니까 해결이 되긴 됐다! 물론 여러 사람들의 도움이 있긴 했지만.. 여튼 해냈다.. 기분이 조금 나아졌다!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;원래는 여기까지지만! 여태까지 정리한 캔버스에 대한 내용이 너무 아까우니깐 canvas에 대해 내용도 남긴다 ㅜㅜ&lt;/p&gt;
&lt;h2 id=&quot;canvas-와--drawimage&quot;&gt;&lt;a href=&quot;#canvas-%EC%99%80--drawimage&quot; aria-label=&quot;canvas 와  drawimage permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Canvas 와  drawImage()&lt;/h2&gt;
&lt;p&gt;지난번 포스팅에서 살펴봤던 것처럼 캔버스는 html 태그이고, 이미지를 불러온다.
설명이 부실했던 것 같아서 다시 써보자면!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/de9e4950-b8a9-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;canvas 자체로는 그냥 빈 캔버스를 생각하면 될것 같다! canvas 태그를 html에 추가해도 아무 일도 일어나지 않는다. 그냥 빈 종이기 때문쓰.. 여기다가 getContext 함수를 이용해서 context를 랜더링 해줘야지 화면에 무언가를 그려낼 수 있다. 이 순서가 맞는지 모르겠지만 나는 일단 이렇게 했다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;html&lt;br&gt;
-html에 canvas 태그를 심는다 끝!&lt;br&gt;
-js로 넘어가시오&lt;/li&gt;
&lt;li&gt;js&lt;br&gt;
-new Image 메소드로 파일의 사진을 불러오고 src로 이미지 파일 경로 연결쓰&lt;br&gt;
-불러온 이미지를 화면에 띄울 수 있게 onload 함수를 만들고, 아래에 작성할 init함수를 그 안에 연결&lt;br&gt;
-Elementby뭐시기(Class 혹은 Id)로 html에 심어놓은 canvas태그를 DOM으로 불러와 canvas라는 변수에 대입&lt;br&gt;
-ctx라는 변수에 2d이미지를 불러올 수 있도록 getContext메소드 쓰기&lt;br&gt;
-init함수 안에 drawImage메소드를 이용해 캔버스에 심어놓은 이미지 불러오기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 ctx가 무슨뜻일까 정말정말정말 궁금했는데 별거 아니였다! CTO도 KTX도 아닌, context의 줄임말이였다 ㅎ…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let hero = new Image()
hero.src = &amp;#39;./images/hero.png&amp;#39;;
window.onload = function() {
    init()  
}

let canvas = document.getElementById(&amp;#39;hero&amp;#39;)
let ctx = canvas.getContext(&amp;#39;2d&amp;#39;)

function init() {
  ctx.drawImage(hero,0,0,35,54,0,0,35,54) // 앞모습
// ctx.drawImage(hero,35,0,35,54,0,0,35,54) // 뒷모습
//  ctx.drawImage(hero,70,0,35,54,0,0,35,54) // 왼쪽모습
// ctx.drawImage(hero,105,0,35,54,0,0,35,54) // 오른쪽모습
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/02af7980-b8b0-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;
김영웅씨는 앞뒤왼오 모습이 4개나 되서 하나씩 잘라주기 위해 drawImage 좌표값을 각각 다르게 줘서 잘라봤다.
일단 앞모습을 제외하고 다 주석처리 해놨는데 김영웅씨를 움직일 때 각각의 모습을 살려야 할 것 같다&lt;/p&gt;
&lt;p&gt;drawImage의 인자들을 살펴보자면… 요소가 많아도 너무 많다.. 그래서 넘넘 헷갈려서 나도 다 찍어보면서 확인했다 ㅠㅠ
&lt;code class=&quot;language-text&quot;&gt;context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;왼쪽부터-순서대로-이미지-자르는-기준점의-x축-자르는-기준점의-y축-자르려는-이미지가-기준점의-x축으로부터-얼마나-떨어져-있는가-자르려는-이미지가-기준점의-y축으로-얼마나-떨어져있는가-이미지를-띄울-위치의-x축-이미지를-띄울-위치의-y축-이미지의-가로길이-이미지의-세로길이&quot;&gt;&lt;a href=&quot;#%EC%99%BC%EC%AA%BD%EB%B6%80%ED%84%B0-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%9E%90%EB%A5%B4%EB%8A%94-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-x%EC%B6%95-%EC%9E%90%EB%A5%B4%EB%8A%94-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-y%EC%B6%95-%EC%9E%90%EB%A5%B4%EB%A0%A4%EB%8A%94-%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B0%80-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-x%EC%B6%95%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EC%96%BC%EB%A7%88%EB%82%98-%EB%96%A8%EC%96%B4%EC%A0%B8-%EC%9E%88%EB%8A%94%EA%B0%80-%EC%9E%90%EB%A5%B4%EB%A0%A4%EB%8A%94-%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B0%80-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-y%EC%B6%95%EC%9C%BC%EB%A1%9C-%EC%96%BC%EB%A7%88%EB%82%98-%EB%96%A8%EC%96%B4%EC%A0%B8%EC%9E%88%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B8-%EC%9C%84%EC%B9%98%EC%9D%98-x%EC%B6%95-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B8-%EC%9C%84%EC%B9%98%EC%9D%98-y%EC%B6%95-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-%EA%B0%80%EB%A1%9C%EA%B8%B8%EC%9D%B4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-%EC%84%B8%EB%A1%9C%EA%B8%B8%EC%9D%B4&quot; aria-label=&quot;왼쪽부터 순서대로 이미지 자르는 기준점의 x축 자르는 기준점의 y축 자르려는 이미지가 기준점의 x축으로부터 얼마나 떨어져 있는가 자르려는 이미지가 기준점의 y축으로 얼마나 떨어져있는가 이미지를 띄울 위치의 x축 이미지를 띄울 위치의 y축 이미지의 가로길이 이미지의 세로길이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왼쪽부터 순서대로.. 이미지, 자르는 기준점의 x축, 자르는 기준점의 y축, 자르려는 이미지가 기준점의 x축으로부터 얼마나 떨어져 있는가, 자르려는 이미지가 기준점의 y축으로 얼마나 떨어져있는가, 이미지를 띄울 위치의 x축, 이미지를 띄울 위치의 y축, 이미지의 가로길이, 이미지의 세로길이&lt;/h4&gt;
&lt;p&gt;글로 써보고 종이에 직접 좌표를 찍어보니까 이제야 이해가 간다! 뿌듯뿌듯~
그림으로 보면 더 이해가 쉽지요~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a310f660-b8b5-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;나는 김영웅씨를 게임 화면의 중앙에 띄워야 하기 때문에 이미지를 띄울 위치의 x축과 y축을 다시 설정했다!
처음엔 무작정 CSS로 띄울 생각을 했는데 어쩐지 안 먹힌다더라니.. drawImage에 값을 줘야했군!!!
근데 문제가 생겼다… 김영웅씨의 전체길이보다 더 큰 값의 숫자를 입력하면 화면에 출력이 되지 않는다…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해결책1: html로 돌아가서 canvas에 배경과 동일한 width와 height 값을 주었다
해결책2 : ctx.drawImage에 이미지를 띄우고 싶은 위치의 좌표값을 설정한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ctx.drawImage(hero,0,0,35,54,400,545,35,54)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;800*600의 이미지라 처음엔 400, 600의 값을 주었지만, y축을 캐릭터가 벗어나기 때문에 화면에 나타나지 않았다. 그래서 y축에는 적당히 600보다 작은 값인 545의 값을 줬다. 그 결과…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d75891f0-b8b8-11e9-b06a-a38d4a6f85a7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;드디어 김영웅씨 센터로 진출 성공~ 센터의 주인공은 ↖나야나~ 나야나↗
이제 김영웅씨가 움직일 수 있도록 key event를 줘야하는데 그것은 다음 시간에 다시~~♬&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;h4 id=&quot;spritebr&quot;&gt;&lt;a href=&quot;#spritebr&quot; aria-label=&quot;spritebr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sprite&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_image_sprites.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_image_sprites.asp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;canvasbr&quot;&gt;&lt;a href=&quot;#canvasbr&quot; aria-label=&quot;canvasbr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;canvas&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3resource.com/html5-canvas/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3resource.com/html5-canvas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/tags/canvas_drawimage.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/tags/canvas_drawimage.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_1일 TIL_자바스크립트로 Image 불러오기]]></title><description><![CDATA[위코드 8일차 js. 자바스크립트로 본격 게임만들기를 시작하기 전에 먼저 image를 불러오는 방법에 대해 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_1_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_1_TIL_js/</guid><pubDate>Mon, 05 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;이날은 우분투와 고군분투를 하느라 사실 별로 한 게 없다 ㅠㅠ 윈도우를 포맷하고, 파티션을 우분투한테 좀 나눠주고… 우분투 설치하고… 적응하고..또르륵..&lt;/p&gt;
&lt;p&gt;여튼…! 이번 포스팅은 굉장히 짧다. 어쩔수없다~ 다음 번 포스팅은 좀 더 알찬 내용을 업데이트 할것이다!&lt;/p&gt;
&lt;h4 id=&quot;게임만들기-미션-목록-두둥&quot;&gt;&lt;a href=&quot;#%EA%B2%8C%EC%9E%84%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%AF%B8%EC%85%98-%EB%AA%A9%EB%A1%9D-%EB%91%90%EB%91%A5&quot; aria-label=&quot;게임만들기 미션 목록 두둥 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;게임만들기 미션 목록 두둥!&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;바탕화면 깔기&lt;/li&gt;
&lt;li&gt;히어로를 가운데서시작하도록&lt;/li&gt;
&lt;li&gt;키이벤트 -&gt; 좌우 누를때 히어로 움직이게&lt;/li&gt;
&lt;li&gt;바탕화면 끝 도달하면 더이상 움직이지 않도록&lt;/li&gt;
&lt;li&gt;아래는 아마 추가미션?&lt;/li&gt;
&lt;li&gt;귀신 하늘에서 시작하도록&lt;/li&gt;
&lt;li&gt;랜덤한 x의 위치에서 나와야죠&lt;/li&gt;
&lt;li&gt;setinterval로 귀신 시작한 위치에서 y를 아래로 내려주시면 됩니다&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;html--canvas&quot;&gt;&lt;a href=&quot;#html--canvas&quot; aria-label=&quot;html  canvas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;html : canvas&lt;/h2&gt;
&lt;p&gt;canvas는 js로 그래픽을 그려주는 html 요소.
html파일을 살펴보면 canvas는 width와 height 두 가지 속성만 가지고 있다! 이렇게 뙇~
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;canvas id=&amp;quot;canvasBg&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;
(처음에 속성을 정의해주지 않으면 기본 사이즈는 300*150 이라고 한다~)&lt;/p&gt;
&lt;p&gt;캔버스 부분은 쪼꼼 복잡해서 게임 만들기 과제에선 이미 양식이 주어졌다!
내가 첫번째로 미션은 캔버스의 이미지를 불러오는 것..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;bgImg.src = &amp;quot;images/bg.png&amp;quot;;
let bgImg = new Image();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본 설정 js 파일을 살펴보면 bgImg의 파일을 src로 불러오고, 선언자를 이용해 new Image() 함수를 불러왔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function init() {
  //canvas에 배경이미지 그려주기
  ctxBg.drawImage(bgImg, 0, 0, canvasWidth, canvasHeight, 0, 0, canvasWidth, canvasHeight);

  initEnemies();

  //매 frame 마다 사용할 함수를 호출합니다.
  requestAnimFrame(loop);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수에 이벤트를 연결해서 이미지를 띄우는게 첫번째 미션!
아직 이벤트 부분이 약해서.. 여러 번의 시도 끝에 성공쓰!&lt;/p&gt;
&lt;h4 id=&quot;canvas와-js-이벤트를-이어주기-위해선-순서가-중요하다&quot;&gt;&lt;a href=&quot;#canvas%EC%99%80-js-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%96%B4%EC%A3%BC%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%A0-%EC%88%9C%EC%84%9C%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4&quot; aria-label=&quot;canvas와 js 이벤트를 이어주기 위해선 순서가 중요하다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;canvas와 js 이벤트를 이어주기 위해선 순서가 중요하다.&lt;/h4&gt;
&lt;p&gt;Note: You cannot call the drawImage() method before the image has loaded. To ensure that the image has been loaded, you can call drawImage() from window.onload() or from document.getElementById(“imageID”).onload.&lt;/p&gt;
&lt;p&gt;그리하여 시작된 이상한 시도들..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;window.onload = init()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 사람들이 하는 방식대로 해봤는데.. 저건 익명함수가 아니라서 저 방식은 안되고…!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;document.addeventlistener(&apos;load&apos;,init)&quot;&gt;&lt;pre class=&quot;language-document.addeventlistener(&apos;load&apos;,init)&quot;&gt;&lt;code class=&quot;language-document.addeventlistener(&apos;load&apos;,init)&quot;&gt;document.addEventListener(&amp;#39;DOMcontentLoaded&amp;#39;, init())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;event가 걸리는 대상은 캔버스 이미지이지만, 엉뚱하게 document를 소환했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;bgImg.addEventListener(&amp;#39;load&amp;#39;, init)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;드디어 성공쓰!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5bb02480-b739-11e9-afc8-cf4bab9879b8/%EA%B2%8C%EC%9E%84%EA%B2%8C%EC%9E%84.PNG&quot; alt=&quot;게임게임.PNG&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위치는 init의 위나 아래나 딱히 상관 없는것 같다.&lt;/p&gt;
&lt;h2 id=&quot;앗-나의-실수-이게-아니라-다른-게임이-과제였다&quot;&gt;&lt;a href=&quot;#%EC%95%97-%EB%82%98%EC%9D%98-%EC%8B%A4%EC%88%98-%EC%9D%B4%EA%B2%8C-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%8B%A4%EB%A5%B8-%EA%B2%8C%EC%9E%84%EC%9D%B4-%EA%B3%BC%EC%A0%9C%EC%98%80%EB%8B%A4&quot; aria-label=&quot;앗 나의 실수 이게 아니라 다른 게임이 과제였다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;앗 나의 실수! 이게 아니라 다른 게임이 과제였다&lt;/h2&gt;
&lt;p&gt;쓴 게 아까우니까 저건 일단 냅둬야겠다 ㅎ 언젠간 캔버스 기능을 쓸때가 있겠지~
조금 더 쉬워진 이미지 불러오기! html에 png 파일을 불러서 js에서 body에 붙여버렸다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let bg_img = document.getElementsByClassName(&amp;#39;bg_img&amp;#39;)[0]
document.body.appendChild(bg_img)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;—&gt; html에 bg_img로 이미 이미지를 불러왔을때! (이미 이미지 라임 굿)&lt;/p&gt;
&lt;p&gt;그러면 이렇게 배경화면이 뙇! 다른 방법도 있다 사실..&lt;/p&gt;
&lt;h2 id=&quot;js---new-image&quot;&gt;&lt;a href=&quot;#js---new-image&quot; aria-label=&quot;js   new image permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;js - new Image()&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let bg_img = new Image()
bg_img.src = &amp;#39;./images/bg.png&amp;#39;
document.body.appendChild(bg_img)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 이미 길이가 (800,600)으로 주어진 이미지를 불러오는 거라서 빈 괄호로 했지만
크기를 바꾸고 싶다면 괄호 안에 (width, height) 값을 집어 넣어주면 된다!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/968c20d0-b785-11e9-b29e-c1de6e4ebe0f/%EB%9E%84%EB%9E%84%EB%9D%BC.PNG&quot; alt=&quot;랄랄라.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;이미지를 js파일에 곧바로 불러오는 방법이 궁금했는데 이런 방법이 있었다니!!
이제 용사를 불러와야 하는데.. 나의 용사는 머리가 넷이다.. 이미지를 잘라서 하나로 만들어줘야한다
그래서 얘를 잘라주려면 또 신박한 방법을 써야 하는데..
그것은 다음번 포스팅에 이어서…☆&lt;/p&gt;
&lt;h2 id=&quot;번외편--css---background&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8%ED%8E%B8--css---background&quot; aria-label=&quot;번외편  css   background permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외편 : css - background&lt;/h2&gt;
&lt;p&gt;css는 진짜 파면 팔수록 너무 신기한 기능들이 많다! 나만 몰랐을수도 있지만… 나의 동기 가마니쓰가 한 방법도 한번 써보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.bg{
    background: url(&amp;#39;./images/bg.png&amp;#39;)
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 css에서 url을 불러오고 여기에 크기 설정 등등도 할 수 있다.
여태 html img 태그로 가져오는 방법만 알았는데 넘 신기쓰!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/18a099f0-bbd4-11e9-a1e8-a939a94b65cb/Image-from-iOS-1.jpg&quot; alt=&quot;Image from iOS (1).jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;사실 우분투와 고군분투는 이 날 바로 끝나지 않았다.. 화요일에 외장하드에 파일 옮기고, 윈도우 다시 깔고, 우분투도 깔고 했다 ㅎ&lt;/p&gt;
&lt;h4 id=&quot;클래스-정리-해놓은건-아쉽지만-다음-기회에&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A6%AC-%ED%95%B4%EB%86%93%EC%9D%80%EA%B1%B4-%EC%95%84%EC%89%BD%EC%A7%80%EB%A7%8C-%EB%8B%A4%EC%9D%8C-%EA%B8%B0%ED%9A%8C%EC%97%90&quot; aria-label=&quot;클래스 정리 해놓은건 아쉽지만 다음 기회에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스 정리 해놓은건 아쉽지만 다음 기회에!&lt;/h4&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/tags/canvas_drawimage.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/tags/canvas_drawimage.asp&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.teamtreehouse.com/learn-asynchronous-image-loading-javascript&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blog.teamtreehouse.com/learn-asynchronous-image-loading-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/Canvas/Tutorial/Basic_usage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTML/Canvas/Tutorial/Basic_usage&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_7일 TIL_fetch로 json 데이터 불러오기]]></title><description><![CDATA[위코드 7일차 js. fetch로 json데이터를 불러오기 위해 Promise 개념과 fetch에 대해 공부해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_7_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_7_TIL_js/</guid><pubDate>Sun, 04 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/afe7e500-bbd1-11e9-87e8-a3e7a5dae513/Image-from-iOS.jpg&quot; alt=&quot;Image from iOS.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;너무 열심히 했는지 산 지 일주일도 안 된 나의 슬리퍼가 끊어져버렸다!ㅋㅋㅋㅋ (지금은 순간접착제로 붙였지롱~)&lt;/p&gt;
&lt;p&gt;세상 어려웠던 부분…☆ 고통의 연속이였지만.. 주위 분들의 따뜻한 도움과 구글링을 통해 해결해나갔다..!
Json 데이터를 자바스크립트로 불러오는 부분은 특히나 어려웠다.
노마드코더 니꼬의 무비앱 만들기 react강의에서 fetch를 통해 API를 가져오는 부분이 그당시엔 잘 이해가지 않았는데…
자바스크립트에서 함 해보니까 약간 알것 같기도 하고..!!&lt;/p&gt;
&lt;h2 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; aria-label=&quot;promise permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise&lt;/h2&gt;
&lt;p&gt;fetch는 Promise 기반의 매커니즘이라 fetch를 알아보기 전에 우리는 Promise를 먼저 알아야 해요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/93338960-b6a8-11e9-9108-85ef47d591d9/pinky-swear-3293291280.jpg&quot; alt=&quot;pinky-swear-329329_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Promise란 말 그대로 약속! 대통령 후보들이 선거에 나와서 공약 걸잖아요. 그런것처럼 미래에 어떠한 일을 할 건데 그것에 대해 미리 말하는거라고 생각하면 돼요!&lt;/p&gt;
&lt;h4 id=&quot;promise-실행과정&quot;&gt;&lt;a href=&quot;#promise-%EC%8B%A4%ED%96%89%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;promise 실행과정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&amp;#x3C;Promise 실행과정&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;pending : 실행되거나 (fulfiled) 실패되거나(rejected) 둘 중에 한 가지 일이 일어나기 바로 전의 상태.&lt;/li&gt;
&lt;li&gt;fulfiled : 함수가 실행되면 fulfiled. 공약 지켰음.&lt;/li&gt;
&lt;li&gt;rejected : 함수가 실행되지 않으면 rejected. 공약 불이행.&lt;/li&gt;
&lt;li&gt;settled : 실행된건지 실패한건지 모르겠으나 여튼 결론이 난 상태.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시를 통해 살펴볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let firstFunction = function() {
  return new Promise( // new를 안 써주면 Type Error가 뜨더라구요.
  function (resolve, reject){ //실행 되었을때, 안 되었을때가 인자로.. 
    resolve(&amp;#39;나는 &amp;#39;) // 실행이 된다면 resolve 괄호 안의 함수가 뜸
  }
  )
}
console.log(firstFunction())

// 첫번째 함수와 이어지는 함수 만들려고 함
let secondFunction = function(dataFromFirstFunction) { 
  return new Promise( 
    function(resolve, reject){
      resolve(dataFromFirstFunction + &amp;#39;아직 배가 고프다&amp;#39;)
    }
  )
}

console.log(secondFunction())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수를 콘솔창에 찍어보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3cc7c5f0-b6b2-11e9-97ab-6bebaeb420ca/image.png&quot; alt=&quot;image.png&quot;&gt;
firstFunction까지는 실행이 잘 되지만, secondFunction의 결과값으론 ‘undefined아직 배가 고프다’가 나온거 보면 연결이 안된것 같죠? resolve 괄호 안에 들어가는 함수의 이름이 dataFromFirstFunction긴 하지만 실질적으로 첫번째 함수에서 데이터를 받아오진 못해요! &lt;/p&gt;
&lt;p&gt;이럴 때 then을 이용하는거에요! &lt;code class=&quot;language-text&quot;&gt;함수1.then()&lt;/code&gt;을 실행하면 함수1이 실행되고 곧바로 then 괄호안의 함수가 실행이 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
console.log(data)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔창에 이 함수식을 덧붙여보면 ‘나는’이라는 firstFunction의 값이 나오게 돼요! then 함수 안의 인자인 data를 console에 찍었더니 묶여있는 함수1의 값을 불러오게 되는거죠~ 그럼 이러한 특성을 이용해 첫번째 함수와 두번째 함수를 엮어봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
  console.log(secondFunction(data))
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;secondFunction()을 실행시킬때 그 안에 data라는 인자를 넣어야 값이 나오니까 함수 안에 윗줄에서 썼던 data라는 동일한 인자를 넣어줬어요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/faa5c810-b70c-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;
이제 Promise 함수 안의 값이 제대로 뜹니다! 하지만 우리의 목표는 string 형태의 리턴값이니깐.. console.log 부분을 return으로 살짝 바꿔봅시다!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
  return secondFunction(data)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔창에 이 식을 찍어보면 여전히 Promise 함수를 벗어나지 못하는걸 확인할 수 있어요. 이럴땐 then을 한번 더 써줘야해요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data) {
  return secondFunction(data);
}).then(function(data){
        console.log(data)
   })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세번째줄 then 앞까지가 ‘나는 아직 배가 고프다’라는 string을 가진 Promise를 불러오는 거였죠. 거기다 then을 이용해 함수의 인자로 data라는 값을 넣었을 때, console창에 data 값이 나오게 해줄거에요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b2081f60-b70f-11e9-a7bd-f35eb6f8f890/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;값이 string 형태로 아주 잘 나오고 있죠??! &lt;/p&gt;
&lt;h3 id=&quot;근데-여기서-한가지-의문점이-생기는-것&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%EB%8D%B0-%EC%97%AC%EA%B8%B0%EC%84%9C-%ED%95%9C%EA%B0%80%EC%A7%80-%EC%9D%98%EB%AC%B8%EC%A0%90%EC%9D%B4-%EC%83%9D%EA%B8%B0%EB%8A%94-%EA%B2%83&quot; aria-label=&quot;근데 여기서 한가지 의문점이 생기는 것 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근데 여기서 한가지 의문점이 생기는 것…&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0311aac0-b710-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;마지막에 console.log가 아닌 return이 되면 string이 아닌 Promise 형태로 값이 나온다는것.. 이건 왜 그런지 도저히 모르겠네요 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; aria-label=&quot;fetch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fetch&lt;/h2&gt;
&lt;p&gt;fetch는 생활코딩으로 기초를 잡고 제로초님 포스팅과 유튜브로 다시 공부해봤어여~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch() : API에서 data를 불러올때 쓰는 Promise 기반의 매커니즘. fetch(‘html’)를 통해서 괄호안의 파일을 불러온다. fetch가 리턴하는건 결국은 Promise라서 우리는 then을 통해 Promise가 아닌 다른 형태로 값을 불러와야한다… 맞나?&lt;/li&gt;
&lt;li&gt;.then() : then은 fetch의 비서 정도라고 생각하면 될듯..?! fetch 실행으로 서버에서 응답할 때까지 &lt;code class=&quot;language-text&quot;&gt;.then()&lt;/code&gt;이라는 함수를 이용해서 then의 괄호 안에 들어가는 함수를 실행한다! 쉬지도 않고 부지런쓰~ 위에서 나온 Promise 때와 동일한 기능!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fetch(&amp;#39;./data/getAllTimeline.json&amp;#39;)
.then((res) =&amp;gt; {
  if (res.status === 200 || res.status === 201) { 
    res.text().then(text =&amp;gt; console.log(text))
  }
  else {
    console.log(res.statusText)
  }
}).catch(err =&amp;gt; console.log(err)) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;간단히 보자면 then을 통해서 reponse 객체를 받고, catch를 통해 error를 받아요!
이 과정을 순서대로 자세히 살펴봅시다~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch로 data폴더의 getAllTimeline.json이라는 데이터를 불러온다&lt;/li&gt;
&lt;li&gt;then을 이용해 response 객체를 불러오는데…&lt;/li&gt;
&lt;li&gt;response의 상태가 200이나 201일때(정상작동시)&lt;/li&gt;
&lt;li&gt;콘솔창에 text를 띄운다&lt;/li&gt;
&lt;li&gt;그렇지 않으면 response의 상태를 띄운다. 404 Page Not Found와 같은 빡치는 에러를 보게 되는거죠 ㅎ&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;미니터-json파일을-자바스크립트로-불러오기&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%8B%88%ED%84%B0-json%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;미니터 json파일을 자바스크립트로 불러오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미니터 json파일을 자바스크립트로 불러오기&lt;/h2&gt;
&lt;p&gt;저는 일단 data라는 폴더 안에 아래와 같은 getAllTimeline.json이라는 파일을 가지고 있어요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;result&amp;quot;: [
    {
      &amp;quot;contents&amp;quot;: &amp;quot;도리를 찾아서~&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;19920601&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Dory&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;와플번트 진짜 맛있었는데 왜 사라진거지 너무 속상하다&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190327&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Waffle&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;예쓰! 우리는 모두 위코더 룰루~&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190729&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Wecode&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;아스트로에 차은우가 있다면, 위코드에는 내가 있쥐&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190323&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Eunwoo Song&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;누구보다도 예리한 감각을 자랑하는 프론트앤드 엔지니어는 누구~?&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190323&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Yeri Kim&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;아이스크림 드실분?&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190803&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Jihun Park&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;주말에는 냉방 시스템이 가동되지 않으니 이 점 참고하시기 바랍니다.&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190321&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;WeWork&amp;quot;
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자바스크립트에서 fetch를 써봅시다. 페이지를 열 때 기본적으로 떠 있는 트윗목록을 불러오기 위해 opening이라는 함수 안에 fetch함수를 써봤어요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function opening() {
  fetch(&amp;#39;./data/getAllTimeline.json&amp;#39;) // json파일이 있는 파일의 경로
    .then((res) =&amp;gt; res.json()) // 데이터를 json형태로 바꿔주기
    .then(function (data) { // data라는 임의의 값을 인자로 받는 함수.
      let people = data.result; //json파일을 감싸는 객체가 result로 시작해서 data.result
      console.log(people) // people 콘솔을 찍어보면 {contents: &amp;quot;도리를 찾아서~&amp;quot;, date: &amp;quot;19920601&amp;quot;, user: &amp;quot;Dory&amp;quot;} 이러한 객체가 7개 나옴
      return people.map(function (person) { //people에서 contents,date,user를 뽑아내기 위해 map 사용
      // 이 아래는 html 틀 구현을 위해 쓴 식들
        let contents_wrap = createNode(&amp;#39;div&amp;#39;) 
        let name = createNode(&amp;#39;button&amp;#39;)
        let time = createNode(&amp;#39;span&amp;#39;)
        let doorit = createNode(&amp;#39;div&amp;#39;)
        contents_wrap.className = &amp;#39;contents_wrap&amp;#39;
        name.className = &amp;#39;doorits_id&amp;#39;
        time.className = &amp;#39;time&amp;#39;
        doorit.className = &amp;#39;doorits_contents&amp;#39;

        name.innerHTML += person.user
        time.innerHTML += `${String(person.date).split(&amp;#39;&amp;#39;).slice(0, 4).join(&amp;#39;&amp;#39;)}-${ String(person.date).split(&amp;#39;&amp;#39;).slice(4, 6).join(&amp;#39;&amp;#39;)}-${ String(person.date).split(&amp;#39;&amp;#39;).slice(6, 8).join(&amp;#39;&amp;#39;)}`
        doorit.innerHTML += person.contents

        append(contents_wrap, name)
        append(contents_wrap, time)
        append(contents_wrap, doorit)
        append(doorits_box, contents_wrap)

        doorits_box.prepend(contents_wrap)

        //원래 있는 트윗의 개수 불러오기!
        const sum_doorits = document.getElementsByClassName(&amp;#39;sum_doorits&amp;#39;)[0]
        const total_doorits = doorits_box.children.length
        sum_doorits.innerHTML = total_doorits;
      })
    })
    .catch(err =&amp;gt; console.log(err))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;개발자도구-네트워크 탭에 한번 들어가보세요.
json 데이터를 성공적으로 불러왔다면 네트워크 탭에서 확인할 수 있어요~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7e31f430-b715-11e9-a7bd-f35eb6f8f890/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a3951210-b716-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;값도 아주 잘 불러와지고요!&lt;/p&gt;
&lt;h3 id=&quot;근데-식을-작성하면서-fetch-typeerror가-생겼었죠-어떤-오류냐&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%EB%8D%B0-%EC%8B%9D%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4%EC%84%9C-fetch-typeerror%EA%B0%80-%EC%83%9D%EA%B2%BC%EC%97%88%EC%A3%A0-%EC%96%B4%EB%96%A4-%EC%98%A4%EB%A5%98%EB%83%90&quot; aria-label=&quot;근데 식을 작성하면서 fetch typeerror가 생겼었죠 어떤 오류냐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근데 식을 작성하면서 fetch TypeError가 생겼었죠.. 어떤 오류냐..!&lt;/h3&gt;
&lt;p&gt;VM1621:1 Uncaught (in promise) TypeError: Failed to execute ‘fetch’ on ‘Window’: 1 argument required, but only 0 present. at :1:1&lt;/p&gt;
&lt;p&gt;이 오류가 왜 생겼냐 하고 봤더니… 제가 Live Server를 통해 파일을 열지 않아서였더라고요
&lt;code class=&quot;language-text&quot;&gt;Ctrl+Shift+x&lt;/code&gt; 로 Live Server 검색 고고~ 비주얼 스튜디오 확장팩 다운 받으세요
그 다음 html파일 우클릭 해서 열면 저 오류는 없어질거에요~~&lt;/p&gt;
&lt;h3 id=&quot;별책부록-미니터에-업데이트-되는-트윗-수-반영하기&quot;&gt;&lt;a href=&quot;#%EB%B3%84%EC%B1%85%EB%B6%80%EB%A1%9D-%EB%AF%B8%EB%8B%88%ED%84%B0%EC%97%90-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%90%98%EB%8A%94-%ED%8A%B8%EC%9C%97-%EC%88%98-%EB%B0%98%EC%98%81%ED%95%98%EA%B8%B0&quot; aria-label=&quot;별책부록 미니터에 업데이트 되는 트윗 수 반영하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;별책부록… 미니터에 업데이트 되는 트윗 수 반영하기&lt;/h3&gt;
&lt;p&gt;제가 처음에 접근했던 방식은..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/76785840-b717-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;
2번의 div의 개수를 세서 1번에 추가가 될수 있도록.. 아주 단순하게 생각했어요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const sum_doorits = document.getElementsByClassName(&amp;#39;sum_doorits&amp;#39;)[0](1번의 className)
const total_doorits = doorits_box.children.length //화면에 뜬 전체 트윗중 하얀부분의 개수(2번의 개수)
sum_doorits.innerHTML += total_doorits; (1번에 2번의 개수 넣기)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게요!&lt;/p&gt;
&lt;p&gt;웹페이지의 콘솔에는 개수가 7개로 잘 나오지만 visual studio에선 값이 0개가 나오더라고요
저는 저 합계를 세어주는 함수의 위치가 별로 중요하지 않다고 생각해서 아무데나 넣었는데
그렇게 하면 안되고! 트윗이 생성되고 삭제되는 곳 모두에 넣어야 하더라구요!&lt;/p&gt;
&lt;p&gt;그래서 트윗을 불러올때, 트윗 생성될때, 트윗 삭제될 때 모두 세 곳에 저 식을 넣어줬어요.
그랬더니 숫자가 넘나 잘 뜨는것!!&lt;/p&gt;
&lt;h4 id=&quot;또-신기했던-점&quot;&gt;&lt;a href=&quot;#%EB%98%90-%EC%8B%A0%EA%B8%B0%ED%96%88%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;또 신기했던 점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;또 신기했던 점…&lt;/h4&gt;
&lt;p&gt;트윗 삭제가 될땐 +=이나 —가 아닌 그냥 대입연산자로 쓴다는 점..
그것도 모르고 +1를 했는데 값이 늘어나서 거기다 -1을 붙이니까 값이 제대로 반영이 되고..
어??? 이상한데?? 나 너무 바보같은데?? 하다가 식을 보니 제가 +=을 =로 썼더라고요 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼… 미니터는 이제 끝났습니다~(css 부분 정리할까말까 고민중…ㅠㅠ)
이젠 저도 게임만들기로 궈궈…☆&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://programmingsummaries.tistory.com/325&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://programmingsummaries.tistory.com/325&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/HTML&amp;#x26;DOM/post/-595b4bc97cafe885540c0c1c&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.zerocho.com/category/HTML&amp;#x26;DOM/post/-595b4bc97cafe885540c0c1c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;생활코딩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IHjzyhjKxtc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=IHjzyhjKxtc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=cosmosjs&amp;#x26;logNo=221379310763&amp;#x26;categoryNo=56&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=&amp;#x26;currentPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=cosmosjs&amp;#x26;logNo=221379310763&amp;#x26;categoryNo=56&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=¤tPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_6일 TIL_미니터 틀짜기]]></title><description><![CDATA[위코드 6일차 html. 미니 트위터의 html 틀을 짜보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_6_TIL_html/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_6_TIL_html/</guid><pubDate>Sat, 03 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;잠시 살펴보는 둘둘의 1주차 타임라인 in WECODE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1일차 : html/css 그리고 js 문제
2일차 : js
3일차 : DOM&amp;#x26;event 과제 끝 + 미니터 html 틀짜기
4일차 : 미니터 css 수정(flex!!!) + 이벤트로 고뇌에 빠지기
5-6일차 : DOM구조 및 미니터에 이벤트 넣기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;포스팅에서의 날짜는 저의 진도랑 상관 있을수도 있고 없을 수도 있습니다~ 제가 그날 무엇을 정리했느냐에 따라 달라서 그냥 써놔서~&lt;/p&gt;
&lt;p&gt;근데 이 순서대로 한지 모르겠어요.. 시간이 넘나 빠르고요??
하루종일 노트북 붙잡고 있느라 일기를 안 썼더니 그날 뭐했는지가 기억이 안나요ㅠ
앞으론 블로깅을 그날그날 쓰도록 노력해보려고요!!&lt;/p&gt;
&lt;p&gt;이번 포스팅은 제가 미니 트위터를 어떻게 구현했는지 공개쓰~
지금은 개발자 꿈나무지만 나중에 멋진 개발자가 되고나서 이 글을 다시 읽으면 재밌을거 같아요 ㅋㅋㅋㅋ 와 진짜 못했다~ 하고 웃을 날이 오겠죠?!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6fe01f30-b687-11e9-8191-e1d4670a1ecd/image.png&quot; alt=&quot;image.png&quot;&gt;
마치 이런 느낌으로..?ㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;미니터-html-구조짜기&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%8B%88%ED%84%B0-html-%EA%B5%AC%EC%A1%B0%EC%A7%9C%EA%B8%B0&quot; aria-label=&quot;미니터 html 구조짜기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미니터 html 구조짜기&lt;/h2&gt;
&lt;p&gt;아무래도 지난번 코드뭐시기에서 트위틀러를 한번 구현해봤기 때문에 html 구조 짜는것까지는 쉬웠다! 이벤트 거는게 문제였지..ㅜㅜ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Farro&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot; /&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style/common.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style/tweets.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body class=&amp;quot;doorits_page&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_bar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;dooriter_bar_left_1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_left_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_home&amp;quot; href=&amp;quot;https://twitter.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_left_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_company&amp;quot; href=&amp;quot;https://wecode.co.kr/&amp;quot;&amp;gt;Company&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;dooriter_bar_right_1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;search&amp;quot; placeholder=&amp;quot;검색어를 입력해주세요&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;a i class=&amp;quot;fas fa-search&amp;quot; href=&amp;quot;https://www.google.com/&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_login&amp;quot; href=&amp;quot;./login.html&amp;quot;&amp;gt; Login&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_2nd_bar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;color_2nd_bar&amp;quot;&amp;gt;
      &amp;lt;span class=&amp;quot;wecode&amp;quot;&amp;gt;&amp;gt;wecode&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;white_2nd_bar&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;profile_line_left&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Doorits&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_doorits&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Followers&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_followers&amp;quot;&amp;gt;24K&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Following&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_followings&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_bottom&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;profile_container&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;profile_up&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;pf_pic&amp;quot; src=&amp;quot;dooriter_pf.jpg&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;profile_down&amp;quot;&amp;gt;
        &amp;lt;span class=&amp;quot;pf_name&amp;quot;&amp;gt;Doori Kim&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;pf_nickname&amp;quot;&amp;gt;@dooreplay&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;pf_introduce&amp;quot;&amp;gt;개발자 꿈나무입니다.&amp;lt;br&amp;gt;잘 부탁드립니다.&amp;lt;br&amp;gt;위코드 짱짱 화이팅!&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;doorits_container&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;write_doorits&amp;quot;&amp;gt;
        &amp;lt;textarea class=&amp;quot;write_doorits_input&amp;quot; placeholder=&amp;quot;&amp;amp;nbsp&amp;amp;nbsp What&amp;#39;s happening? :)&amp;quot; maxlength=&amp;quot;300&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;span class=&amp;quot;min_count&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;/&amp;lt;span class=&amp;quot;max_count&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;button class=&amp;quot;doorit_btn&amp;quot;&amp;gt;Doorit&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;!-- &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt; --&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- 이 위는 두리터 컨테이너 닫히는 태그--&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;signup.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
  &amp;lt;script src=&amp;quot;https://kit.fontawesome.com/d6b1895c38.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;./js/tweets.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;중간에 주석처리한 부분은 CSS 때문에 일단 하드코딩 해놓은 것!
div를 잘 쪼개서 묶어주는게 정말 중요한데, 중간에 새로운 div를 계속 추가하다 보니 내가 예상했던 것처럼 안 묶을 때가 많았다&lt;/p&gt;
&lt;p&gt;그럴때의 꿀팁!! 다들 알고 있겠지만 저는 이번에 처음 알게되서 신기해서 올려봐유~
(아래의 캡쳐화면은 미니터 로그인 페이지를 만든 것!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e0255020-b688-11e9-8191-e1d4670a1ecd/image.png&quot; alt=&quot;image.png&quot;&gt;
그림속의 화살표가 가리키는 곳을 클릭해보세요.
그런 다음에 마우스를 이리저리 움직여 보면 각각의 class나 id값, 가로길이는 또 얼마나 되는지 등등을 알 수 있어요!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/954deb70-b688-11e9-a270-f544dc62fdb4/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7ff438b0-b688-11e9-a270-f544dc62fdb4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;음음… 힘들었던 점이 있다면 디자인에 대한 고뇌…?!
트위터 화면을 완전히 따라할 것이냐, 그냥 심플하게 갈것이냐, 나만의 독자적인 화면을 만들 것이냐…
항상 이런 고민하는데 시간 많이 쏟는 것 같아요 저는 ㅠㅠ 이게 바로 진성 프론트엔더??ㅎ
여튼… 결국 로그인, 회원가입 페이지는 심플하게 가고, 미니터 페이지는 심플하지만 독자적인 화면으로 갔습니다! 나름 프사도 넣어주고 ㅎ&lt;/p&gt;
&lt;p&gt;다음번 포스팅에서 CSS 부분을 살펴볼게요~&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_5일 TIL_화살표함수]]></title><description><![CDATA[위코드 5일차 js 정리 2탄. ES6 문법 중 나에게 아직도 너무 익숙지 않은 화살표함수에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_5_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_5_TIL_js/</guid><pubDate>Fri, 02 Aug 2019 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/21b05e00-b656-11e9-98df-8b92d767b097/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;화살표 함수만은 피하고 싶었는데.. 위코드 2일차에 마주쳤다…☆
어차피 나중엔 계속 쓰게 될텐데 지금 정리해야 마음이 편해질것 같아서 정리해봅니다~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;고통을 즐기는 개발자가 되자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;화살표함수&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98&quot; aria-label=&quot;화살표함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표함수&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;그냥 함수 있는거 쓰면 되는데.. 화살표 함수. 대체 왜 쓸까?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 문법이라서
-js를 표준화하는 ECMA Script의 버전이 벌써 10까지 나왔다네요… 세상에마상에
-대세를 따르는 개발자가 됩시다! 지금은 화살표가 어색할지 몰라도 나중엔 디폴트값이 될지도…&lt;/li&gt;
&lt;li&gt;코드가 엄청나게 짧아진다
-중괄호, 엔터 없이도 =&gt; 이 화살표만 있으면 되니까 식이 좀 더 깔끔쓰!&lt;/li&gt;
&lt;li&gt;멋있어 보인다
-멋에 죽고 멋에 사는 개발자라면 화살표함수를 쓰시오~ㅋㅋ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 화살표 함수를 이번기회에 제대로 정리해야지!! 하고 마음 먹었으나…
예시 위주로만 갈게요ㅠ
화살표 함수에 대해서는 Baby Tiger님이 정리를 잘 해놨으니 링크 드릴게요 :)
&lt;a href=&quot;https://babytiger.netlify.com/posts/arrow-function/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://babytiger.netlify.com/posts/arrow-function/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-없을때&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%97%86%EC%9D%84%EB%95%8C&quot; aria-label=&quot;화살표 함수 적용  인자가 없을때 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 없을때&lt;/h3&gt;
&lt;p&gt;들어가기 앞서.. 한 가지 덧붙이자면!!! 화살표 함수는 무조건 익명함수에요.
&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;같은 선언자로 선언하는 함수 표현식으로 작성해주세용
자 그럼 1번 예시!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; function macaron(){
  return &amp;#39;달콤해~&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 함수가…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const macaron = () =&amp;gt; &amp;#39;달콤해~&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반 함수식과 비교해보면 중괄호와 return 대신 =&gt; 이 화살표를 쓴 걸 알수있져!
예시의 식처럼 한줄짜리 식들은 중괄호를 생략할 수 있어요~
또한 함수이름과 소괄호 사이에 = 을 써서 함수를 정의한다는 점도 알아두세요!&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-하나&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%ED%95%98%EB%82%98&quot; aria-label=&quot;화살표 함수 적용  인자가 하나 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 하나&lt;/h3&gt;
&lt;p&gt;이번엔 인자가 하나일 경우를 살펴볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const a = function square(y) {
  return y * y
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 함수가…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const square = y =&amp;gt; y*y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 이렇게 한 줄로 줄어들었어요! 개이득!!
위에서 예시로 든 제곱 함수보다 식이 더 복잡해질때 화살표함수를 쓰는게 유용하겠죠?
인자가 하나일땐 괄호 생략이 가능한데, 두 개 이상일때부턴 괄호를 꼭꼭 써주세요!&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-둘&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EB%91%98&quot; aria-label=&quot;화살표 함수 적용  인자가 둘 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 둘&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function plus(a,b) {
  return `${a} 더하기 ${b}는 ${a+b}입니다`
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 식을 화살표 함수에 적용하면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const plus = (a,b) =&amp;gt;`${a} 더하기 ${b}는 ${a+b}입니다`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 뙇! 인자가 두개라서 괄호를 붙여줬어요~~&lt;/p&gt;
&lt;p&gt;여기서 잠깐, &lt;code class=&quot;language-text&quot;&gt;${}&lt;/code&gt;&amp;#x3C;= 이 달러표시는 뭘까요~얘도 화살표 함수처럼 ES6문법이에요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;template literal : 따옴표 대신 빽틱(1 옆의 것)을 이용해 문자열을 표기하는 방법. 빽틱 안에 ${}를 이용해 값을 표기할 수 있음.
(처음엔 빽틱이 빽티기인줄 알고 뻥튀기가 생각났는데… back tick.. 영어였슴다…☆)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 얘기하면 뭔 말인지 모르겠죠? 예시를 들어볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const plus = (a,b) =&amp;gt;a+ &amp;#39; 더하기 &amp;#39; + b+&amp;#39;는 &amp;#39;+a+b+&amp;#39;입니다&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까 위에서 만든 함수의 리턴값을 일반적인 string을 나타내는 형식으로 써봤어요.
template literal을 이용하면 전체를 빽틱으로 감싸고 대입이 필요한 값에만 ${}를 씌워주면 되는데, 이렇게 쓰니 참 복잡하죠? 편하게 갑시다~~ &lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--array-method&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--array-method&quot; aria-label=&quot;화살표 함수 적용  array method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : Array Method&lt;/h3&gt;
&lt;p&gt;가장 작은 숫자를 찾는 함수를 만들어 보았어요. 최대한 직관적이게 풀어볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const arr = [42,1,&amp;#39;a&amp;#39;,&amp;#39;z&amp;#39;,100,28,&amp;#39;맛있다&amp;#39;]
function findSmall(arr){
  let temp = []
  let answer = &amp;#39;&amp;#39;
  for(let i=0; i &amp;lt; arr.length; i++) {
    if(typeof arr[i] === &amp;#39;number&amp;#39;) {
      temp.push(arr[i])
    }
  }
  let min = temp[0]
  for(let j=0; j &amp;lt; temp.length; j++) {
    if(min &amp;gt; temp[j]) {
      min = temp[j];
    }
  }
  return min;
}
console.log(findSmall(arr)) // 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 for문에서 숫자인지를 걸러주고, 두번째 for문에선 숫자들의 대소비교를 통해 답을 냈어요.&lt;/p&gt;
&lt;p&gt;자… 그럼 method로 아주 간단하게 풀어봅시다. 놀라지 마세요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const findSmall = () =&amp;gt; arr.filter(x=&amp;gt;typeof x === &amp;#39;number&amp;#39;).sort((a,b)=&amp;gt;a-b)[0]

console.log(findSmall(arr)) // 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저 긴 식이 이렇게나 짧게 줄어들었어요!
저는 여기서 array method 중에 하나인 &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;를 사용했는데요.
여기서 filter는 주어진 조건에 맞는 애들만 딱 걸러주는 역할을 하고, sort 함수는 작은 숫자에서 큰 숫자 순으로 정렬을 해주는 역할을 했어요.&lt;/p&gt;
&lt;p&gt;예시를 하나 더 들어볼게용
문제의 출처는 위코드 입니다 ㅎ 실은 제가 이걸 노가다방식으로 풀었기 때문에 블로그에 정리하면서 다시 한번 풀어보고 싶었어요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//dates=[&amp;#39;2019-03-21&amp;#39;, &amp;#39;2019-04-21&amp;#39;, &amp;#39;2019-05-21&amp;#39;]

//리턴값을 이렇게 바꾸시오.
[&amp;#39;2019년 03월 21일&amp;#39;, &amp;#39;2019년 04월 21일&amp;#39;, &amp;#39;2019년 05월 21일&amp;#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 푼 식을 먼저 공개할게요.. 완전 노가다에요…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let formatDate = dates =&amp;gt; Array(`${dates[0].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[0].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[0].split(&amp;#39;-&amp;#39;)[2]}일`,`${dates[1].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[1].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[1].split(&amp;#39;-&amp;#39;)[2]}일`,`${dates[2].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[2].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[2].split(&amp;#39;-&amp;#39;)[2]}일`)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이걸 다시 제대로.. &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;을 이용해 묶어보겠슴다
사실 계속 어떻게 할지 헤매다가 같은 기수 순규님의 도움으로 해결쓰…☆&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let formatDate = arr =&amp;gt; {  //1번
  return arr.map(x =&amp;gt; { //2번
    let temp = x.split(&amp;#39;-&amp;#39;) //3번
    return `${temp[0]}년 ${temp[1]}월 ${temp[2]}일` //4번
  })
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1번 : arr에 적용되는 식이 한 줄이 아닐거니까 화살표 뒤에 중괄호와 리턴 쓰기(사실 화살표 함수라 해서 무조건 중괄호 안쓰려고 생각하다 보니 더 안풀렸다 ㅠ)&lt;/li&gt;
&lt;li&gt;2번 : arr에 &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;을 적용해서 각각의 arr의 element들에 적용되는 식 만듬. 여기서 임의의 변수 x란 arr[i]와 동일한 역할&lt;/li&gt;
&lt;li&gt;3번 : x를 split해준 값을 temp에 담는다.(사실 이 과정이 머릿속으로 그려지지 않아서 하드코딩으로 지저분하게 문제를 풀었다ㅜㅜ 담으면 되는거였구나 ㅠㅠ)&lt;/li&gt;
&lt;li&gt;4번 : temp 배열의 0번째, 1번째, 2번째의 데이터를 통해 값을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;화살표 함수는 여전히 헷갈리는 어려운 녀석이다 ㅜㅜ
그치만 계속 계속 쓰다보면 늘겠지!! 화살표 함수를 습관화하자!!!&lt;/p&gt;
&lt;h3 id=&quot;별책부록--커링과-화살표함수&quot;&gt;&lt;a href=&quot;#%EB%B3%84%EC%B1%85%EB%B6%80%EB%A1%9D--%EC%BB%A4%EB%A7%81%EA%B3%BC-%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98&quot; aria-label=&quot;별책부록  커링과 화살표함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;별책부록 : 커링과 화살표함수&lt;/h3&gt;
&lt;p&gt;예전에 커링 정리 하다가 엄청 놀란 식이 있어서 공유해봅니다..☆&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let sum = function(x) {
  return function(y) {
    return x+y
  }
}

console.log(sum(5)(7)) // 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 커링 자체도 굉장히 놀랍고 신기한 기술인데.. 여기에 화살표함수가 더해지면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let sum = x =&amp;gt; y =&amp;gt; x+y

console.log(sum(5)(7)) // 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와우…!!! 놀라움의 연속쓰~~
커링은 더 나중에 정리해보겠슴다!
화살표함수가 익숙해지는 그날까지~~~ 모두모두 화이팅&lt;/p&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/es6-arrow-function&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/es6-arrow-function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wecode&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_4일 TIL_변수와 스코프]]></title><description><![CDATA[위코드 4일차 js 정리 1탄. js 공부의 가장 기초이면서도 중요한 변수와 스코프에 대해서 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_4_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_4_TIL_js/</guid><pubDate>Thu, 01 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;오늘로 벌써 5일찬데 아직 2일차 때 했던것 정리하는 중~.~아이고… 빨리 다 써야지!!! 밀리지 않게!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;그럼 js 공부 스타트~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;변수선언&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8&quot; aria-label=&quot;변수선언 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수선언&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;변수 : 값을 담기 위해 이름을 붙인 상자. 변수는 컴퓨터의 메모리에 일정한 크기의 영역으로 생성됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;영어공부 할때 ABC 다음으로 배우는게 I am 뭐시기~ 잖아여
그런것처럼 자바스크립트 세상에서 변수선언은 가장 기본적이면서도 필수적인 것!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var doori = &amp;#39;hungry&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 식에서 var가 am(~이다)같은 역할을 해주는 선언자입니다!
I(주어)같은 역할을 해주는게 여기선 doori인데, 자기 맘대로 이름 붙일수 있어요. 이게 바로 변수!
doori라는 변수에 = 뒤에 값(‘hungry’)을 넣어주는걸 우리는 변수 선언이라고 해요.&lt;/p&gt;
&lt;p&gt;자.. 쫌 더 이론적으로 설명해볼게요!&lt;/p&gt;
&lt;h3 id=&quot;변수선언-3단계&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8-3%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;변수선언 3단계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수선언 3단계&lt;/h3&gt;
&lt;p&gt;이건 시스템 상에서 일어나는 일이기 때문에 우리눈으로 확인할 순 없어요 ㅠㅠ 그래서 집 짓는 과정으로 예를 들어봤어요~ (혹시나 잘못된 정보가 있으면 댓글 달아주세요!!! 언제든지 수정하겠슴다~)
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a32424d0-b4c6-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-선언단계--변수를-변수객체에-등록&quot;&gt;&lt;a href=&quot;#1-%EC%84%A0%EC%96%B8%EB%8B%A8%EA%B3%84--%EB%B3%80%EC%88%98%EB%A5%BC-%EB%B3%80%EC%88%98%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%93%B1%EB%A1%9D&quot; aria-label=&quot;1 선언단계  변수를 변수객체에 등록 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 선언단계 : 변수를 변수객체에 등록&lt;/h4&gt;
&lt;p&gt;집을 지으려면 먼저 나라에서 부지를 사야겠죠? 내 땅이오~ 하고 선언하는거에요
자바스크립트 세상에서도 변수를 변수객체에 먼저 등록을 해야해요.&lt;/p&gt;
&lt;h4 id=&quot;2-초기화단계--변수객체에-등록된-변수를-위한-메모리-확보&quot;&gt;&lt;a href=&quot;#2-%EC%B4%88%EA%B8%B0%ED%99%94%EB%8B%A8%EA%B3%84--%EB%B3%80%EC%88%98%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%99%95%EB%B3%B4&quot; aria-label=&quot;2 초기화단계  변수객체에 등록된 변수를 위한 메모리 확보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 초기화단계 : 변수객체에 등록된 변수를 위한 메모리 확보&lt;/h4&gt;
&lt;p&gt;사람이 맨 땅에 살 수 없잖아요.. 집이 필요하죠!!! 변수가 들어갈 집을 짓는거에요.
근데 사람이 입주를 안해서 집이 비어있어요. 집주인이 정해지지 않아서 undefined 상태인거에요.&lt;/p&gt;
&lt;h4 id=&quot;3-할당단계--undefined로-초기화된-변수에-실제-값을-할당&quot;&gt;&lt;a href=&quot;#3-%ED%95%A0%EB%8B%B9%EB%8B%A8%EA%B3%84--undefined%EB%A1%9C-%EC%B4%88%EA%B8%B0%ED%99%94%EB%90%9C-%EB%B3%80%EC%88%98%EC%97%90-%EC%8B%A4%EC%A0%9C-%EA%B0%92%EC%9D%84-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;3 할당단계  undefined로 초기화된 변수에 실제 값을 할당 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 할당단계 : undefined로 초기화된 변수에 실제 값을 할당&lt;/h4&gt;
&lt;p&gt;집주인이 부동산이랑 계약해서 집을 샀어요. 이제 변수에 실질적인 집주인이 생긴거죠 하하~&lt;/p&gt;
&lt;p&gt;영어에서도 am, are,is 있듯이 변수 선언에서도 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 세 가지를 선언자로 이용하는데요.&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;는 3단계 순서를 잘 따르는데, &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;는 쫌 달라요. 예를 들어볼게요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;첫번째 &amp;#39; + waffle) // Reference Error. waffle is not defined
let waffle = &amp;#39;맛있다&amp;#39;
console.log(&amp;#39;두번째 &amp;#39; + waffle)// Reference Error. waffle is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 줄에서 waffle을 선언하기 전에 콘솔을 찍었기 때문에 &lt;code class=&quot;language-text&quot;&gt;ReferenceError: waffle is not defined&lt;/code&gt; 라는 에러가 발생합니다.
두번째 줄에서 waffle이라는 변수에 ‘맛있다’라는 값을 줬지만, 여전히 콘솔을 찍어보면 오류가 발생합니다. let이나 const로 변수를 초기화(2단계)하기 이전에 콘솔로 변수를 호출하면 TDZ(일시적 사각지대)에 빠져서 에러가 발생해욧..
에러가 생기니까 이게 안 좋은것 같아 보이지만, 오히려 이 에러가 덕분에 어디가 틀렸는지 아니깐 코드를 보수하기 더 쉬워진다는 거!&lt;/p&gt;
&lt;p&gt;이번엔 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;를 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;첫번째 &amp;#39; + waffle) // Reference Error. waffle is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;waffle을 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;로 선언하기 이전에 콘솔에 waffle을 찍으면 당연 오류가 나겠죠?
이번에는 콘솔을 지우지 않은 채로 바로 밑에다가 &lt;code class=&quot;language-text&quot;&gt;var waffle=&amp;#39;맛있다&amp;#39;&lt;/code&gt;라고 선언을 해볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var waffle = &amp;#39;맛있다&amp;#39; // &amp;#39;첫번째 undefined&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 ‘첫번째 undefined’라는 값이 찍힙니다. 원래대로라면 집주인이 나타나기도 전에 집주인 누구냐고 물은거니깐, 에러가 생겨야 하지만, &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;선언자는 1,2단계가 동시에 발생하고, 집주인이 정해지기 전에 undefined라는 값이 기본으로 들어가서 집주인 행세를 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;두번째 &amp;#39; + waffle) // &amp;#39;두번째 맛있다&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세번째 줄에 다시 콘솔을 찍어보면 waffle에 맛있다 라는 값이 입주하게 되는거죠!
여기서 잠깐, 변수 선언도 전에 console을 찍은 두번째는 어찌하여 undefined라는 값이 나왔냐? 이건 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;의 성질인 호이스팅 때문에 발생한 일인데요!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호이스팅 : 변수선언을 제일 위로 끌어올리는 현상.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이건 밑에서 잠깐 짚고 넘어갈거에요.
여튼..&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;가 최신 문법이니 최대한 이걸 씁시다. 얘네를 쓰면 var로 인한 오류가 줄어서 더 편해요~
&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;는 최대한 사용을 지양합시다!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/163ebce0-b4c8-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;
늙은이는 안된다?? ㅎ 그 이유는 아래서 계속… 궁금하죠?ㅋㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;변수의-유효범위&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84&quot; aria-label=&quot;변수의 유효범위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수의 유효범위&lt;/h2&gt;
&lt;h3 id=&quot;scope유효범위&quot;&gt;&lt;a href=&quot;#scope%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84&quot; aria-label=&quot;scope유효범위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope(유효범위)&lt;/h3&gt;
&lt;p&gt;변수에 접근할 수 있는 범위를 스코프라고 합니다~
떡볶이로 예를 들어볼게요! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/623fbb30-b4cd-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;(또보겠지 떡볶이&amp;#x26;버갈… 죠온맛탱)
우리나라 사람들은 떡볶이 하면 다 알죠?? 근데 음… 저기 안드로메다쯤에 사는 외계인은 지구가 너무 멀기도 하고, 지구에 나라도 많으니깐 한국을 모를수도 있잖아요.
걔한테 백날 떡볶이 맛있어! 너도 먹어봐! 라고 말해봤자 못 알아들어요. 떡볶이가 먹는건지, 입는건지도 모를거 아니에요
외계인의 scope는 안드로메다라서 대한민국에서 선언한 떡볶이를 못알아듣는거죠~&lt;/p&gt;
&lt;p&gt;이러한 스코프에는 &lt;code class=&quot;language-text&quot;&gt;어휘적범위&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;동적범위&lt;/code&gt; 두 종류가 있는데 js는 어휘적 범위(Lexical Scope)를 선택했어요! 이건 코드가 작성될 때 유효범위가 정해지는 거고, 다이나믹은 다이나믹해서 프로그램 실행하면서 정해져요.. 사실 다이나믹 스코프를 겪어보지 못해서 저는 설명못해줘요 고수님들 블로그 참고하세요ㅠㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼… 우리의 동적범위, Lexical은 &lt;code class=&quot;language-text&quot;&gt;전역변수&lt;/code&gt;와&lt;code class=&quot;language-text&quot;&gt;지역변수&lt;/code&gt;로 나뉩니다요.
얘네들을 알아보기 전에 먼저 살펴볼 것. 바로바로 블럭!&lt;/p&gt;
&lt;h3 id=&quot;block&quot;&gt;&lt;a href=&quot;#block&quot; aria-label=&quot;block permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;block&lt;/h3&gt;
&lt;p&gt;함수 예시를 쉽게 만들려다가… 창작의 고통에 빠져서 예전에 정리해놨던 함수를 긁어왔슴다… 하늘색 테두리만 봐주세요!!!!!!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a5f7c4f0-b4cb-11e9-8e76-97bd002d6b4f/image.png&quot; alt=&quot;image.png&quot;&gt;
위의 그림에서 보면 함수 전체, for문 안쪽, if문 안쪽에 테두리가 쳐져있죠?
{}요걸로 감싸진 영역! 이 공간들을 자바스크립트 세상에서는 block이라고 불러요.
(저는 사실 for문도 block에 해당하는걸 이번에 처음 알았어요! 와우!!)&lt;/p&gt;
&lt;h3 id=&quot;전역변수와-지역변수&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%99%80-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98&quot; aria-label=&quot;전역변수와 지역변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전역변수와 지역변수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;전역변수 : block 바깥에서 선언된 변수&lt;/li&gt;
&lt;li&gt;지역변수 : block 안쪽에서 선언된 변수
전역변수의 경우 scope가 전체 코드가 될 것이고, 지역변수는 block 안쪽이에요
예시를 통해 확인해볼까요~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let outer = 123;

{
let outer = 456;
let inner = 456;
}

console.log(outer) // 123
console.log(inner) // Reference Error: inner is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 젤 첫번째 줄의 outer가 바로 전역변수에요. block 바깥에서 선언됐죠~
콘솔에 outer를 찍어보면 123이 나옵니다. 왜냐?
두번째 outer는 중괄호 안에서만 활동 가능한 지역변수기 때문이죠!!
inner를 찍어보면 456이라는 숫자 대신, 에러가 뜨는 이유가 바로 그거에요~
inner의 값을 콘솔에 나타내고 싶다면 저 중괄호 안에서 console.log를 찍어주세용&lt;/p&gt;
&lt;h2 id=&quot;하지만-var를-써보면-어떻게-될까요&quot;&gt;&lt;a href=&quot;#%ED%95%98%EC%A7%80%EB%A7%8C-var%EB%A5%BC-%EC%8D%A8%EB%B3%B4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C%EC%9A%94&quot; aria-label=&quot;하지만 var를 써보면 어떻게 될까요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하.지.만 var를 써보면 어떻게 될까요?&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var outer = 123;

{
var outer = 456;
var inner = 456;

}

console.log(outer) // 456
console.log(inner) // 456&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리가 알고있는 이론과는 달리 둘 다 456이라는 값이 나오게 됩니다.
이것은 호이스팅(hoisting : 끌어올림) 때문에 생기는 일인데요..&lt;/p&gt;
&lt;p&gt;이 부분은 나중에 클로저 정리할 때 다시 자세하게 쓰도록 하겠습니다!!
(지금 할 게 넘넘 많아유 ㅠㅠ)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;오늘의 교훈 : let이나 const 쓰는걸 생활화 하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;to고수님들&quot;&gt;&lt;a href=&quot;#to%EA%B3%A0%EC%88%98%EB%8B%98%EB%93%A4&quot; aria-label=&quot;to고수님들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To.고수님들…&lt;/h2&gt;
&lt;h2 id=&quot;틀린-정보가-있다면-댓글로-의견-주세요-언제든지-적극-반영하겠습니다&quot;&gt;&lt;a href=&quot;#%ED%8B%80%EB%A6%B0-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%9D%98%EA%B2%AC-%EC%A3%BC%EC%84%B8%EC%9A%94-%EC%96%B8%EC%A0%9C%EB%93%A0%EC%A7%80-%EC%A0%81%EA%B7%B9-%EB%B0%98%EC%98%81%ED%95%98%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;틀린 정보가 있다면 댓글로 의견 주세요 언제든지 적극 반영하겠습니다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;틀린 정보가 있다면 댓글로 의견 주세요!! 언제든지 적극 반영하겠습니다!&lt;/h2&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;도서 모던자바스크립트 입문&lt;/li&gt;
&lt;li&gt;wecode&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_3일 TIL_CSS]]></title><description><![CDATA[위코드 3일차 CSS 정리 2탄. list, table, input/textarea에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_3_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_3_TIL_css/</guid><pubDate>Wed, 31 Jul 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;DOM으로 빨리 넘어가야 하는데… DOM 너무 무섭고요…
그래서 정리해보는 wecode 1일차 TIL - CSS 2탄! 오늘로 벌써 5일찬데 임시저장 해놓은 1일차 쓰고있슴다..OTL… 시간 넘나 빠른것…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;오늘의 명언 : 무슨일이 있어도 블로깅은 절대 밀리지 말자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h3&gt;
&lt;p&gt;list에서 기억할 것은 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 그리고&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;입니다! 코드와 그림을 먼저 살펴보아요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;ol&amp;gt;
      &amp;lt;li&amp;gt;하나&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;두울&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;세엣&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;네엣&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;다스&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;여스&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;일곱&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;여덟&amp;lt;/li&amp;gt;
    &amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/99ba52e0-b33e-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ol : Orderd List의 줄임말로 순서가 있는 list를 만들때 쓰시면 됩니당. 이렇게 번호가 뙇!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/02dde980-b33f-11e9-a50a-67208960cf89/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ul : UnOrdered List의 줄임말로 순서없이 점 띡! 찍는 list를 만들때 쓰면 돼용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;근데 리스트 형식인데 점을 없애고 싶다? 그러면 css파일에 &lt;code class=&quot;language-text&quot;&gt;ul {
  list-style: none;
}&lt;/code&gt; 추가고고
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/267bcd30-b33f-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;
짠~ 점들이 없어졌어요 오예!!
근데 가끔 제가 벨로그에 쓰는것처럼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이런 효과를 주고 싶다면!! 이것도 가능합니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ul {
  list-style: none;
  border-left: 3px solid grey; // 젤 왼쪽에 선 효과 주기
  padding: 15px; // 이걸 안 쓰면 너무 떨어져있게 되니까 적절히 떨어지도록 padding 추가
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0434f890-b340-11e9-a50a-67208960cf89/image.png&quot; alt=&quot;image.png&quot;&gt;사진을 왼쪽 정렬 하는 방법을 몰라서 그런데, 이거 왼쪽 벽에 딱 붙어있는 이미지랍니다!&lt;/p&gt;
&lt;p&gt;위에서 border는 테두리를 씌우는 걸 말하는데요. 만약에 border-left가 아닌 border로 값을 설정한다면 사방팔방 회색깔 테두리가 씌워질거에요.&lt;/p&gt;
&lt;h3 id=&quot;table&quot;&gt;&lt;a href=&quot;#table&quot; aria-label=&quot;table permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table&lt;/h3&gt;
&lt;p&gt;몰랐는데 CSS로 표도 만들수 있더라고요 대박쓰…!!!!!! 표를 작성하려면 알아둘게 쪼꼼 많아요! &lt;code class=&quot;language-text&quot;&gt;&amp;lt;table&amp;gt;, &amp;lt;thead&amp;gt;, &amp;lt;tbody&amp;gt;, &amp;lt;tr&amp;gt;, &amp;lt;th&amp;gt;, &amp;lt;td&amp;gt;&lt;/code&gt; 하나씩 살펴봅시당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; : 표 만들땐 젤 바깥쪽을 이 태그로 감싸줍시다~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; : Table Row의 줄임말. 행의 시작은 이 태그로!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; : Table Heading의 줄임말. 열의 시작은 이 태그로!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;td&amp;gt;&lt;/code&gt; : Table Data의 줄임말. 표 안쪽에 내용물은 이 태그로 감싸줍시다~&lt;/li&gt;
&lt;li&gt;셀병합 : colspan이나 rowspan 적절히 사용해보기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게만 보면 모르겠으니까 실제로 적용해봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;     &amp;lt;table class=&amp;quot;border-table&amp;quot;&amp;gt; // 테이블 만들기 시작을 알리는 태그!
      &amp;lt;tr&amp;gt; // 1행 시작
        &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt; // 1열 시작
        &amp;lt;th&amp;gt;1 pm&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;2pm&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;3pm&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 2행 시작
        &amp;lt;th&amp;gt;Gym&amp;lt;/th&amp;gt; //2열 시작
        &amp;lt;td&amp;gt;Dodge ball&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Kick boxing&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sack racing&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 3행 시작
        &amp;lt;th&amp;gt;Exercise Room&amp;lt;/th&amp;gt; //3열 시작
        &amp;lt;td&amp;gt;Spinning&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;gray&amp;quot; colspan=&amp;quot;2&amp;quot;&amp;gt;Yoga marathon&amp;lt;/td&amp;gt; // 열 병합(2칸)
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 4행 시작
        &amp;lt;th&amp;gt;Pool&amp;lt;/th&amp;gt; // 4열 시작
        &amp;lt;td class=&amp;quot;gray&amp;quot; colspan=&amp;quot;3&amp;quot;&amp;gt;Water polo&amp;lt;/td&amp;gt; // 열 병합(3칸)
      &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html에서 이렇게 작성하면…&lt;br&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/45f04a20-b34d-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
요로코롬 표를 완성할수 있어요! 진짜 시간표 같고 그럴듯하죠? &lt;/p&gt;
&lt;p&gt;물론 표 안의 색깔이나, 표의 테두리는 다 CSS로 효과를 준거에요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  table {
  border-collapse: collapse; // 이걸 안쓰면 표가 조각조각나서 떨어져서 딱 안 붙어있어요~
}

.border-table th,
.border-table td {
  border: 1px solid black; //표 테두리의 굵기와 색깔 입혀주기
}

.gray {
  background-color: gainsboro; //표 칸에 회색으로 색칠해준 것
}```
이렇게 말이죠!
눈팅 금지!! 직접 쳐봐야 좀 더 오래 기억에 남더라구요~~
  
### input과 textarea
둘 다 텍스트를 입력하는 공간이긴 한데 약간의 차이가 있어용
읽어보면 input은 두글자로, textarea 6글자 이상으로 더 길죠?????
짧은 값은 input으로 주고, 긴 값은 textarea로 줍시다..!

* input 타입 알아보기
-type=&amp;quot;text&amp;quot; : 어떠한 텍스트나 입력 가능쓰
-type=&amp;quot;password&amp;quot; : 비번 입력할때 까만 똥그라미 나오는 원리에요! 와우!!!! 씐기씐기!
-type=&amp;quot;number&amp;quot; : 숫자만 입력할 수 있어요. 특수문자 금지!
  
+쁘라스!
placeholder=&amp;quot;아무개&amp;quot; : 이걸 input태그 내에 입력하면 입력전에 아무개라는 글자가 떠요.

![image.png](https://images.velog.io/post-images/dooreplay/9edd6040-b34e-11e9-a50a-67208960cf89/image.png)
로그인할 때 자주 볼 수 있는 풍경이죠? ㅋㅋ

### flex
는 다음 기회에......
미니터 구현한 화면과 함께 공개합니다 두둥!
블로깅이 너무너무너무 많이 밀렸어요~~~ 아이고 나살려~~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_2일 TIL_CSS]]></title><description><![CDATA[위코드 2일차 CSS 정리 1탄. CSS란 Cascading Stytle Sheet의 줄임말로, 다이어리 꾸미기 하듯이 밋밋한 우리의 html을 아름답게 꾸며주는 친구칭구]]></description><link>https://gollumnima.github.io//posts/wecode1_2_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_2_TIL_css/</guid><pubDate>Tue, 30 Jul 2019 22:12:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;csscascading-stytle-sheet&quot;&gt;&lt;a href=&quot;#csscascading-stytle-sheet&quot; aria-label=&quot;csscascading stytle sheet permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS(Cascading Stytle Sheet)&lt;/h1&gt;
&lt;p&gt;Cascade를 찾아보니 폭포, 쏟아지는 것 뭐 이런 뜻이였는데 뜻에 너무 큰 의미를 두지 맙시다…
우리가 html로 설계도를 짰으면 css로 색칠하고 예쁘게 꾸며주는 작업이 필요해용&lt;/p&gt;
&lt;h3 id=&quot;1-css-적용방법&quot;&gt;&lt;a href=&quot;#1-css-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;1 css 적용방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. CSS 적용방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인라인 스타일 :html 태그 안에 직접적으로 적용하는 방법쓰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, span과 p에 색깔을 입혀볼게요(둘의 차이점을 보여주기 위해 하는 작업쓰)
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;span style=&amp;quot;background-color : skyblue&amp;quot;&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/span&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p style=&amp;quot;background-color : skyblue&amp;quot;&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/p&amp;gt;&lt;/code&gt;
이렇게 치면 어떤 결과가 나올까요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b87c11c0-b274-11e9-944d-395be74d9f35/aslkjfd.PNG&quot; alt=&quot;aslkjfd.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;인라인 스타일로 글자에 배경색을 입혀봤는데 &lt;code class=&quot;language-text&quot;&gt;span&lt;/code&gt;은 스판끼가 없어서 딱 글자만큼만, &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;는 그 문장 전체에 색을 다 입혀줬슴다
저는 주로 CSS파일을 만들어 쓰는데, 인라인 스타일로 쓰면 적용이 제일 확실하게 된다네요!?
점수제가 있더라고요 몰랐는데 와우…!!!! 고건 밑에서 다시 설명쓰..☆&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Style 태그 :말 그대로 html 내부에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 적용하는 것. 이렇게.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;span&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/span&amp;gt;

    &amp;lt;style&amp;gt;
      span {
        color: #408090;
      }
    &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(아까는 background-color를 입혀서 배경색을 채워줬는데.. 걍 컬러를 쓰면 글자색이 바뀝니당
적용은 이렇게 뙇!)
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b4c9c4e0-b284-11e9-9878-3be49a983fcd/%EC%BA%A1%EC%B2%98123454.PNG&quot; alt=&quot;캡처123454.PNG&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS 파일 만들기 ☞★강추방법! 젤 깔끔쓰~
우리가 html 파일 만들어줬던것처럼 아무파일명.css 해서 css 파일을 하나 만들어줍시다
CSS 파일을 html에 적용시키려면 ↖너와↘나의↗연결↘고리↗가 필요하겠죠?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;html &lt;code class=&quot;language-text&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 밑에다가 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link href=&amp;quot;index.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;&lt;/code&gt; 이거 붙여줘용. 링크 흐르엪 옆에다가 만든 css 파일 이름를 써줍니다. 저 태그들은 다 무슨뜻이냐.. 봅시다&lt;/p&gt;
&lt;p&gt;-link : css파일의 링크를 나타내는 태그.
-href : css파일 경로를 나타내는 속성값
-type : link 태그로 연결되는 파일이 뭐신지 알려줌. 항상 type 값은 ‘text/css’래용
-rel : html과 css파일의 관계를 설명한다는데.. 얘도 항상 ‘stylesheet’에용&lt;/p&gt;
&lt;p&gt;그럼 어케 쓰냐.. 작성법은 아래 2번에서 다시~~&lt;/p&gt;
&lt;h3 id=&quot;2-css-작성법&quot;&gt;&lt;a href=&quot;#2-css-%EC%9E%91%EC%84%B1%EB%B2%95&quot; aria-label=&quot;2 css 작성법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. CSS 작성법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;selector자리에 태그이름 쓰기
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/08fd24e0-b2c5-11e9-9a46-ed26791597e3/lalala.PNG&quot; alt=&quot;lalala.PNG&quot;&gt;(사진출처 : WECODE Repl.it)
그림을 새로 만들까 하다가… 시간 아끼려고 퍼온 사진쓰…☆ 이해해주시겠져..? 열심히 할게요ㅠㅠ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;p {
color : yellow;
background-color : black; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저기 selector 자리에 div나 span,p와 같은 태그 이름을 쓸 수 있어요.
중괄호 열어서 왼쪽에는 주고 싶은 효과 쓰고, 오른쪽에는 그 효과에서 색을 뭘로 줄건지 등등 디테일한 값들을 넣어줍시다~
객체랑 비슷하게 생겼지만 객체처럼 컴마 찍지 말고 땀방울을 찍어주세요. 열심히 CSS로 꾸미면 고생한만큼 땀이 날거 아니에요? ㅎ 기억하세요 땀방울;;;;^^;;;;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;selector자리에 id/class이름 쓰기
id는 #, class는 . 쓰세요~ &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//chicken이라는 id값을 가진 애한테 글씨색 갈색으로 입혀주기
#chicken{
color: brown;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//macaron이라는 class값을 가진 애들한테 글씨색 하늘색으로 입혀주기
.macaron{
color: skyblue;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class는 동명이인이 많으니깐, CSS파일에서 &lt;code class=&quot;language-text&quot;&gt;macaron&lt;/code&gt; 색깔을 하늘색으로 지정해주면, html 나라의 김마카롱, 박마카롱, 최마카롱 등등 오둥이잡둥이 class이름이 마카롱인 친구들은 다 하늘하늘해지겠져~ XD 한방에 작업할수 있으니까 개이득!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;요 밑에서부턴 CSS를 전부 다 정리하려는 욕심을 접고… 제가 자주 헷갈리는 부분들과 중요해 보이는 애들만 정리하겠슴다&lt;/p&gt;
&lt;h3 id=&quot;●-margin과-padding--여백의-미&quot;&gt;&lt;a href=&quot;#%E2%97%8F-margin%EA%B3%BC-padding--%EC%97%AC%EB%B0%B1%EC%9D%98-%EB%AF%B8&quot; aria-label=&quot;● margin과 padding  여백의 미 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;● margin과 padding : 여백의 미&lt;/h3&gt;
&lt;p&gt;둘의 차이를 비교하기 전에 그림을 먼저 보고 가실게요.
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b518de60-b2c8-11e9-84d6-5f50704416a6/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;margin : 외부 여백
border : 테두리
padding : 내부 여백&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게만 보면 쪼꼼 헷갈릴수도 있으니 코드와 그림을 같이 봅시다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.one {
  background-color: yellow; //배경 색깔
  text-align: center; // 가운데정렬
  width: 200px; //가로너비
}

.two {
  background-color: paleturquoise;
  text-align: center;
  width: 200px;
}

.three {
  background-color: blue;
  text-align: center;
  width: 200px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/42f857f0-b32e-11e9-94fc-df00913fc39f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;요런 박스 3개가 있습니다. 이제 효과를 줘볼거에요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.one {
  background-color: yellow;
  text-align: center;
  width: 200px;
  margin: 50px 50px;
}

.two {
  background-color: paleturquoise;
  text-align: center;
  width: 200px;
}

.three {
  background-color: blue;
  text-align: center;
  width: 200px;
  padding: 50px 50px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;one에는 margin을 50px을, two는 가만히 냅뒀고, three에는 padding을 50px 줬어요
과연 결과는????? 두구두구두구두구두구두~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e919a3f0-b32e-11e9-a24a-5b58c5102a80/image.png&quot; alt=&quot;image.png&quot;&gt;
1번과 2번은 가로길이는 동일하지만, 1번이 멀찍이 떨어지게 됐어요.
3번은 padding 값을 줘서 크기는 커졌지만, margin값이 없기 때문에 2번과 붙어있져~&lt;/p&gt;
&lt;p&gt;★꿀팁 하나 더!
&lt;code class=&quot;language-text&quot;&gt;.two {
  padding: 10px 20px;
}&lt;/code&gt;이거랑 &lt;code class=&quot;language-text&quot;&gt;.two {
  padding: 10px 20px 10px 20px;
}&lt;/code&gt;이거랑 같다는 사실!
저는 이번에 처음 알았어요 ㅋㅋㅋㅋ 유레카~~
젤 왼쪽부터 순서대로 위↑오른쪽→아래↓왼쪽← 시계방향으로 돌아간다고 생각하심 됩니다!!&lt;/p&gt;
&lt;h3 id=&quot;box-sizing&quot;&gt;&lt;a href=&quot;#box-sizing&quot; aria-label=&quot;box sizing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;box-sizing&lt;/h3&gt;
&lt;p&gt;아까 세 개의 box를 보면 width는 동일하게 200px로 줬지만 padding값을 준 애는 혼자 너무 커진걸 확인할 수 있었죠! 아직 코딩 병아리라.. 예시가 적절한지는 사실 잘 모르겠어요 ㅠㅠ
여튼… 눈으로 보이는 width와 실제 width가 다를 경우, 우리는 이 사이즈를 맞춰줘야해욧&lt;/p&gt;
&lt;p&gt;각각의 selector에 &lt;code class=&quot;language-text&quot;&gt;box-sizing: border-box;&lt;/code&gt; 이 속성을 추가해줘도 좋지만…
우리가 거대한 웹 페이지를 만들땐 일일히 추가하기 힘들겠져!!!!
그래서 꼼수가 있슴다…
바로 이것이죠 &lt;code class=&quot;language-text&quot;&gt;* {
  box-sizing: border-box;
}&lt;/code&gt;
이렇게 *하고 중괄호 열면 모든 태그에 적용할 수 있다네요! 꼭 알아두셔용 ~.~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d6a8ee10-b333-11e9-b6c6-c5c426422d48/image.png&quot; alt=&quot;image.png&quot;&gt;
추가하면 이렇게 모든 박스의 크기가 같아집니다. 우와~~~!&lt;/p&gt;
&lt;h3 id=&quot;상속과-grouping&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D%EA%B3%BC-grouping&quot; aria-label=&quot;상속과 grouping permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속과 Grouping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속
js에서 prototype에 상속이라는 성질이 있듯이, CSS에도 있습니다!
부모가 가진 스타일을 자식이 물려받는거죠…예시로 확인해볼게요~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;one&amp;quot;&amp;gt;난 자식&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;two&amp;quot;&amp;gt;나도 자식&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;alone&amp;quot;&amp;gt;난 혼자 ㅠㅠ&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;body 태그 안에 이런 애들이 있어요. CSS 값들은 아래와 같이 줘볼게용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.parent {
  background-color: blueviolet;
  width: 200px;
}

.one {
}

.two {
}

.alone {
  background-color: gainsboro;
  width: 400px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자식들한텐 어떠한 값도 주지 않았고, one과 two를 감싸는 parent라는 class를 가진 div에만 값을 줘봤어요! class가 alone인 div에도 다른 값을 설정해줬구요
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/03ee5e30-b336-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;
결과는 이렇게 뙇! 칫솔 모양이네요. 다들 양치 열심히 하세요! 치과 무섭잖아요
근데 매번 태그마다 값을 일일히 주기 귀찮잖아여.. 값을 다 통일하고 싶다! 그렇땐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping
그룹으로 묶어버리는 방법이 있어요. 이렇게
&lt;code class=&quot;language-text&quot;&gt;.parent, p {
background-color: blueviolet;
width: 200px;
}&lt;/code&gt; 이렇게 parent div와 p 태그를 ,로 묶어주면
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7872dbf0-b336-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
CSS값이 이렇게 동일하게 먹힙니다! 오오~~&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;css-selector의-우선순위&quot;&gt;&lt;a href=&quot;#css-selector%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;css selector의 우선순위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS selector의 우선순위&lt;/h3&gt;
&lt;p&gt;CSS를 작성하는 법 세 가지에 대해서 위에서 다뤄봤는데요, 각 방법마다 일정한 점수가 부여되서 그 점수가 높은 애들이 좀 더 권력자가 될 수 있어요!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인라인 : 1000점
id : 100점
class:  10점
tag : 1점&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;와우… 저는 인라인 방법이 태그를 더럽힌다고(?) 생각해서 젤 점수가 낮을줄 알았는데 반전쓰..!
근데 우리가 수학자도 아니고.. 점수를 일일히 계산하기보단 그냥 대충 이렇다! 하고 알고있음 좋을 것 같습니다~
지난번에 말했던 것처럼 id를 너무 남발하지만 않는다면 점수는 대충 비슷해질것 같아요!&lt;/p&gt;
&lt;p&gt;예시를 안 보고 넘어가면 섭하겠죠? 먼저 CSS파일엔 이렇게&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.parent {
  background-color: blueviolet;
  width: 200px;
  font-size: 30px;
}

.alone {
  background-color: gainsboro;
  width: 400px;
  font-size: 30px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parent 클래스와 alone 클래스에 모두 font-size 30px이라는 값을 준 상태.
인라인의 권력을 시험해보기 위해 html 태그도 함 볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;one&amp;quot;&amp;gt;난 자식&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;two&amp;quot;&amp;gt;나도 자식&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;alone&amp;quot; style=&amp;quot;font-size: 100px;&amp;quot;&amp;gt;난 혼자 ㅠㅠ&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html바디를 살펴보시면 alone 클래스를 가진 p에 인라인으로 font-size 100px를 줬어요
결과는 과연!!! 두구두구두구두굳구ㅜ둑두구두구~~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/168e5d40-b338-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
분명 CSS에서 같은 글씨 크기로 설정했지만, 100px의 효과를 준 인라인방식이 더 우세한걸 알수 있습니다! 라인을 잘 타라는 말이 괜히 있는게 아니였네요… 무서운 세상!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;포스팅이 너무 길어지는 것 같아 이번판은 여기서 끝! 안그래도 말많은 블로그라 여기서 줄여용
아직도 위코드 1일차 후기가 안 끝났다니… 큰일쓰…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_1일 TIL_HTML 구성과 tag]]></title><description><![CDATA[위코드 1일차 HTML. Hyper Text Markup Language의 줄임말로, 내가 쓰고 있는 방식인 Markdown과는 반대. 나중에 이 부분에 대해서도 한 차례 정리해볼 생각이다!]]></description><link>https://gollumnima.github.io//posts/wecode1_1_TIL_html/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_1_TIL_html/</guid><pubDate>Mon, 29 Jul 2019 22:40:32 GMT</pubDate><content:encoded>&lt;!-- - [html 구조 알아보기](#the-first-transition)
- [html 태그의 종류](#the-digital-age)
- [id와 class](#loss-of-humanity-through-transitions) --&gt;
&lt;p&gt;블로그를 도대체 몇 번이나 갈아타는건지..? 네이버 블로거 시절이 젤 편했는데… 보고픈 잇님덜…☆
이제 나는 본격 개발하는 사람이니깐 이미 만들어진 플랫폼 말고 내가 직접 수정할 수 있는 이 개츠비 블로그를 이용해 글을 써 나갈 예정이다!&lt;/p&gt;
&lt;h3 id=&quot;위코드-1일차-후기훅이&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C-1%EC%9D%BC%EC%B0%A8-%ED%9B%84%EA%B8%B0%ED%9B%85%EC%9D%B4&quot; aria-label=&quot;위코드 1일차 후기훅이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드 1일차 후기훅이&lt;/h3&gt;
&lt;p&gt;오늘은 HTML과 CSS 에 대해서 배웠다.
지난번 코드스테이츠에서 공부할 땐 이 부분을 너무 부실하게 가르쳐줘서 HTML, CSS만 보면 너무 고통스러웠는데.. 적절한 설명과 예시들, 그리고 그때그때 바로 코드 쳐서 실습해볼 수 있는 좋은 환경쓰 굿굿!&lt;/p&gt;
&lt;h2 id=&quot;htmlhyper-text-markup-language&quot;&gt;&lt;a href=&quot;#htmlhyper-text-markup-language&quot; aria-label=&quot;htmlhyper text markup language permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML(Hyper Text Markup Language)&lt;/h2&gt;
&lt;p&gt;우리는 HTML을 이용해 웹 페이지 구조를 짤 수 있다.
지금 당장 VScode를 열어서 새파일 만들어서 아무파일명.html을 저장. 그다음 첫줄에 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt;를 치고 Tab을 누르시오.
그렇다면 자동완성된 HTML 양식을 확인할 수 있다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;별로 힘들이지 않고 이렇게 순식간에 완성된 우리의 기본 구조!
저기서 꺽쇠 영어 뭐시기… 써 있는걸 태그라고 하는데
기본적으로 태그와 태그 사이에 내용을 쓰고 끄트머리 꺽쇠를 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;로 닫아준다.
예를들어… &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;안녕 여러분!&amp;lt;/h1&amp;gt;&lt;/code&gt; 이런식으로다가 뙇!
(태그는 아래쪽에서 좀 더 자세히 다룰거에요~!)zzzz &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;: 느낌표를 앞에 써놔서 부정을 뜻할것 같지만 html이라고 명시하는 부분&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt;: 브라우저가 인제부터 html 설계도 그려나갈거야~! 라고 명시하는 부분&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;: 사이트의 제목, 설명, 부가정보,기술정보(모바일인지 아닌지) 등 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/code&gt;: 한중일어 포함되어 있다면 utf-8이라는 값으로 문자를 인코딩 해준다는 말씀&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt;&lt;/code&gt;:디바이스 가로길이가 웹페이지 가로길이와 같다는 말씀. 이걸 빼먹는다면 웹페이지가 축소되서 보이니까 꼭 한번씩 까먹고 써보지 맙시다~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; : 브라우저에 보이는 탭 이름. 크롬탭에 뭐라고 써있는지 큰소리로 읽어보아요&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; : 젤 중요한 부분. 여기에 페이지에 보이는 뼈대와 내용을 작성쓰~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-태그&quot;&gt;&lt;a href=&quot;#2-%ED%83%9C%EA%B7%B8&quot; aria-label=&quot;2 태그 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 태그&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h5&amp;gt;&lt;/code&gt; : header의 줄임말. 머리로 박치기 하는거 말고! &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;배고파&amp;lt;/h1&amp;gt;&lt;/code&gt; 이런 식으로 h1부터 h5까지 써보시오. h1과 h5 중에 뭐가 더 클까요?? 쳐보세요 ^^ 코드는 실전입니다 크크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; : 딱 글자 쓴 만큼까지만 공간을 차지하는 애. 이름은 스판이지만, 전혀 스판끼 없는 애임. 쫙쫙 안 늘어나고 딱 그 글자만큼만!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; : paragraph의 약자… 맞나? 아니면 나중에 수정하겠음. 여튼 문장단위의 공간을 차지하는 애. 위의 &lt;code class=&quot;language-text&quot;&gt;span&lt;/code&gt;과는 달리 줄바꿈 가능쓰~
(span과 p를 구분하려면 CSS를 손보면 되는데.. 배고프고 졸리니까 다음시간에…)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; : anchor의 약자. 해적선이 목적지에 도착하면 닻을 내리는 것처럼 얘도 접속하고픈 링크를 찍으면 글로 이동시켜준다!
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/tags/tag_div.asp&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;
고대로 가져온 예시… href는 Hypertext Reference의 줄임말. 예시처럼 링크는 흐르에프는~ 하고 따옴표 안에 링크를 구겨넣어줍시다. 옆에 target엔 &lt;code class=&quot;language-text&quot;&gt;_blank&lt;/code&gt;라고 되어있는데, 저걸 써줘야 새창에 뜹니다.. 마우스 우클릭 새탭으로 열기 안해도 되니까 을매나 좋게요?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; : division의 줄임말. 젤 중요한 애! 한 뭉텅이로 묶어주는 태그라고 보시면 됩니다.. 얘를 잘 쪼개고 묶어주는게 html 틀 짜는데 또 굉장히 중요하져!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;div에 대해 설명하기 위해 제가 만든 허접한 넷플릭스 화면과 창피한 html 구조를 공유합니다.. 절대 이렇게 따라하지 마씨오.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e74b1070-b268-11e9-a100-45a09e59a09a/%EB%A9%94%EC%9D%B8%EC%93%B0.PNG&quot; alt=&quot;메인쓰.PNG&quot;&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e2bd4af0-b268-11e9-a100-45a09e59a09a/%EB%A9%94%EC%9D%B8%EC%95%84%EB%9E%98%EC%93%B0.PNG&quot; alt=&quot;메인아래쓰.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 보면 약간 그럴듯은 해보이긴 하는데… 코드를 보면 또르륽…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;bar.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;main.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;prize.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;best.css&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Dooflix&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=&amp;quot;black&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;#39;entire_wrap&amp;#39;&amp;gt;
      &amp;lt;div id=&amp;#39;black_bar&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;logo&amp;#39; src=&amp;#39;logo.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;bar_left&amp;#39;&amp;gt;
            &amp;lt;span id=&amp;#39;home&amp;#39;&amp;gt;홈&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;tv&amp;#39;&amp;gt;TV프로그램&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;movie&amp;#39;&amp;gt;영화&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;new&amp;#39;&amp;gt;최신등록콘텐츠&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;love&amp;#39;&amp;gt;내가찜한콘텐츠&amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;bar_right&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;glass&amp;#39; src=&amp;#39;glass.png&amp;#39;&amp;gt;
          &amp;lt;span id=&amp;#39;kids&amp;#39;&amp;gt;키즈&amp;lt;/span&amp;gt;
          &amp;lt;img id=&amp;#39;dingdong&amp;#39; src=&amp;#39;dingdong.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;profile&amp;#39; src=&amp;#39;profile.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;semo&amp;#39; src=&amp;#39;semo.png&amp;#39;&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=&amp;#39;main_ad&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;strange&amp;#39; src=&amp;#39;stranger_things.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;n_series&amp;#39; src=&amp;#39;word_n.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;stranger_title&amp;#39; src=&amp;#39;strangers.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;series&amp;#39;&amp;gt;시리즈&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;english_title&amp;#39;&amp;gt;STRANGER THINGS&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;play_box&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;contents_box&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div onmouseover=&amp;#39;play_over()&amp;#39; onmouseout=&amp;#39;play_out()&amp;#39; id=&amp;#39;play&amp;#39;&amp;gt;▶ 재생&amp;lt;/div&amp;gt;
          &amp;lt;div onmouseover=&amp;#39;contents_over()&amp;#39; onmouseout=&amp;#39;contents_out()&amp;#39; id=&amp;#39;contents_loved&amp;#39;&amp;gt;╂ 내가 찜한 콘텐츠&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;story1&amp;#39;&amp;gt;시즌 3, 지금 시청하세요&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;story2&amp;#39;&amp;gt;또다시 기묘한 일들이 일어난다. 정부가 숨기고 있는 비밀,&amp;lt;br&amp;gt;
          정체를 드러내는 그림자, 두려움을 모르는 아이들. 작은&amp;lt;br&amp;gt;
          마을에 어둠이 다가온다. 뒤집힌 세상의 문이 열린다.&amp;lt;/div&amp;gt;
          &amp;lt;img id=&amp;#39;refresh&amp;#39; src=&amp;#39;refreshNew.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;se15&amp;#39; src=&amp;#39;15se.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;old&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;old_bar&amp;#39;&amp;gt;┃&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=oversea&amp;gt;외국 TV 프로그램&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;#39;container&amp;#39;&amp;gt;
        &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster0&amp;#39; src=&amp;#39;home.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster1&amp;#39; src=&amp;#39;grace.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster2&amp;#39; src=&amp;#39;kimi.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster3&amp;#39; src=&amp;#39;redhair.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster4&amp;#39; src=&amp;#39;taco.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster5&amp;#39; src=&amp;#39;body.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster6&amp;#39; src=&amp;#39;gossip.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster7&amp;#39; src=&amp;#39;lululu.png&amp;#39;&amp;gt;
        &amp;lt;/div&amp;gt;        
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=now&amp;gt;지금 뜨는 콘텐츠&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;#39;container&amp;#39;&amp;gt;
        &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster0&amp;#39; src=&amp;#39;hanji.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster1&amp;#39; src=&amp;#39;bingbang.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster2&amp;#39; src=&amp;#39;friends.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster3&amp;#39; src=&amp;#39;himym.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster4&amp;#39; src=&amp;#39;lucifer.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster5&amp;#39; src=&amp;#39;ant.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster6&amp;#39; src=&amp;#39;alive.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster7&amp;#39; src=&amp;#39;meju.png&amp;#39;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저처럼 div id를 이렇게 남발하면 안됩니다…  젤 바깥쪽 묶는 div만 id로 하고 웬만하면 그 아랫것들(?)은 class로 묶어주세요… 현업에서도 id를 잘 안 쓴다고 하네요!!&lt;/p&gt;
&lt;h2 id=&quot;3-id와-class&quot;&gt;&lt;a href=&quot;#3-id%EC%99%80-class&quot; aria-label=&quot;3 id와 class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. id와 class&lt;/h2&gt;
&lt;p&gt;html로 구조를 짜면서 똑같은 태그를 여러번 쓰게 될텐데, id나 class 같은 애들을 통해서 이름표를 붙여줘야 헷갈리지 않겠죠~?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id : 우리가 복제인간이 아닌 이상 신분증은 이 세상에 단 하나밖에 없죠!!! 그런것처럼 id도 무조건 하나만… 만약에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;#39;hungry&amp;#39;&amp;gt;&lt;/code&gt; 이런식으로 div에 hungry라는 id를 줬으면 그 다음에 div에 또 hungry라는 이름을 붙여줄 수 없음! 그리고 주의사항… id를 너무 남발하면 안 좋다고 하니 젤 바깥쪽 뭉텅이의 div들에게만 아이디를 줍시다… 나머지는 어쩌냐고? 밑에를 보세요!&lt;/li&gt;
&lt;li&gt;class : id와는 달리 이 구역의 융통성 甲 of 甲. 어떤 태그든 같은 class 이름 여러번 쓰기 가능쓰~ 이게 바로 클래쓰의 차이인가!! 예를들어…
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&amp;quot;chicken&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p class=&amp;quot;chicken&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;
이런식으로 치킨 두번이상 쓰기 가능쓰~ 치느님은 위대해…&lt;/li&gt;
&lt;li&gt;여러 속성 쓰기 : 걍 예시를 먼저 봅시다
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;profile&amp;quot; class=&amp;quot;content-wrap&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&amp;quot;./hi.png&amp;quot; alt=&amp;quot;내사진&amp;quot; &amp;gt;&lt;/code&gt;
힘들어서 그대로 가져온 예시… 이런것처럼 id와 class를 동시에 쓰기도 가능쓰…
속성 여러개 쓰려면 profile과 class 사이가 멀어진것처럼 띄어쓰기 하나 해주긔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;블로그 주인장은 배고프고, 졸립고, 내일도 코딩 달려야해서 이만 잡니다~~ 내일도 열심히 정리해야지!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7a581430-b219-11e9-a4ce-730fc6b3757a/KakaoTalk20190730005626883.jpg&quot; alt=&quot;KakaoTalk_20190730_005626883.jpg&quot;&gt;(선릉 위워크 2호점에는 이렇게 예쁜 네온사인들이 많아서 힙하고 또 힙하다 ㅎ)&lt;/p&gt;</content:encoded></item></channel></rss>