<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[둘둘`s dooreplay!]]></title><description><![CDATA[Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu.]]></description><link>https://gollumnima.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 01 Sep 2019 00:53:47 GMT</lastBuildDate><item><title><![CDATA[wecode 5주차_3일 TIL_Postman으로 데이터 주고받기]]></title><description><![CDATA[위코드 27일차. 페이지를 꾸밀줄만 알면 진정한 프론트가 아니다! 백에서 받아온 데이터를 활용할 줄 알아야 진정한 프론트인인것. 그런 의미에서 오늘은 postman 간단 활용법을 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode5_3TIL_postman</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_3TIL_postman</guid><pubDate>Wed, 28 Aug 2019 09:18:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/cddb24f0-cc4d-11e9-910d-0db327a0d842/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;색감이 예뻐서 갖다 붙인 post box image ㅋㅋㅋ
근데 우리가 쓸 프로그램인 postman은 이렇게 예쁘게 생기진 않았다 투박쓰~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4e4ec010-cc4e-11e9-9732-c9f4af8a8c62/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;postman 검색하고 다운로드 고고!
분명 지난번에 깔았는데 우분투의 문제인지 뭔지 파일이 보이지 않아서 다시 깔았다 ㅡㅡ 우분투 너이자식…
여튼 postman은 백에서 개발한 api를 테스트하고 프론트 영역으로 넘길 때 활용도가 높은 프로그램이다.&lt;/p&gt;
&lt;h2 id=&quot;로그인&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8%EC%9D%B8&quot; aria-label=&quot;로그인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그인&lt;/h2&gt;
&lt;p&gt;젤 앞의 탭은 ‘POST’로 설정해주고 백에서 만든 url을 입력
저 url의 end point를 항상 정확하게 입력해야 한다! 기본중의 기본!
여튼 바디에 객체 형식으로 아이디와 비밀번호를 써준다. key값은 백에서 설정한 그 값을 쓰면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b3578650-cae5-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;send를 누르면 SUCCESS라는 메시지가 뜨게 된다!
만약에 같은 아이디로 한번 더 시도하게 되면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ce6f1a20-cae5-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오 신기방기 이미 있는 아이디라고 뜬다.
만약에 이 message가 “same ID exists”라면 “존재하는 아이디 입니다. 다른 아이디를 입력해주세요.” 라는 문구가 뜨는 이런 식의 함수를 프론트에서 만들수 있는 거다 ㅋㅋㅋㅋ 넘나 신기!!!&lt;/p&gt;
&lt;p&gt;그 밖에도…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비번 틀릴때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3f7b12f0-cae6-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아이디 틀릴때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4ed12910-cae6-11e9-a91b-33bacba38e75/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;로그인-성공시-토큰-발행&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%84%B1%EA%B3%B5%EC%8B%9C-%ED%86%A0%ED%81%B0-%EB%B0%9C%ED%96%89&quot; aria-label=&quot;로그인 성공시 토큰 발행 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그인 성공시 토큰 발행&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/31199600-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위의 과정을 거쳐 로그인을 성공하게 되면 토큰이 발급되는데…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9d5011f0-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;다시 로그인 시 토큰의 뒷자리가 바뀜! 토큰을 잘 보면 앞자리는 동일한데 뒤의 어느 구간부터 값이 바뀐다. 뒷부분이 중요하다는 말씀..!&lt;/p&gt;
&lt;p&gt;여튼 우리는 이렇게 발급받은 액세스 토큰을 가지고 토큰 해석해주는 사이트에 들어갈 것이다
주소창에 jwt.io 를 치시오. 존맛탱 아님… JWT입니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fb2b2b70-cae6-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;좌측에 입력한 토큰 값을 우측에서 해석해주는데 넘나 신기하다 ㅋㅋㅋ
여튼 우리가 만든 토큰인지 남이 만든 토큰인지 확인과정을 거치고 이 정보를 또 저장해야하는데…&lt;/p&gt;
&lt;p&gt;만약에 리액트앱에서 토큰을 가지고 있으면, 새로고침시 토큰 정보들도 모두모두 안녕~~~
일반적으론 브라우저에 저장하는데 세 가지 방법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로컬스토리지에 저장&lt;/li&gt;
&lt;li&gt;세션에 저장(창 끄면 사라짐)&lt;/li&gt;
&lt;li&gt;쿠키(해당 날짜가 지나면 사라짐)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쿠키가 뭣인지도 모르고 주기적으로 쿠키 지우기를 해줬는데..날짜에 따라서 정보를 저장해주는 녀석이였군!!! 세션땐 이런 쏠쏠한 정보들을 알게 될 때마다 넘 뿌듯하다~&lt;/p&gt;
&lt;p&gt;로컬스토리지는 다음번에 다시 정리 해보도록 하고..!
이번엔 코멘트도 함 날려보자!&lt;/p&gt;
&lt;h2 id=&quot;코멘트-보내기&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%A9%98%ED%8A%B8-%EB%B3%B4%EB%82%B4%EA%B8%B0&quot; aria-label=&quot;코멘트 보내기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코멘트 보내기&lt;/h2&gt;
&lt;p&gt;로그인이 성공했다는 전제 하에 진행하는 거라서
Headers에 들어가서 Key에는 Authorization이라고 쓰고, value에는 로그인시 발급받은 액세스 토큰을 입력해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/14724f90-cae8-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게!
그 담에는 body에 또 객체 형태로 message 남겨본다! 그럼 내가 보낸 이 메시지들이 백으로 넘어가는거다. 넘나 씐기씐기!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/21be3dd0-cae8-11e9-817f-3d68a942f65f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;signup-하기&quot;&gt;&lt;a href=&quot;#signup-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;signup 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;signup 하기&lt;/h2&gt;
&lt;p&gt;일단 signup button에 뭔가를 해줘야겠지요?
&lt;code class=&quot;language-text&quot;&gt;value = &amp;quot;Register&amp;quot; onClick={}&lt;/code&gt;
이런식으로 설정을 해준 다음…
render 전에 signup 함수를 작성해줍니다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;signup = () =&amp;gt; {
 fetch()
 };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 fetch로 받아오긴 하는데 최신 문법인 비동기로 받아오면 좀 더 편리쓰~
(async, await : 데이터를 받아오는데 언제 올지 모르는 것에 적용 가능한 함수)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;signup = async() =&amp;gt; {
const response = await fetch(&amp;#39;http://10.58.4.72:8000/signup&amp;#39;, {
 	method:&amp;#39;POST&amp;#39;,
    body:JSON.stringify({
    user_id: &amp;#39;test123&amp;#39;,
    password: &amp;#39;good&amp;#39;
    })
  })
  const result = await response.json()

  console.log(result)


  if (result.message === &amp;#39;same ID exists&amp;#39;) {
     alert(&amp;#39;이미 존재하는 아이디입니다. 다시 가입해주세요.&amp;#39;)
  } else if (result.message === &amp;quot;SUCCESS&amp;quot;) {
     alert(&amp;#39;환영합니다. 가입되었습니다!&amp;#39;)
     this.props.history.push(&amp;#39;/login&amp;#39;)
  	}
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세션 들으면서 썼던 코드라 indent가 맘에 안 들긴 하지만 여튼… 이렇게!
위의 코드 마지막줄에 props.history.push가 있는데 props를 선언 안해줘도 되는지가 궁금했는데, class에 기본 변수로 들어오기 때문에 props를 따로 선언 안해줘도 된다고 한다! 넘나 씐기 씐기&lt;/p&gt;
&lt;p&gt;Router에서 인자를 어떻게 넘기는지에 대해선 아래의 링크에 잘 나와있다
나의 사랑 우리모두의 사랑 stack overflow ~♬ 내 스택에서만 일어나지 말아라.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여튼 전체 코드를 보자면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import { withRouter } from &amp;#39;react-router-dom&amp;#39;;
import &amp;#39;./Signup.scss&amp;#39;;
import Logo from &amp;#39;./logo.png&amp;#39;;
import {Link} from &amp;#39;react-router-dom&amp;#39;;
​
class Signup extends Component {
​
  singup = async () =&amp;gt; {
    const response = await fetch(&amp;#39;http://10.58.4.74:8000/signup&amp;#39;, {
      method: &amp;#39;POST&amp;#39;,
      body: JSON.stringify({
        user_id: &amp;#39;12341234sdfsdfsfsdfsd&amp;#39;,
        password: &amp;#39;good&amp;#39;
      })
    });
​
    const result = await response.json();
​
    console.log(result)
    console.log(&amp;#39;sdfsdf&amp;#39;)
​
    if (result.message === &amp;#39;same ID exists&amp;#39;) {
      alert(&amp;#39;이미 있는 아이디 입니다!! 다시 가입 해주세요.&amp;#39;)
    } else if (result.message === &amp;#39;SUCCESS&amp;#39;) {
      alert(&amp;#39;환영합니다!! 가입 되었습니다!!!&amp;#39;)
      this.props.history.push(&amp;#39;/login&amp;#39;);
    }
​
​
  };
​
  render() {
    return (
      &amp;lt;div className=&amp;quot;signup-page&amp;quot;&amp;gt;
        &amp;lt;article className=&amp;quot;signup-content&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;input-wrap&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;signup-header&amp;quot;&amp;gt;
              &amp;lt;Link to=&amp;quot;/&amp;quot;&amp;gt;&amp;lt;img className=&amp;quot;signup-logo&amp;quot; src={Logo} alt=&amp;quot;logo_img&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/Link&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;signup-info&amp;quot;&amp;gt;
              &amp;lt;div className=&amp;quot;signup-title&amp;quot;&amp;gt;Register.&amp;lt;/div&amp;gt;
              &amp;lt;div className=&amp;quot;signup-subtitle&amp;quot;&amp;gt;Enter your email to create an account.&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;signup-form&amp;quot;&amp;gt;
              &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Please enter your Email&amp;quot; maxLength=&amp;quot;30&amp;quot;/&amp;gt;
              &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your Password&amp;quot; maxLength=&amp;quot;8&amp;quot;/&amp;gt;
              &amp;lt;input type=&amp;quot;password&amp;quot; placeholder=&amp;quot;Your Password&amp;quot; maxLength=&amp;quot;8&amp;quot;/&amp;gt;
              &amp;lt;input
                type=&amp;quot;button&amp;quot;
                className=&amp;quot;signup-btn&amp;quot;
                value=&amp;quot;Register&amp;quot;
                onClick={this.singup}
              /&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/article&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
​
export default withRouter(Signup);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 signup 함수 간단하게 완성쓰!
코드가 길어서 복잡해 보일수도 있지만 원리만 생각하면 간단하다!&lt;/p&gt;
&lt;p&gt;다음 프로젝트 때는 내가 signup page를 맡게 될텐데 그 때가서 헷갈리지 말고 잘 했음 좋겠다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_2일 TIL_프로젝트 시작]]></title><description><![CDATA[위코드 26일차. 2주 프로젝트 첫째날은 초기 세팅과 팀 컨셉을 잡느라 시간을 다 써버려서 본격적인 작업은 이틀차인 화요일부터 시작하게 되었다.]]></description><link>https://gollumnima.github.io//posts/wecode5_2TIL_project_daily1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_2TIL_project_daily1</guid><pubDate>Tue, 27 Aug 2019 08:55:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/815d9c40-cc4b-11e9-bb8d-972accb59aa8/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;롤링이미지&quot;&gt;&lt;a href=&quot;#%EB%A1%A4%EB%A7%81%EC%9D%B4%EB%AF%B8%EC%A7%80&quot; aria-label=&quot;롤링이미지 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;롤링이미지&lt;/h2&gt;
&lt;p&gt;돌아가는 화면을 Carousel Slider라고 하더라…
Carousel이라는 단어를 찾아보니 회전목마, 관람차, 회전그네 같은 돌아가는 놀이기구를 가리키는 모든 말이였다 ㅋㅋㅋ 여튼…&lt;/p&gt;
&lt;p&gt;찾아보면 자료가 참 많은데 나는 nuka씨가 만든 라이브러리를 활용했다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add nuka-carousel&lt;/code&gt; 추가하면
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Carousel&amp;gt;&lt;/code&gt; 컴포넌트를 사용할 수 있다.
(내가 라이브러리 받으면 끝인줄 알았는데 팀원 모두가 설치해야 하므로 꼭꼭 공유해야 한다!)&lt;/p&gt;
&lt;p&gt;라이브러리 처음 써보는거라 두근두근 했는데 그냥 갖다 붙이니까 되네???? 넘나 신기한것
드래그 하거나 next 혹은 prev 버튼을 클릭하면 사진이 바뀐다! 오예&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c830ae0-c883-11e9-8801-2f2d07541998/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;일단 잘 나오긴 하는데… 영역을 너무 차지한다는게 문제다
그래서 Home의 div들에 margin-auto를 줬더니 폭이 조절되네???&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1db08800-cc4c-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사이즈 줄어드니까 훨씬 깔끔해졌다 여튼&lt;/p&gt;
&lt;h2 id=&quot;div를-잘-나누시오&quot;&gt;&lt;a href=&quot;#div%EB%A5%BC-%EC%9E%98-%EB%82%98%EB%88%84%EC%8B%9C%EC%98%A4&quot; aria-label=&quot;div를 잘 나누시오 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;div를 잘 나누시오&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &amp;lt;&amp;gt;
      &amp;lt;div className=&amp;quot;home_recipe_wrapper&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;home_recipe_container&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_img_container&amp;quot;&amp;gt;
            &amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;grill&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_words_container&amp;quot;&amp;gt;
            &amp;lt;h4 className=&amp;quot;home_recipe_category&amp;quot;&amp;gt;한식&amp;lt;/h4&amp;gt;
            &amp;lt;h2 className=&amp;quot;home_recipe_name&amp;quot;&amp;gt;떡볶이&amp;lt;/h2&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;겉으로 보기에 문제 없어보이는 코드였다..
나름 div는 누구보다 빠르게 남들과는 다르게 색다르게 비트위에 리듬을 타면서 나눌수 있다고 자부했는데…
화면에 뜨는걸 보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/81a32b10-c8b9-11e9-8dcc-1dd4966cd2dc/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;띠 to the 용 ~
div 잘 묶은줄 알았는데 아니였다. 다시 도전.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   &amp;lt;&amp;gt;
      &amp;lt;div className=&amp;quot;home_recipe_wrapper&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;home_recipe_container&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;home_recipe_img_container&amp;quot;&amp;gt;
            &amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;grill&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
            &amp;lt;div className=&amp;quot;home_recipe_words_container&amp;quot;&amp;gt;
              &amp;lt;h4 className=&amp;quot;home_recipe_category&amp;quot;&amp;gt;한식&amp;lt;/h4&amp;gt;
              &amp;lt;h2 className=&amp;quot;home_recipe_name&amp;quot;&amp;gt;떡볶이&amp;lt;/h2&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0f5df980-c8ba-11e9-8dcc-1dd4966cd2dc/image.png&quot; alt=&quot;image.png&quot;&gt;
다시 이렇게 성공쓰&lt;/p&gt;
&lt;p&gt;근데 문제가 생겼다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6c320450-ca5c-11e9-8443-19a03cc3be4f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;스크린을 줄였더니 이미지가 겹쳐..
천재 오브 천재 예리님의 조언을 들어보니 부모에서 Grid로 값을 주었지만 이미지에 절대값을 줘서 안 먹히는 것…
이럴 땐 이미지 크기를 100%로 하면 먹힌다!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9a3afd70-ca5c-11e9-a81a-b3d65dab3431/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;핵핵핵 핵 신기방기!!!!!!! 예리님을 찬양하라&lt;del&gt;&lt;/del&gt;~~
지금은 디자인을 약간 바꿔서 촌스러움은 벗어났는데 문제가 또 생겼다&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7ee37f10-cc4c-11e9-a60f-17e4210d0ccf/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;분명히 Grid로 똑같이 값을 매겨줬는데 왜 아랫줄 첫째, 둘째 애들은 줄이 안 맞는가..?
이건 삽질 좀 하다가 프론트신 예리님께 문의드릴 예정…&lt;/p&gt;
&lt;h2 id=&quot;백과-프론트-콜라보&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EA%B3%BC-%ED%94%84%EB%A1%A0%ED%8A%B8-%EC%BD%9C%EB%9D%BC%EB%B3%B4&quot; aria-label=&quot;백과 프론트 콜라보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백과 프론트 콜라보&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src={require(&amp;quot;../../img/toppokki.jpg&amp;quot;)} alt=&amp;quot;toppokki&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;원래의 이미지 경로는 하드코딩 했을 때 이러했는데, 백의 서버 주소를 써보았다
&lt;code class=&quot;language-text&quot;&gt;http://10.58.6.255:8000/uploads/photo.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;여기서 작은 팁! 외부 링크를 쓰려면 require을 지워야 한다.
여튼 Back쪽의 서버가 켜져 있다면
그리하여 성공한 화면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b596e8c0-c955-11e9-b6af-0332aa63bb4d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위코드의 대빵 은우님이시다. 그림 바이 름바님
그럼 바이 바이~ 다음 포스팅에서 만나용&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 5주차_1일 TIL_프로젝트 시작 전 초기세팅 할 것들]]></title><description><![CDATA[위코드 25일차. 5주차에 들어서면서 2주 프로젝트가 시작 되었다. 프로젝트에 앞서 초기에 세팅해야 할 것들에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode5_1TIL_project_initialSettings</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode5_1TIL_project_initialSettings</guid><pubDate>Mon, 26 Aug 2019 08:21:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/697fc700-c927-11e9-841b-23b4349b6731/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번주 월요일부터 본격 2주 프로젝트가 시작됐는데.. &lt;br /&gt;
초기 세팅 해야할 것들에 대해 적어보았다!&lt;/p&gt;
&lt;p&gt;Git에 repository 뚫는 과정도 적어보려고 했는데, reset.css 코드 때문에 길어져서 다음 포스팅으로 넘어가야겠다 룰루~ ♬ 그럼 스타트!!&lt;/p&gt;
&lt;h2 id=&quot;router-깔기&quot;&gt;&lt;a href=&quot;#router-%EA%B9%94%EA%B8%B0&quot; aria-label=&quot;router 깔기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Router 깔기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0ab676f0-c487-11e9-aac9-df0beb3e284d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Route는 말 그대로 경로를 말한다! 이걸 통해 원하는 페이지로 자유롭게 이동 가능쓰~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add router-dom&lt;/code&gt; 명령어 입력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt;와 같은 디렉토리에 &lt;code class=&quot;language-text&quot;&gt;Routes.js&lt;/code&gt;파일 만들기&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Routes.js&lt;/code&gt;파일 세팅하기&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt;파일 내에 render함수 대상을 &lt;Routes /&gt;로 바꿔주기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이거는 Routes.js
import React from &amp;quot;react&amp;quot;;
import { BrowserRouter as Router, Route, Switch } from &amp;quot;react-router-dom&amp;quot;;
import Home from &amp;quot;./Pages/Home/Home&amp;quot;;

class Routes extends React.Component {
  render() {
    return (
      &amp;lt;Router&amp;gt;
        &amp;lt;Switch&amp;gt;
          &amp;lt;Route exact path=&amp;quot;/home&amp;quot; component={Home} /&amp;gt;
        &amp;lt;/Switch&amp;gt;
      &amp;lt;/Router&amp;gt;
    );
  }
}

export default Routes;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일단 예시로 &lt;code class=&quot;language-text&quot;&gt;Home Component&lt;/code&gt;만 넣어봤습니다.
우리는 라우터를 통해 자유롭게 이동 가능쓰~~&lt;/p&gt;
&lt;p&gt;url 뒤에 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; 붙여서 이동할 수 있는 기능도 있지만! 페이지에서 페이지끼리의 이동도 가능쓰&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;import { Link } from &amp;quot;react-router-dom&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;먼저 링크라는 Component를 라우터 돔을 통해 받아오고..&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Link to=Home&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;아이콘 태그 위에 Link to 태그와 이동할 컴포넌트를 입혀주면 완성~&lt;/p&gt;
&lt;p&gt;인줄 알았죠?????
이 모든건 index.js에 Routes 태그를 추가해야 가능한 일…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 이건 index.js 파일
import React from &amp;quot;react&amp;quot;;
import ReactDOM from &amp;quot;react-dom&amp;quot;;
import &amp;quot;../src/styles/index.scss&amp;quot;;
import &amp;quot;../src/styles/reset.scss&amp;quot;;
import Routes from &amp;quot;./Routes&amp;quot;;

ReactDOM.render(&amp;lt;Routes /&amp;gt;, document.getElementById(&amp;quot;root&amp;quot;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;css-tool-고르기&quot;&gt;&lt;a href=&quot;#css-tool-%EA%B3%A0%EB%A5%B4%EA%B8%B0&quot; aria-label=&quot;css tool 고르기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS tool 고르기~&lt;/h1&gt;
&lt;h3 id=&quot;styled-component&quot;&gt;&lt;a href=&quot;#styled-component&quot; aria-label=&quot;styled component permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Styled Component&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add styled-components&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;sass-설치하기&quot;&gt;&lt;a href=&quot;#sass-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;sass 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SASS 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add node-sass&lt;/code&gt; 명령어로 설치 후, css파일형식을 .scss로 바꾸기&lt;/p&gt;
&lt;p&gt;SASS는 CSS module과 함께 쓸수도 있다는데.. 아직 css module은 써 본적이 없어서 다음 기회에 다뤄볼게유~&lt;/p&gt;
&lt;h2 id=&quot;eslint와-prettier-연동하기&quot;&gt;&lt;a href=&quot;#eslint%EC%99%80-prettier-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0&quot; aria-label=&quot;eslint와 prettier 연동하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint와 Prettier 연동하기&lt;/h2&gt;
&lt;p&gt;이건 지난번에 한번 포스팅해서 링크만 남길게용
&lt;a href=&quot;https://gollumnima.github.io/posts/wecode3_5TIL_eslint&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://gollumnima.github.io/posts/wecode3_5TIL_eslint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;styles-디렉토리-만들기&quot;&gt;&lt;a href=&quot;#styles-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;styles 디렉토리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;styles 디렉토리 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;styles 디렉토리 안에 index.css 옮기고, reset.css와 media.css 추가해주세용
-media.css는 화면을 줄였을 때의 breakpoint를 두 개정도 설정해서 넣어놓고 팀원들과 공유하기!&lt;/li&gt;
&lt;li&gt;reset css 파일을 추가해주면 기본 css 설정값들을 다 취소시켜서 좀 더 깔끔쓰~ 아래의 코드를 긁어서 복붙하세유~~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;html,
body,
div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
abbr,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
samp,
small,
strong,
sub,
sup,
var,
b,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
  font-weight: normal;
  letter-spacing: 1px;
}
​ * {
  box-sizing: border-box;
  text-decoration: none;
  list-style: none;
  color: inherit;
}
​ *:focus {
  outline: none;
  border: none;
}
​ body {
  line-height: 1;
}
​ article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
​ nav ul {
  list-style: none;
}
​ blockquote,
q {
  quotes: none;
}
​ blockquote:before,
blockquote:after,
q:before,
q:after {
  content: &amp;quot;&amp;quot;;
  content: none;
}
​ a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}
​
/* change colours to suit your needs */
ins {
  background-color: #ff9;
  color: #000;
  text-decoration: none;
}
​
/* change colours to suit your needs */
mark {
  background-color: #ff9;
  color: #000;
  font-style: italic;
  font-weight: bold;
}
​ del {
  text-decoration: line-through;
}
​ abbr[title],
dfn[title] {
  border-bottom: 1px dotted;
  cursor: help;
}
​ table {
  border-collapse: collapse;
  border-spacing: 0;
}
​
/* change border colour to suit your needs */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #cccccc;
  margin: 1em 0;
  padding: 0;
}
​ input,
select {
  vertical-align: middle;
}
​ textarea {
  resize: none;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_5일 TIL_Semantic-ui로 간단하게 CSS 효과주자]]></title><description><![CDATA[위코드 24일차. Semantic-ui 라이브러리를 활용해서 간단하게 CSS 효과 주는 법을 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode4_5TIL_semantic_ui</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_5TIL_semantic_ui</guid><pubDate>Fri, 23 Aug 2019 15:37:04 GMT</pubDate><content:encoded>&lt;p&gt;semantic-ui를 통해 icon을 추가하는 방법을 알아볼게여&lt;/p&gt;
&lt;h2 id=&quot;semantic&quot;&gt;&lt;a href=&quot;#semantic&quot; aria-label=&quot;semantic permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Semantic&lt;/h2&gt;
&lt;p&gt;영어로는 의미론적인 이라는 뜻을 가지고 있는데요!
오늘 제가 소개해 드릴 Semantic-ui라는 사이트에선 fontawesome과 같이 다양한 icon과 버튼 기타 등등을 만나볼수 있습니다.&lt;/p&gt;
&lt;p&gt;우분투 유저 분들은 저를 follow me~
아니라면 &lt;a href=&quot;https://semantic-ui.com/introduction/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://semantic-ui.com/introduction/getting-started.html&lt;/a&gt; 여기 접속해서 하라는 대로 하면 됩니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;semantic ui 설치하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install semantic-ui --save&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;중간중간 설정 잘해주기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Espress 웅앵웅 엔터&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Is this your project folder ? 확인해서 맞다면 Yes&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Where should we put Semantic Ui inside your project?? semantic/&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;header, icon, image, reveal 스페이스로 체크&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Shold we set permissions on outputted files? No&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Do you use a RTL language? No&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Where should we ouput Semantic UI? out/&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;cd semantic&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;gulp build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 과정까지 마쳤다면 프로젝트 폴더 내에 semantic폴더가 생겼을 거에요.&lt;/p&gt;
&lt;p&gt;그렇다면 인제 &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; 파일로 이동 ㄱㄱ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;semantic/dist/semantic.min.css&amp;quot;&amp;gt;
&amp;lt;script
  src=&amp;quot;https://code.jquery.com/jquery-3.1.1.min.js&amp;quot;
  integrity=&amp;quot;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&amp;quot;
  crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;semantic/dist/semantic.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 링크태그를 추가해주세요&lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용&lt;/h2&gt;
&lt;p&gt;semantic ui 홈페이지에 들어가서 맘에 드는 아이콘의 이름을 className에다가 넣어주세요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Sidemenu extends React.Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;i className=&amp;quot;home mini icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home tiny icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home small icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home large icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home big icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;home huge icon&amp;quot; /&amp;gt;
        &amp;lt;i className=&amp;quot;yellow home massive icon&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 웹 페이지에 띄워보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/963b2140-c323-11e9-84a7-e5486936a3ff/image.png&quot; alt=&quot;image.png&quot;&gt;
className에 색상과 사이즈 말고도 다양한 효과들을 줄 수 있는데요
자세한 사항은 홈페이지에서 확인해보세요~~&lt;/p&gt;
&lt;p&gt;제가 오늘 포스팅에서 다룬 내용은 아이콘밖에 없지만!
절대로, icon만 기능적으로 쓸 수 있는건 아닙니다요&lt;/p&gt;
&lt;p&gt;인터넷 강의 보면서 만든걸 보여드릴게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&amp;#39;;

const ApprovalCard = (props) =&amp;gt; {
    console.log(props.children);
    return (
        &amp;lt;div className=&amp;quot;ui card&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;{props.children}&amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;extra content&amp;quot;&amp;gt;
                &amp;lt;div className=&amp;quot;ui two buttons&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;ui basic green button&amp;quot;&amp;gt;Approve&amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;ui basic red button&amp;quot;&amp;gt;Reject&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};

export default ApprovalCard;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저기에 className으로 들어간 값들이 다 semantic-ui에서 가져온 것들이에요
결과물을 한번 보실까요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d2c56850-c729-11e9-aaf9-b1760c7fd387/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;div를 css에서 바로 효과를 주는 방법도 있지만
이렇게 라이브러리의 className만을 가져와서 div공간을 꾸미는 방법도 있다는거~
CSS파일 없이 저 코드가 그냥 끝이에요 진짜 신기하죠 ㅋㅋㅋㅋ
이래서 라이브러리를 잘 쓸줄 알아야 하나봐요 큽 ㅠㅠ&lt;/p&gt;
&lt;p&gt;일단 저는 Grid를 마스터해야 프로젝트를 잘 할수 있기 때문에
아이콘 외의 Semantic-ui 활용법은 다음 기회에 좀 더 상세하게 다루도록 하겠습니다!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://react.semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://react.semantic-ui.com/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_4일 TIL_CSS Grid로 레이아웃을 짜보자 2탄]]></title><description><![CDATA[위코드 23일차. 프로젝트에 앞서 css 속성 중 grid에 대해서 공부해보았다, 그 2탄!]]></description><link>https://gollumnima.github.io//posts/wecode4_4TIL_grid_2</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_4TIL_grid_2</guid><pubDate>Thu, 22 Aug 2019 19:45:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/096f8190-c704-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난번 포스팅에 이어 썸네일은 Grid와 직접적인 관련이 있는 Wafers로..ㅎ
웨하스는 일본식 발음이라고 하니 이제부턴 Wafer라는 말을 씁시다!
여튼 시작!&lt;/p&gt;
&lt;h2 id=&quot;fr&quot;&gt;&lt;a href=&quot;#fr&quot; aria-label=&quot;fr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fr&lt;/h2&gt;
&lt;p&gt;부분을 뜻하는 Fraction의 줄임말로, 정확한 픽셀값 대신 숫자+fr을 써주면 알아서 비율에 맞게 화면을 차지하게 된다! 올ㅋ&lt;/p&gt;
&lt;p&gt;html에서 상자를 네 개 만들고.. 아래와 같은 css 속성을 줘볼게요
(1탄과 동일하게 scss파일입니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$red: #ff5e57;
$yellow: #ffdd59;
$blue: #3c40c6;
$green: #05c46b;
.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-rows: 200px;
  grid-template-columns: 1fr 2fr 3fr 4fr;
  div:nth-child(even) {
    background: $yellow;
  }
  div:nth-child(odd) {
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: 1fr 2fr 3fr 4fr;&lt;/code&gt; 지금 grid-template-columns에 왼쪽과 같은 속성값을 줬는데요 어떤 결과가 나올까요! 두둥~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5c91a1d0-c706-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;제일 첫번째 네모는 공간을 1fr만큼 차지해서 제일 작고, 제일 마지막 네모는 공간을 4fr만큼 차지하기 때문에 첫번째 네모의 4배가 됩니다.&lt;/p&gt;
&lt;p&gt;화면을 작게 줄여볼까요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8b8a7930-c706-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그래도 여전히 width의 길이는 1,2,3,4배가 차이 나네요!
이러면 우리가 width값을 따로 주지 않아도 화면에 꽉 차고, 비율대로 나오게 됩니다!&lt;/p&gt;
&lt;h2 id=&quot;repeat&quot;&gt;&lt;a href=&quot;#repeat&quot; aria-label=&quot;repeat permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;repeat()&lt;/h2&gt;
&lt;p&gt;자바스크립트 문법에서도 특정 string을 반복하게 해주는 repeat함수가 있었는데, CSS-grid의 성질 중에도 이런게 있습니다!
괄호 안의 첫번째 인자엔 만들 개수, 두번째 인자엔 크기를 넣어주면 되는데요!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: repeat(1, 1fr);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 코드대로라면 columns이 1fr크기로 1개 생기겠죠? 이렇게..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/064d3620-c708-11e9-a708-75a73d9428ef/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;repeat으로 기둥을 만들어 준 후 옆에다 원하는 만큼 더 추가할 수도 있어요!
예를 들어… &lt;code class=&quot;language-text&quot;&gt;grid-template-columns: repeat(2, 1fr) 4fr;&lt;/code&gt; 이런 코드는&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7b54c690-c708-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게!&lt;/p&gt;
&lt;h2 id=&quot;auto-fill과-auto-fit&quot;&gt;&lt;a href=&quot;#auto-fill%EA%B3%BC-auto-fit&quot; aria-label=&quot;auto fill과 auto fit permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;auto-fill과 auto-fit&lt;/h2&gt;
&lt;p&gt;위의 repeat함수에 auto-fill이라는 속성을 먼저 넣어볼게요. 이름만 들어도 뭔가 채워줄것 같지 않나요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8fa81af0-c70a-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7e89c7f0-c70a-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;실제로 보이는건 위의 그림이지만, 개발자도구 커서를 이용해서 확인해보면, 숨겨진 column들을 화면에 꽉 차게 만든것을 확인할 수 있습니다!&lt;/p&gt;
&lt;p&gt;auto-fit도 함 봅시다!
auto-fi이 최대한으로 채우는거라면, auto-fit은 화면에 맞게 최대한 으로 공간을 차지하는 속성을 가지고 있어요.&lt;/p&gt;
&lt;p&gt;예시를 보기 전에 minmax에 대해 알아봅시다&lt;/p&gt;
&lt;h2 id=&quot;minmax&quot;&gt;&lt;a href=&quot;#minmax&quot; aria-label=&quot;minmax permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;minmax()&lt;/h2&gt;
&lt;p&gt;괄호 안 첫번째 인자엔 최소값, 두번째 인자엔 최대값이 들어가는 함수에요.
최소값을 지정해줄 수 있으니까 반응형 페이지를 만들 때 좀 더 간단하게 만들 수 있겠죠?&lt;/p&gt;
&lt;p&gt;그럼 다시 auto-fit의 예시를 봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  grid-template-columns: repeat(auto-fit, minmax(200px, 4fr));
  grid-template-rows: repeat(auo-fit, minmax(200px, 4fr));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최소값을 200px, 최대값을 4fr로 주면 아래와 같이&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/83480160-c70c-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이러한 화면이 나오게 되는데요!
이 화면을 모바일 사이즈로 줄여보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8ffa47b0-c70c-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;넘나 제가 원했던 화면이 나옵니다…
이번 팀프로젝트때 메인 화면중 일부를 이런식으로 만들고 싶었는데!!
이것만 있으면 flex에서 media query min값 따로 설정 안해줘도 되고 간편할듯!!!&lt;/p&gt;
&lt;h2 id=&quot;justify-content&quot;&gt;&lt;a href=&quot;#justify-content&quot; aria-label=&quot;justify content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;justify-content&lt;/h2&gt;
&lt;p&gt;이거 어디서 많이 본 단어 아닌가요? 네 맞습니다~ flex box에 있던 속성인데 grid에서도 적용할 수 있어요. 가로 기준으로 정렬하는 방법입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-rows: 200px;
  grid-template-columns: repeat(4, 100px);
  justify-content: center;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;부모 div에 위와 같은 값을 주면 결과는&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9e6acde0-c70e-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 가운데로 오게 됩니다!
그 밖에도 start, end 등이 있으니 MDN 같은 공식 문서 참고해보세용&lt;/p&gt;
&lt;h2 id=&quot;align-content&quot;&gt;&lt;a href=&quot;#align-content&quot; aria-label=&quot;align content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;align-content&lt;/h2&gt;
&lt;p&gt;justify-content와는 반대로 세로 기준으로 정렬하는 방법이에요.
그렇기 때문에 부모div에 높이값이 꼭 필요합니다!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;align-content: center;
height: 100vh;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 해보면 결과는!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/34daab10-c714-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오.. 뭔가 핸드폰 배경화면 느낌쓰~ 맘에 드는 분들은 저장하셔도 됩니다 ㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;place-content&quot;&gt;&lt;a href=&quot;#place-content&quot; aria-label=&quot;place content permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;place-content&lt;/h2&gt;
&lt;p&gt;위의 justify와 align을 합친 거라고 보면 될것 같은데요!
첫번째론 align의 속성이, 두번째는 justify의 속성이 들어갑니다.
페이지의 한 가운데인데 제일 밑에 상자를 위치시키고 싶다면..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  place-content: end center;
  height: 100vh;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a43d1d20-c715-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;식을 두 줄 쓸 필요도 없이 place-content 한 방이면 해결 완료~
여기서 더 나아가서… 자식 div에 들어가는 값도 정렬을 해보려고 하는데요!
위에서 했던 과정과 동일하게…&lt;/p&gt;
&lt;h2 id=&quot;justify-items&quot;&gt;&lt;a href=&quot;#justify-items&quot; aria-label=&quot;justify items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;justify-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;justify-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b36c06c0-c716-11e9-b577-b17551845dee/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;align-items&quot;&gt;&lt;a href=&quot;#align-items&quot; aria-label=&quot;align items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;align-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/9e069430-c716-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;각각 정렬하면 이렇게 되는데… 한 방에 하는 방법이 또 있겠죠?
네 맞습니다 ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;place-items&quot;&gt;&lt;a href=&quot;#place-items&quot; aria-label=&quot;place items permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;place-items&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;place-items: center;&lt;/code&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/151eb520-c717-11e9-8663-3d2ab0de90f3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;자식div에게 값을 따로 주지 않아도 부모div에서 알아서 다 설정하면 된다는게 넘 편한거 같고요?!
포스팅이 또 길어지니 다음편에서 계속됩니다&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_grid.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scrimba.com/p/pWqLHa/c7Jqdfa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://scrimba.com/p/pWqLHa/c7Jqdfa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_3일 TIL_CSS Grid로 레이아웃을 짜보자 1탄]]></title><description><![CDATA[위코드 22일차. 프로젝트에 앞서 css 속성 중 grid에 대해서 공부해보았다, 그 1탄!]]></description><link>https://gollumnima.github.io//posts/wecode4_3TIL_grid_1</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_3TIL_grid_1</guid><pubDate>Wed, 21 Aug 2019 15:37:04 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ce448e00-c6cf-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그리드 하면 생각하는게 와플의 정직한 직선들이라 사진에 넣어보았다 ㅋㅋㅋ
이전까지는 flex만 써봤는데(사실 아직 flex를 마스터한것도 아니다.. 다음번에 정리해놔야지)
flex보다 좀 더 유용할 것 같은 Grid에 대해 정리해보려고 한다!&lt;/p&gt;
&lt;h2 id=&quot;왜-grid를-쓸까&quot;&gt;&lt;a href=&quot;#%EC%99%9C-grid%EB%A5%BC-%EC%93%B8%EA%B9%8C&quot; aria-label=&quot;왜 grid를 쓸까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 Grid를 쓸까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2차원 레이아웃을 짜기 쉽다&lt;/li&gt;
&lt;li&gt;부트스트랩보다 심플한 마크업 구조!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;grid&quot;&gt;&lt;a href=&quot;#grid&quot; aria-label=&quot;grid permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Grid&lt;/h2&gt;
&lt;p&gt;Grid, 말 그대로 격자선을 말한다.
크게 전체를 감싸는 container와 그 안의 요소들로 나눌 수 있는데
더 크게 나눠보자면 row와 column으로도 나누어지겠지! flex처럼&lt;/p&gt;
&lt;p&gt;먼저 html 구조를 짜보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scss 기능을 약간 활용한 css 구조도 함께 볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$yellow: #ffdd59;
$blue: #3c40c6;
.container {
  display: grid;
  div {
    width: 100px;
    height: 80px;
  }
  div:nth-child(even) {
    background: $yellow;
  }
  div:nth-child(odd) {
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 하단의 구조가 나올거에요. (듀얼모니터 쓰는 중이라 스크롤도 애매하게 캡쳐됐지만 무시하세여 ㅋㅋ)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f80e8870-c6d0-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;
먼저 container에는 &lt;code class=&quot;language-text&quot;&gt;display: grid;&lt;/code&gt;라는 속성을 주었고요.
화면에 상자를 보이게 하려고 자식 div들에게 크기를 따로 주었지만 이렇게 하지 않아도 됩니다.
부모div인 container에 rows와 columns 크기를 지정하면 자식들이 따라갑니다.&lt;/p&gt;
&lt;h2 id=&quot;grid-template-columnnsrows&quot;&gt;&lt;a href=&quot;#grid-template-columnnsrows&quot; aria-label=&quot;grid template columnnsrows permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-template-columnns/rows&lt;/h2&gt;
&lt;p&gt;자식 div에 준 width와 height을 지우고, container에 두 줄을 추가해볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px 100px;
grid-template-columns: 50px 50px 50px;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c038fc70-c6d3-11e9-8b9d-cb65853403a4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 보니 감이 안 오죠? rows에서 50px 하나를 제거해볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;
grid-template-columns: 50px 50px 50px;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e49463c0-c6d3-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;약간 감이 오시나요??&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;&lt;/code&gt;는 세로 100px짜리를 2행으로 만들어라 라는 뜻이였고요,
&lt;code class=&quot;language-text&quot;&gt;grid-template-columns: 50px 50px 50px;&lt;/code&gt;는 가로 50px짜리를 3열로 만들어라 라는 뜻이에요!&lt;/p&gt;
&lt;p&gt;많이 헷갈리죠? 그치만 익숙해지면 손쉽게 쓸 수 있을거에요!
근데 네모가 붙어있어서 좀 답답한데 떨어뜨리고 싶어요.. 그럴땐 어떻게 할까요?&lt;/p&gt;
&lt;h2 id=&quot;grid-gap&quot;&gt;&lt;a href=&quot;#grid-gap&quot; aria-label=&quot;grid gap permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-gap&lt;/h2&gt;
&lt;p&gt;갭이라는 속성이 있어서 사이사이를 띄워줄 수 있어요!
아까 줬던 container의 css에 &lt;code class=&quot;language-text&quot;&gt;grid-gap: 5px;&lt;/code&gt; 이걸 추가해볼게요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dd5bd420-c6d4-11e9-8b9d-cb65853403a4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그러면 이렇게 간격이 뙇!!&lt;/p&gt;
&lt;h2 id=&quot;auto-flow와-auto-rowscolumns&quot;&gt;&lt;a href=&quot;#auto-flow%EC%99%80-auto-rowscolumns&quot; aria-label=&quot;auto flow와 auto rowscolumns permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;auto-flow와 auto-rows/columns&lt;/h2&gt;
&lt;p&gt;위에서 자식div가 9개였는데 &lt;code class=&quot;language-text&quot;&gt;grid-template-rows: 100px 100px;&lt;/code&gt; 으로 설정해줘서 2행까지밖에 뜨지 않죠! 지금의 상황처럼 숨겨진 자식div를 자동으로 화면에 띄워주는 것이 바로 grid-auto뭐시깽이들이에요&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-auto-rows: 200px&lt;/code&gt; 이라고 한 줄 추가해볼게요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2f0c22a0-c6dc-11e9-8ebd-0d28270a60b3/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 숨겨졌던 세 개의 div들이 세로가 200px인 상태로 화면에 나타나게 됩니다!
우리가 만들 웹페이지나 모바일 화면은 위에서 아래로 스크롤을 내리는 형식이니까 이 성질을 잘 활용하면 좋겠죠?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grid-auto-columns: 200px&lt;/code&gt; 이라고 써보면 어떨까요?
정답은 아무 일도 일어나지 않는다!
왜냐… grid-auto 뭐시기의 default값은 row로 설정이 되어있기 때문이죠!
그럴 때 써주는게 &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;위에서 설정한 코드 밑에 &lt;code class=&quot;language-text&quot;&gt;grid-auto-flow: columns&lt;/code&gt; 이 속성을 추가해보면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/f4d20f30-c6dd-11e9-90c9-a5e30005de04/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;아까는 아무 일도 일어나지 않았지만 보다시피 column 속성이 채워집니다!&lt;/p&gt;
&lt;h2 id=&quot;grid-template-areas&quot;&gt;&lt;a href=&quot;#grid-template-areas&quot; aria-label=&quot;grid template areas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grid-template-areas&lt;/h2&gt;
&lt;p&gt;왠지 grid에서의 핵심 특징인것 같은 느낌적인 느낌인 이 template-areas!
제가 설정한 템플릿에 따라 화면구성을 만들어주는 친구입니다.&lt;/p&gt;
&lt;p&gt;아까는 div가 9개인 상태에서 시작했지만 지금은 4개로 시작할거에요.
각각의 className은 first~fourth까지!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Grid = () =&amp;gt; {
    return(
      &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;first&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;second&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;third&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div className=&amp;quot;fourth&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;/div&amp;gt;

    )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;css 코드도 함 봅시다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$red: #ff5e57;
$yellow: #ffdd59;
$blue: #3c40c6;
$green: #05c46b;
.container {
  display: grid;
  grid-gap: 5px;
  grid-auto-flow: column;
  grid-auto-rows: 200px;
  grid-template-areas: &amp;quot;head head head&amp;quot;
                       &amp;quot;content content side&amp;quot;
                       &amp;quot;content content side&amp;quot;
                       &amp;quot;footer footer footer&amp;quot;
  div:first-child {
    grid-area: head;
    background: $green;
  }
  .second {
    grid-area: content;
    background: $yellow;
  }
  .third {
    grid-area: side;
    background: $red;
  }
  .fourth {
    grid-area: footer;
    background: $blue;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;부모div에는 “head head head” 이런식의 string 값을 4개 주었구요
각각의 자식 div에 &lt;code class=&quot;language-text&quot;&gt;grid-area&lt;/code&gt;라는 속성을 추가하고 value에는 부모div에서 정의한 template들을 적용시켜봤어요&lt;/p&gt;
&lt;p&gt;그러면 화면구성은 어떻게 될까요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3107f900-c6e4-11e9-b6d6-1fdc05f3cd3a/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;짠~ 이렇게 멋있게 구역이 나누어집니다!
저 상태에서 개발자도구의 커서를 갖다 대면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ca5b0c10-c701-11e9-bcd4-4b91f5ecbff0/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;우리가 template area를 설정한 대로 정확하게 나뉘어서 나온게 보이시죠? (글씨는 원래 안 뜨는건데 보기 쉽게 제가 추가해놓은거에요.)
이 방법을 쓰면 margin이나 width, height 기타 등등의 속성을 따로 주지 않아도 되니까 진짜 편한거 같아요!&lt;/p&gt;
&lt;p&gt;글이 너무 길어지는거 같으니 다음편으로 계속…&lt;/p&gt;
&lt;p&gt;출처에 있는 srimba 사이트 꼭 들어가보세요!
영상 들으면서 직접 그 화면에서 실습도 해볼수 있어요 넘나 신기한것…
이렇게..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3c5b7700-c702-11e9-836e-af72d1853ae5/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_grid.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_grid.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Basic_concepts_of_grid_layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.freecodecamp.org/news/learn-css-grid-in-5-minutes-f582e87b1228/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scrimba.com/p/pWqLHa/c7Jqdfa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://scrimba.com/p/pWqLHa/c7Jqdfa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_2일 TIL_Emmet 단축키로 html 핵 간단하게 짜보자]]></title><description><![CDATA[위코드 21일차. 쓰면 있어 보이기도 하고, 진짜로 핵 유용한 Emmet 단축키를 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode4_2TIL_emmet</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_2TIL_emmet</guid><pubDate>Tue, 20 Aug 2019 21:51:32 GMT</pubDate><content:encoded>&lt;p&gt;1번 타자는 Emmet 단축키는 아니지만 구조부터 찬찬히 만들어 보자는 의미에서 추가..!&lt;/p&gt;
&lt;h2 id=&quot;html-구조-만들기&quot;&gt;&lt;a href=&quot;#html-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;html 구조 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;html 구조 만들기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 누르고 &lt;code class=&quot;language-text&quot;&gt;tab&lt;/code&gt;키 누르면 뙇!! 뜬다는 사실은 이미 널리 알려져 있어서 패쓰&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;요렇게 간편하게 뙇!!!
그치만 Emmet은 진짜 진짜 진짜로 신박한데 많이 알려져 있는거 같진 않다!
그래서 써보는 오늘의 포스팅.&lt;/p&gt;
&lt;h2 id=&quot;자식요소는-를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%8B%9D%EC%9A%94%EC%86%8C%EB%8A%94-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;자식요소는 를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자식요소는 &gt;를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nav&amp;gt;ul&amp;gt;li&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 구조가 뙇!&lt;/p&gt;
&lt;h2 id=&quot;자매-형제요소는-를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A7%A4-%ED%98%95%EC%A0%9C%EC%9A%94%EC%86%8C%EB%8A%94-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;자매 형제요소는 를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자매? 형제?요소는 +를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;div+p+bq&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&lt;/code&gt;를 입력하면 부모-자식 관계가 되지만, &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;를 입력하면 동등한 관계로 태그가 생성됩니다!&lt;/p&gt;
&lt;h2 id=&quot;여러개의-동일한-속성은--를-이용하기&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EB%8F%99%EC%9D%BC%ED%95%9C-%EC%86%8D%EC%84%B1%EC%9D%80--%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;여러개의 동일한 속성은  를 이용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여러개의 동일한 속성은 * 를 이용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ul&amp;gt;li*5&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list 일일히 다 쓰는게 얼마나 귀찮게요! 원하는 개수만큼 곱해주면 끝!&lt;/p&gt;
&lt;h2 id=&quot;id는--class는-&quot;&gt;&lt;a href=&quot;#id%EB%8A%94--class%EB%8A%94-&quot; aria-label=&quot;id는  class는  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;id는 # class는 .&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;#header&lt;/code&gt; 입력시 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.header&lt;/code&gt;입력시 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
여기서 알 수 있는 사실! div는 딱히 div라고 안 써줘도 id나 class 이름만 줘도 자동으로 적용됩니다요&lt;/p&gt;
&lt;h2 id=&quot;text는-안에&quot;&gt;&lt;a href=&quot;#text%EB%8A%94-%EC%95%88%EC%97%90&quot; aria-label=&quot;text는 안에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;text는 {}안에&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;a{Click me}&lt;/code&gt; 입력하고 엔터 치면
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Click me&amp;lt;/a&amp;gt;&lt;/code&gt; Click me라는 text를 클릭시 링크이동하는 anchor 태그가 뙇!&lt;/p&gt;
&lt;h2 id=&quot;-사인으로-숫자-매기기&quot;&gt;&lt;a href=&quot;#-%EC%82%AC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%88%AB%EC%9E%90-%EB%A7%A4%EA%B8%B0%EA%B8%B0&quot; aria-label=&quot; 사인으로 숫자 매기기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;$ 사인으로 숫자 매기기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ul&amp;gt;li.item$*5&lt;/code&gt; 입력하고 엔터 치면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class=&amp;quot;item1&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item2&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item3&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item4&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;item5&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;짠~ $사인이 있는 곳에 번호가 자동으로 생겼슴돠
그렇다면 응용문제…&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;h$[title=item$]{Header $}*3&lt;/code&gt; 이걸 치면 뭐가 나올까요?&lt;/p&gt;
&lt;p&gt;정답은…&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;p&gt;두&lt;/p&gt;
&lt;p&gt;구&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1 title=&amp;quot;item1&amp;quot;&amp;gt;Header 1&amp;lt;/h1&amp;gt;
&amp;lt;h2 title=&amp;quot;item2&amp;quot;&amp;gt;Header 2&amp;lt;/h2&amp;gt;
&amp;lt;h3 title=&amp;quot;item3&amp;quot;&amp;gt;Header 3&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Emmet 치트키가 편해진다면 코드 칠때 진짜 편할거 같지 않나요?ㅋㅋ
더 자세한 문법은 &lt;a href=&quot;https://docs.emmet.io/cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.emmet.io/cheat-sheet/&lt;/a&gt; 요기 들어가시면 예시와 함께 다 나와있습니다!!&lt;/p&gt;
&lt;p&gt;안그래도 코드치는데 손가락을 많이 혹사시키는데…
단축키 쓰면 건강지수도 2% 정도 올라가고.. 일단 멋있어보입니다 ㅎ&lt;/p&gt;
&lt;p&gt;연습만이 살길!!!!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.emmet.io/cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.emmet.io/cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 4주차_1일 TIL_Sudo란 뭘까?]]></title><description><![CDATA[위코드 20일차. 매일 쓰는 sudo 명령어가 무슨 뜻인지 알고 쓰고 싶어서 정리해본 글이다!]]></description><link>https://gollumnima.github.io//posts/wecode4_1TIL_sudo</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode4_1TIL_sudo</guid><pubDate>Mon, 19 Aug 2019 19:38:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/444a9fb0-c20f-11e9-b606-158c631d0945/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;맨날 &lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 명령어 써서 수도세 너무 많이 나올것 같은 저의 터미널…
뭐만 안되면 일단 수도를 쓰곤 하는데.. 이걸 남용해도 되나 싶어서 써보는 포스팅입니다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;블로그에 글을 쓸 때만 봐도 sudo 명령어를 쓰지 않으면 항상 저런 에러가 나는데요!
&lt;code class=&quot;language-text&quot;&gt;sudo yarn develop&lt;/code&gt; 명령어를 쓰면 그제서야 로컬서버를 볼 수 있습니다 ㅠㅠ
&lt;code class=&quot;language-text&quot;&gt;Command failed with exit code 1.&lt;/code&gt; 에러는 시간 날때 한번 분석해봐야겠어요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b300500-c26a-11e9-9ae2-2dea29e05eb4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;sudo란&quot;&gt;&lt;a href=&quot;#sudo%EB%9E%80&quot; aria-label=&quot;sudo란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sudo란?&lt;/h2&gt;
&lt;p&gt;Super User DO 의 줄임말로, 액세스가 거부되거나 super user의 권한이 필요할 때 이 명령어를 사용할 수 있습니다~ 여기서 Superuser란 시스템 관리를 위한 특별한 사용자 계정을 말합니다 ㅎㅎ&lt;/p&gt;
&lt;p&gt;sudo를 써야 해결이 되는 에러들은 우분투와 같은 리눅스 배포판을 사용할 때 자주 일어납니다… 애증의 우분투.. 좋은게 뭐니…ㅠㅠ
여튼 좋을거 하나 없는 이 우분투는 root user(super user) 계정이 비활성화 되어있기 때문에 sudo 명령어를 써서 권한을 상승시켜 줘야 에러없이 명령어를 실행할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/347540b0-c1bd-11e9-8201-3992f806871d/image.png&quot; alt=&quot;image.png&quot;&gt;
(서버관리자 유우머 출처 : &lt;a href=&quot;https://swiftcoding.org/sysadmin-humour&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://swiftcoding.org/sysadmin-humour&lt;/a&gt;)
서버관리자 유우머도 한번 보고가시죠~ ㅎ&lt;/p&gt;
&lt;h2 id=&quot;ubuntu에서-sudo를-안-쓰는-방법은-없을까&quot;&gt;&lt;a href=&quot;#ubuntu%EC%97%90%EC%84%9C-sudo%EB%A5%BC-%EC%95%88-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80-%EC%97%86%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;ubuntu에서 sudo를 안 쓰는 방법은 없을까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ubuntu에서 sudo를 안 쓰는 방법은 없을까?&lt;/h2&gt;
&lt;p&gt;있다! 하지만 추천하는 방법은 아니라고 한다..ㅋㅋ
혹시 해보실 분들은 &lt;a href=&quot;https://askubuntu.com/questions/44418/how-to-enable-root-login&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://askubuntu.com/questions/44418/how-to-enable-root-login&lt;/a&gt; 이 사이트에 있는 답변을 참고하시기 바랍니다.
하지만 답변자가 추천하진 않는다고 했으므로 저는 패쓰~ 귀찮지만 sudo와 함께 가겠습니다!
물론 저 방법을 써도 큰 문제는 없다고 합니다.. 저는 linux에 대한 기초지식이 부족한 저로써는 안전하게 sudo를 쓰는게 맞는것 같네요!&lt;/p&gt;
&lt;h2 id=&quot;sudo-꼭-귀찮고-안-좋은것일까&quot;&gt;&lt;a href=&quot;#sudo-%EA%BC%AD-%EA%B7%80%EC%B0%AE%EA%B3%A0-%EC%95%88-%EC%A2%8B%EC%9D%80%EA%B2%83%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;sudo 꼭 귀찮고 안 좋은것일까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sudo, 꼭 귀찮고 안 좋은것일까?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 명령어를 쓰려면 비밀번호를 한번 더 치고 넘어가야 하기 때문에 사용자의 실수를 미연에 방지할 수 있을 것 같아요! 물론 뇌보다 손이 더 빠르다면 어쩔수 없지만…&lt;/p&gt;
&lt;p&gt;sudo 명령어를 찾다가 알게 된 무시무시한 사실…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sudo rm -rf /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아무리 싫은 사람이 있어도 이 명령어를 그 사람 컴퓨터에 치지 마시오!
아무리 회사가 싫어도 퇴사전에 이 명령어를 쓰지 마시오! (재물손괴죄로 처벌받을수 있어요~)&lt;/p&gt;
&lt;p&gt;저 명령어를 입력하게 되면 하드까지 싹~~ 다 날릴수 있다고 하네요
실제로 저 명령어를 입력해서 곤혹을 치룬 아주 유명한 기업이 있죠.. Pixar라고..ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c9f9f9f0-c217-11e9-ab13-fd453fdce69a/image.png&quot; alt=&quot;image.png&quot;&gt;(리눅스와 우디 ㅋㅋ, 이미지 출처: &lt;a href=&quot;https://www.imdb.com/title/tt0120363/mediaviewer/rm1978252800&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.imdb.com/title/tt0120363/mediaviewer/rm1978252800&lt;/a&gt;)
sudo를 썼는진 모르겠지만.. 토이스토리2 제작 당시 &lt;code class=&quot;language-text&quot;&gt;rm-rf /&lt;/code&gt; 명령어 때문에 파일이 다 날라간 적이 있다고 합니다 ㅎ
&lt;code class=&quot;language-text&quot;&gt;rm -r -f *&lt;/code&gt; 이 명령어를 쓰면 현재 디렉토리에 있는 파일을 삭제하는 건데.. 순간의 실수로 삐끗해서 영화 개봉을 앞두고 전체 파일을 날려버렸다는 슬픈 전설이…&lt;/p&gt;
&lt;p&gt;아쉽지만 오늘의 포스팅은 여기서 끝내겠습니다~
사실 저 토이스토리 얘기랑 수도세 드립 치고 싶어서 쓴 글이였습니다.. 그럼 궁금증도 풀렸으니 리액트 공부하러 총총…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_5일 TIL_React의 친구 ESLint]]></title><description><![CDATA[위코드 19일차. 리액트로 보다 깔끔한 코드를 작성하기 위해 Eslint가 무엇인지, 어떻게 설치하는지 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_5TIL_eslint</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_5TIL_eslint</guid><pubDate>Fri, 16 Aug 2019 23:45:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1e892810-c1b4-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;React와 뗄래야 뗄 수 없는 Eslint에 대해 알아봅시다.&lt;/p&gt;
&lt;h2 id=&quot;eslint란&quot;&gt;&lt;a href=&quot;#eslint%EB%9E%80&quot; aria-label=&quot;eslint란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint란?&lt;/h2&gt;
&lt;p&gt;위키백과에 따르면 lint 혹은 linter는 프로그래밍 내부의 에러나 버그를 잡아내는 툴을 말한다고 하네요. 영어사전에 찾아보니 lint가 보푸라기라는 뜻이 있던데! 보풀 하나 없이 깨끗한 코드를 만들어내겠다!! 저는 이런 의미로 받아들였습니다.ㅋㅋ&lt;/p&gt;
&lt;p&gt;사실 조사하기 전까지 ESLint가 Prettier의 React 버전이라고 생각했는데.. 완전 잘못 짚었네요 ㅠㅠ (조사해보라고 숙제 내주신 위코드 2기 권진세님 감사합니다~!)&lt;/p&gt;
&lt;p&gt;여튼 기본적으로 EsLint는 코드를 검사해서 잘못된 부분들을 짚어주기도 하고, Prettier와 함께 사용하면 EsLint 규칙에 맞게 코드를 쫙~ 정리해줍니다!&lt;/p&gt;
&lt;p&gt;ESLint의 규칙은 기본적으로 React에 내장되어 있다는데.. 우리가 정해진 규칙에 맞게 코드를 쓰고 있는건지, 추가적인 에러가 또 있는지는 확인을 못한다..
그래서 CRA에 직접 ESLint를 설치해줘야 합니다~
(설치 방법은 yeri-kim님의 블로그를 참고했습니다. 세상에서 젤 정확한 설치방법이니까 출처의 첫 줄 블로그로 이동 고고!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/08865220-c1b6-11e9-89bf-bf019f725a6c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ctrl+shift+x&lt;/code&gt; 를 눌러서 VScode 내부에서 ESLint 확장팩을 설치해주세요~&lt;/li&gt;
&lt;li&gt;현재 내 프로젝트의 root파일 안에 &lt;code class=&quot;language-text&quot;&gt;.eslintrc.json&lt;/code&gt; 파일 추가 후,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;react-app&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 내용을 써줍니다!&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Prettier 깔기. 저는 이미 설치해서 패쓰~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;npm i prettier eslint-config-prettier eslint-plugin-prettier -D&lt;/code&gt; 이 작업을 통해 prettier와 eslint를 연결해줍니다.&lt;/li&gt;
&lt;li&gt;2번의 코드를 업데이트 해주세요~&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;extends&amp;quot;: [&amp;quot;react-app&amp;quot;, &amp;quot;plugin:prettier/recommended&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;—&gt; 저는 일단 여기까지 해보고 있습니다.. 지난번에 ESLint 깔다가 localhost가 안 켜지는 불상사가 있었기 때문에.. 별로 안 중요한 CRA에 ESLint를 다시 깔아보고 있습니다!&lt;/p&gt;
&lt;p&gt;—&gt; 휴… 다행히 아무 문제 없어서 다시 6번부터 이어가겠습니다!&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;VScode의 setting에 들어가서 우측 상단 {}를 눌러주세요. 아래 캡쳐에서 종이에 화살표 있는 아이콘을 눌러주세요~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/587b2740-c1b8-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;원래 있던 객체 파일안에 아래의 프로퍼티를 추가해주세요! 객체니까 쉼표에 유의해주세요~ 저는 이날 너무 멘붕이라 그런게 1도 안 보였어요 ㅠㅠ&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;editor.formatOnSave&amp;quot;: true,
&amp;quot;[javascript]&amp;quot;: {
  &amp;quot;editor.formatOnSave&amp;quot;: false
},
&amp;quot;eslint.autoFixOnSave&amp;quot;: true,
&amp;quot;eslint.alwaysShowStatus&amp;quot;: true,
&amp;quot;prettier.disableLanguages&amp;quot;: [&amp;quot;js&amp;quot;],
&amp;quot;files.autoSave&amp;quot;: &amp;quot;onFocusChange&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;끝~ 여태 썼던 코드를 확인해보면 희한한 모양으로 바뀌어 있을거에요.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c581eb80-c1b8-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이런식으로 뭔가 코드가 얇아진 느낌적인 느낌…? 아직 이 스타일이 넘 어색하고 이상하지만.. 대세를 따라서 Airbnb 스타일로 쓰면 모두에게 읽기 편한 코드가 되겠죠?&lt;/p&gt;
&lt;h2 id=&quot;에러에-대처하는-자세&quot;&gt;&lt;a href=&quot;#%EC%97%90%EB%9F%AC%EC%97%90-%EB%8C%80%EC%B2%98%ED%95%98%EB%8A%94-%EC%9E%90%EC%84%B8&quot; aria-label=&quot;에러에 대처하는 자세 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;에러에 대처하는 자세..&lt;/h2&gt;
&lt;p&gt;stackoverflow 누가 만든 사이튼지 참.. 솔루션 맛집이네요!
어제 참 이런저런 에러가 떠서 멘붕이였는데.. stackoverflow에서 다 알아냈어요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/082788f0-c1b9-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;진짜 이런 저런 방법을 다 시도해봤어요..
package.json을 삭제 해보고, node module도 삭제해보고, npm과 yarn도 삭제하고 재설치하고… 삽질 오브 삽질을 했습니다!&lt;/p&gt;
&lt;h3 id=&quot;eslint를-설치하는-다양한-방법이-있는데-제발-꼭-하나만-보고-쓰세요&quot;&gt;&lt;a href=&quot;#eslint%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%B4-%EC%9E%88%EB%8A%94%EB%8D%B0-%EC%A0%9C%EB%B0%9C-%EA%BC%AD-%ED%95%98%EB%82%98%EB%A7%8C-%EB%B3%B4%EA%B3%A0-%EC%93%B0%EC%84%B8%EC%9A%94&quot; aria-label=&quot;eslint를 설치하는 다양한 방법이 있는데 제발 꼭 하나만 보고 쓰세요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint를 설치하는 다양한 방법이 있는데.. 제발! 꼭! 하나만 보고 쓰세요!!!!&lt;/h3&gt;
&lt;p&gt;제가 하나의 포스팅 대충 보고 안되니까 다른 포스팅도 보다가 망한 케이스입니다.
하나의 포스팅을 정독 또 정독 하세요!
그리고 -g는 갖다 버리세요!! global로 깔면 오류가 진짜 진짜 잘 나는것 같아요.
제가 우분투 유저라서 그런줄 알았는데 다 그냥 제 탓입니다 ㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼.. 다음번에 기회가 된다면 sass에 대해서도 쓰고 싶네요~!&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yeri-kim.github.io/posts/eslint-prettier/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://yeri-kim.github.io/posts/eslint-prettier/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_(software&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Lint_(software&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://eslint.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_4일 TIL_리액트를 이용해 미니트위터 만들기]]></title><description><![CDATA[위코드 18일차. 지난번 개념 정리에 이어.. 리액트로 미니트위터를 만들면서 맞딱뜨린 에러와 오해에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_4TIL_react</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_4TIL_react</guid><pubDate>Thu, 15 Aug 2019 09:40:32 GMT</pubDate><content:encoded>&lt;p&gt;눈으로 보고 치는 눈코딩과 직접 치는 코드가 정말 정말 다르다는 것을 또 다시 느낀 한 주였습니다… 리액트 때문에 계속 멘붕이였죠!
하지만 곧 익숙해질거라 믿으며.. 저의 삽질 과정을 올려봅니다!&lt;/p&gt;
&lt;h2 id=&quot;오류가-왜-이리-많이-생기니&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EB%A5%98%EA%B0%80-%EC%99%9C-%EC%9D%B4%EB%A6%AC-%EB%A7%8E%EC%9D%B4-%EC%83%9D%EA%B8%B0%EB%8B%88&quot; aria-label=&quot;오류가 왜 이리 많이 생기니 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오류가 왜 이리 많이 생기니?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;no-unused-vars
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1ce8b630-be8d-11e9-a771-e153ddc68ff9/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/2b92add0-be8d-11e9-a771-e153ddc68ff9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;import 선언은 해놓고 안 쓰는 애들에 대한 경고가 뜹니다.
이럴 경우 간편하게 주석처리하거나 저 코드를 지우면 됩니다~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Module not found&lt;br&gt;
캡쳐를 다 해놓은줄 알았는데 저게 끝이네요… ㅠㅠ 저건 대부분 경로설정을 잘못해서 생긴거니까 파일의 상대경로를 잘 설정하세요!&lt;/li&gt;
&lt;li&gt;inline-style 방식에서의 에러&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1abde180-c1af-11e9-b953-25aefde875fe/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이건 아마 처음에 인라인으로 태그에 스타일요소를 넣으려고 했을때 발생한 에러같은데… JSX에서는 중괄호를 두번씩 써서 인라인으로 쓸 수 있습니다! 그치만 프로답게 css파일에 스타일을 정의하는 습관을 기릅시다!&lt;/p&gt;
&lt;p&gt;그 밖에 오타로 인한 에러가 참 많이 났었는데… 매의 눈 필수!!!
언제 한번 리액트 에러 모음집 글을 써보겠습니다~ 대부분의 오류는 주위 사람들에게 도움을 청하거나.. 구글링으로 해결했습니다!&lt;/p&gt;
&lt;h2 id=&quot;컴포넌트-쪼개기가-너무-어려워&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%AA%BC%EA%B0%9C%EA%B8%B0%EA%B0%80-%EB%84%88%EB%AC%B4-%EC%96%B4%EB%A0%A4%EC%9B%8C&quot; aria-label=&quot;컴포넌트 쪼개기가 너무 어려워 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트 쪼개기가 너무 어려워…&lt;/h2&gt;
&lt;p&gt;처음엔 단순히 레이아웃별로 쪼갰습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/05469f30-c1b0-11e9-a7d0-358f0b555fd4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;
&amp;lt;Top /&amp;gt;
&amp;lt;Left /&amp;gt;
&amp;lt;Right /&amp;gt;
&amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;render함수의 return값 안에 저런식으로 넣었지만..
컴포넌트를 쓰는 이유가 재사용성 때문인데.. 제가 일단 쪼개긴 했어도 재활용은 전혀 하지 않았기 때문에 다시 쪼개봤습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a449dde0-c1b0-11e9-b4da-37fdbf89eb79/image.png&quot; alt=&quot;image.png&quot;&gt;
사실 재사용 할만한 모양이 별로 없어서 Top Component에 속해있던 흰색 바 안의 구성요소들을 Top2nd라는 컴포넌트로 따로 빼서 Left Component와 Right Component에 이어붙여줬습니다..&lt;/p&gt;
&lt;p&gt;이렇게 하는게 제대로 하는건진 모르겠지만.. 일단 월요일에 피드백 받기 전까지 주말까지의 저의 삽질은 여기까지!!&lt;/p&gt;
&lt;h2 id=&quot;부모-컴포넌트에-대한-오해&quot;&gt;&lt;a href=&quot;#%EB%B6%80%EB%AA%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%A4%ED%95%B4&quot; aria-label=&quot;부모 컴포넌트에 대한 오해 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부모 컴포넌트에 대한 오해…&lt;/h2&gt;
&lt;p&gt;저는 그냥 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Top /&amp;gt;&amp;lt;Left /&amp;gt;&amp;lt;Right /&amp;gt;&lt;/code&gt;가 합쳐지는 최종 컴포넌트가 부모 컴포넌트라고 생각했는데… 그게 아니였어요!!! 부모 컴포넌트는 react app에서 무조건 하나만 존재할거라 생각했는데…
그냥 props를 물려주는 쪽은 다 부모라고 할 수 있는거에요! 앞서 react 개념 정리할 때 각 컴포넌트간 데이터 교류를 무역이라고 정의 내렸는데.. &lt;br&gt;그냥 그 무역이 부모와 자식간의 거래(?) 였네요 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;부모 컴포넌트에 대해서 제대로 알고있지 못해서 props를 활용하는 부분도 어렵게 생각했는데, 한번 이해하고 나니 이제 간단한 코드는 쓸 수 있게 되었어요!&lt;/p&gt;
&lt;p&gt;예를 들어…&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Top2nd&lt;/code&gt;라는 위는 굵은 글씨, 아래는 얇은 글씨의 형식을 만들어주는 컴포넌트가 있습니다. 이걸 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt;이라는 컴포넌트에 붙여볼겁니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Top2nd extends React.Component {

    render() {
    return (
        &amp;lt;div className=&amp;quot;doorits_box&amp;quot;&amp;gt;
            &amp;lt;ul&amp;gt;
            &amp;lt;li className=&amp;quot;bold&amp;quot;&amp;gt;{this.props.bold}&amp;lt;/li&amp;gt;
            &amp;lt;li className=&amp;quot;light&amp;quot;&amp;gt;{this.props.light}&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;아래는 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt; 컴포넌트 중 일부&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;     &amp;lt;div
      className=&amp;quot;bar_wrap&amp;quot;
      &amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Doorits&amp;quot;
      light={this.state.tweetBox.length}
      /&amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Followers&amp;quot;
      light=&amp;quot;24&amp;quot;
      /&amp;gt;
      &amp;lt;Top2nd
      bold=&amp;quot;Followings&amp;quot;
      light=&amp;quot;2&amp;quot;
      /&amp;gt;
      &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Top2nd&lt;/code&gt; 컴포넌트의 bold라는 className에 넣고 싶은 글씨를 넣을 수도 있고,
아니면 state객체를 이용해서 &lt;code class=&quot;language-text&quot;&gt;Right&lt;/code&gt;안의 값을 대입하는 방법도 있습니다!
넘나 신기한 리액트의 세계~~
아직은 어렵고, 잘 안되면 화도 나지만 재미는 있으니깐! 더 발전할 수 있겠죠? XD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_3일 TIL_재귀함수(Recursion)에 대해 정리해보기]]></title><description><![CDATA[위코드 17일차. 코딩을 하면서 꼭 한번쯤은 맞딱뜨리게 되는 재귀함수에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_3_TIL_recursion/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_3_TIL_recursion/</guid><pubDate>Wed, 14 Aug 2019 09:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/90548c30-c1a7-11e9-a617-2b7b8642c92b/mathematics-696806640.png&quot; alt=&quot;mathematics-696806_640.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;학창시절.. 수학시간에 프랙탈이라는 구조에 대해서 한번쯤은 들어봤을 것이다. 동일한 모양이 계속해서 반복되는 그러한 구조…!! 사진 속 시에르핀스키 피라밋처럼!
프로그래밍 세계에서도 동일한 함수가 계속 반복되는 재귀(Recursion)라는 개념이 있다.&lt;/p&gt;
&lt;h2 id=&quot;왜-재귀를-공부해야-할까&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 재귀를 공부해야 할까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 재귀를 공부해야 할까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간결하고 직관적인 코드를 제공한다!&lt;/li&gt;
&lt;li&gt;설계와 개발, 디버깅 과정모두 재귀적인 사고를 요구한다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;재귀란&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EB%9E%80&quot; aria-label=&quot;재귀란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자기 자신을 호출하는 행위&lt;/li&gt;
&lt;li&gt;주어진 문제를 자기 반복적인 문제들로 잘게 분해한 후, 이들을 다시 조합해 원래 문제의 정답을 찾는 것을 말한다~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;재귀와-콜스택&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%EC%99%80-%EC%BD%9C%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;재귀와 콜스택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀와 콜스택&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스택(Stack)이란?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-함수를 호출한 후 원래 자리로 돌아오려면, ‘원래 자리’를 어딘가에 저장해야하는데 그 어딘가를 가리켜 Stack이라고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호출스택(Call Stack)이란?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-프로그램상 어디에 있는지 기록하는 자료구조를 말한다&lt;/p&gt;
&lt;p&gt;cf) MDN 호출스택 정의 : &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/Call_stack&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Glossary/Call_stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-함수를 실행하면 stack위에 push를 하게 됩니다.(쌓이고~)&lt;br&gt;
-return 시 stack의 맨 윗값(가장 최근 데이터)을 pop합니다.(가져오면 그 함수가 cal l stack에서 제거됩니다.)&lt;/p&gt;
&lt;p&gt;==&gt; 그래서 return 이란~!&lt;/p&gt;
&lt;p&gt;Stack에 저장된 최근 주소값, 나를 실행시킨 것의 바로 다음 step의 주소로 돌아간다는 의미입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/8a5620f6efe44958bd1670e6a630869f#b6a59504701d43c4a392b08bbafdef12&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/p4qNK6maB5eamv9M-g3ca_wKdRwe7iDddOLA5fEkTJPlgaRGj8qD2AJ8nGetZJNsbOcV6yHH1BtPf7-IjCyWuIX_E8FWCEFGy_vO7yfLF5FgoW3iYg-Wb4ACiGmYC1L4PtIW1Gr9&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/2QGahcO74QQDksY8oSaCU3bPpEjHIsKFiD9IlXra6KDaZAOs4ACZpPwcMOrW2r_lrvPTZdGVjjrT47XWOfVsbsBdVmIwvykFVqsWf5nrRvbSrLT2EmHiDo_onifjUJvVBWlOCTrP&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/1XVkduAkp0ku6LOZiFPNbLLOpnHCko4oBo9uRx6vGPKQx3YHk9xnLo_viYWCxjzgby57cDWK81n5RvgI9bO_KsP5cN4_vjJr1bQUCBFC_LiBoHgfLWpAbd6zvyAKZtk6mrkk79_K&quot;&gt;&lt;/p&gt;
&lt;p&gt;-값이 return 되기 전에 call stack이 쌓이면 호출스택의 최대 수용치를 넘게 되고… stack overflow 발생!!&lt;br&gt; -종료조건을 달아줘야 stack overflow를 막을 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;재귀함수-응용&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EC%9D%91%EC%9A%A9&quot; aria-label=&quot;재귀함수 응용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수 응용&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6b145840-c1a9-11e9-abb1-7bd155a4a0a8/cute-2500929640.jpg&quot; alt=&quot;cute-2500929_640.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x3C;1&gt;피보나치 수열&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 달은 아기 토끼 한 쌍에서 시작합니다.&lt;/li&gt;
&lt;li&gt;아기 토끼는 한 달이 지나면 어른토끼가 됩니다.&lt;/li&gt;
&lt;li&gt;어른 토끼는 한 달에 한 쌍의 아기토끼를 낳습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==&gt; 0,1,1,2,3,5,8 …
위의 결과가 나오도록 함수를 만들어 보면.. 🙂&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    function fibo(n) {
        if (n &amp;lt; 2)
            return n;
        return fibo(n-1) + fibo(n-2);
    }

    fibo(6) // 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제가 이 코드를 칠 때 우리의 컴퓨터우리의 컴퓨터는…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    call fibonacci(6)
      call fibonacci(5)
        call fibonacci(4)
          call fibonacci(3)
            call fibonacci(2)
              call fibonacci(1)
              return 1
              call fibonacci(0)
              return 0
            return 1
            call fibonacci(1)
            return 1
          return 2
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
        return 3
        call fibonacci(3)
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
          call fibonacci(1)
          return 1
        return 2
      return 5
      call fibonacci(4)
        call fibonacci(3)
          call fibonacci(2)
            call fibonacci(1)
            return 1
            call fibonacci(0)
            return 0
          return 1
          call fibonacci(1)
          return 1
        return 2
        call fibonacci(2)
          call fibonacci(1)
          return 1
          call fibonacci(0)
          return 0
        return 1
      return 3
    return 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 식으로 6번째 피보나치 수를 구하는데 무려 함수의 호출이 25번 일어납니다 ㅠㅠ..
14번째 피보나치 수를 구할땐 호출수는 1019…&lt;/p&gt;
&lt;p&gt;console.log(fibo(100)) 을 찍어보면 함수의 호출이 몇 번 일어날까요? (컴퓨터 살려…)&lt;/p&gt;
&lt;h2 id=&quot;재귀함수의-문제점&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;재귀함수의 문제점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수의 문제점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출의 비용&lt;/li&gt;
&lt;li&gt;Stack의 깊이&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그렇다면 해결책은 없을까요…?!&lt;/p&gt;
&lt;h2 id=&quot;해결책--함수-호출하지말고-반복문-쓰기&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EC%B1%85--%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C%ED%95%98%EC%A7%80%EB%A7%90%EA%B3%A0-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;해결책  함수 호출하지말고 반복문 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결책 : 함수 호출하지말고 반복문 쓰기&lt;/h2&gt;
&lt;p&gt;-반복 단계별 계산 결과를 반복이 끝날 때까지 특정 변수에 저장하는 방식으로 풀어볼 수 있습니다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    function fibo(n) {
    var cur, pre = 1, prepre = 0;
    if (n &amp;lt; 2)
    return n;
    for ( var i = 2 ; i &amp;lt;= n ; i++ ) {
    cur = pre + prepre;
    prepre = pre;
    pre = cur;
    }
    return cur;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다른 해결책으론 꼬리호출이라는 방식이 있는데.. 이건 제가 아직 제대로 이해하지 못해서 다음 기회에…&lt;br&gt;
아직 이 방식을 적용하는 브라우저도 많지 않아서 천천히 알아도 될 것 같고요..?&lt;/p&gt;
&lt;h2 id=&quot;재귀함수-활용한-알고리즘-문제들&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%EB%93%A4&quot; aria-label=&quot;재귀함수 활용한 알고리즘 문제들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀함수 활용한 알고리즘 문제들&lt;/h2&gt;
&lt;p&gt;전체코드를 다 보기 전에 타이틀만 보고 꼭 한번씩 생각해보세요~&lt;/p&gt;
&lt;h2 id=&quot;최소공배수와-최대공약수-구하기&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98%EC%99%80-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;최소공배수와 최대공약수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최소공배수와 최대공약수 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function solution(n, m) {
  function u(n, m) { return m % n ? u(m % n, n) : n; }
  const gcd = u(n, m);
  return [gcd, n * m / gcd];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;유클리드 호제법이라는 것도 한번 찾아보세요~ 아직도 너무 너무 헷갈리는 이 공식 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;문자열-반복하기&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;문자열 반복하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 반복하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function repeatString(string, num) {
  if(num &amp;lt;= 0) {
    return &amp;#39;&amp;#39;
  }
  else {
    return string + repeatString(string,num-1)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;주어진-두-수-사이의-숫자들-구하기&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%91%90-%EC%88%98-%EC%82%AC%EC%9D%B4%EC%9D%98-%EC%88%AB%EC%9E%90%EB%93%A4-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;주어진 두 수 사이의 숫자들 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주어진 두 수 사이의 숫자들 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const range = (start = 0, end = 0) =&amp;gt; {
  let arr = [];
  start &amp;gt; end &amp;amp;&amp;amp; ([start, end] = [end, start]);
  arr.push(start);
  return start === end ? arr : [...arr, ...range(start + 1, end)]
}
console.log(range(2, 5)); // [2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;n번째-짝수-구하기&quot;&gt;&lt;a href=&quot;#n%EB%B2%88%EC%A7%B8-%EC%A7%9D%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;n번째 짝수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;N번째 짝수 구하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getNthEvenNum (n) {
    if (n &amp;lt;= 1) {
        return 0;
    } else {
        return getNthEvenNum(n-1) + 2;
    }
};

getNthEvenNum(3) //4
//0,2,4,6,8,10,12...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;특정숫자의-n제곱-구하기&quot;&gt;&lt;a href=&quot;#%ED%8A%B9%EC%A0%95%EC%88%AB%EC%9E%90%EC%9D%98-n%EC%A0%9C%EA%B3%B1-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;특정숫자의 n제곱 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;특정숫자의 n제곱 구하기&lt;/h2&gt;
&lt;p&gt;아래의 코드는 2의 n제곱이지만 다른 숫자를 넣으면 그 수의 제곱을 구할수 있겠죠? :)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function getPowerOf2 (n) {
  if(n) &amp;lt;=0) {
    return 1
  }
  else {
    return getPowerOf2(n-1)*2
  }
}

getPowerOf2(4)//16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;순차검색법&quot;&gt;&lt;a href=&quot;#%EC%88%9C%EC%B0%A8%EA%B2%80%EC%83%89%EB%B2%95&quot; aria-label=&quot;순차검색법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;순차검색법&lt;/h2&gt;
&lt;p&gt;이건 아직도 헷갈려서 이번에 정리하는 김에 다시 보고 있어요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function searchArraySequentially (array, i, j, x) {
    if (i &amp;lt;= j) {
        if (array[i] === x) { // 같으면 i return
            return i;
        } else { //같지 않으면 하나씩 늘려서 간격 줄여가기
            return searchArraySequentially(array, i + 1, j, x);
        }
    } else { //끝까지 줄였는데도 안 나오면 i와j사이에 없는거니깐 -1 return
        return -1;
    }
}

var array = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;];
var result1 = searchArraySequentially(array, 0, 4, &amp;#39;e&amp;#39;);
var result2 = searchArraySequentially(array, 0, 3, &amp;#39;e&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;문자열-역순으로-정리하기&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;문자열 역순으로 정리하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 역순으로 정리하기&lt;/h2&gt;
&lt;p&gt;거꾸로 하는건 reverse지만.. 언어유희 좀 해봤어요 ㅎ 이 코드를 알고있어서 위코드 1주차 코드카타 문제를 재귀로도 접근해볼수 있었네요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function rebirth(s) {
  if(s === &amp;#39;&amp;#39;) {
    return &amp;#39;&amp;#39;
  }
  else {
    return rebirth(s.substring(1))+s.charAt(1)
  }
}
console.log(rebirth(&amp;#39;hello&amp;#39;))
//ello + h
//llo + e + h
//lo + l + e + h
//o + l + l + e+ h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 재귀에 대해 간단히 알아보았는데요..!
개발자라면 피할 수 없는 부분이라고 생각합니다.. 탈출조건을 생각하고 로직을 짜는게 참 어려운 일이지만..&lt;br&gt; 익숙해지면 잘 할수 있겠죠???!ㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ryulib.tistory.com/318&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://ryulib.tistory.com/318&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://homoefficio.github.io/2015/07/27/%EC%9E%AC%EA%B7%80-%EB%B0%98%EB%B3%B5-Tail-Recursion/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;원래 출처가 몇 군데 더 있었는데.. 예전에 에버노트에서 한번 날리는 바람에…ㅠㅠ&lt;br&gt;
출처 중 두번째 블로그는 읽어보시면 꼭 도움 될겁니다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_2일 TIL_React의 기초개념을 알아보자]]></title><description><![CDATA[위코드 16일차. 프론트엔드 개발자로 성장하는 첫 걸음마로 리액트의 기초개념에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode3_2_TIL_react/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_2_TIL_react/</guid><pubDate>Tue, 13 Aug 2019 10:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/51e4aa80-bdc8-11e9-a959-a5309cf0f824/books-16557831920.jpg&quot; alt=&quot;books-1655783_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;리액트는 자바스크립트 라이브러리 중의 하나이다. 그렇다면 라이브러리란 뭘까?&lt;/p&gt;
&lt;h2 id=&quot;library&quot;&gt;&lt;a href=&quot;#library&quot; aria-label=&quot;library permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Library&lt;/h2&gt;
&lt;p&gt;라이브러리란 유용한 함수 메소드의 꾸러미라고 생각하면 될 것 같다. 라이브러리를 통해 코드 쓰는 시간의 약 20% 정도를 줄일수 있다고 한다 와우! 예전에 개발자들이 자주 쓰던 jQuery또한 라이브러리 중의 하나이다!&lt;/p&gt;
&lt;h2 id=&quot;react의-폴더-구성&quot;&gt;&lt;a href=&quot;#react%EC%9D%98-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;react의 폴더 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React의 폴더 구성&lt;/h2&gt;
&lt;p&gt;글만 쓰는게 싫어서 캡쳐한 후 설명을 달았습니다..ㅎㅎ;;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/aa9d4e60-bf22-11e9-93f4-9b2a14d0ffa2/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;create-react-app 디렉토리이름&lt;/code&gt; 명령어를 입력하고 VS코드를 열어보면 이러한 파일들이 있을건데요, 우리는 여기서 src폴더에 Component와 js,css 파일들을 만들고 그것을 통해 웹페이지를 구현할 거에요!&lt;/p&gt;
&lt;p&gt;그렇다면 리액트에는 어떠한 요소들이 있을지 하나하나 살펴봅시다~&lt;/p&gt;
&lt;h2 id=&quot;jsxjavascript-xml&quot;&gt;&lt;a href=&quot;#jsxjavascript-xml&quot; aria-label=&quot;jsxjavascript xml permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSX(Javascript XML)&lt;/h2&gt;
&lt;p&gt;html문법을 javascript파일 안에다가 쓴 것. 이것은 js도 html도 아니기 때문에 React 내에서 이걸 페이지내에서 읽히도록 Compile 해주는 과정이 들어갑니다~&lt;/p&gt;
&lt;p&gt;기억해야 할 것들…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중첩된 요소는 소괄호 닫아주기.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const good = (
&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;hi&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;하나의 태그로 시작쓰.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const wrong = (
&amp;lt;p&amp;gt;list1&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;list2&amp;lt;/p&amp;gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 쓰면 안됩니다! 제대로 쓰려면 저 두 p태그들을 하나로 묶어주는 div가 필요합니다~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class나 id 말고 className 쓰기
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p className=&amp;quot;sleepy&amp;quot;&amp;gt;넘나 졸려요&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;주석처리 할 때 태그 사이는 &lt;code class=&quot;language-text&quot;&gt;//&lt;/code&gt;, 바깥은 &lt;code class=&quot;language-text&quot;&gt;{/**/}&lt;/code&gt; 이렇게! 이건 어차피 &lt;code class=&quot;language-text&quot;&gt;ctrl+shift&lt;/code&gt; 하면 자동으로 입력 되니까 일단 알아만 두세요~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;component&quot;&gt;&lt;a href=&quot;#component&quot; aria-label=&quot;component permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c41eeda0-c14b-11e9-8c06-7968c705c2e5/hands-6004971920.jpg&quot; alt=&quot;hands-600497_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;컴포넌트는 요소라는 뜻인데, 나라라고 생각하면 됩니다! 여러 나라들의 협력을 통해서 지구(Web page)에 메시지를 띄워서 외계인(user)한테 보내는거라고 생각해봅시다 ㅎ&lt;/p&gt;
&lt;p&gt;근데 중요한 점은 단순히 여러개가 합쳐져서 하나를 만드는 것이 아닌, 동일한 것이 있다면 비효율적인 작업을 줄여주는 재사용 가능한 함수에요. 마치 js에서의 class처럼~&lt;/p&gt;
&lt;p&gt;컴포넌트는 함수형과 클래스형 둘로 나뉘는데, 그 전에 컴포넌트를 한번 파헤쳐봅시다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5bb55830-c14b-11e9-bbdb-150d07ce600c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;컴포넌트파일이 같은 폴더에 있다고 해도 각각의 파일은 아예 다른 나라라고 생각하면 됩니다. 국경을 넘으려면 수출과 수입을 해야 해요! 자세한 설명은 그림을 참고하시면 됩니다. 이렇게 여러 나라의 협력을 통해서…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/018d1810-c14c-11e9-bbdb-150d07ce600c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 외계인에게 보낼 메시지를 띄울 수 있는거죠! 자 그럼 함수형과 클래스형 컴포넌트에 대해 간단히 짚고 넘어갑시다.&lt;/p&gt;
&lt;h4 id=&quot;함수형&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%ED%98%95&quot; aria-label=&quot;함수형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수형&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Hungry = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;I am hungry. Please give me your {props.name} &amp;lt;/h1&amp;gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;클래스형&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95&quot; aria-label=&quot;클래스형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스형&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Hungry extends React.Component {
	render() {
  		return &amp;lt;h1&amp;gt;I am hungry. Please give me your {props.name} &amp;lt;/h1&amp;gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 공통점이 보이시나요? 네 맞습니다! component는 늘 대문자로 써야해요.
차이점을 볼까요? 함수형과 달리 클래스형은 &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt; 전에 &lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt;를 꼭 써야합니다. 그렇다면 props라는건 뭘까요?!&lt;/p&gt;
&lt;h2 id=&quot;props&quot;&gt;&lt;a href=&quot;#props&quot; aria-label=&quot;props permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;props&lt;/h2&gt;
&lt;p&gt;props는 properties의 줄임말로 js에서의 객체와 똑같은 의미인데요, 부모 컴포넌트에서 자식 컴포넌트로 넘겨주는 값입니다. 함수형 컴포넌트에선 props가 인자로 들어갑니다. 위에서 봤던 hungry함수를 받아서 쓰는 컴포넌트가 있으면 결과값이 나오겠죠? 봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import Hungry from &amp;#39;./Hungry&amp;#39;;

class Food extends Component {
  render() {
    return (
      &amp;lt;Hungry name=&amp;quot;chicken&amp;quot; /&amp;gt;
    );
  }
}

export default Food;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hungry컴포넌트와 Food컴포넌트가 합쳐져서 &lt;code class=&quot;language-text&quot;&gt;I am hungry. Please give me your chicken&lt;/code&gt; 라는 메시지가 완성됩니다. 물론 외계인에게 보여주려면 ReactDOM.render 함수도 따로 써줘야하겠죠~?
props말고 state라는 값도 있는데 그건 class 내부에서만 쓸 수 있는 성질이에요.&lt;/p&gt;
&lt;h2 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state&lt;/h2&gt;
&lt;p&gt;말 그대로 컴포넌트의 상태를 말합니다. props와 마찬가지로 객체에요! 이걸 사용하려면 constructor 내부에 꼭 &lt;code class=&quot;language-text&quot;&gt;this.state = {}&lt;/code&gt;이런 식으로 초기화를 해줘야합니다~ 그러고 나서 함수안에 &lt;code class=&quot;language-text&quot;&gt;this.setState()&lt;/code&gt;라는 식을 통해 state의 상태값을 바꿔줄 수 있어요. 예리킴님의 블로그에서 퍼온 아래의 코드를 함께 살펴봅시다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Button extends React.Component {

  constructor() {
    super();

    this.state = {
      click: false
    }
  }

  render() {
    return (
      &amp;lt;div
        className=&amp;quot;btn&amp;quot;
        onClick={()=&amp;gt;{this.setState({ click: !this.state.click })}}
      &amp;gt;
        {this.state.click ? &amp;#39;좋아요&amp;#39; : &amp;#39;싫어요&amp;#39;}
      &amp;lt;/div&amp;gt;
    );
  }
}

ReactDOM.render(
  &amp;lt;Button /&amp;gt;,
  document.getElementById(&amp;#39;root&amp;#39;)
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클릭을 할 때마다 좋아요 혹은 싫어요가 번갈아 가면서 나오는 코드입니다.&lt;br&gt;
먼저 생성자 함수 내부에서 state의 click값이 false로 초기화 된 상태인데요! onClick함수 내의 setState함수에서 click이라는 state값이 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 부정되었기 때문에 클릭을 한번 하면 true가 되겠죠? 그 다음엔 삼항연산자에서 true면 좋아요, false면 싫어요가 나오게 됩니다. onClick 함수 내부의 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; 때문에 클릭을 할 때마다 true, false값이 계속해서 바뀌게 되는거죠~&lt;/p&gt;
&lt;p&gt;분명 이렇게 이해하면 잘 알겠는데, 왜 항상 활용은 어려울까요.. ㅠㅠ
지난번에 만든 미니트위터를 Component 형식으로 쪼개는 것부터 props와 state를 이용해 데이터 값을 바꿔주는데 애를 먹고있네요 큽… 하다 보면 늘겠죠????????&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yeri-kim.github.io/posts/react-jsx/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://yeri-kim.github.io/posts/react-jsx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/top-javascript-frameworks-libraries-tools-use/#libraries&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.sitepoint.com/top-javascript-frameworks-libraries-tools-use/#libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velopert.com/3626&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://velopert.com/3626&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 3주차_1일 TIL_Linux의 기초를 알아보자]]></title><description><![CDATA[위코드 15일차. 송은우님의 강연을 바탕으로 개발자에게 있어서 뗄래야 뗄 수 없는 리눅스의 기초개념에 대해 정리해보았다.]]></description><link>https://gollumnima.github.io//posts/wecode3_1_TIL_linux/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode3_1_TIL_linux/</guid><pubDate>Mon, 12 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4a5a69a0-be93-11e9-9e21-fd5890a496e3/image.png&quot; alt=&quot;image.png&quot;&gt;
까만 터미널이 무서워서 색깔을 입혀본 나의 터미널쓰.. 터미널 너무 무서워서 싫어하는데… 개발 하려면 이제는 친해져야겠지! 하는 의미에서 써보는 포스팅 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; aria-label=&quot;linux permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux&lt;/h2&gt;
&lt;p&gt;대부분의 서버가 linux로 되어 있어서 개발하는 사람들이라면 짱짱 중요한 운영체제.( window는 서버로 잘 안쓴다고 한다.. 열일해라 윈도우). 일단 리눅스를 피할수없는 운명이므로…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;잘 알아야하고&lt;/li&gt;
&lt;li&gt;반복적으로 써서 익숙해져야 한다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3dc0a9a0-c0de-11e9-a81c-3590d60861a3/image.png&quot; alt=&quot;image.png&quot;&gt;(Linus Torvals)&lt;/p&gt;
&lt;p&gt;리눅스는 1991년도에 Linus Torvals가 개발함. 리눅스를 개발한것 치고는 연봉이 6만 5천불 정도..!???? 원래는 더 받을 능력이 있지만 그냥 이 사람은 개발이 좋아서 하는 것… 대단쓰..!! 리눅스 말고 깃도 만들었는데 돈은 깃허브가 다 가져가네~~ 와우 ㅋㅋ&lt;/p&gt;
&lt;p&gt;리눅스의 뿌리는 유닉스. 뿌리가 깊기 때문에 처음부터 끝까지 알긴 어렵고,..
리눅스 전문 직군도 따로 있음! 그 정도로 학문의 깊이가 깊음
그러니까 우리는 개발자 선에서 필요한 정도만 알고 있으면 됨.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리눅스의 디렉토리 구조&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오늘 포스팅에선 이 정도를 살펴보려고 한다!&lt;/p&gt;
&lt;h3 id=&quot;리눅스의-file-system&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-file-system&quot; aria-label=&quot;리눅스의 file system permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리눅스의 file system&lt;/h3&gt;
&lt;p&gt;리눅스는 기본적인 폴더 구조는 트리형태! &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;가 각각의 directory를 나타낸다. 윈도우에서는 &lt;code class=&quot;language-text&quot;&gt;\&lt;/code&gt; 백슬러시. 디렉토리 구조는 두 가지 형태로 나뉘는데…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시스템 디렉토리
운영체제 관련한 것들이 담김.&lt;/li&gt;
&lt;li&gt;유저 디렉토리
홈 디렉토리를 말한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex) 유저 디렉토리 이동방법 활용쓰&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd /&lt;/code&gt; 입력시 홈 디렉토리로 이동~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt;만 치고 아무 것도 안 치면 홈 디렉토리로 이동!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt;(틸다) 치면 홈디렉토리로 감&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(틸다라는 용어를 알았으니 이제붙턴 물결말고 틸다를 자주 써줘야겠다! 내가 아는 틸다는 틸다스윈튼밖에…☆)&lt;/p&gt;
&lt;h3 id=&quot;경로&quot;&gt;&lt;a href=&quot;#%EA%B2%BD%EB%A1%9C&quot; aria-label=&quot;경로 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;경로&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;절대경로
내 위치랑 상관없이 절대적인 경로. root부터 타고 감.&lt;/li&gt;
&lt;li&gt;상대경로
내 위치에 따라 움직임.
&lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; : 현재 내 위치
&lt;code class=&quot;language-text&quot;&gt;..&lt;/code&gt;: 현재 내 위치보다 더 상위 디렉토리
&lt;code class=&quot;language-text&quot;&gt;./&lt;/code&gt;: 같은 폴더안에 있다!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이거 진짜 왕 중요!! 터미널이나 비주얼 스튜디오에서 진짜진짜 자주 쓴다. 아직 헷갈려서 쳐보면서 확인하는데.. 한번 정리해놨으니 이제는 기억하겠지!&lt;/p&gt;
&lt;p&gt;ex) &lt;code class=&quot;language-text&quot;&gt;cd ./temp&lt;/code&gt;
현재 내가 위치해있는 디렉토리 내부의 temp 디렉토리.&lt;/p&gt;
&lt;h3 id=&quot;설정configs&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%A0%95configs&quot; aria-label=&quot;설정configs permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설정(configs)&lt;/h3&gt;
&lt;p&gt;우리가 코드 치면서 자주 보는 config file… 이건 환경을 설정하다라는 의미의 configure의 줄임말 이였다!
여튼 리눅스에서의 설정은 주로 파일을 통해서 하는데, 크게 시스템 설정과 유저 설정으로 나눠볼 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시스템 설정
-&gt; 어려우니까 다음기회에 정리할 예정쓰!&lt;/li&gt;
&lt;li&gt;유저 설정
-&gt; file에 있는 값들을 바꿔서 설정을 해줌.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;다양한 설정파일들이 있는데… 그 중 제일 중요한건 shell이다! 우리는 보통 설정을 터미널 창을 통해 하게 되는데.. 그렇다면 shell가 terminal은 무슨 차이일까! shell이 회장님, terminal은 비서라고 생각하면 쉬울 것 같다.&lt;/p&gt;
&lt;p&gt;사용자가 terminal에 명령어를 입력하면 그 명령어를 받아서 운영체제에 전달해주고, 운영체제가 그걸 실행시키면 결과값을 다시 전송하는게 바로 shell이 하는 역할이다. 이렇게 shell은 유저와 운영체제간의 중간다리 역할을 한다!!&lt;/p&gt;
&lt;p&gt;shell의 종류도 여러가지가 있는데..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash : 내가 윈도우 시절에 썼던 git bash 같은 애들&lt;/li&gt;
&lt;li&gt;z shell(Zsh) : 요즘 핫한 shell. 터미널을 예쁘게 꾸밀수도 있고, 유용한 명령어가 많아서 생산성을 높일 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shell 설정을 하려면.. 예를 들어 Zsh을 깐다고 생각해보자!
홈 디렉토리에 있지만 우리 눈엔 안 보인다… 착한 사람 눈에만 보인다 ㅎ
zshrc파일은 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;으로 시작되는 숨겨진 파일이라서 &lt;code class=&quot;language-text&quot;&gt;ls -a&lt;/code&gt;라는 명령어를 입력하면 그제서야 볼 수 있다!&lt;/p&gt;
&lt;h2 id=&quot;환경변수path-environment-variable&quot;&gt;&lt;a href=&quot;#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98path-environment-variable&quot; aria-label=&quot;환경변수path environment variable permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;환경변수(path environment variable)&lt;/h2&gt;
&lt;p&gt;환경변수란 linux라는 운영체제의 환경설정값을 저장하고 있는 변수를 말한다.(여기서 환경은 shell을 말한다.) 이렇게 말하면 잘 이해가 가지 않으니 예를 들어보겠다!!!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 우리가 자주 쓰는 이 명령어 cd는 놀랍게도 프로그램이다. 이미 경로설정이 잘 됭있기 때문에 path를 입력하지 않고 cd만 쳐도 실행이 되는것…! 넘나 씐기~
그 밖에도…
&lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mv&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cp&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cat&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;nohup&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;clear&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;chown&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;grep&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;history&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;ps&lt;/code&gt;
path 설정이 잘 되어있는 이러한 명령어들이 있다!&lt;/p&gt;
&lt;p&gt;우리가 프로그램을 새로 설치했을 때 실행이 잘 안 될 경우가 있는데, 그건 바로 path 설정이 제대로 안 되어 있어서이다 ㅠㅠ 나도 이번에 eslint를 설치하느라 고생을 넘 많이 했는데 그게 다 path설정 때문에 발생한 문제였구나…&lt;/p&gt;
&lt;p&gt;환경변수를 설정하는 방법에 대해서는 다음 기회에 저 명령어들과 함께 다룰 예정!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_7일 TIL_웹의 역사와 이것저것쓰]]></title><description><![CDATA[위코드 14일차 위코드 송은우님의 강연을 바탕으로 웹의 역사에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_7_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_7_TIL_js/</guid><pubDate>Sun, 11 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/4abe4cd0-bc28-11e9-891f-a7a04360ad5c/world-13029591920.jpg&quot; alt=&quot;world-1302959_1920.jpg&quot;&gt;
위코드 멘토님 송은우님의 강연을 바탕으로 쓴 포스팅입니다 :)&lt;/p&gt;
&lt;h2 id=&quot;웹서비스&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot;웹서비스 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹서비스&lt;/h2&gt;
&lt;p&gt;그냥 개발공부를 시작하는 것보다는 한번쯤은 짚고 넘어가면 좋을 부분이 바로 웹의 역사! 뭐든 역사와 의미를 알고가면 좀 더 재밌게 공부할 수 있으니깐~!ㅋㅋ&lt;/p&gt;
&lt;p&gt;먼저 인터넷이라는 개념은 1960년대에 처음 나왔는데,군사목적으로 문서를 빨리 빨리 전송하려고 나온것! 그 당시에는 물리적으로 떨어져있는 컴퓨터와 컴퓨터와의 연결을 뜻하는게 바로 인터넷이었음. 지금과는 완전히 다른 개념쓰~
우리와 좀 더 친숙한 의미의 인터넷은 1960년대에 나왔져! World Wide Web. 줄여서 WWW. 10년만에 상용화가 될 정도로 빠른 발전이 있었지요~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c81dcc0-bc2a-11e9-8397-2b5ddb762b18/memory-28824811920.jpg&quot; alt=&quot;memory-2882481_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;저의 초등학교 시절 과제는 이 디스켓과 함께 했었는데.. 지금은 사용하지 않는 비운의 디스켓…☆ 여튼.. 그당시만 해도 CD를 굽는다거나 플로피 디스크에 문서를 저장했었는데, 요즘은 다운로드만 하면 끝! 해외에 기술을 수출하려고 해도 배타고 비행기타고 난리난리 했지만 요즘은 인터넷만 연결하면 되지요. 개이득!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인터넷이 가져온 가장 큰 혁신이 바로 이렇게 공간적인 제약을 없앤 것!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;초창기-web-service-architecture&quot;&gt;&lt;a href=&quot;#%EC%B4%88%EC%B0%BD%EA%B8%B0-web-service-architecture&quot; aria-label=&quot;초창기 web service architecture permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;초창기 Web Service Architecture&lt;/h2&gt;
&lt;p&gt;이걸 짚고 넘어가기 전에, 요즘의 야후와 어린시절의 야후를 비교해보자..!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/77e2f910-bc2b-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/42f18190-bc2b-11e9-877b-2fffbf6a152c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2000년대의 Yahoo는 거의 신문인줄… 야후 꾸러기 들어가서 플래시게임 하고 놀았었는데 그 당시엔 별로 촌스럽다고 생각을 안 했지만 지금 보니 ㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;웹의 발달과 함께 닷컴붐 혹은 닷컴버블현상이 일어났음. 이 당시에 너도 나도 IT사업을 하다 보니 망한곳도 많고 ㅠㅠ 여튼 이 과정 속에서 UI가 중요해졌음! html만으론 한계쓰~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper Text Markup Language
HTML이 뭐의 줄임말인줄은 알았으나 마크업과 마크다운의 차이를 잘 몰랐다. 근데 마크업은 태그를 통해 표시(Mark up)하는 것. 글만 보면 이게 div인지 p인지 몰라.. 어떻게 랜더링해야 하는지 고민쓰..! 근데 내가 쓰고 있는 이 개츠비 블로그는 마크다운 형식이라 ’## 이것은 큰글씨’ 이런식으로 직관적으로 효과를 줘서 딱 알아볼 수 있음!! 제일 앞에 붙은 hyper는 html이 link 위주의 글이라는 걸 알려준다.(하이퍼링크 소곤소곤…)&lt;/li&gt;
&lt;li&gt;Cascading Stytle Sheet
html과 마찬가지로 css로도 로직을 구현할 수 없음. 얘는 그저 꾸며주기만 할 뿐…!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;그래서 우리는 다양한 로직을 구현하기 위해 Javascript가 필요한거다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;네이버 실시간 검색순위를 생각해보자!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7a2a37b0-bc30-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;실검의 네모박스는 한번 랜더링되면 바뀌지 않지만(정적)
실검의 키워드는 실시간으로 바뀌고 있다(동적) 크롬 개발자도구 툴을 이용해보면 우리 눈에 보이지 않는 투명 실검영역이 점차 위로 올라가고 있음을 확인할수 있다~&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;/p&gt;
&lt;h2 id=&quot;왜&quot;&gt;&lt;a href=&quot;#%EC%99%9C&quot; aria-label=&quot;왜 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜&lt;/h2&gt;
&lt;p&gt;다른 언어를 웹사이트에 쓰지 못했을까? 우리가 가진 프로그래밍 언어는 많은데..
못생겨서? 컴파일이 안되서? 전부 아니다. 웹 브라우저가 C언어 같은 애들을 실행하지 못했기 때문에 걔네가 실행할 수 있는 언어가 필요했던 것!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ff9d45e0-bc30-11e9-8397-2b5ddb762b18/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트는 넷스케이프라는 회사의 브렌던 아이크(Brendan Eich)씨가 만들었는데, 넷스케이프는 그당시 최초로 상용화된 웹 브라우저였고 인기도 퍽발! 그럼 왜 자바 스크립트일까? java랑 대체 무슨 관련이 있길래… 사실 직접적인 관련은 없다 ㅎ&lt;/p&gt;
&lt;p&gt;원래 java는 Sun Microsystems라는 회사가 개발했는데 망… 그래서 Oracle이 인수했음!ㅠㅠ java랑 비슷한데 웹적으로, 동적으로 구현할 수 있는 언어를 만들자 그게 javascript인 것! java인데 script 기능이 되는 것이죠~&lt;/p&gt;
&lt;p&gt;이후, java는 applet이라는걸 따로 만듬. 약간 flash 같은거!? 근데 얘는 망한듯.. 약간 무겁다네요&lt;/p&gt;
&lt;h2 id=&quot;2세대-web--동적인-요소가-가미됨&quot;&gt;&lt;a href=&quot;#2%EC%84%B8%EB%8C%80-web--%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%9A%94%EC%86%8C%EA%B0%80-%EA%B0%80%EB%AF%B8%EB%90%A8&quot; aria-label=&quot;2세대 web  동적인 요소가 가미됨 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2세대 Web : 동적인 요소가 가미됨&lt;/h2&gt;
&lt;p&gt;html로 정적인 부분을 구현하고 script 태그에 있는 부분을 랜더링해서 동적이게 만든 것. 하나의 웹서버가 브라우저에 html,js,xml 다 전송쓰~ &lt;/p&gt;
&lt;h2 id=&quot;요즘은-spa-무조건-동적쓰-주객전도쓰&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%A6%98%EC%9D%80-spa-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EB%8F%99%EC%A0%81%EC%93%B0-%EC%A3%BC%EA%B0%9D%EC%A0%84%EB%8F%84%EC%93%B0&quot; aria-label=&quot;요즘은 spa 무조건 동적쓰 주객전도쓰 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요즘은 SPA 무조건 동적쓰! 주객전도쓰~&lt;/h2&gt;
&lt;p&gt;주객전도쓰~ 이제는 html이 아닌 javascript 위주로 돌아간다네~~
=&gt; django 같이 한 서버에서 다 처리하는 애들은 api에 적합하지 않음. 너무 헤비해! 그래서 우리는 Single Page Application을 쓰는데, React가 이 처리를 도와줌.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single Page Application
하나의 페이지로 전체 애플리케이션을 구현할수 있음. html마저도 js를 통해서 생성하는것..! js가 그때그때 필요한 태그들을 생성해버린다…! 예를 들어, file 하나에 html 페이지에서 body태그는 div 하나정도만 잡고, link라는 태그에 js 파일 링크 걸고, 그 본체인 js 에서 다 구현쓰~ 이열! (사실 SPA에 대해선 아직 자세히 알지 못하므로 시간날때 다음번 포스팅에서 자세히 다뤄볼것이다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 과정에서 브라우저는 서버랑 데이터만 주고받으면 되는것이고, 개발자 세계를 생각해보면..&lt;/p&gt;
&lt;h4 id=&quot;uiux를-담당하는-front와-서버-데이터를-담당하는-back의-구분이-명확해짐&quot;&gt;&lt;a href=&quot;#uiux%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-front%EC%99%80-%EC%84%9C%EB%B2%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8B%B4%EB%8B%B9%ED%95%98%EB%8A%94-back%EC%9D%98-%EA%B5%AC%EB%B6%84%EC%9D%B4-%EB%AA%85%ED%99%95%ED%95%B4%EC%A7%90&quot; aria-label=&quot;uiux를 담당하는 front와 서버 데이터를 담당하는 back의 구분이 명확해짐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ui/ux를 담당하는 front와 서버/ 데이터를 담당하는 back의 구분이 명확해짐.&lt;/h4&gt;
&lt;h2 id=&quot;빅데이터가-중요해진-시대&quot;&gt;&lt;a href=&quot;#%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%B4%EC%A7%84-%EC%8B%9C%EB%8C%80&quot; aria-label=&quot;빅데이터가 중요해진 시대 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빅데이터가 중요해진 시대..&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/31eff270-bc38-11e9-a402-4726289e189d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;트위터를 생각해보자. 기능적으론 꽤 구현하기 쉬운 편이다. 그치만 동시에 전세계에서 몇 백만명이 써도 나 혼자 쓰고있는 듯한 속도감이 아주 좋다… 그렇게 만드는게 참 어려운데 대단한 기술이라는 것만 알겠다..! 그래서 페북은 엔지니어가 만명정도 된다고 우와…&lt;/p&gt;
&lt;p&gt;데이터 양이 너무 많아지면 데이터를 여러 서버에 분산시켜서 저장한 담에 분석할 때 각자 독립적으로 하고, 분석결과를 하나로 조합해서 데이터베이스에 넣고.. 여튼 빅데이터가 중요해짐!&lt;/p&gt;
&lt;p&gt;갑분…&lt;/p&gt;
&lt;h2 id=&quot;개발팀-구성&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%8C%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;개발팀 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발팀 구성&lt;/h2&gt;
&lt;p&gt;늘 궁금했던 건데 이번 은우님 강연을 통해서 개발팀에 역할이 어떻게 나누어져 있는지 알게되서 넘나 뿌듯뿌듯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;front
-Product Manager: 어떤 시스템을 만들지 기획. 뭘뭘 먼저 개발할지 순서를 결정하기도 하고, user feedback을 받기도 하고, business와 개발팀의 중간 역할을 함
-designer : ui, ux 디자인
-frontend developer: 말그대로 앞단에서 일하는 개발자. 우리나라는 퍼블리셔라고 html, css 해주는사람 따로 있음&lt;/li&gt;
&lt;li&gt;back
-빽의 앞: api 담당 -&gt; 실검순위가 나오는 테이블은 프론트, 실제 실검 데이터는 빽이 담당. 로그인 페이지 꾸미는게 프론트라면 빽은 프론트가 보내준 아이디와 비번을 가지고 맞으면 맞다 아니면 아니다 반응 해주는 알고리즘을 만든다.
-빽의 뒤 :데이터 수집, 분석, 관리 등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-devops : 빽 개발자가 system infa 관리도 함. aws같은 클라우드 서비스가 발전하면서 하드웨어를 몰라도 시스템 인프라 관리 가능쓰
-sysops : 서버관리쓰. 하드웨어적
-data scientist : 머신러닝, ai 등 데이터 분석 알고리즘과 데이터 분석 모델링 구현
-data engineer : ds 도와서 데이터 모델링 구현해줌
-tester : QA- 직접 메뉴얼 테스팅쓰. sw enginnerr in test/ test automation 자동테스트 시스템 전문 구현&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/js-spa&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/js-spa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_6일 TIL_게임에 class 적용해보기]]></title><description><![CDATA[위코드 13일차 js의 ES6문법인 class를 이용해서 게임을 재구성해보았다! 정말 정말 많은 분들의 도움을 받았다..! 감사합니다!]]></description><link>https://gollumnima.github.io//posts/wecode2_6_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_6_TIL_js/</guid><pubDate>Sat, 10 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/fea3ee60-bc07-11e9-b5c2-e3ccef6334a9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 시간에 class 공부를 마쳐서 class로 구현할 수 있을줄 알았는데 아니였고… 영웅을 화면에 띄우는 것부터 시작해서 동작 구현 등을 같은 기수 광훈님의 도움을 엄청 많이 받았다. 감사합니다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;함수로 쓴 코드와 클래스로 쓴 코드를 먼저 비교해보자!&lt;/p&gt;
&lt;h2 id=&quot;함수로-구현&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;함수로 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수로 구현&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var hero_position = 400
var hero = document.getElementById(&amp;#39;hero&amp;#39;)

function left() {
    hero.style.backgroundPositionX = 70+&amp;#39;px
    //이 부분을 처음에 background-position-x로 써서 오류가 났음
    hero_position -= 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 0일때 멈추게 하는 법
    if(hero_position &amp;lt;= 0) {
        hero_position = 0 
    }
}

function right() {
    hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
    hero_position += 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 764일때 멈추게 하는 법
    if(hero_position &amp;gt;= 762) {
        hero_position = 762
    }
}

function moving(event) {
    if(event.keyCode === 37) {
        left()
    }
    if(event.keyCode === 39) {
        right()
    }
}

window.addEventListener(&amp;#39;keydown&amp;#39;,function(event) {
    moving(event)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;처음에-실수했던-부분&quot;&gt;&lt;a href=&quot;#%EC%B2%98%EC%9D%8C%EC%97%90-%EC%8B%A4%EC%88%98%ED%96%88%EB%8D%98-%EB%B6%80%EB%B6%84&quot; aria-label=&quot;처음에 실수했던 부분 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;처음에 실수했던 부분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;backgroundPositionX를 CSS에서 쓰던 대로 하이픈(-)을 썼다가 오류가 발생. Camel case로 적어보니 그 오류는 해결쓰!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아직 나는 초보자이고, 게임을 구현하는 게 생소하다 보니 이미지를 자르는 데서부터 시간이 굉장히 오래 걸렸는데 함수 자체는 간단쓰!
이게 될까??? 하는 의심으로 쉽사리 식을 써내려가지 못했다 ㅋㅋ &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;기계를 좀 더 믿자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;class로-구현&quot;&gt;&lt;a href=&quot;#class%EB%A1%9C-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;class로 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class로 구현&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Hero {
    // 인스턴스가 생성될때 같이 실행할 프로퍼티들 담기
    constructor(parents) {
        this.parents = parents;
        this.hero = this.create_hero();
        this.hero_position = 400;

        window.onkeydown = this.move_hero.bind(this);
    }
    // 김영웅 등장쓰!
    create_hero() {
        let elhero = document.createElement(&amp;#39;div&amp;#39;);
        elhero.className = &amp;#39;hero&amp;#39;;
        this.parents.appendChild(elhero);
        return elhero;
    }
    move_hero(event) {
        switch(event.keyCode) {
            case 37:
            this.hero.style.backgroundPositionX = 70+&amp;#39;px&amp;#39;
            this.hero_position -= 10;
            this.hero.style.left = this.hero_position +&amp;#39;px&amp;#39;
            if (this.hero_position &amp;lt;= 0 ) {
                this.hero_position = 0;
            }
            break;
            
            case 39:
            this.hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
            this.hero_position += 10;
            this.hero.style.left = this.hero_position +&amp;#39;px&amp;#39;
            if(this.hero_position &amp;gt;= 762) {
               this.hero_position = 762; 
            }
            break;
        }
    }
}

let parentsMainDiv = document.getElementById(&amp;quot;bg&amp;quot;);
let hero = new Hero(parentsMainDiv);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 김영웅씨 파트는 class로 구현했을 때의 메리트를 별로 못 느끼겠다 ㅠㅠ
유령 파트를 class로 구현하면 뭔가 아!! 이거였어? 하는 느낌이 올텐데.. 유령은 동작 구현을 class로 하지 못해서 포기한 상태 ㅠㅠ 월요일날 위코드 멘토 ♥예리님♥께서 봐주실 예정쓰&lt;/p&gt;
&lt;p&gt;글이 너무 많으면 지루해지니깐 위의 식을 그림으로 분석해봤다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1aec0100-bc0a-11e9-b5c2-e3ccef6334a9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class 하단에 배경화면을 불러와서 우리가 부모라고 설정한 다음 김영웅과 연결&lt;/li&gt;
&lt;li&gt;dom에서처럼 document.getElementsbyClassName 를 써서 hero를 불러왔었는데 div부터 새로 만들어야 한다는 사실..&lt;/li&gt;
&lt;li&gt;위에서 생성한 element와 parent를 꼭 &lt;code class=&quot;language-text&quot;&gt;appendChild&lt;/code&gt;로 묶어줘야 한다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appendChild하니까 최근에 꾼 꿈이 생각난다…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/1693adf0-bc0b-11e9-9347-7dd419aba616/train-7970721920.jpg&quot; alt=&quot;train-797072_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;기차역이 배경이었던 꿈.. 도착지까지 캐리어가 4개나 있어서 미리 화물칸에다 부쳤는데 도착하고 나니 나만 못 받았어… 그래서 직원한테 내 짐 어딨냐고 따지니까 appendChild를 안 해줬다고 오히려 나를 꾸짖었다 ㅎ&lt;/p&gt;
&lt;p&gt;appendChild의 중요성을 또 한번 깨닫게 되는 소중한 꿈이었다…☆
다시 본론으로 들어가서…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dbd37a90-bc0c-11e9-b176-a3b978566f4d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event의 target(?)을 설정하는 부분이 제일 헷갈렸다. 이벤트가 걸리는 건 window라고 생각해서 &lt;code class=&quot;language-text&quot;&gt;this.event.keyCode = event.keyCode;&lt;/code&gt;와 같은 식을 constructor에 넣었는데 역시나 안됐다. 함수 switch문에 event.keyCode를 넣으니 해결쓰!&lt;/li&gt;
&lt;li&gt;이벤트에 on땡땡 기능을 넣을땐 bind를 이용해 this와 묶어줘야 함수가 실행이 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;유령부분은.. 랜덤으로 위치가 바뀌는 것 까진 했는데 class로 setInterval과 기타등등을 구현하려니 너무 너무 힘들었다… 포기하기 까지 정말 나름의 고민과 고통을 겪었는데.. 이 또한 지나가면 아무것도 아니겠지!!&lt;/p&gt;
&lt;p&gt;다른 공부를 위해 오늘의 포스팅은 짧게 여기서 끄읕~~&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_5일 TIL_setInterval로 특정행동 초마다 반복시키기]]></title><description><![CDATA[위코드 12일차 js. setInterval함수를 이용해 게임 캐릭터의 행동을 초마다 반복시켜 보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_5_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_5_TIL_js/</guid><pubDate>Fri, 09 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;원래 지난번 썼던 함수식을 class로 변형시킨 것을 써보려고 했지만, 임시저장해 놓은 글이 너무 아까워서 setInterval도 한번 짚고 넘어가겠다~ &lt;/p&gt;
&lt;p&gt;아래서부턴 임시저장했던 글! (사실 별 내용 없다~ setInteval 개념과 내가 실패한 함수식만 있을뿐)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e783ccf0-b969-11e9-880d-9fcc7e1f2b82/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;어제 집 가기까지 만든 화면!
별 거 아닌것 같이 보이지만 여기까지 오느라 너무너무 힘들었다 ㅠㅠㅠ
이제 유령 파트를 구현해야 하는데!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로고침 시 유령 랜덤하게 등장하기&lt;/li&gt;
&lt;li&gt;일정시간이 경과하면 유령 자동으로 떨어지게 하기&lt;/li&gt;
&lt;li&gt;유령이 김영웅과 만나면 피바다! + 으악 bgm 넣기&lt;/li&gt;
&lt;li&gt;피바다가 된 유령을 저 세상으로 보내기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어제 Math.random()을 이용해서 유령이 랜덤하게 등장하게까지는 만들었는데, set Interval이 약간 까다로울듯
한번 해보자!!!!&lt;/p&gt;
&lt;h2 id=&quot;set-interval&quot;&gt;&lt;a href=&quot;#set-interval&quot; aria-label=&quot;set interval permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set Interval&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;setInterval(function, milliseconds, param1, param2, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;첫 번째 인자로 함수가, 두 번째 인자로 시간이 들어가는 이 함수는 지정한 시간마다 함수를 반복해주는 메소드이다. 여기서 주의할 사항! 1000 milliseconds는 1 second와 같다는 점~
그럼 허접한 나의 식을 공개쓰..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var enemy = document.getElementById(&amp;#39;enemy&amp;#39;)
var enemy_position = 400;
var enemy_top = 0;

function live() {
    enemy.style.left = Math.floor(Math.random()*762) + &amp;#39;px&amp;#39;
}

function raining() {
    enemy_top += 30
    enemy.style.top = enemy_top + &amp;#39;px&amp;#39;;
    
    if (enemy_top &amp;gt;= 545) {
        enemy.style.top = 545+&amp;#39;px&amp;#39;
    }
}

let enemy_rain = setInterval(raining, 150)

window.addEventListener(&amp;#39;load&amp;#39;,function(event) {
    live(event)
    enemy_rain // 처음엔 여기에 소괄호 넣었는데 error가 떠서 지워줬다. 괄호를 쳐도 실행은 잘됨
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난번에 김영웅씨를 띄우기 성공하고 나니 유령 부분은 약간 더 쉬워진 느낌적인 느낌?? 굿굿~
live함수에선 유령이 랜덤으로 나타나게 했는데 저렇게 쓰는게 맞는진 모르겠다.. 약간 버벅거리면서 나타나서 맘에 들진 않는다 ㅋㅋ &lt;/p&gt;
&lt;p&gt;raining이라는 함수를 만들어서 유령의 top 위치를 변하게 만들었고, 바닥에 닿으면 더이상 이동 못하게 막아놨다. 더 기능을 넣고 싶은 욕심이 생기지만.. 난 이미 이미지 sprite 하는 부분과 우분투 설치하는 부분에서 시간을 많이 잡아먹었기 때문에 나중에 시간이 날때 보충해볼 생각이다!&lt;/p&gt;
&lt;p&gt;여튼 raining 함수를 setInterval 안에 넣어주고.. 인자를 1000 ms로 설정했더니 너무 느려서 화끈하게 150으로 줄였더니 적당한 빠르기가 나왔다리~ 함수 만든걸 다 load 함수 안에 넣으면 완성! 생각보다 간단쓰~?&lt;/p&gt;
&lt;h2 id=&quot;collision-detection&quot;&gt;&lt;a href=&quot;#collision-detection&quot; aria-label=&quot;collision detection permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collision Detection&lt;/h2&gt;
&lt;p&gt;이 키워드까지 오는데 여러 키워드가 필요했다..ㅎ
영웅이랑 유령이랑 만나면? 닿으면 ? 겹치면? 부딪힌다면? 충돌한다면? 아!!! collision detection!!!!! 좋았어~&lt;/p&gt;
&lt;p&gt;나의 첫 시도. MDN 공식문서에 있는 Axis-Aligned Bounding Box(AABB)를 이용해 코드를 작성해보았다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function blood() {
    let hero_xy = {x: hero.style.backgroundPositionX, y :hero.style.backgroundPositionY, width: 35, height:54}
    let enemy_xy = {x: enemy.style.backgroundPositionX, y: enemy.style.backgroundPositionY, width: 45, height: 54}

    if(hero_xy.x &amp;lt; enemy_xy.x + enemy_xy.width &amp;amp;&amp;amp; hero_xy.x+hero_xy.width &amp;gt; enemy_xy.x &amp;amp;&amp;amp; hero_xy.y &amp;lt; enemy_xy.y + enemy_xy.height &amp;amp;&amp;amp; hero_xy.y + hero_xy.height &amp;gt; enemy_xy.y) {
        enemy.style.backgroundPositionX = 45 + &amp;#39;px&amp;#39;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;놀랍게도 아무일도 일어나지 않았다 ㅎ
유령을 잡아서 피바다를 만들어야 하는데… 죽이기가 너무 힘들다. 생명의 소중함을 다시 한번 깨닫게 되는 시간~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/05d3fae0-b988-11e9-bc02-13036cebe418/image.png&quot; alt=&quot;image.png&quot;&gt;
아무일도 일어나지 않은건 훼이크…! 오타를 발견해서 수정해보니…
유령이 죽은채로 내려온다… 벌써 죽으면 안되는데… 영웅이랑 만나서 죽어야 하는데 또르륵…&lt;/p&gt;
&lt;p&gt;앗..근데 찾아보니 저 방법은 canvas를 썼을 때 쓸 수 있는 방법 같다… &lt;/p&gt;
&lt;p&gt;다시다시… 정석대로 2차 시도! left 값 변화에 따라 함수를 작성해보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function blood() {
    let hl = hero.style.left
    let ht = hero.style.top
    let hw = hero.style.width
    let el = enemy.style.left
    let et = enemy.style.top
    let ew = enemy.style.width

    if ((el &amp;lt; hl-ew) || (hl &amp;lt; el-hw) || (ht-ew &amp;gt; et)) {
        enemy.style.backgroundPositionX = 45+&amp;#39;px&amp;#39;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다시 아무 일도 일어나지 않았다.
아까의 식은 유령이 죽어서 내려오긴 해도 여튼 죽긴 죽는데… 2차 시도때 식은 유령을 죽일수가 없다!&lt;/p&gt;
&lt;p&gt;멘토님의 조언을 받고 class 형태로 다시 식을 써내려가 보기로 했다.
다음번 포스팅에선 클래스의 정의와 새로 구현한 식을 공유할 예정쓰~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어제와 오늘의 결론
너무 조급해 하지 말자. 아주 조금이라도 하던걸 갈아엎게 되었을때 흔들리지 않는 강려크한 멘탈의 소유자가 되자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/met_win_setinterval.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/jsref/met_win_setinterval.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection?source=post_page&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection?source=post_page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_4일 TIL_객체의 생성자, 프로토타입,클래스              ]]></title><description><![CDATA[위코드 11일차 js의 객체 생성자, 프로토타입 상속, 클래스에 대해 알아보았다! 클래스를 충분히 공부했다고 생각했지만 적용하기가 아직도 너무 힘들다!]]></description><link>https://gollumnima.github.io//posts/wecode2_4_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_4_TIL_js/</guid><pubDate>Thu, 08 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/c1b6b2f0-b9c6-11e9-a5b2-7b59e5bd28b3/drink-31699771920.jpg&quot; alt=&quot;drink-3169977_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;커피나 홍차에 설탕이 빠질수 없듯이! 컴퓨터 세상에서도 설탕역할을 하는 달콤한 녀석들이 이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Syntactic sugar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;우리말로 하면 문법적 설탕정도..? 어려운 컴퓨터 세상 언어를 좀 더 달콤하게, 문법적인 거부감 없이 쓸 수 있게 만들어주는 애들을 Syntactic sugar라고 한다.&lt;/p&gt;
&lt;p&gt;오늘 우리가 알아볼 javascript의 class도 이에 속한다고 할 수 있다. 나도 동의한다… 왜냐… 나는 플라시보 효과를 믿거든 ㅜㅜ 지금 class에 대한 개념이 너무너무너무 어려우니까 설탕이라고 생각하고 달게 삼킬란다!&lt;/p&gt;
&lt;p&gt;여튼… 클래스를 알아보기 전에 객체의 상속에 대해 먼저 알아보자!!!!&lt;/p&gt;
&lt;h2 id=&quot;객체의-생성자&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90&quot; aria-label=&quot;객체의 생성자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 생성자&lt;/h2&gt;
&lt;p&gt;ES6문법인 class가 나오기 전에 우리는 객체의 생성자를 통해 메소드를 물려주곤 했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/27a4be70-ba32-11e9-b1d9-437764c6bb4d/image.png&quot; alt=&quot;image.png&quot;&gt;(사진출처 : G마켓 &lt;a href=&quot;http://item.gmarket.co.kr/Item?goodscode=1263969902&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://item.gmarket.co.kr/Item?goodscode=1263969902&lt;/a&gt;) 광고아님ㅋㅋ 이미지가 맘에들었을 뿐 T^T&lt;/p&gt;
&lt;p&gt;세 가지 맛 붕어빵을 만든다고 생각해보자. 객체를 만드는 과정을 세 번 반복할 수도 있지만, 우리는 생성자와 new 연산자를 이용해 좀 더 쉽고, 간단하게 같은 property를 가진 객체들을 만들어낼 수 있다! 요렇게~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Fish_bread(flavour,mix,brand) {
    this.flavour = flavour;
    this.mix = mix;
    this.brand = brand;
}

let redbean =  new Fish_bread(&amp;#39;redbean&amp;#39;,{&amp;#39;whaet&amp;#39;:70, &amp;#39;rice&amp;#39;: 30},&amp;#39;둘둘철강&amp;#39;)
let choco = new Fish_bread(&amp;#39;chocolate&amp;#39;,{&amp;#39;wheat&amp;#39;:80, &amp;#39;rice&amp;#39;:20},&amp;#39;이레철강&amp;#39;)
let creamcheese = new Fish_bread(&amp;#39;creamcheese&amp;#39;, {&amp;#39;wheat&amp;#39;: 65, &amp;#39;rice&amp;#39;:35},&amp;#39;가마니철강&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;생성자(constructor) : 객체를 생성할 수 있는 함수. 여기선 Fish_bread가 생성자! 생성자 안에 &lt;code class=&quot;language-text&quot;&gt;this.property이름&lt;/code&gt;이라는 property를 써서 그 값이 할당된 객체를 만든다. &lt;/li&gt;
&lt;li&gt;new 연산자 : 객체의 생성, 프로토타입 설정, 객체의 초기화 과정을 통해 같은 property를 가진 새로운(new) 객체를 만든다&lt;/li&gt;
&lt;li&gt;인스턴스(instance) : new 연산자로 생성한 객체. 여기서 인스턴스는 redbean, choco, creamcheese이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로토타입-상속&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%83%81%EC%86%8D&quot; aria-label=&quot;프로토타입 상속 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로토타입 상속&lt;/h2&gt;
&lt;p&gt;우리의 자바스크립트는 프로토타입 상속을 기반으로 하는 객체지향언어이다. 여기서 객체지향이란건 객체의 특성 중 하나인 &lt;code class=&quot;language-text&quot;&gt;재사용성&lt;/code&gt;이 좋다는 점을 이용하는건데! 공통적인 요소들을 새롭게 만드는 것이 아닌 부모로 부터 상속 받을 수 있도록 하고, 새로운 요소는 자식에 저장을 하는 것을 말한다.&lt;/p&gt;
&lt;p&gt;이 말이 나는 뭔진 알겠는데 뭔지 모르겠다.. 근데 그러면 그건 걍 모르는거다! 이번 기회에 이게 무슨 뜻인가 생각하면서 정리해보기로 마음 먹었다 ㅠㅠ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ab1297b0-ba3b-11e9-877c-59b9c3aec7b8/dna-18890851920.jpg&quot; alt=&quot;dna-1889085_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;DNA를 통해 유전정보를 상속받는 인간처럼 객체 또한 부모객체로부터 상속을 받을 수 있다. Java와 같은 객체지향 언어에서는 class를 통해 상속이 이루어진다는데, 자바스크립트에선 생성자(constructor)를 통해 상속쓰~ ES6문법에서 클래스라는 개념이 등장했지만, 우리의 js는 굳건히 프로토타입 상속을 기반으로 한다.&lt;/p&gt;
&lt;p&gt;여튼.. ES6 클래스가 나오면서 좀 더 이 개념이 쉬워졌다는데(정말?) 일단 기존의 프로토타입 상속에 대해서 먼저 살펴보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let macaron_1 = {
    name : &amp;#39;salted caramel&amp;#39;,
    introduce : function() {
        return `This is ${this.name} macaron`
    }
}

let macaron_2 = {
    name : &amp;#39;mint chocolate&amp;#39;
}

macaron_2.__proto__ = macaron_1
console.log(macaron_2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;macaron&lt;em&gt;2의 콘솔을 찍어보면 macaron&lt;/em&gt;1에서 초기화 된 객체의 틀을 이어받아서 &lt;code class=&quot;language-text&quot;&gt;{name: &amp;quot;mint chocolate&amp;quot;}&lt;/code&gt;라는 결과값이 나오게 된다. introduce라는 값은 상속을 받긴 했지만 콘솔엔 macaron_2만 찍었기 때문에 안 나온다. &lt;/p&gt;
&lt;p&gt;다시 콘솔창에 macaron_2.introduce()를 찍어보면 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;This is mint chocolate macaron&amp;quot;&lt;/code&gt;라는 값이 나오게 된다. &lt;/p&gt;
&lt;p&gt;이번에는 macaron_2의 유전정보를 파헤쳐보자!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8cc9c780-ba43-11e9-92c6-e18f3f433915/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt; 부분을 살펴보면 macaron&lt;em&gt;1 객체에 저장되어 있던 정보들을 확인해 볼 수 있다. `&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;macaron&lt;/em&gt;2.introduce()`&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;의 결과값이 나오는 과정을 좀 더 자세히 알아보자면..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;macaron_2에서 introduce()라는 프로퍼티를 가지고 있는지 확인해본다.&lt;/li&gt;
&lt;li&gt;macaron&lt;em&gt;2에 없으니까 얘의 조상님인 macaron&lt;/em&gt;1으로 거슬러 올라간다.&lt;/li&gt;
&lt;li&gt;macaron_1에 introduce()가 있네? 이제 그걸 사용한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 식으로 자기가 가지고 있지 않은 프로퍼티를 &lt;code class=&quot;language-text&quot;&gt;__proto__&lt;/code&gt;정보를 보며 거슬러 올라가는 것을 프로토타입 체인이라고 한다. 우리는 객체의 연결고리를 통해 원하는 정보를 효율적으로 저장할 수 있다. 이러한 과정을 거쳐 프로토타입 상속을 객체지향 언어가 바로 우리의 친구, 자바스크립트!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Macaron_1(amount,price) {
    this.amount = amount;
    this.price = price;
}

Macaron_1.prototype.total = function() {
    return this.amount*this.price
}

let m2 = new Macaron_1(2,2500)
console.log(m2.total()) // 5000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반적으로 객체 생성하는 방식으로 객체를 만들어 보았다. 이걸 클래스로 바꾸어보자!&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;class&lt;/h2&gt;
&lt;p&gt;객체를 찍어내는 일종의 함수를 클래스라고 말한다. 사실 MDN을 봐도 class가 딱히 뭐다! 하고 시원하게 정의내려주진 않는다.. 내가 난독증이라 못 찾는건가 ㅠㅠ 그냥 super나 constructor 같은 클래스 멤버들을 쓰기 위한 틀 정도로 이해하면 될까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Macaron_1 {
    constructor(amount, price) {
        this.amount = amount;
        this.price = price;
    }
    total() {
        return this.amount*this.price;
    }
}

let m2 = new Macaron_1(2,2500)
console.log(m2.total())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여튼 위에서 만든 식을 이렇게 클래스로 다시 만들어도 결과값은 동일하다! 각각의 구성에 대해 자세히 살펴보자&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/ac2b3800-ba59-11e9-a094-599e2759e54d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다음 파트로 넘어가기 전, 호이스팅에 대해 잠깐 짚고 넘어가보자&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;함수 선언문으로 정의한 생성자는 호이스팅이 되지만, 함수 표현식, 클래스 선언문, 클래스 표현식으로 정의한 애들은 호이스팅이 되지 않는다. 이 점을 주의해야 할 것 같다. 시간 관계상 식을 따로 만들기보단, 모던 자바스크립트 입문 도서에 있는 재미없는 식을 콘솔창에 찍어 비교해봤다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/8c2ba200-ba5f-11e9-9608-a1894510510f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;사실 클래스에선 호이스팅이 일어날수도 있다! 우리 눈에 안 보일뿐… 여튼 콘솔창에 찍으면 웹 브라우저에선 에러가 나는데.. 브라우저 문제 일수도?! 여튼.. 에러가 나니까 일단은 쓰지 말자!&lt;/p&gt;
&lt;h2 id=&quot;class-멤버--constructor-extends-super&quot;&gt;&lt;a href=&quot;#class-%EB%A9%A4%EB%B2%84--constructor-extends-super&quot; aria-label=&quot;class 멤버  constructor extends super permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;class 멤버 : constructor, extends, super&lt;/h2&gt;
&lt;p&gt;클래스 멤버들을 살펴보기 전에 식을 하나 띄울거다. Anurag Majumdar님이 쓴 포스팅을 보면서 공부해봤다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Food {
  constructor(name, country) {
    this.name = name;
    this.country = country;
  }
  yum() {
    return `${this.name} is JMT.`
  }
  spicy() {
    return `${this.name} is spicy.`
  }
  available() {
    return `${this.name} is available now.`
  }
}

class Chicken extends Food {
  constructor(name, country) {
    super(name, country);
  }
  favorite() {
    return `${this.name} is one of my favorites.`
  }
  hanNyibMan() {
    return `Can I try this ${this.name}?`
  }
  friends() {
    return `${super.yum()} ${this.hanNyibMan()}`
  }
}

function display(content) {
  console.log(content)
}

const chicken = new Chicken(&amp;#39;twotwochicken&amp;#39;, &amp;#39;Korea&amp;#39;)
display(chicken.favorite())
display(chicken.friends())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;constructor : 맨 처음에 객체의 생성자 파트에서 나왔던 그 친구, 맞다. 우리말로 하면 생성자 함수. function 역할을 대신해서 객체가 생성될 때 그 객체의 초기상태를 세팅하는 것! 객체가 만들어지기 직전에 실행되도록 약속된거라고 한다.. 말이 너무 어렵다. 걍 함수메이커라고 보자! 근데 1클래스당 1생성자다. 2개 이상 만든다면 Syntax Error가 생길 것!&lt;/li&gt;
&lt;li&gt;extends : 부모 클래스와 자식 클래스를 연결해주는 ↘연↗결↘고↗리↗ 역할쓰&lt;/li&gt;
&lt;li&gt;super : 부모클래스의 constructor를 호출하기 위해 필요한 애. 때론 객체로, 때론 함수로 쓰인다. 함수로 쓰일 땐, 자식 클래스에 부모 클래스가 가진 함수를 불러준다. 객체처럼 쓰일 땐,  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;글이 너무 길어 지는거 같기도 하고, 좀 더 알아보기 쉽게 하기 위해 위의 식을 그림으로 나타내보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a29cbc40-bbe0-11e9-87e8-a3e7a5dae513/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;클래스가 더 간편한 거라고 했는데 너무 복잡하게 생겼는데요?? 라고 할 수도 있다. 구버전으로도 한번 써 보자!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Food.prototype.yum = function() {
    return `${this.name} is JMT`
}

function Chicken(name, country) {
    Food.call(this, name, country)
}

Chicken.prototype = Object.create(Food.prototype)
Chicken.prototype.constructor Chicken&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 푸드의 프로토타입은 이거고 저거고..기타 등등을 다 짚고 넘어가야 한다. 개발자들은 이런 길고 비효율적인 식을 싫어하기 때문에 클래스라는 신기술을 만들었겠쥐?ㅋㅋ&lt;/p&gt;
&lt;p&gt;포스팅이 참 길어졌는데… 클래스에 대해서 파보려면 한도 끝도 없을 것 같아서 일단 여기서 멈추려고 한다리 ㅠㅠ
내용은 계속 추가하거나 미래의 포스팅 목록에 작성을 해봐야겠다.. 클래스를 공부하면서 깨달은 점이 있다면&lt;/p&gt;
&lt;h4 id=&quot;아무리-피해보려고-해도-class는-도저히-못-피한다-프론트를-가도-빽을-가도-class를-이해하지-못하면-아무것도-할-수-없다-꾸준히-공부하는-수밖에&quot;&gt;&lt;a href=&quot;#%EC%95%84%EB%AC%B4%EB%A6%AC-%ED%94%BC%ED%95%B4%EB%B3%B4%EB%A0%A4%EA%B3%A0-%ED%95%B4%EB%8F%84-class%EB%8A%94-%EB%8F%84%EC%A0%80%ED%9E%88-%EB%AA%BB-%ED%94%BC%ED%95%9C%EB%8B%A4-%ED%94%84%EB%A1%A0%ED%8A%B8%EB%A5%BC-%EA%B0%80%EB%8F%84-%EB%B9%BD%EC%9D%84-%EA%B0%80%EB%8F%84-class%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%98%EB%A9%B4-%EC%95%84%EB%AC%B4%EA%B2%83%EB%8F%84-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4-%EA%BE%B8%EC%A4%80%ED%9E%88-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-%EC%88%98%EB%B0%96%EC%97%90&quot; aria-label=&quot;아무리 피해보려고 해도 class는 도저히 못 피한다 프론트를 가도 빽을 가도 class를 이해하지 못하면 아무것도 할 수 없다 꾸준히 공부하는 수밖에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아무리 피해보려고 해도 class는 도저히 못 피한다. 프론트를 가도, 빽을 가도, class를 이해하지 못하면 아무것도 할 수 없다. 꾸준히 공부하는 수밖에..!&lt;/h4&gt;
&lt;p&gt; 일단 실전연습이 중요한 것 같아서 지난번에 만들었던 게임함수를 class로 다시 구현해보려고 한다. 빨리 게임을 끝내고 python 공부로 넘어가고 싶다 ㅠㅠ&lt;/p&gt;
&lt;p&gt; 다음번에 객체지향에 대해서 좀 더 심도있게 정리해보고 싶기도 하다~ 파면 팔수록 재밌는 개발세계~♬&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opentutorials.org/module/4047/24614&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://opentutorials.org/module/4047/24614&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/es6-class&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/es6-class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;도서 - 모던자바스크립트 입문&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_3일 TIL_게임에서 keyevent로 캐릭터 이동하기]]></title><description><![CDATA[위코드 10일차 js. 자바스크립트로 게임만들기를 시작하기 중 키보드 이벤트를 넣어보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_3_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_3_TIL_js/</guid><pubDate>Wed, 07 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;지난번에 캐릭터를 자르는데까지 정말 오랜 시간이 걸렸다. 이제 key event를 넣어서 좌우로 이동할 수 있도록 식을 만드는 시간쓰~&lt;/p&gt;
&lt;h2 id=&quot;key-code-number-알아내기&quot;&gt;&lt;a href=&quot;#key-code-number-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0&quot; aria-label=&quot;key code number 알아내기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key code Number 알아내기&lt;/h2&gt;
&lt;p&gt;캐릭터를 좌우로 이동하려면 좌키, 우키 각각에 해당하는 숫자를 알아내서 각각의 값에 이벤트를 걸어줘야 한다.
&lt;a href=&quot;https://keycode.info&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://keycode.info&lt;/a&gt; 키 값은 여기 들어가면 원하는 키를 눌러보면 쉽게 알아낼 수 있다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/59da6c40-b8bc-11e9-b8f8-7d296a837f8b/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/752cbf20-b8bc-11e9-b06a-a38d4a6f85a7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이로써 좌키의 keycode는 37, 우키의 keycode는 39라는걸 알게되었다리~
이제 addEventlistener를 작성해보자.&lt;/p&gt;
&lt;h2 id=&quot;key-event의-종류&quot;&gt;&lt;a href=&quot;#key-event%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;key event의 종류 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key event의 종류&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;keydown : 사용자가 키보드를 누르는 순간 발생&lt;/li&gt;
&lt;li&gt;keyup : 사용자가 키보드에서 손을 떼는 순간 발생&lt;/li&gt;
&lt;li&gt;keypress : 사용자가 키보드를 누르고 있을 때 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;keydown 이벤트를 적용하면 우리가 좌키, 우키를 누를 때마다 이벤트가 발생하게 된다.
keypress 이벤트랑은 무슨 차이가 있을지 한번 직접 써보면서 비교를 해보려고 했는데 안 먹힌다 ㅎ 이럴때 쓰라고 있는 함수가 아닌가보다~~~&lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;적용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;나의 첫번째 시도&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function left() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.left= parseInt(hero.style.left-1)+&amp;#39;px&amp;#39;
}

function right() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.right= parseInt(hero.style.left+1)+&amp;#39;px&amp;#39;
}

function moving(event) {
    if(event.keyCode === 37) {
        left()
    }
    if (event.keyCode === 39) {
        right()
    }
}

window.addEventListener(&amp;#39;keydown&amp;#39;,function(event) {
    moving(event)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 왼쪽으로 너무 확 간다.. 오른쪽으론 가지도 않는다.
아무래도  function left와 right가 잘못 된 것 같아서 다시 한번 작성해보았다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나의 두번째 시도&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var hero_position = 400

function left() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.backgroundPositionX = 70+&amp;#39;px&amp;#39;
    hero_position -= 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 0일때 멈추게 하는 법
    if(hero_position &amp;lt;= 0) {
        hero_position = 0 
    }
}

function right() {
    let hero = document.getElementById(&amp;#39;hero&amp;#39;)
    hero.style.backgroundPositionX = 35+&amp;#39;px&amp;#39;
    hero_position += 10
    hero.style.left = hero_position + &amp;#39;px&amp;#39;
    //hero의 포지션이 764일때 멈추게 하는 법
    if(hero_position &amp;gt;= 764) {
        hero_position = 764
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 backgroundPositionX를 CSS에 나와있는 대로 background-position-x 라고 썼다가 오류가 났다. 찾아보니 Camel case로 써야 하는것 같아서 바꿔보니 캐릭터 도리도리는 성공!&lt;/p&gt;
&lt;p&gt;position도 생각처럼 쉬운 문제는 아니였는데…
처음엔 아예 left에다가 직접 숫자를 더하고 뺐다가 아닌것 같아서 &lt;code class=&quot;language-text&quot;&gt;hero_position&lt;/code&gt;이라는 변수를 하나 만들어서 적용했더니 성공!
이동하는걸 성공하고 나니 경계선에 도달했을 때 더이상 못 움직이게 하는 로직은 쉬웠다. 그냥 특정한 숫자에 도달했을 때 고정된 값을 주면 되는거였다!!!!&lt;/p&gt;
&lt;p&gt;하지만 진정한 고통은 class를 공부하면서 왔는데… 다음타자는 클래스인가 두둥!!!!&lt;/p&gt;
&lt;h3 id=&quot;to-be-continued&quot;&gt;&lt;a href=&quot;#to-be-continued&quot; aria-label=&quot;to be continued permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To be continued…&lt;/h3&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;h4 id=&quot;key-eventbr&quot;&gt;&lt;a href=&quot;#key-eventbr&quot; aria-label=&quot;key eventbr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key event&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://keycode.info&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://keycode.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/event_onkeypress.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/jsref/event_onkeypress.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8ZPlNOzLrdw&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=8ZPlNOzLrdw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vbnjxXCq5HQ&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=vbnjxXCq5HQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_2일 TIL_CSS와 js로 이미지자르기(feat. Sprites) ]]></title><description><![CDATA[위코드 9일차... css라 해야할지 js라 해야할지 조금 애매한데, 주 내용은 css로 이미지를 자르는거라서 css에 넣기로 마음먹음. 쪼꼼 고생했던 부분이었다! 하지만 이후 더 고생을 하게 되는데....☆]]></description><link>https://gollumnima.github.io//posts/wecode2_2_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_2_TIL_css/</guid><pubDate>Tue, 06 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/033ac490-b8e7-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;스프라잇 샤워가 아닌 답답함과 고통만 가득이였던 sprites..
찾아본 sprites는 쪽화면이라는 뜻이었다. 업계에선 많이 쓰이는 용어같은데 나만 몰랐어~&lt;/p&gt;
&lt;p&gt;그리하여 시작된 나의 힘겨운 여정쓰…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 시도 : p5 library를 이용해 json 파일로 이미지 쪼개기 (p5 알못이라 실패)&lt;/li&gt;
&lt;li&gt;2차시도 : canvas로 이미지 자르기 성공! but 함수 넣기 힘들어서 결국 포기&lt;/li&gt;
&lt;li&gt;3차시도 : 멘붕상태에서 결국 help 요청해 css로 이미지 자르기 성공!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이걸로 꼭 해봐야겠어!! 하고 마음 먹었다가 계속 안되고, 실패하고 갈아엎다보니 멘탈이 탈탈 털리는 하루였다. 앞으로 프로젝트 들어가면 이런 일들이 많아질텐데.. 지금 이 사소한 이미지 자르는 것에서부터 집착을 했으니 정말 ㅠㅠ 멘탈 관리를 잘 해야 할 것 같다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;css-imgae-sprites&quot;&gt;&lt;a href=&quot;#css-imgae-sprites&quot; aria-label=&quot;css imgae sprites permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS Imgae Sprites&lt;/h2&gt;
&lt;p&gt;sprites라고 검색하면 사실 내용이 잘 나오지 않는다.. 죄다 캔버스를 이용하거나 sprite.js 였나 외부 프로그램을 쓰는 것밖에 안 나온다. W3 school에 나오는 글도 잘 이해가 되지 않아서 3기 동기 가마니쓰의  도움을 받았다 ㅠㅠ 동기사랑은 나라사랑~~♬&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;background: url(이미지 경로) 0 0;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;CSS 속성에 background 라는 attribute을 적고, image 경로와 좌표값(left, top)을 찍어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#hero{
    background: url(&amp;#39;./images/hero.png&amp;#39;); 
    background-position-x: 140px;
    position: absolute;
    width: 35px;
    height: 54px;
    left : 400px;
    top : 545px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hero라는 id에 위와 같은 값들을 넣어주면…
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/dd42f5e0-b8e7-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;뙇! 이미지가 이렇게 뜬다.
지금 배경 위에 김영웅씨 이미지가 올라가 있지만.. 원래는 네 장짜리 그림이다. 이렇게!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5fe88c30-b8e8-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;근데 아무리 좌표값을 찍어봐도 도저히 이해가 가지 않았다… 왼쪽부터 아닌가.. 이상한데
그래서 또다시! 동기인 아기호랑이님의 도움을 받았다 ㅜㅜ 사고회로가 정지했다…사ㄹ…려ㅜ줘… baby Tiger 최고 ♥&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5f1a69f0-b8ec-11e9-92f9-591ee0f49222/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;저 네모네모한 그림을 원기둥모양으로 돌돌 말았다고 생각해보자
그러면 저 좌표가 찍히는 원리가 이해가 얼추 간다.
나는 왼쪽부터 숫자를 세어야 한다고 생각 했는데 그 반대였다..! 와우…!&lt;/p&gt;
&lt;p&gt;여튼… 저 상태에서 left값과 bottom값을 추가해서 김영웅씨의 로딩 위치를 정해주면 된다.
영웅쓰를 중간에 띄웠으므로 인제 키보드 이벤트를 추가해줘야 한다&lt;/p&gt;
&lt;p&gt;하루종일 이거 붙잡고 있으면서 블로그에 내용 정리하느라 시간을 굉장히 많이 썼는데.. 집 갈쯤 되니까 해결이 되긴 됐다! 물론 여러 사람들의 도움이 있긴 했지만.. 여튼 해냈다.. 기분이 조금 나아졌다!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;원래는 여기까지지만! 여태까지 정리한 캔버스에 대한 내용이 너무 아까우니깐 canvas에 대해 내용도 남긴다 ㅜㅜ&lt;/p&gt;
&lt;h2 id=&quot;canvas-와--drawimage&quot;&gt;&lt;a href=&quot;#canvas-%EC%99%80--drawimage&quot; aria-label=&quot;canvas 와  drawimage permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Canvas 와  drawImage()&lt;/h2&gt;
&lt;p&gt;지난번 포스팅에서 살펴봤던 것처럼 캔버스는 html 태그이고, 이미지를 불러온다.
설명이 부실했던 것 같아서 다시 써보자면!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/de9e4950-b8a9-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;canvas 자체로는 그냥 빈 캔버스를 생각하면 될것 같다! canvas 태그를 html에 추가해도 아무 일도 일어나지 않는다. 그냥 빈 종이기 때문쓰.. 여기다가 getContext 함수를 이용해서 context를 랜더링 해줘야지 화면에 무언가를 그려낼 수 있다. 이 순서가 맞는지 모르겠지만 나는 일단 이렇게 했다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;html&lt;br&gt;
-html에 canvas 태그를 심는다 끝!&lt;br&gt;
-js로 넘어가시오&lt;/li&gt;
&lt;li&gt;js&lt;br&gt;
-new Image 메소드로 파일의 사진을 불러오고 src로 이미지 파일 경로 연결쓰&lt;br&gt;
-불러온 이미지를 화면에 띄울 수 있게 onload 함수를 만들고, 아래에 작성할 init함수를 그 안에 연결&lt;br&gt;
-Elementby뭐시기(Class 혹은 Id)로 html에 심어놓은 canvas태그를 DOM으로 불러와 canvas라는 변수에 대입&lt;br&gt;
-ctx라는 변수에 2d이미지를 불러올 수 있도록 getContext메소드 쓰기&lt;br&gt;
-init함수 안에 drawImage메소드를 이용해 캔버스에 심어놓은 이미지 불러오기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 ctx가 무슨뜻일까 정말정말정말 궁금했는데 별거 아니였다! CTO도 KTX도 아닌, context의 줄임말이였다 ㅎ…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let hero = new Image()
hero.src = &amp;#39;./images/hero.png&amp;#39;;
window.onload = function() {
    init()  
}

let canvas = document.getElementById(&amp;#39;hero&amp;#39;)
let ctx = canvas.getContext(&amp;#39;2d&amp;#39;)

function init() {
  ctx.drawImage(hero,0,0,35,54,0,0,35,54) // 앞모습
// ctx.drawImage(hero,35,0,35,54,0,0,35,54) // 뒷모습
//  ctx.drawImage(hero,70,0,35,54,0,0,35,54) // 왼쪽모습
// ctx.drawImage(hero,105,0,35,54,0,0,35,54) // 오른쪽모습
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/02af7980-b8b0-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;
김영웅씨는 앞뒤왼오 모습이 4개나 되서 하나씩 잘라주기 위해 drawImage 좌표값을 각각 다르게 줘서 잘라봤다.
일단 앞모습을 제외하고 다 주석처리 해놨는데 김영웅씨를 움직일 때 각각의 모습을 살려야 할 것 같다&lt;/p&gt;
&lt;p&gt;drawImage의 인자들을 살펴보자면… 요소가 많아도 너무 많다.. 그래서 넘넘 헷갈려서 나도 다 찍어보면서 확인했다 ㅠㅠ
&lt;code class=&quot;language-text&quot;&gt;context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;왼쪽부터-순서대로-이미지-자르는-기준점의-x축-자르는-기준점의-y축-자르려는-이미지가-기준점의-x축으로부터-얼마나-떨어져-있는가-자르려는-이미지가-기준점의-y축으로-얼마나-떨어져있는가-이미지를-띄울-위치의-x축-이미지를-띄울-위치의-y축-이미지의-가로길이-이미지의-세로길이&quot;&gt;&lt;a href=&quot;#%EC%99%BC%EC%AA%BD%EB%B6%80%ED%84%B0-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%9E%90%EB%A5%B4%EB%8A%94-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-x%EC%B6%95-%EC%9E%90%EB%A5%B4%EB%8A%94-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-y%EC%B6%95-%EC%9E%90%EB%A5%B4%EB%A0%A4%EB%8A%94-%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B0%80-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-x%EC%B6%95%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EC%96%BC%EB%A7%88%EB%82%98-%EB%96%A8%EC%96%B4%EC%A0%B8-%EC%9E%88%EB%8A%94%EA%B0%80-%EC%9E%90%EB%A5%B4%EB%A0%A4%EB%8A%94-%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B0%80-%EA%B8%B0%EC%A4%80%EC%A0%90%EC%9D%98-y%EC%B6%95%EC%9C%BC%EB%A1%9C-%EC%96%BC%EB%A7%88%EB%82%98-%EB%96%A8%EC%96%B4%EC%A0%B8%EC%9E%88%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B8-%EC%9C%84%EC%B9%98%EC%9D%98-x%EC%B6%95-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%9D%84%EC%9A%B8-%EC%9C%84%EC%B9%98%EC%9D%98-y%EC%B6%95-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-%EA%B0%80%EB%A1%9C%EA%B8%B8%EC%9D%B4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-%EC%84%B8%EB%A1%9C%EA%B8%B8%EC%9D%B4&quot; aria-label=&quot;왼쪽부터 순서대로 이미지 자르는 기준점의 x축 자르는 기준점의 y축 자르려는 이미지가 기준점의 x축으로부터 얼마나 떨어져 있는가 자르려는 이미지가 기준점의 y축으로 얼마나 떨어져있는가 이미지를 띄울 위치의 x축 이미지를 띄울 위치의 y축 이미지의 가로길이 이미지의 세로길이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왼쪽부터 순서대로.. 이미지, 자르는 기준점의 x축, 자르는 기준점의 y축, 자르려는 이미지가 기준점의 x축으로부터 얼마나 떨어져 있는가, 자르려는 이미지가 기준점의 y축으로 얼마나 떨어져있는가, 이미지를 띄울 위치의 x축, 이미지를 띄울 위치의 y축, 이미지의 가로길이, 이미지의 세로길이&lt;/h4&gt;
&lt;p&gt;글로 써보고 종이에 직접 좌표를 찍어보니까 이제야 이해가 간다! 뿌듯뿌듯~
그림으로 보면 더 이해가 쉽지요~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a310f660-b8b5-11e9-a09e-d5a04df51cf9/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;나는 김영웅씨를 게임 화면의 중앙에 띄워야 하기 때문에 이미지를 띄울 위치의 x축과 y축을 다시 설정했다!
처음엔 무작정 CSS로 띄울 생각을 했는데 어쩐지 안 먹힌다더라니.. drawImage에 값을 줘야했군!!!
근데 문제가 생겼다… 김영웅씨의 전체길이보다 더 큰 값의 숫자를 입력하면 화면에 출력이 되지 않는다…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해결책1: html로 돌아가서 canvas에 배경과 동일한 width와 height 값을 주었다
해결책2 : ctx.drawImage에 이미지를 띄우고 싶은 위치의 좌표값을 설정한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ctx.drawImage(hero,0,0,35,54,400,545,35,54)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;800*600의 이미지라 처음엔 400, 600의 값을 주었지만, y축을 캐릭터가 벗어나기 때문에 화면에 나타나지 않았다. 그래서 y축에는 적당히 600보다 작은 값인 545의 값을 줬다. 그 결과…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d75891f0-b8b8-11e9-b06a-a38d4a6f85a7/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;드디어 김영웅씨 센터로 진출 성공~ 센터의 주인공은 ↖나야나~ 나야나↗
이제 김영웅씨가 움직일 수 있도록 key event를 줘야하는데 그것은 다음 시간에 다시~~♬&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;h4 id=&quot;spritebr&quot;&gt;&lt;a href=&quot;#spritebr&quot; aria-label=&quot;spritebr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sprite&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_image_sprites.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/css/css_image_sprites.asp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;canvasbr&quot;&gt;&lt;a href=&quot;#canvasbr&quot; aria-label=&quot;canvasbr permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;canvas&lt;br&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3resource.com/html5-canvas/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3resource.com/html5-canvas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/tags/canvas_drawimage.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/tags/canvas_drawimage.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 2주차_1일 TIL_자바스크립트로 Image 불러오기]]></title><description><![CDATA[위코드 8일차 js. 자바스크립트로 본격 게임만들기를 시작하기 전에 먼저 image를 불러오는 방법에 대해 알아보았다!]]></description><link>https://gollumnima.github.io//posts/wecode2_1_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode2_1_TIL_js/</guid><pubDate>Mon, 05 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;이날은 우분투와 고군분투를 하느라 사실 별로 한 게 없다 ㅠㅠ 윈도우를 포맷하고, 파티션을 우분투한테 좀 나눠주고… 우분투 설치하고… 적응하고..또르륵..&lt;/p&gt;
&lt;p&gt;여튼…! 이번 포스팅은 굉장히 짧다. 어쩔수없다~ 다음 번 포스팅은 좀 더 알찬 내용을 업데이트 할것이다!&lt;/p&gt;
&lt;h4 id=&quot;게임만들기-미션-목록-두둥&quot;&gt;&lt;a href=&quot;#%EA%B2%8C%EC%9E%84%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%AF%B8%EC%85%98-%EB%AA%A9%EB%A1%9D-%EB%91%90%EB%91%A5&quot; aria-label=&quot;게임만들기 미션 목록 두둥 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;게임만들기 미션 목록 두둥!&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;바탕화면 깔기&lt;/li&gt;
&lt;li&gt;히어로를 가운데서시작하도록&lt;/li&gt;
&lt;li&gt;키이벤트 -&gt; 좌우 누를때 히어로 움직이게&lt;/li&gt;
&lt;li&gt;바탕화면 끝 도달하면 더이상 움직이지 않도록&lt;/li&gt;
&lt;li&gt;아래는 아마 추가미션?&lt;/li&gt;
&lt;li&gt;귀신 하늘에서 시작하도록&lt;/li&gt;
&lt;li&gt;랜덤한 x의 위치에서 나와야죠&lt;/li&gt;
&lt;li&gt;setinterval로 귀신 시작한 위치에서 y를 아래로 내려주시면 됩니다&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;html--canvas&quot;&gt;&lt;a href=&quot;#html--canvas&quot; aria-label=&quot;html  canvas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;html : canvas&lt;/h2&gt;
&lt;p&gt;canvas는 js로 그래픽을 그려주는 html 요소.
html파일을 살펴보면 canvas는 width와 height 두 가지 속성만 가지고 있다! 이렇게 뙇~
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;canvas id=&amp;quot;canvasBg&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;
(처음에 속성을 정의해주지 않으면 기본 사이즈는 300*150 이라고 한다~)&lt;/p&gt;
&lt;p&gt;캔버스 부분은 쪼꼼 복잡해서 게임 만들기 과제에선 이미 양식이 주어졌다!
내가 첫번째로 미션은 캔버스의 이미지를 불러오는 것..!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;bgImg.src = &amp;quot;images/bg.png&amp;quot;;
let bgImg = new Image();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본 설정 js 파일을 살펴보면 bgImg의 파일을 src로 불러오고, 선언자를 이용해 new Image() 함수를 불러왔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function init() {
  //canvas에 배경이미지 그려주기
  ctxBg.drawImage(bgImg, 0, 0, canvasWidth, canvasHeight, 0, 0, canvasWidth, canvasHeight);

  initEnemies();

  //매 frame 마다 사용할 함수를 호출합니다.
  requestAnimFrame(loop);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수에 이벤트를 연결해서 이미지를 띄우는게 첫번째 미션!
아직 이벤트 부분이 약해서.. 여러 번의 시도 끝에 성공쓰!&lt;/p&gt;
&lt;h4 id=&quot;canvas와-js-이벤트를-이어주기-위해선-순서가-중요하다&quot;&gt;&lt;a href=&quot;#canvas%EC%99%80-js-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%96%B4%EC%A3%BC%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%A0-%EC%88%9C%EC%84%9C%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4&quot; aria-label=&quot;canvas와 js 이벤트를 이어주기 위해선 순서가 중요하다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;canvas와 js 이벤트를 이어주기 위해선 순서가 중요하다.&lt;/h4&gt;
&lt;p&gt;Note: You cannot call the drawImage() method before the image has loaded. To ensure that the image has been loaded, you can call drawImage() from window.onload() or from document.getElementById(“imageID”).onload.&lt;/p&gt;
&lt;p&gt;그리하여 시작된 이상한 시도들..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;window.onload = init()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 사람들이 하는 방식대로 해봤는데.. 저건 익명함수가 아니라서 저 방식은 안되고…!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;document.addeventlistener(&apos;load&apos;,init)&quot;&gt;&lt;pre class=&quot;language-document.addeventlistener(&apos;load&apos;,init)&quot;&gt;&lt;code class=&quot;language-document.addeventlistener(&apos;load&apos;,init)&quot;&gt;document.addEventListener(&amp;#39;DOMcontentLoaded&amp;#39;, init())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;event가 걸리는 대상은 캔버스 이미지이지만, 엉뚱하게 document를 소환했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3차시도&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;bgImg.addEventListener(&amp;#39;load&amp;#39;, init)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;드디어 성공쓰!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/5bb02480-b739-11e9-afc8-cf4bab9879b8/%EA%B2%8C%EC%9E%84%EA%B2%8C%EC%9E%84.PNG&quot; alt=&quot;게임게임.PNG&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위치는 init의 위나 아래나 딱히 상관 없는것 같다.&lt;/p&gt;
&lt;h2 id=&quot;앗-나의-실수-이게-아니라-다른-게임이-과제였다&quot;&gt;&lt;a href=&quot;#%EC%95%97-%EB%82%98%EC%9D%98-%EC%8B%A4%EC%88%98-%EC%9D%B4%EA%B2%8C-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%8B%A4%EB%A5%B8-%EA%B2%8C%EC%9E%84%EC%9D%B4-%EA%B3%BC%EC%A0%9C%EC%98%80%EB%8B%A4&quot; aria-label=&quot;앗 나의 실수 이게 아니라 다른 게임이 과제였다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;앗 나의 실수! 이게 아니라 다른 게임이 과제였다&lt;/h2&gt;
&lt;p&gt;쓴 게 아까우니까 저건 일단 냅둬야겠다 ㅎ 언젠간 캔버스 기능을 쓸때가 있겠지~
조금 더 쉬워진 이미지 불러오기! html에 png 파일을 불러서 js에서 body에 붙여버렸다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let bg_img = document.getElementsByClassName(&amp;#39;bg_img&amp;#39;)[0]
document.body.appendChild(bg_img)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;—&gt; html에 bg_img로 이미 이미지를 불러왔을때! (이미 이미지 라임 굿)&lt;/p&gt;
&lt;p&gt;그러면 이렇게 배경화면이 뙇! 다른 방법도 있다 사실..&lt;/p&gt;
&lt;h2 id=&quot;js---new-image&quot;&gt;&lt;a href=&quot;#js---new-image&quot; aria-label=&quot;js   new image permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;js - new Image()&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let bg_img = new Image()
bg_img.src = &amp;#39;./images/bg.png&amp;#39;
document.body.appendChild(bg_img)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 이미 길이가 (800,600)으로 주어진 이미지를 불러오는 거라서 빈 괄호로 했지만
크기를 바꾸고 싶다면 괄호 안에 (width, height) 값을 집어 넣어주면 된다!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/968c20d0-b785-11e9-b29e-c1de6e4ebe0f/%EB%9E%84%EB%9E%84%EB%9D%BC.PNG&quot; alt=&quot;랄랄라.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;이미지를 js파일에 곧바로 불러오는 방법이 궁금했는데 이런 방법이 있었다니!!
이제 용사를 불러와야 하는데.. 나의 용사는 머리가 넷이다.. 이미지를 잘라서 하나로 만들어줘야한다
그래서 얘를 잘라주려면 또 신박한 방법을 써야 하는데..
그것은 다음번 포스팅에 이어서…☆&lt;/p&gt;
&lt;h2 id=&quot;번외편--css---background&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8%ED%8E%B8--css---background&quot; aria-label=&quot;번외편  css   background permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외편 : css - background&lt;/h2&gt;
&lt;p&gt;css는 진짜 파면 팔수록 너무 신기한 기능들이 많다! 나만 몰랐을수도 있지만… 나의 동기 가마니쓰가 한 방법도 한번 써보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.bg{
    background: url(&amp;#39;./images/bg.png&amp;#39;)
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 css에서 url을 불러오고 여기에 크기 설정 등등도 할 수 있다.
여태 html img 태그로 가져오는 방법만 알았는데 넘 신기쓰!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/18a099f0-bbd4-11e9-a1e8-a939a94b65cb/Image-from-iOS-1.jpg&quot; alt=&quot;Image from iOS (1).jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;사실 우분투와 고군분투는 이 날 바로 끝나지 않았다.. 화요일에 외장하드에 파일 옮기고, 윈도우 다시 깔고, 우분투도 깔고 했다 ㅎ&lt;/p&gt;
&lt;h4 id=&quot;클래스-정리-해놓은건-아쉽지만-다음-기회에&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A6%AC-%ED%95%B4%EB%86%93%EC%9D%80%EA%B1%B4-%EC%95%84%EC%89%BD%EC%A7%80%EB%A7%8C-%EB%8B%A4%EC%9D%8C-%EA%B8%B0%ED%9A%8C%EC%97%90&quot; aria-label=&quot;클래스 정리 해놓은건 아쉽지만 다음 기회에 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스 정리 해놓은건 아쉽지만 다음 기회에!&lt;/h4&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/tags/canvas_drawimage.asp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.w3schools.com/tags/canvas_drawimage.asp&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.teamtreehouse.com/learn-asynchronous-image-loading-javascript&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blog.teamtreehouse.com/learn-asynchronous-image-loading-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/Canvas/Tutorial/Basic_usage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTML/Canvas/Tutorial/Basic_usage&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_7일 TIL_fetch로 json 데이터 불러오기]]></title><description><![CDATA[위코드 7일차 js. fetch로 json데이터를 불러오기 위해 Promise 개념과 fetch에 대해 공부해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_7_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_7_TIL_js/</guid><pubDate>Sun, 04 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/afe7e500-bbd1-11e9-87e8-a3e7a5dae513/Image-from-iOS.jpg&quot; alt=&quot;Image from iOS.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;너무 열심히 했는지 산 지 일주일도 안 된 나의 슬리퍼가 끊어져버렸다!ㅋㅋㅋㅋ (지금은 순간접착제로 붙였지롱~)&lt;/p&gt;
&lt;p&gt;세상 어려웠던 부분…☆ 고통의 연속이였지만.. 주위 분들의 따뜻한 도움과 구글링을 통해 해결해나갔다..!
Json 데이터를 자바스크립트로 불러오는 부분은 특히나 어려웠다.
노마드코더 니꼬의 무비앱 만들기 react강의에서 fetch를 통해 API를 가져오는 부분이 그당시엔 잘 이해가지 않았는데…
자바스크립트에서 함 해보니까 약간 알것 같기도 하고..!!&lt;/p&gt;
&lt;h2 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; aria-label=&quot;promise permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise&lt;/h2&gt;
&lt;p&gt;fetch는 Promise 기반의 매커니즘이라 fetch를 알아보기 전에 우리는 Promise를 먼저 알아야 해요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/93338960-b6a8-11e9-9108-85ef47d591d9/pinky-swear-3293291280.jpg&quot; alt=&quot;pinky-swear-329329_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Promise란 말 그대로 약속! 대통령 후보들이 선거에 나와서 공약 걸잖아요. 그런것처럼 미래에 어떠한 일을 할 건데 그것에 대해 미리 말하는거라고 생각하면 돼요!&lt;/p&gt;
&lt;h4 id=&quot;promise-실행과정&quot;&gt;&lt;a href=&quot;#promise-%EC%8B%A4%ED%96%89%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;promise 실행과정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&amp;#x3C;Promise 실행과정&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;pending : 실행되거나 (fulfiled) 실패되거나(rejected) 둘 중에 한 가지 일이 일어나기 바로 전의 상태.&lt;/li&gt;
&lt;li&gt;fulfiled : 함수가 실행되면 fulfiled. 공약 지켰음.&lt;/li&gt;
&lt;li&gt;rejected : 함수가 실행되지 않으면 rejected. 공약 불이행.&lt;/li&gt;
&lt;li&gt;settled : 실행된건지 실패한건지 모르겠으나 여튼 결론이 난 상태.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시를 통해 살펴볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let firstFunction = function() {
  return new Promise( // new를 안 써주면 Type Error가 뜨더라구요.
  function (resolve, reject){ //실행 되었을때, 안 되었을때가 인자로.. 
    resolve(&amp;#39;나는 &amp;#39;) // 실행이 된다면 resolve 괄호 안의 함수가 뜸
  }
  )
}
console.log(firstFunction())

// 첫번째 함수와 이어지는 함수 만들려고 함
let secondFunction = function(dataFromFirstFunction) { 
  return new Promise( 
    function(resolve, reject){
      resolve(dataFromFirstFunction + &amp;#39;아직 배가 고프다&amp;#39;)
    }
  )
}

console.log(secondFunction())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수를 콘솔창에 찍어보면…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/3cc7c5f0-b6b2-11e9-97ab-6bebaeb420ca/image.png&quot; alt=&quot;image.png&quot;&gt;
firstFunction까지는 실행이 잘 되지만, secondFunction의 결과값으론 ‘undefined아직 배가 고프다’가 나온거 보면 연결이 안된것 같죠? resolve 괄호 안에 들어가는 함수의 이름이 dataFromFirstFunction긴 하지만 실질적으로 첫번째 함수에서 데이터를 받아오진 못해요! &lt;/p&gt;
&lt;p&gt;이럴 때 then을 이용하는거에요! &lt;code class=&quot;language-text&quot;&gt;함수1.then()&lt;/code&gt;을 실행하면 함수1이 실행되고 곧바로 then 괄호안의 함수가 실행이 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
console.log(data)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔창에 이 함수식을 덧붙여보면 ‘나는’이라는 firstFunction의 값이 나오게 돼요! then 함수 안의 인자인 data를 console에 찍었더니 묶여있는 함수1의 값을 불러오게 되는거죠~ 그럼 이러한 특성을 이용해 첫번째 함수와 두번째 함수를 엮어봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
  console.log(secondFunction(data))
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;secondFunction()을 실행시킬때 그 안에 data라는 인자를 넣어야 값이 나오니까 함수 안에 윗줄에서 썼던 data라는 동일한 인자를 넣어줬어요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/faa5c810-b70c-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;
이제 Promise 함수 안의 값이 제대로 뜹니다! 하지만 우리의 목표는 string 형태의 리턴값이니깐.. console.log 부분을 return으로 살짝 바꿔봅시다!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data){
  return secondFunction(data)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔창에 이 식을 찍어보면 여전히 Promise 함수를 벗어나지 못하는걸 확인할 수 있어요. 이럴땐 then을 한번 더 써줘야해요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;firstFunction().then(function(data) {
  return secondFunction(data);
}).then(function(data){
        console.log(data)
   })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세번째줄 then 앞까지가 ‘나는 아직 배가 고프다’라는 string을 가진 Promise를 불러오는 거였죠. 거기다 then을 이용해 함수의 인자로 data라는 값을 넣었을 때, console창에 data 값이 나오게 해줄거에요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b2081f60-b70f-11e9-a7bd-f35eb6f8f890/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;값이 string 형태로 아주 잘 나오고 있죠??! &lt;/p&gt;
&lt;h3 id=&quot;근데-여기서-한가지-의문점이-생기는-것&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%EB%8D%B0-%EC%97%AC%EA%B8%B0%EC%84%9C-%ED%95%9C%EA%B0%80%EC%A7%80-%EC%9D%98%EB%AC%B8%EC%A0%90%EC%9D%B4-%EC%83%9D%EA%B8%B0%EB%8A%94-%EA%B2%83&quot; aria-label=&quot;근데 여기서 한가지 의문점이 생기는 것 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근데 여기서 한가지 의문점이 생기는 것…&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0311aac0-b710-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;마지막에 console.log가 아닌 return이 되면 string이 아닌 Promise 형태로 값이 나온다는것.. 이건 왜 그런지 도저히 모르겠네요 ㅠㅠ&lt;/p&gt;
&lt;h2 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; aria-label=&quot;fetch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fetch&lt;/h2&gt;
&lt;p&gt;fetch는 생활코딩으로 기초를 잡고 제로초님 포스팅과 유튜브로 다시 공부해봤어여~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch() : API에서 data를 불러올때 쓰는 Promise 기반의 매커니즘. fetch(‘html’)를 통해서 괄호안의 파일을 불러온다. fetch가 리턴하는건 결국은 Promise라서 우리는 then을 통해 Promise가 아닌 다른 형태로 값을 불러와야한다… 맞나?&lt;/li&gt;
&lt;li&gt;.then() : then은 fetch의 비서 정도라고 생각하면 될듯..?! fetch 실행으로 서버에서 응답할 때까지 &lt;code class=&quot;language-text&quot;&gt;.then()&lt;/code&gt;이라는 함수를 이용해서 then의 괄호 안에 들어가는 함수를 실행한다! 쉬지도 않고 부지런쓰~ 위에서 나온 Promise 때와 동일한 기능!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fetch(&amp;#39;./data/getAllTimeline.json&amp;#39;)
.then((res) =&amp;gt; {
  if (res.status === 200 || res.status === 201) { 
    res.text().then(text =&amp;gt; console.log(text))
  }
  else {
    console.log(res.statusText)
  }
}).catch(err =&amp;gt; console.log(err)) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;간단히 보자면 then을 통해서 reponse 객체를 받고, catch를 통해 error를 받아요!
이 과정을 순서대로 자세히 살펴봅시다~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch로 data폴더의 getAllTimeline.json이라는 데이터를 불러온다&lt;/li&gt;
&lt;li&gt;then을 이용해 response 객체를 불러오는데…&lt;/li&gt;
&lt;li&gt;response의 상태가 200이나 201일때(정상작동시)&lt;/li&gt;
&lt;li&gt;콘솔창에 text를 띄운다&lt;/li&gt;
&lt;li&gt;그렇지 않으면 response의 상태를 띄운다. 404 Page Not Found와 같은 빡치는 에러를 보게 되는거죠 ㅎ&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;미니터-json파일을-자바스크립트로-불러오기&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%8B%88%ED%84%B0-json%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;미니터 json파일을 자바스크립트로 불러오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미니터 json파일을 자바스크립트로 불러오기&lt;/h2&gt;
&lt;p&gt;저는 일단 data라는 폴더 안에 아래와 같은 getAllTimeline.json이라는 파일을 가지고 있어요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;result&amp;quot;: [
    {
      &amp;quot;contents&amp;quot;: &amp;quot;도리를 찾아서~&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;19920601&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Dory&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;와플번트 진짜 맛있었는데 왜 사라진거지 너무 속상하다&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190327&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Waffle&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;예쓰! 우리는 모두 위코더 룰루~&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190729&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Wecode&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;아스트로에 차은우가 있다면, 위코드에는 내가 있쥐&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190323&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Eunwoo Song&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;누구보다도 예리한 감각을 자랑하는 프론트앤드 엔지니어는 누구~?&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190323&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Yeri Kim&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;아이스크림 드실분?&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190803&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;Jihun Park&amp;quot;
    },
    {
      &amp;quot;contents&amp;quot;: &amp;quot;주말에는 냉방 시스템이 가동되지 않으니 이 점 참고하시기 바랍니다.&amp;quot;,
      &amp;quot;date&amp;quot;: &amp;quot;20190321&amp;quot;,
      &amp;quot;user&amp;quot;: &amp;quot;WeWork&amp;quot;
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자바스크립트에서 fetch를 써봅시다. 페이지를 열 때 기본적으로 떠 있는 트윗목록을 불러오기 위해 opening이라는 함수 안에 fetch함수를 써봤어요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function opening() {
  fetch(&amp;#39;./data/getAllTimeline.json&amp;#39;) // json파일이 있는 파일의 경로
    .then((res) =&amp;gt; res.json()) // 데이터를 json형태로 바꿔주기
    .then(function (data) { // data라는 임의의 값을 인자로 받는 함수.
      let people = data.result; //json파일을 감싸는 객체가 result로 시작해서 data.result
      console.log(people) // people 콘솔을 찍어보면 {contents: &amp;quot;도리를 찾아서~&amp;quot;, date: &amp;quot;19920601&amp;quot;, user: &amp;quot;Dory&amp;quot;} 이러한 객체가 7개 나옴
      return people.map(function (person) { //people에서 contents,date,user를 뽑아내기 위해 map 사용
      // 이 아래는 html 틀 구현을 위해 쓴 식들
        let contents_wrap = createNode(&amp;#39;div&amp;#39;) 
        let name = createNode(&amp;#39;button&amp;#39;)
        let time = createNode(&amp;#39;span&amp;#39;)
        let doorit = createNode(&amp;#39;div&amp;#39;)
        contents_wrap.className = &amp;#39;contents_wrap&amp;#39;
        name.className = &amp;#39;doorits_id&amp;#39;
        time.className = &amp;#39;time&amp;#39;
        doorit.className = &amp;#39;doorits_contents&amp;#39;

        name.innerHTML += person.user
        time.innerHTML += `${String(person.date).split(&amp;#39;&amp;#39;).slice(0, 4).join(&amp;#39;&amp;#39;)}-${ String(person.date).split(&amp;#39;&amp;#39;).slice(4, 6).join(&amp;#39;&amp;#39;)}-${ String(person.date).split(&amp;#39;&amp;#39;).slice(6, 8).join(&amp;#39;&amp;#39;)}`
        doorit.innerHTML += person.contents

        append(contents_wrap, name)
        append(contents_wrap, time)
        append(contents_wrap, doorit)
        append(doorits_box, contents_wrap)

        doorits_box.prepend(contents_wrap)

        //원래 있는 트윗의 개수 불러오기!
        const sum_doorits = document.getElementsByClassName(&amp;#39;sum_doorits&amp;#39;)[0]
        const total_doorits = doorits_box.children.length
        sum_doorits.innerHTML = total_doorits;
      })
    })
    .catch(err =&amp;gt; console.log(err))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;개발자도구-네트워크 탭에 한번 들어가보세요.
json 데이터를 성공적으로 불러왔다면 네트워크 탭에서 확인할 수 있어요~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7e31f430-b715-11e9-a7bd-f35eb6f8f890/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a3951210-b716-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;값도 아주 잘 불러와지고요!&lt;/p&gt;
&lt;h3 id=&quot;근데-식을-작성하면서-fetch-typeerror가-생겼었죠-어떤-오류냐&quot;&gt;&lt;a href=&quot;#%EA%B7%BC%EB%8D%B0-%EC%8B%9D%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B4%EC%84%9C-fetch-typeerror%EA%B0%80-%EC%83%9D%EA%B2%BC%EC%97%88%EC%A3%A0-%EC%96%B4%EB%96%A4-%EC%98%A4%EB%A5%98%EB%83%90&quot; aria-label=&quot;근데 식을 작성하면서 fetch typeerror가 생겼었죠 어떤 오류냐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;근데 식을 작성하면서 fetch TypeError가 생겼었죠.. 어떤 오류냐..!&lt;/h3&gt;
&lt;p&gt;VM1621:1 Uncaught (in promise) TypeError: Failed to execute ‘fetch’ on ‘Window’: 1 argument required, but only 0 present. at :1:1&lt;/p&gt;
&lt;p&gt;이 오류가 왜 생겼냐 하고 봤더니… 제가 Live Server를 통해 파일을 열지 않아서였더라고요
&lt;code class=&quot;language-text&quot;&gt;Ctrl+Shift+x&lt;/code&gt; 로 Live Server 검색 고고~ 비주얼 스튜디오 확장팩 다운 받으세요
그 다음 html파일 우클릭 해서 열면 저 오류는 없어질거에요~~&lt;/p&gt;
&lt;h3 id=&quot;별책부록-미니터에-업데이트-되는-트윗-수-반영하기&quot;&gt;&lt;a href=&quot;#%EB%B3%84%EC%B1%85%EB%B6%80%EB%A1%9D-%EB%AF%B8%EB%8B%88%ED%84%B0%EC%97%90-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%90%98%EB%8A%94-%ED%8A%B8%EC%9C%97-%EC%88%98-%EB%B0%98%EC%98%81%ED%95%98%EA%B8%B0&quot; aria-label=&quot;별책부록 미니터에 업데이트 되는 트윗 수 반영하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;별책부록… 미니터에 업데이트 되는 트윗 수 반영하기&lt;/h3&gt;
&lt;p&gt;제가 처음에 접근했던 방식은..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/76785840-b717-11e9-b5ae-79d5e29d688d/image.png&quot; alt=&quot;image.png&quot;&gt;
2번의 div의 개수를 세서 1번에 추가가 될수 있도록.. 아주 단순하게 생각했어요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const sum_doorits = document.getElementsByClassName(&amp;#39;sum_doorits&amp;#39;)[0](1번의 className)
const total_doorits = doorits_box.children.length //화면에 뜬 전체 트윗중 하얀부분의 개수(2번의 개수)
sum_doorits.innerHTML += total_doorits; (1번에 2번의 개수 넣기)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게요!&lt;/p&gt;
&lt;p&gt;웹페이지의 콘솔에는 개수가 7개로 잘 나오지만 visual studio에선 값이 0개가 나오더라고요
저는 저 합계를 세어주는 함수의 위치가 별로 중요하지 않다고 생각해서 아무데나 넣었는데
그렇게 하면 안되고! 트윗이 생성되고 삭제되는 곳 모두에 넣어야 하더라구요!&lt;/p&gt;
&lt;p&gt;그래서 트윗을 불러올때, 트윗 생성될때, 트윗 삭제될 때 모두 세 곳에 저 식을 넣어줬어요.
그랬더니 숫자가 넘나 잘 뜨는것!!&lt;/p&gt;
&lt;h4 id=&quot;또-신기했던-점&quot;&gt;&lt;a href=&quot;#%EB%98%90-%EC%8B%A0%EA%B8%B0%ED%96%88%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;또 신기했던 점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;또 신기했던 점…&lt;/h4&gt;
&lt;p&gt;트윗 삭제가 될땐 +=이나 —가 아닌 그냥 대입연산자로 쓴다는 점..
그것도 모르고 +1를 했는데 값이 늘어나서 거기다 -1을 붙이니까 값이 제대로 반영이 되고..
어??? 이상한데?? 나 너무 바보같은데?? 하다가 식을 보니 제가 +=을 =로 썼더라고요 ㅋㅋㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼… 미니터는 이제 끝났습니다~(css 부분 정리할까말까 고민중…ㅠㅠ)
이젠 저도 게임만들기로 궈궈…☆&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://programmingsummaries.tistory.com/325&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://programmingsummaries.tistory.com/325&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/HTML&amp;#x26;DOM/post/-595b4bc97cafe885540c0c1c&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.zerocho.com/category/HTML&amp;#x26;DOM/post/-595b4bc97cafe885540c0c1c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;생활코딩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IHjzyhjKxtc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?v=IHjzyhjKxtc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=cosmosjs&amp;#x26;logNo=221379310763&amp;#x26;categoryNo=56&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=&amp;#x26;currentPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=cosmosjs&amp;#x26;logNo=221379310763&amp;#x26;categoryNo=56&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=¤tPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_6일 TIL_미니터 틀짜기]]></title><description><![CDATA[위코드 6일차 html. 미니 트위터의 html 틀을 짜보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_6_TIL_html/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_6_TIL_html/</guid><pubDate>Sat, 03 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;잠시 살펴보는 둘둘의 1주차 타임라인 in WECODE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1일차 : html/css 그리고 js 문제
2일차 : js
3일차 : DOM&amp;#x26;event 과제 끝 + 미니터 html 틀짜기
4일차 : 미니터 css 수정(flex!!!) + 이벤트로 고뇌에 빠지기
5-6일차 : DOM구조 및 미니터에 이벤트 넣기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;포스팅에서의 날짜는 저의 진도랑 상관 있을수도 있고 없을 수도 있습니다~ 제가 그날 무엇을 정리했느냐에 따라 달라서 그냥 써놔서~&lt;/p&gt;
&lt;p&gt;근데 이 순서대로 한지 모르겠어요.. 시간이 넘나 빠르고요??
하루종일 노트북 붙잡고 있느라 일기를 안 썼더니 그날 뭐했는지가 기억이 안나요ㅠ
앞으론 블로깅을 그날그날 쓰도록 노력해보려고요!!&lt;/p&gt;
&lt;p&gt;이번 포스팅은 제가 미니 트위터를 어떻게 구현했는지 공개쓰~
지금은 개발자 꿈나무지만 나중에 멋진 개발자가 되고나서 이 글을 다시 읽으면 재밌을거 같아요 ㅋㅋㅋㅋ 와 진짜 못했다~ 하고 웃을 날이 오겠죠?!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/6fe01f30-b687-11e9-8191-e1d4670a1ecd/image.png&quot; alt=&quot;image.png&quot;&gt;
마치 이런 느낌으로..?ㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;미니터-html-구조짜기&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%8B%88%ED%84%B0-html-%EA%B5%AC%EC%A1%B0%EC%A7%9C%EA%B8%B0&quot; aria-label=&quot;미니터 html 구조짜기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미니터 html 구조짜기&lt;/h2&gt;
&lt;p&gt;아무래도 지난번 코드뭐시기에서 트위틀러를 한번 구현해봤기 때문에 html 구조 짜는것까지는 쉬웠다! 이벤트 거는게 문제였지..ㅜㅜ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Farro&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot; /&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style/common.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style/tweets.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body class=&amp;quot;doorits_page&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_bar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;dooriter_bar_left_1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_left_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_home&amp;quot; href=&amp;quot;https://twitter.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_left_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_company&amp;quot; href=&amp;quot;https://wecode.co.kr/&amp;quot;&amp;gt;Company&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;dooriter_bar_right_1&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;search&amp;quot; placeholder=&amp;quot;검색어를 입력해주세요&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;a i class=&amp;quot;fas fa-search&amp;quot; href=&amp;quot;https://www.google.com/&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;dooriter_bar_right_2&amp;quot;&amp;gt;
        &amp;lt;a class=&amp;quot;bar_login&amp;quot; href=&amp;quot;./login.html&amp;quot;&amp;gt; Login&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_2nd_bar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;color_2nd_bar&amp;quot;&amp;gt;
      &amp;lt;span class=&amp;quot;wecode&amp;quot;&amp;gt;&amp;gt;wecode&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;white_2nd_bar&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;profile_line_left&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Doorits&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_doorits&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Followers&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_followers&amp;quot;&amp;gt;24K&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;pf_left_title&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;pf_left_bold&amp;quot;&amp;gt;Following&amp;lt;/span&amp;gt;
          &amp;lt;span class=&amp;quot;sum_followings&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;dooriter_bottom&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;profile_container&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;profile_up&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;pf_pic&amp;quot; src=&amp;quot;dooriter_pf.jpg&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;profile_down&amp;quot;&amp;gt;
        &amp;lt;span class=&amp;quot;pf_name&amp;quot;&amp;gt;Doori Kim&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;pf_nickname&amp;quot;&amp;gt;@dooreplay&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;pf_introduce&amp;quot;&amp;gt;개발자 꿈나무입니다.&amp;lt;br&amp;gt;잘 부탁드립니다.&amp;lt;br&amp;gt;위코드 짱짱 화이팅!&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;doorits_container&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;write_doorits&amp;quot;&amp;gt;
        &amp;lt;textarea class=&amp;quot;write_doorits_input&amp;quot; placeholder=&amp;quot;&amp;amp;nbsp&amp;amp;nbsp What&amp;#39;s happening? :)&amp;quot; maxlength=&amp;quot;300&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;span class=&amp;quot;min_count&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;/&amp;lt;span class=&amp;quot;max_count&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;button class=&amp;quot;doorit_btn&amp;quot;&amp;gt;Doorit&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;!-- &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;doorits_box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;id_and_time&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;doorits_id&amp;quot;&amp;gt;아이디자리&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;time&amp;quot;&amp;gt;0000월 00월 00일 00시 00분 00초&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p class=&amp;quot;doorits_contents&amp;quot;&amp;gt;두리터내용&amp;lt;/p&amp;gt; --&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- 이 위는 두리터 컨테이너 닫히는 태그--&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;signup.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
  &amp;lt;script src=&amp;quot;https://kit.fontawesome.com/d6b1895c38.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;./js/tweets.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;중간에 주석처리한 부분은 CSS 때문에 일단 하드코딩 해놓은 것!
div를 잘 쪼개서 묶어주는게 정말 중요한데, 중간에 새로운 div를 계속 추가하다 보니 내가 예상했던 것처럼 안 묶을 때가 많았다&lt;/p&gt;
&lt;p&gt;그럴때의 꿀팁!! 다들 알고 있겠지만 저는 이번에 처음 알게되서 신기해서 올려봐유~
(아래의 캡쳐화면은 미니터 로그인 페이지를 만든 것!)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e0255020-b688-11e9-8191-e1d4670a1ecd/image.png&quot; alt=&quot;image.png&quot;&gt;
그림속의 화살표가 가리키는 곳을 클릭해보세요.
그런 다음에 마우스를 이리저리 움직여 보면 각각의 class나 id값, 가로길이는 또 얼마나 되는지 등등을 알 수 있어요!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/954deb70-b688-11e9-a270-f544dc62fdb4/image.png&quot; alt=&quot;image.png&quot;&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7ff438b0-b688-11e9-a270-f544dc62fdb4/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;음음… 힘들었던 점이 있다면 디자인에 대한 고뇌…?!
트위터 화면을 완전히 따라할 것이냐, 그냥 심플하게 갈것이냐, 나만의 독자적인 화면을 만들 것이냐…
항상 이런 고민하는데 시간 많이 쏟는 것 같아요 저는 ㅠㅠ 이게 바로 진성 프론트엔더??ㅎ
여튼… 결국 로그인, 회원가입 페이지는 심플하게 가고, 미니터 페이지는 심플하지만 독자적인 화면으로 갔습니다! 나름 프사도 넣어주고 ㅎ&lt;/p&gt;
&lt;p&gt;다음번 포스팅에서 CSS 부분을 살펴볼게요~&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위코드&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_5일 TIL_화살표함수]]></title><description><![CDATA[위코드 5일차 js 정리 2탄. ES6 문법 중 나에게 아직도 너무 익숙지 않은 화살표함수에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_5_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_5_TIL_js/</guid><pubDate>Fri, 02 Aug 2019 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/21b05e00-b656-11e9-98df-8b92d767b097/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;화살표 함수만은 피하고 싶었는데.. 위코드 2일차에 마주쳤다…☆
어차피 나중엔 계속 쓰게 될텐데 지금 정리해야 마음이 편해질것 같아서 정리해봅니다~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;고통을 즐기는 개발자가 되자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;화살표함수&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98&quot; aria-label=&quot;화살표함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표함수&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;그냥 함수 있는거 쓰면 되는데.. 화살표 함수. 대체 왜 쓸까?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 문법이라서
-js를 표준화하는 ECMA Script의 버전이 벌써 10까지 나왔다네요… 세상에마상에
-대세를 따르는 개발자가 됩시다! 지금은 화살표가 어색할지 몰라도 나중엔 디폴트값이 될지도…&lt;/li&gt;
&lt;li&gt;코드가 엄청나게 짧아진다
-중괄호, 엔터 없이도 =&gt; 이 화살표만 있으면 되니까 식이 좀 더 깔끔쓰!&lt;/li&gt;
&lt;li&gt;멋있어 보인다
-멋에 죽고 멋에 사는 개발자라면 화살표함수를 쓰시오~ㅋㅋ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 화살표 함수를 이번기회에 제대로 정리해야지!! 하고 마음 먹었으나…
예시 위주로만 갈게요ㅠ
화살표 함수에 대해서는 Baby Tiger님이 정리를 잘 해놨으니 링크 드릴게요 :)
&lt;a href=&quot;https://babytiger.netlify.com/posts/arrow-function/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://babytiger.netlify.com/posts/arrow-function/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-없을때&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%97%86%EC%9D%84%EB%95%8C&quot; aria-label=&quot;화살표 함수 적용  인자가 없을때 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 없을때&lt;/h3&gt;
&lt;p&gt;들어가기 앞서.. 한 가지 덧붙이자면!!! 화살표 함수는 무조건 익명함수에요.
&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;같은 선언자로 선언하는 함수 표현식으로 작성해주세용
자 그럼 1번 예시!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; function macaron(){
  return &amp;#39;달콤해~&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 함수가…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const macaron = () =&amp;gt; &amp;#39;달콤해~&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반 함수식과 비교해보면 중괄호와 return 대신 =&gt; 이 화살표를 쓴 걸 알수있져!
예시의 식처럼 한줄짜리 식들은 중괄호를 생략할 수 있어요~
또한 함수이름과 소괄호 사이에 = 을 써서 함수를 정의한다는 점도 알아두세요!&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-하나&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%ED%95%98%EB%82%98&quot; aria-label=&quot;화살표 함수 적용  인자가 하나 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 하나&lt;/h3&gt;
&lt;p&gt;이번엔 인자가 하나일 경우를 살펴볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const a = function square(y) {
  return y * y
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 함수가…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const square = y =&amp;gt; y*y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 이렇게 한 줄로 줄어들었어요! 개이득!!
위에서 예시로 든 제곱 함수보다 식이 더 복잡해질때 화살표함수를 쓰는게 유용하겠죠?
인자가 하나일땐 괄호 생략이 가능한데, 두 개 이상일때부턴 괄호를 꼭꼭 써주세요!&lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--인자가-둘&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--%EC%9D%B8%EC%9E%90%EA%B0%80-%EB%91%98&quot; aria-label=&quot;화살표 함수 적용  인자가 둘 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : 인자가 둘&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function plus(a,b) {
  return `${a} 더하기 ${b}는 ${a+b}입니다`
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이랬던 식을 화살표 함수에 적용하면…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const plus = (a,b) =&amp;gt;`${a} 더하기 ${b}는 ${a+b}입니다`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 뙇! 인자가 두개라서 괄호를 붙여줬어요~~&lt;/p&gt;
&lt;p&gt;여기서 잠깐, &lt;code class=&quot;language-text&quot;&gt;${}&lt;/code&gt;&amp;#x3C;= 이 달러표시는 뭘까요~얘도 화살표 함수처럼 ES6문법이에요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;template literal : 따옴표 대신 빽틱(1 옆의 것)을 이용해 문자열을 표기하는 방법. 빽틱 안에 ${}를 이용해 값을 표기할 수 있음.
(처음엔 빽틱이 빽티기인줄 알고 뻥튀기가 생각났는데… back tick.. 영어였슴다…☆)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 얘기하면 뭔 말인지 모르겠죠? 예시를 들어볼게요~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const plus = (a,b) =&amp;gt;a+ &amp;#39; 더하기 &amp;#39; + b+&amp;#39;는 &amp;#39;+a+b+&amp;#39;입니다&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아까 위에서 만든 함수의 리턴값을 일반적인 string을 나타내는 형식으로 써봤어요.
template literal을 이용하면 전체를 빽틱으로 감싸고 대입이 필요한 값에만 ${}를 씌워주면 되는데, 이렇게 쓰니 참 복잡하죠? 편하게 갑시다~~ &lt;/p&gt;
&lt;h3 id=&quot;화살표-함수-적용--array-method&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9--array-method&quot; aria-label=&quot;화살표 함수 적용  array method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수 적용 : Array Method&lt;/h3&gt;
&lt;p&gt;가장 작은 숫자를 찾는 함수를 만들어 보았어요. 최대한 직관적이게 풀어볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const arr = [42,1,&amp;#39;a&amp;#39;,&amp;#39;z&amp;#39;,100,28,&amp;#39;맛있다&amp;#39;]
function findSmall(arr){
  let temp = []
  let answer = &amp;#39;&amp;#39;
  for(let i=0; i &amp;lt; arr.length; i++) {
    if(typeof arr[i] === &amp;#39;number&amp;#39;) {
      temp.push(arr[i])
    }
  }
  let min = temp[0]
  for(let j=0; j &amp;lt; temp.length; j++) {
    if(min &amp;gt; temp[j]) {
      min = temp[j];
    }
  }
  return min;
}
console.log(findSmall(arr)) // 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 for문에서 숫자인지를 걸러주고, 두번째 for문에선 숫자들의 대소비교를 통해 답을 냈어요.&lt;/p&gt;
&lt;p&gt;자… 그럼 method로 아주 간단하게 풀어봅시다. 놀라지 마세요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const findSmall = () =&amp;gt; arr.filter(x=&amp;gt;typeof x === &amp;#39;number&amp;#39;).sort((a,b)=&amp;gt;a-b)[0]

console.log(findSmall(arr)) // 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저 긴 식이 이렇게나 짧게 줄어들었어요!
저는 여기서 array method 중에 하나인 &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;를 사용했는데요.
여기서 filter는 주어진 조건에 맞는 애들만 딱 걸러주는 역할을 하고, sort 함수는 작은 숫자에서 큰 숫자 순으로 정렬을 해주는 역할을 했어요.&lt;/p&gt;
&lt;p&gt;예시를 하나 더 들어볼게용
문제의 출처는 위코드 입니다 ㅎ 실은 제가 이걸 노가다방식으로 풀었기 때문에 블로그에 정리하면서 다시 한번 풀어보고 싶었어요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//dates=[&amp;#39;2019-03-21&amp;#39;, &amp;#39;2019-04-21&amp;#39;, &amp;#39;2019-05-21&amp;#39;]

//리턴값을 이렇게 바꾸시오.
[&amp;#39;2019년 03월 21일&amp;#39;, &amp;#39;2019년 04월 21일&amp;#39;, &amp;#39;2019년 05월 21일&amp;#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에 푼 식을 먼저 공개할게요.. 완전 노가다에요…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let formatDate = dates =&amp;gt; Array(`${dates[0].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[0].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[0].split(&amp;#39;-&amp;#39;)[2]}일`,`${dates[1].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[1].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[1].split(&amp;#39;-&amp;#39;)[2]}일`,`${dates[2].split(&amp;#39;-&amp;#39;)[0]}년 ${dates[2].split(&amp;#39;-&amp;#39;)[1]}월 ${dates[2].split(&amp;#39;-&amp;#39;)[2]}일`)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이걸 다시 제대로.. &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;을 이용해 묶어보겠슴다
사실 계속 어떻게 할지 헤매다가 같은 기수 순규님의 도움으로 해결쓰…☆&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let formatDate = arr =&amp;gt; {  //1번
  return arr.map(x =&amp;gt; { //2번
    let temp = x.split(&amp;#39;-&amp;#39;) //3번
    return `${temp[0]}년 ${temp[1]}월 ${temp[2]}일` //4번
  })
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1번 : arr에 적용되는 식이 한 줄이 아닐거니까 화살표 뒤에 중괄호와 리턴 쓰기(사실 화살표 함수라 해서 무조건 중괄호 안쓰려고 생각하다 보니 더 안풀렸다 ㅠ)&lt;/li&gt;
&lt;li&gt;2번 : arr에 &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;을 적용해서 각각의 arr의 element들에 적용되는 식 만듬. 여기서 임의의 변수 x란 arr[i]와 동일한 역할&lt;/li&gt;
&lt;li&gt;3번 : x를 split해준 값을 temp에 담는다.(사실 이 과정이 머릿속으로 그려지지 않아서 하드코딩으로 지저분하게 문제를 풀었다ㅜㅜ 담으면 되는거였구나 ㅠㅠ)&lt;/li&gt;
&lt;li&gt;4번 : temp 배열의 0번째, 1번째, 2번째의 데이터를 통해 값을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;화살표 함수는 여전히 헷갈리는 어려운 녀석이다 ㅜㅜ
그치만 계속 계속 쓰다보면 늘겠지!! 화살표 함수를 습관화하자!!!&lt;/p&gt;
&lt;h3 id=&quot;별책부록--커링과-화살표함수&quot;&gt;&lt;a href=&quot;#%EB%B3%84%EC%B1%85%EB%B6%80%EB%A1%9D--%EC%BB%A4%EB%A7%81%EA%B3%BC-%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98&quot; aria-label=&quot;별책부록  커링과 화살표함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;별책부록 : 커링과 화살표함수&lt;/h3&gt;
&lt;p&gt;예전에 커링 정리 하다가 엄청 놀란 식이 있어서 공유해봅니다..☆&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let sum = function(x) {
  return function(y) {
    return x+y
  }
}

console.log(sum(5)(7)) // 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 커링 자체도 굉장히 놀랍고 신기한 기술인데.. 여기에 화살표함수가 더해지면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let sum = x =&amp;gt; y =&amp;gt; x+y

console.log(sum(5)(7)) // 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;와우…!!! 놀라움의 연속쓰~~
커링은 더 나중에 정리해보겠슴다!
화살표함수가 익숙해지는 그날까지~~~ 모두모두 화이팅&lt;/p&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/es6-arrow-function&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://poiemaweb.com/es6-arrow-function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wecode&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_4일 TIL_변수와 스코프]]></title><description><![CDATA[위코드 4일차 js 정리 1탄. js 공부의 가장 기초이면서도 중요한 변수와 스코프에 대해서 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_4_TIL_js/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_4_TIL_js/</guid><pubDate>Thu, 01 Aug 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;오늘로 벌써 5일찬데 아직 2일차 때 했던것 정리하는 중~.~아이고… 빨리 다 써야지!!! 밀리지 않게!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;그럼 js 공부 스타트~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;변수선언&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8&quot; aria-label=&quot;변수선언 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수선언&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;변수 : 값을 담기 위해 이름을 붙인 상자. 변수는 컴퓨터의 메모리에 일정한 크기의 영역으로 생성됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;영어공부 할때 ABC 다음으로 배우는게 I am 뭐시기~ 잖아여
그런것처럼 자바스크립트 세상에서 변수선언은 가장 기본적이면서도 필수적인 것!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var doori = &amp;#39;hungry&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 식에서 var가 am(~이다)같은 역할을 해주는 선언자입니다!
I(주어)같은 역할을 해주는게 여기선 doori인데, 자기 맘대로 이름 붙일수 있어요. 이게 바로 변수!
doori라는 변수에 = 뒤에 값(‘hungry’)을 넣어주는걸 우리는 변수 선언이라고 해요.&lt;/p&gt;
&lt;p&gt;자.. 쫌 더 이론적으로 설명해볼게요!&lt;/p&gt;
&lt;h3 id=&quot;변수선언-3단계&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8-3%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;변수선언 3단계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수선언 3단계&lt;/h3&gt;
&lt;p&gt;이건 시스템 상에서 일어나는 일이기 때문에 우리눈으로 확인할 순 없어요 ㅠㅠ 그래서 집 짓는 과정으로 예를 들어봤어요~ (혹시나 잘못된 정보가 있으면 댓글 달아주세요!!! 언제든지 수정하겠슴다~)
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a32424d0-b4c6-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-선언단계--변수를-변수객체에-등록&quot;&gt;&lt;a href=&quot;#1-%EC%84%A0%EC%96%B8%EB%8B%A8%EA%B3%84--%EB%B3%80%EC%88%98%EB%A5%BC-%EB%B3%80%EC%88%98%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%93%B1%EB%A1%9D&quot; aria-label=&quot;1 선언단계  변수를 변수객체에 등록 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 선언단계 : 변수를 변수객체에 등록&lt;/h4&gt;
&lt;p&gt;집을 지으려면 먼저 나라에서 부지를 사야겠죠? 내 땅이오~ 하고 선언하는거에요
자바스크립트 세상에서도 변수를 변수객체에 먼저 등록을 해야해요.&lt;/p&gt;
&lt;h4 id=&quot;2-초기화단계--변수객체에-등록된-변수를-위한-메모리-확보&quot;&gt;&lt;a href=&quot;#2-%EC%B4%88%EA%B8%B0%ED%99%94%EB%8B%A8%EA%B3%84--%EB%B3%80%EC%88%98%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%99%95%EB%B3%B4&quot; aria-label=&quot;2 초기화단계  변수객체에 등록된 변수를 위한 메모리 확보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 초기화단계 : 변수객체에 등록된 변수를 위한 메모리 확보&lt;/h4&gt;
&lt;p&gt;사람이 맨 땅에 살 수 없잖아요.. 집이 필요하죠!!! 변수가 들어갈 집을 짓는거에요.
근데 사람이 입주를 안해서 집이 비어있어요. 집주인이 정해지지 않아서 undefined 상태인거에요.&lt;/p&gt;
&lt;h4 id=&quot;3-할당단계--undefined로-초기화된-변수에-실제-값을-할당&quot;&gt;&lt;a href=&quot;#3-%ED%95%A0%EB%8B%B9%EB%8B%A8%EA%B3%84--undefined%EB%A1%9C-%EC%B4%88%EA%B8%B0%ED%99%94%EB%90%9C-%EB%B3%80%EC%88%98%EC%97%90-%EC%8B%A4%EC%A0%9C-%EA%B0%92%EC%9D%84-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;3 할당단계  undefined로 초기화된 변수에 실제 값을 할당 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 할당단계 : undefined로 초기화된 변수에 실제 값을 할당&lt;/h4&gt;
&lt;p&gt;집주인이 부동산이랑 계약해서 집을 샀어요. 이제 변수에 실질적인 집주인이 생긴거죠 하하~&lt;/p&gt;
&lt;p&gt;영어에서도 am, are,is 있듯이 변수 선언에서도 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 세 가지를 선언자로 이용하는데요.&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;는 3단계 순서를 잘 따르는데, &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;는 쫌 달라요. 예를 들어볼게요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;첫번째 &amp;#39; + waffle) // Reference Error. waffle is not defined
let waffle = &amp;#39;맛있다&amp;#39;
console.log(&amp;#39;두번째 &amp;#39; + waffle)// Reference Error. waffle is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째 줄에서 waffle을 선언하기 전에 콘솔을 찍었기 때문에 &lt;code class=&quot;language-text&quot;&gt;ReferenceError: waffle is not defined&lt;/code&gt; 라는 에러가 발생합니다.
두번째 줄에서 waffle이라는 변수에 ‘맛있다’라는 값을 줬지만, 여전히 콘솔을 찍어보면 오류가 발생합니다. let이나 const로 변수를 초기화(2단계)하기 이전에 콘솔로 변수를 호출하면 TDZ(일시적 사각지대)에 빠져서 에러가 발생해욧..
에러가 생기니까 이게 안 좋은것 같아 보이지만, 오히려 이 에러가 덕분에 어디가 틀렸는지 아니깐 코드를 보수하기 더 쉬워진다는 거!&lt;/p&gt;
&lt;p&gt;이번엔 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;를 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;첫번째 &amp;#39; + waffle) // Reference Error. waffle is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;waffle을 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;로 선언하기 이전에 콘솔에 waffle을 찍으면 당연 오류가 나겠죠?
이번에는 콘솔을 지우지 않은 채로 바로 밑에다가 &lt;code class=&quot;language-text&quot;&gt;var waffle=&amp;#39;맛있다&amp;#39;&lt;/code&gt;라고 선언을 해볼게요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var waffle = &amp;#39;맛있다&amp;#39; // &amp;#39;첫번째 undefined&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 ‘첫번째 undefined’라는 값이 찍힙니다. 원래대로라면 집주인이 나타나기도 전에 집주인 누구냐고 물은거니깐, 에러가 생겨야 하지만, &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;선언자는 1,2단계가 동시에 발생하고, 집주인이 정해지기 전에 undefined라는 값이 기본으로 들어가서 집주인 행세를 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;console.log(&amp;#39;두번째 &amp;#39; + waffle) // &amp;#39;두번째 맛있다&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세번째 줄에 다시 콘솔을 찍어보면 waffle에 맛있다 라는 값이 입주하게 되는거죠!
여기서 잠깐, 변수 선언도 전에 console을 찍은 두번째는 어찌하여 undefined라는 값이 나왔냐? 이건 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;의 성질인 호이스팅 때문에 발생한 일인데요!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호이스팅 : 변수선언을 제일 위로 끌어올리는 현상.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이건 밑에서 잠깐 짚고 넘어갈거에요.
여튼..&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;가 최신 문법이니 최대한 이걸 씁시다. 얘네를 쓰면 var로 인한 오류가 줄어서 더 편해요~
&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;는 최대한 사용을 지양합시다!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/163ebce0-b4c8-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;
늙은이는 안된다?? ㅎ 그 이유는 아래서 계속… 궁금하죠?ㅋㅋㅋㅋ&lt;/p&gt;
&lt;h2 id=&quot;변수의-유효범위&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84&quot; aria-label=&quot;변수의 유효범위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수의 유효범위&lt;/h2&gt;
&lt;h3 id=&quot;scope유효범위&quot;&gt;&lt;a href=&quot;#scope%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84&quot; aria-label=&quot;scope유효범위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope(유효범위)&lt;/h3&gt;
&lt;p&gt;변수에 접근할 수 있는 범위를 스코프라고 합니다~
떡볶이로 예를 들어볼게요! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/623fbb30-b4cd-11e9-b862-790b02766d4c/image.png&quot; alt=&quot;image.png&quot;&gt;(또보겠지 떡볶이&amp;#x26;버갈… 죠온맛탱)
우리나라 사람들은 떡볶이 하면 다 알죠?? 근데 음… 저기 안드로메다쯤에 사는 외계인은 지구가 너무 멀기도 하고, 지구에 나라도 많으니깐 한국을 모를수도 있잖아요.
걔한테 백날 떡볶이 맛있어! 너도 먹어봐! 라고 말해봤자 못 알아들어요. 떡볶이가 먹는건지, 입는건지도 모를거 아니에요
외계인의 scope는 안드로메다라서 대한민국에서 선언한 떡볶이를 못알아듣는거죠~&lt;/p&gt;
&lt;p&gt;이러한 스코프에는 &lt;code class=&quot;language-text&quot;&gt;어휘적범위&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;동적범위&lt;/code&gt; 두 종류가 있는데 js는 어휘적 범위(Lexical Scope)를 선택했어요! 이건 코드가 작성될 때 유효범위가 정해지는 거고, 다이나믹은 다이나믹해서 프로그램 실행하면서 정해져요.. 사실 다이나믹 스코프를 겪어보지 못해서 저는 설명못해줘요 고수님들 블로그 참고하세요ㅠㅋㅋ&lt;/p&gt;
&lt;p&gt;여튼… 우리의 동적범위, Lexical은 &lt;code class=&quot;language-text&quot;&gt;전역변수&lt;/code&gt;와&lt;code class=&quot;language-text&quot;&gt;지역변수&lt;/code&gt;로 나뉩니다요.
얘네들을 알아보기 전에 먼저 살펴볼 것. 바로바로 블럭!&lt;/p&gt;
&lt;h3 id=&quot;block&quot;&gt;&lt;a href=&quot;#block&quot; aria-label=&quot;block permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;block&lt;/h3&gt;
&lt;p&gt;함수 예시를 쉽게 만들려다가… 창작의 고통에 빠져서 예전에 정리해놨던 함수를 긁어왔슴다… 하늘색 테두리만 봐주세요!!!!!!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/a5f7c4f0-b4cb-11e9-8e76-97bd002d6b4f/image.png&quot; alt=&quot;image.png&quot;&gt;
위의 그림에서 보면 함수 전체, for문 안쪽, if문 안쪽에 테두리가 쳐져있죠?
{}요걸로 감싸진 영역! 이 공간들을 자바스크립트 세상에서는 block이라고 불러요.
(저는 사실 for문도 block에 해당하는걸 이번에 처음 알았어요! 와우!!)&lt;/p&gt;
&lt;h3 id=&quot;전역변수와-지역변수&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%99%80-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98&quot; aria-label=&quot;전역변수와 지역변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전역변수와 지역변수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;전역변수 : block 바깥에서 선언된 변수&lt;/li&gt;
&lt;li&gt;지역변수 : block 안쪽에서 선언된 변수
전역변수의 경우 scope가 전체 코드가 될 것이고, 지역변수는 block 안쪽이에요
예시를 통해 확인해볼까요~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let outer = 123;

{
let outer = 456;
let inner = 456;
}

console.log(outer) // 123
console.log(inner) // Reference Error: inner is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 젤 첫번째 줄의 outer가 바로 전역변수에요. block 바깥에서 선언됐죠~
콘솔에 outer를 찍어보면 123이 나옵니다. 왜냐?
두번째 outer는 중괄호 안에서만 활동 가능한 지역변수기 때문이죠!!
inner를 찍어보면 456이라는 숫자 대신, 에러가 뜨는 이유가 바로 그거에요~
inner의 값을 콘솔에 나타내고 싶다면 저 중괄호 안에서 console.log를 찍어주세용&lt;/p&gt;
&lt;h2 id=&quot;하지만-var를-써보면-어떻게-될까요&quot;&gt;&lt;a href=&quot;#%ED%95%98%EC%A7%80%EB%A7%8C-var%EB%A5%BC-%EC%8D%A8%EB%B3%B4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C%EC%9A%94&quot; aria-label=&quot;하지만 var를 써보면 어떻게 될까요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하.지.만 var를 써보면 어떻게 될까요?&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var outer = 123;

{
var outer = 456;
var inner = 456;

}

console.log(outer) // 456
console.log(inner) // 456&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리가 알고있는 이론과는 달리 둘 다 456이라는 값이 나오게 됩니다.
이것은 호이스팅(hoisting : 끌어올림) 때문에 생기는 일인데요..&lt;/p&gt;
&lt;p&gt;이 부분은 나중에 클로저 정리할 때 다시 자세하게 쓰도록 하겠습니다!!
(지금 할 게 넘넘 많아유 ㅠㅠ)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;오늘의 교훈 : let이나 const 쓰는걸 생활화 하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;to고수님들&quot;&gt;&lt;a href=&quot;#to%EA%B3%A0%EC%88%98%EB%8B%98%EB%93%A4&quot; aria-label=&quot;to고수님들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To.고수님들…&lt;/h2&gt;
&lt;h2 id=&quot;틀린-정보가-있다면-댓글로-의견-주세요-언제든지-적극-반영하겠습니다&quot;&gt;&lt;a href=&quot;#%ED%8B%80%EB%A6%B0-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%9D%98%EA%B2%AC-%EC%A3%BC%EC%84%B8%EC%9A%94-%EC%96%B8%EC%A0%9C%EB%93%A0%EC%A7%80-%EC%A0%81%EA%B7%B9-%EB%B0%98%EC%98%81%ED%95%98%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;틀린 정보가 있다면 댓글로 의견 주세요 언제든지 적극 반영하겠습니다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;틀린 정보가 있다면 댓글로 의견 주세요!! 언제든지 적극 반영하겠습니다!&lt;/h2&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;도서 모던자바스크립트 입문&lt;/li&gt;
&lt;li&gt;wecode&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_3일 TIL_CSS]]></title><description><![CDATA[위코드 3일차 CSS 정리 2탄. list, table, input/textarea에 대해 정리해보았다!]]></description><link>https://gollumnima.github.io//posts/wecode1_3_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_3_TIL_css/</guid><pubDate>Wed, 31 Jul 2019 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;DOM으로 빨리 넘어가야 하는데… DOM 너무 무섭고요…
그래서 정리해보는 wecode 1일차 TIL - CSS 2탄! 오늘로 벌써 5일찬데 임시저장 해놓은 1일차 쓰고있슴다..OTL… 시간 넘나 빠른것…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;오늘의 명언 : 무슨일이 있어도 블로깅은 절대 밀리지 말자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h3&gt;
&lt;p&gt;list에서 기억할 것은 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 그리고&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;입니다! 코드와 그림을 먼저 살펴보아요!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;ol&amp;gt;
      &amp;lt;li&amp;gt;하나&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;두울&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;세엣&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;네엣&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;다스&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;여스&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;일곱&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;여덟&amp;lt;/li&amp;gt;
    &amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/99ba52e0-b33e-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ol : Orderd List의 줄임말로 순서가 있는 list를 만들때 쓰시면 됩니당. 이렇게 번호가 뙇!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/02dde980-b33f-11e9-a50a-67208960cf89/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ul : UnOrdered List의 줄임말로 순서없이 점 띡! 찍는 list를 만들때 쓰면 돼용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;근데 리스트 형식인데 점을 없애고 싶다? 그러면 css파일에 &lt;code class=&quot;language-text&quot;&gt;ul {
  list-style: none;
}&lt;/code&gt; 추가고고
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/267bcd30-b33f-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;
짠~ 점들이 없어졌어요 오예!!
근데 가끔 제가 벨로그에 쓰는것처럼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이런 효과를 주고 싶다면!! 이것도 가능합니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ul {
  list-style: none;
  border-left: 3px solid grey; // 젤 왼쪽에 선 효과 주기
  padding: 15px; // 이걸 안 쓰면 너무 떨어져있게 되니까 적절히 떨어지도록 padding 추가
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/0434f890-b340-11e9-a50a-67208960cf89/image.png&quot; alt=&quot;image.png&quot;&gt;사진을 왼쪽 정렬 하는 방법을 몰라서 그런데, 이거 왼쪽 벽에 딱 붙어있는 이미지랍니다!&lt;/p&gt;
&lt;p&gt;위에서 border는 테두리를 씌우는 걸 말하는데요. 만약에 border-left가 아닌 border로 값을 설정한다면 사방팔방 회색깔 테두리가 씌워질거에요.&lt;/p&gt;
&lt;h3 id=&quot;table&quot;&gt;&lt;a href=&quot;#table&quot; aria-label=&quot;table permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table&lt;/h3&gt;
&lt;p&gt;몰랐는데 CSS로 표도 만들수 있더라고요 대박쓰…!!!!!! 표를 작성하려면 알아둘게 쪼꼼 많아요! &lt;code class=&quot;language-text&quot;&gt;&amp;lt;table&amp;gt;, &amp;lt;thead&amp;gt;, &amp;lt;tbody&amp;gt;, &amp;lt;tr&amp;gt;, &amp;lt;th&amp;gt;, &amp;lt;td&amp;gt;&lt;/code&gt; 하나씩 살펴봅시당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; : 표 만들땐 젤 바깥쪽을 이 태그로 감싸줍시다~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; : Table Row의 줄임말. 행의 시작은 이 태그로!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;th&amp;gt;&lt;/code&gt; : Table Heading의 줄임말. 열의 시작은 이 태그로!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;td&amp;gt;&lt;/code&gt; : Table Data의 줄임말. 표 안쪽에 내용물은 이 태그로 감싸줍시다~&lt;/li&gt;
&lt;li&gt;셀병합 : colspan이나 rowspan 적절히 사용해보기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게만 보면 모르겠으니까 실제로 적용해봅시다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;     &amp;lt;table class=&amp;quot;border-table&amp;quot;&amp;gt; // 테이블 만들기 시작을 알리는 태그!
      &amp;lt;tr&amp;gt; // 1행 시작
        &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt; // 1열 시작
        &amp;lt;th&amp;gt;1 pm&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;2pm&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;3pm&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 2행 시작
        &amp;lt;th&amp;gt;Gym&amp;lt;/th&amp;gt; //2열 시작
        &amp;lt;td&amp;gt;Dodge ball&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Kick boxing&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sack racing&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 3행 시작
        &amp;lt;th&amp;gt;Exercise Room&amp;lt;/th&amp;gt; //3열 시작
        &amp;lt;td&amp;gt;Spinning&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;gray&amp;quot; colspan=&amp;quot;2&amp;quot;&amp;gt;Yoga marathon&amp;lt;/td&amp;gt; // 열 병합(2칸)
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt; // 4행 시작
        &amp;lt;th&amp;gt;Pool&amp;lt;/th&amp;gt; // 4열 시작
        &amp;lt;td class=&amp;quot;gray&amp;quot; colspan=&amp;quot;3&amp;quot;&amp;gt;Water polo&amp;lt;/td&amp;gt; // 열 병합(3칸)
      &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html에서 이렇게 작성하면…&lt;br&gt;
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/45f04a20-b34d-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
요로코롬 표를 완성할수 있어요! 진짜 시간표 같고 그럴듯하죠? &lt;/p&gt;
&lt;p&gt;물론 표 안의 색깔이나, 표의 테두리는 다 CSS로 효과를 준거에요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  table {
  border-collapse: collapse; // 이걸 안쓰면 표가 조각조각나서 떨어져서 딱 안 붙어있어요~
}

.border-table th,
.border-table td {
  border: 1px solid black; //표 테두리의 굵기와 색깔 입혀주기
}

.gray {
  background-color: gainsboro; //표 칸에 회색으로 색칠해준 것
}```
이렇게 말이죠!
눈팅 금지!! 직접 쳐봐야 좀 더 오래 기억에 남더라구요~~
  
### input과 textarea
둘 다 텍스트를 입력하는 공간이긴 한데 약간의 차이가 있어용
읽어보면 input은 두글자로, textarea 6글자 이상으로 더 길죠?????
짧은 값은 input으로 주고, 긴 값은 textarea로 줍시다..!

* input 타입 알아보기
-type=&amp;quot;text&amp;quot; : 어떠한 텍스트나 입력 가능쓰
-type=&amp;quot;password&amp;quot; : 비번 입력할때 까만 똥그라미 나오는 원리에요! 와우!!!! 씐기씐기!
-type=&amp;quot;number&amp;quot; : 숫자만 입력할 수 있어요. 특수문자 금지!
  
+쁘라스!
placeholder=&amp;quot;아무개&amp;quot; : 이걸 input태그 내에 입력하면 입력전에 아무개라는 글자가 떠요.

![image.png](https://images.velog.io/post-images/dooreplay/9edd6040-b34e-11e9-a50a-67208960cf89/image.png)
로그인할 때 자주 볼 수 있는 풍경이죠? ㅋㅋ

### flex
는 다음 기회에......
미니터 구현한 화면과 함께 공개합니다 두둥!
블로깅이 너무너무너무 많이 밀렸어요~~~ 아이고 나살려~~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_2일 TIL_CSS]]></title><description><![CDATA[위코드 2일차 CSS 정리 1탄. CSS란 Cascading Stytle Sheet의 줄임말로, 다이어리 꾸미기 하듯이 밋밋한 우리의 html을 아름답게 꾸며주는 친구칭구]]></description><link>https://gollumnima.github.io//posts/wecode1_2_TIL_css/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_2_TIL_css/</guid><pubDate>Tue, 30 Jul 2019 22:12:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;csscascading-stytle-sheet&quot;&gt;&lt;a href=&quot;#csscascading-stytle-sheet&quot; aria-label=&quot;csscascading stytle sheet permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS(Cascading Stytle Sheet)&lt;/h1&gt;
&lt;p&gt;Cascade를 찾아보니 폭포, 쏟아지는 것 뭐 이런 뜻이였는데 뜻에 너무 큰 의미를 두지 맙시다…
우리가 html로 설계도를 짰으면 css로 색칠하고 예쁘게 꾸며주는 작업이 필요해용&lt;/p&gt;
&lt;h3 id=&quot;1-css-적용방법&quot;&gt;&lt;a href=&quot;#1-css-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;1 css 적용방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. CSS 적용방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인라인 스타일 :html 태그 안에 직접적으로 적용하는 방법쓰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, span과 p에 색깔을 입혀볼게요(둘의 차이점을 보여주기 위해 하는 작업쓰)
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;span style=&amp;quot;background-color : skyblue&amp;quot;&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/span&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p style=&amp;quot;background-color : skyblue&amp;quot;&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/p&amp;gt;&lt;/code&gt;
이렇게 치면 어떤 결과가 나올까요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b87c11c0-b274-11e9-944d-395be74d9f35/aslkjfd.PNG&quot; alt=&quot;aslkjfd.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;인라인 스타일로 글자에 배경색을 입혀봤는데 &lt;code class=&quot;language-text&quot;&gt;span&lt;/code&gt;은 스판끼가 없어서 딱 글자만큼만, &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt;는 그 문장 전체에 색을 다 입혀줬슴다
저는 주로 CSS파일을 만들어 쓰는데, 인라인 스타일로 쓰면 적용이 제일 확실하게 된다네요!?
점수제가 있더라고요 몰랐는데 와우…!!!! 고건 밑에서 다시 설명쓰..☆&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Style 태그 :말 그대로 html 내부에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 적용하는 것. 이렇게.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;span&amp;gt;곧있으면 점심시간 아싸리&amp;lt;/span&amp;gt;

    &amp;lt;style&amp;gt;
      span {
        color: #408090;
      }
    &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(아까는 background-color를 입혀서 배경색을 채워줬는데.. 걍 컬러를 쓰면 글자색이 바뀝니당
적용은 이렇게 뙇!)
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b4c9c4e0-b284-11e9-9878-3be49a983fcd/%EC%BA%A1%EC%B2%98123454.PNG&quot; alt=&quot;캡처123454.PNG&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS 파일 만들기 ☞★강추방법! 젤 깔끔쓰~
우리가 html 파일 만들어줬던것처럼 아무파일명.css 해서 css 파일을 하나 만들어줍시다
CSS 파일을 html에 적용시키려면 ↖너와↘나의↗연결↘고리↗가 필요하겠죠?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;html &lt;code class=&quot;language-text&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 밑에다가 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link href=&amp;quot;index.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;&lt;/code&gt; 이거 붙여줘용. 링크 흐르엪 옆에다가 만든 css 파일 이름를 써줍니다. 저 태그들은 다 무슨뜻이냐.. 봅시다&lt;/p&gt;
&lt;p&gt;-link : css파일의 링크를 나타내는 태그.
-href : css파일 경로를 나타내는 속성값
-type : link 태그로 연결되는 파일이 뭐신지 알려줌. 항상 type 값은 ‘text/css’래용
-rel : html과 css파일의 관계를 설명한다는데.. 얘도 항상 ‘stylesheet’에용&lt;/p&gt;
&lt;p&gt;그럼 어케 쓰냐.. 작성법은 아래 2번에서 다시~~&lt;/p&gt;
&lt;h3 id=&quot;2-css-작성법&quot;&gt;&lt;a href=&quot;#2-css-%EC%9E%91%EC%84%B1%EB%B2%95&quot; aria-label=&quot;2 css 작성법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. CSS 작성법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;selector자리에 태그이름 쓰기
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/08fd24e0-b2c5-11e9-9a46-ed26791597e3/lalala.PNG&quot; alt=&quot;lalala.PNG&quot;&gt;(사진출처 : WECODE Repl.it)
그림을 새로 만들까 하다가… 시간 아끼려고 퍼온 사진쓰…☆ 이해해주시겠져..? 열심히 할게요ㅠㅠ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;p {
color : yellow;
background-color : black; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저기 selector 자리에 div나 span,p와 같은 태그 이름을 쓸 수 있어요.
중괄호 열어서 왼쪽에는 주고 싶은 효과 쓰고, 오른쪽에는 그 효과에서 색을 뭘로 줄건지 등등 디테일한 값들을 넣어줍시다~
객체랑 비슷하게 생겼지만 객체처럼 컴마 찍지 말고 땀방울을 찍어주세요. 열심히 CSS로 꾸미면 고생한만큼 땀이 날거 아니에요? ㅎ 기억하세요 땀방울;;;;^^;;;;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;selector자리에 id/class이름 쓰기
id는 #, class는 . 쓰세요~ &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//chicken이라는 id값을 가진 애한테 글씨색 갈색으로 입혀주기
#chicken{
color: brown;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//macaron이라는 class값을 가진 애들한테 글씨색 하늘색으로 입혀주기
.macaron{
color: skyblue;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class는 동명이인이 많으니깐, CSS파일에서 &lt;code class=&quot;language-text&quot;&gt;macaron&lt;/code&gt; 색깔을 하늘색으로 지정해주면, html 나라의 김마카롱, 박마카롱, 최마카롱 등등 오둥이잡둥이 class이름이 마카롱인 친구들은 다 하늘하늘해지겠져~ XD 한방에 작업할수 있으니까 개이득!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;요 밑에서부턴 CSS를 전부 다 정리하려는 욕심을 접고… 제가 자주 헷갈리는 부분들과 중요해 보이는 애들만 정리하겠슴다&lt;/p&gt;
&lt;h3 id=&quot;●-margin과-padding--여백의-미&quot;&gt;&lt;a href=&quot;#%E2%97%8F-margin%EA%B3%BC-padding--%EC%97%AC%EB%B0%B1%EC%9D%98-%EB%AF%B8&quot; aria-label=&quot;● margin과 padding  여백의 미 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;● margin과 padding : 여백의 미&lt;/h3&gt;
&lt;p&gt;둘의 차이를 비교하기 전에 그림을 먼저 보고 가실게요.
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/b518de60-b2c8-11e9-84d6-5f50704416a6/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;margin : 외부 여백
border : 테두리
padding : 내부 여백&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게만 보면 쪼꼼 헷갈릴수도 있으니 코드와 그림을 같이 봅시다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.one {
  background-color: yellow; //배경 색깔
  text-align: center; // 가운데정렬
  width: 200px; //가로너비
}

.two {
  background-color: paleturquoise;
  text-align: center;
  width: 200px;
}

.three {
  background-color: blue;
  text-align: center;
  width: 200px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/42f857f0-b32e-11e9-94fc-df00913fc39f/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;요런 박스 3개가 있습니다. 이제 효과를 줘볼거에요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.one {
  background-color: yellow;
  text-align: center;
  width: 200px;
  margin: 50px 50px;
}

.two {
  background-color: paleturquoise;
  text-align: center;
  width: 200px;
}

.three {
  background-color: blue;
  text-align: center;
  width: 200px;
  padding: 50px 50px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;one에는 margin을 50px을, two는 가만히 냅뒀고, three에는 padding을 50px 줬어요
과연 결과는????? 두구두구두구두구두구두~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e919a3f0-b32e-11e9-a24a-5b58c5102a80/image.png&quot; alt=&quot;image.png&quot;&gt;
1번과 2번은 가로길이는 동일하지만, 1번이 멀찍이 떨어지게 됐어요.
3번은 padding 값을 줘서 크기는 커졌지만, margin값이 없기 때문에 2번과 붙어있져~&lt;/p&gt;
&lt;p&gt;★꿀팁 하나 더!
&lt;code class=&quot;language-text&quot;&gt;.two {
  padding: 10px 20px;
}&lt;/code&gt;이거랑 &lt;code class=&quot;language-text&quot;&gt;.two {
  padding: 10px 20px 10px 20px;
}&lt;/code&gt;이거랑 같다는 사실!
저는 이번에 처음 알았어요 ㅋㅋㅋㅋ 유레카~~
젤 왼쪽부터 순서대로 위↑오른쪽→아래↓왼쪽← 시계방향으로 돌아간다고 생각하심 됩니다!!&lt;/p&gt;
&lt;h3 id=&quot;box-sizing&quot;&gt;&lt;a href=&quot;#box-sizing&quot; aria-label=&quot;box sizing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;box-sizing&lt;/h3&gt;
&lt;p&gt;아까 세 개의 box를 보면 width는 동일하게 200px로 줬지만 padding값을 준 애는 혼자 너무 커진걸 확인할 수 있었죠! 아직 코딩 병아리라.. 예시가 적절한지는 사실 잘 모르겠어요 ㅠㅠ
여튼… 눈으로 보이는 width와 실제 width가 다를 경우, 우리는 이 사이즈를 맞춰줘야해욧&lt;/p&gt;
&lt;p&gt;각각의 selector에 &lt;code class=&quot;language-text&quot;&gt;box-sizing: border-box;&lt;/code&gt; 이 속성을 추가해줘도 좋지만…
우리가 거대한 웹 페이지를 만들땐 일일히 추가하기 힘들겠져!!!!
그래서 꼼수가 있슴다…
바로 이것이죠 &lt;code class=&quot;language-text&quot;&gt;* {
  box-sizing: border-box;
}&lt;/code&gt;
이렇게 *하고 중괄호 열면 모든 태그에 적용할 수 있다네요! 꼭 알아두셔용 ~.~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/d6a8ee10-b333-11e9-b6c6-c5c426422d48/image.png&quot; alt=&quot;image.png&quot;&gt;
추가하면 이렇게 모든 박스의 크기가 같아집니다. 우와~~~!&lt;/p&gt;
&lt;h3 id=&quot;상속과-grouping&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D%EA%B3%BC-grouping&quot; aria-label=&quot;상속과 grouping permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속과 Grouping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속
js에서 prototype에 상속이라는 성질이 있듯이, CSS에도 있습니다!
부모가 가진 스타일을 자식이 물려받는거죠…예시로 확인해볼게요~~&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;one&amp;quot;&amp;gt;난 자식&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;two&amp;quot;&amp;gt;나도 자식&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;alone&amp;quot;&amp;gt;난 혼자 ㅠㅠ&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;body 태그 안에 이런 애들이 있어요. CSS 값들은 아래와 같이 줘볼게용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.parent {
  background-color: blueviolet;
  width: 200px;
}

.one {
}

.two {
}

.alone {
  background-color: gainsboro;
  width: 400px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자식들한텐 어떠한 값도 주지 않았고, one과 two를 감싸는 parent라는 class를 가진 div에만 값을 줘봤어요! class가 alone인 div에도 다른 값을 설정해줬구요
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/03ee5e30-b336-11e9-a5b8-a90d45f2a15e/image.png&quot; alt=&quot;image.png&quot;&gt;
결과는 이렇게 뙇! 칫솔 모양이네요. 다들 양치 열심히 하세요! 치과 무섭잖아요
근데 매번 태그마다 값을 일일히 주기 귀찮잖아여.. 값을 다 통일하고 싶다! 그렇땐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping
그룹으로 묶어버리는 방법이 있어요. 이렇게
&lt;code class=&quot;language-text&quot;&gt;.parent, p {
background-color: blueviolet;
width: 200px;
}&lt;/code&gt; 이렇게 parent div와 p 태그를 ,로 묶어주면
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7872dbf0-b336-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
CSS값이 이렇게 동일하게 먹힙니다! 오오~~&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;css-selector의-우선순위&quot;&gt;&lt;a href=&quot;#css-selector%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;css selector의 우선순위 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS selector의 우선순위&lt;/h3&gt;
&lt;p&gt;CSS를 작성하는 법 세 가지에 대해서 위에서 다뤄봤는데요, 각 방법마다 일정한 점수가 부여되서 그 점수가 높은 애들이 좀 더 권력자가 될 수 있어요!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인라인 : 1000점
id : 100점
class:  10점
tag : 1점&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;와우… 저는 인라인 방법이 태그를 더럽힌다고(?) 생각해서 젤 점수가 낮을줄 알았는데 반전쓰..!
근데 우리가 수학자도 아니고.. 점수를 일일히 계산하기보단 그냥 대충 이렇다! 하고 알고있음 좋을 것 같습니다~
지난번에 말했던 것처럼 id를 너무 남발하지만 않는다면 점수는 대충 비슷해질것 같아요!&lt;/p&gt;
&lt;p&gt;예시를 안 보고 넘어가면 섭하겠죠? 먼저 CSS파일엔 이렇게&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.parent {
  background-color: blueviolet;
  width: 200px;
  font-size: 30px;
}

.alone {
  background-color: gainsboro;
  width: 400px;
  font-size: 30px;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parent 클래스와 alone 클래스에 모두 font-size 30px이라는 값을 준 상태.
인라인의 권력을 시험해보기 위해 html 태그도 함 볼게요&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;one&amp;quot;&amp;gt;난 자식&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;two&amp;quot;&amp;gt;나도 자식&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;alone&amp;quot; style=&amp;quot;font-size: 100px;&amp;quot;&amp;gt;난 혼자 ㅠㅠ&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html바디를 살펴보시면 alone 클래스를 가진 p에 인라인으로 font-size 100px를 줬어요
결과는 과연!!! 두구두구두구두굳구ㅜ둑두구두구~~
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/168e5d40-b338-11e9-a63f-3d4fbc7abc6c/image.png&quot; alt=&quot;image.png&quot;&gt;
분명 CSS에서 같은 글씨 크기로 설정했지만, 100px의 효과를 준 인라인방식이 더 우세한걸 알수 있습니다! 라인을 잘 타라는 말이 괜히 있는게 아니였네요… 무서운 세상!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;포스팅이 너무 길어지는 것 같아 이번판은 여기서 끝! 안그래도 말많은 블로그라 여기서 줄여용
아직도 위코드 1일차 후기가 안 끝났다니… 큰일쓰…☆&lt;/p&gt;</content:encoded></item><item><title><![CDATA[wecode 1주차_1일 TIL_HTML 구성과 tag]]></title><description><![CDATA[위코드 1일차 HTML. Hyper Text Markup Language의 줄임말로, 내가 쓰고 있는 방식인 Markdown과는 반대. 나중에 이 부분에 대해서도 한 차례 정리해볼 생각이다!]]></description><link>https://gollumnima.github.io//posts/wecode1_1_TIL_html/</link><guid isPermaLink="false">https://gollumnima.github.io//posts/wecode1_1_TIL_html/</guid><pubDate>Mon, 29 Jul 2019 22:40:32 GMT</pubDate><content:encoded>&lt;!-- - [html 구조 알아보기](#the-first-transition)
- [html 태그의 종류](#the-digital-age)
- [id와 class](#loss-of-humanity-through-transitions) --&gt;
&lt;p&gt;블로그를 도대체 몇 번이나 갈아타는건지..? 네이버 블로거 시절이 젤 편했는데… 보고픈 잇님덜…☆
이제 나는 본격 개발하는 사람이니깐 이미 만들어진 플랫폼 말고 내가 직접 수정할 수 있는 이 개츠비 블로그를 이용해 글을 써 나갈 예정이다!&lt;/p&gt;
&lt;h3 id=&quot;위코드-1일차-후기훅이&quot;&gt;&lt;a href=&quot;#%EC%9C%84%EC%BD%94%EB%93%9C-1%EC%9D%BC%EC%B0%A8-%ED%9B%84%EA%B8%B0%ED%9B%85%EC%9D%B4&quot; aria-label=&quot;위코드 1일차 후기훅이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위코드 1일차 후기훅이&lt;/h3&gt;
&lt;p&gt;오늘은 HTML과 CSS 에 대해서 배웠다.
지난번 코드스테이츠에서 공부할 땐 이 부분을 너무 부실하게 가르쳐줘서 HTML, CSS만 보면 너무 고통스러웠는데.. 적절한 설명과 예시들, 그리고 그때그때 바로 코드 쳐서 실습해볼 수 있는 좋은 환경쓰 굿굿!&lt;/p&gt;
&lt;h2 id=&quot;htmlhyper-text-markup-language&quot;&gt;&lt;a href=&quot;#htmlhyper-text-markup-language&quot; aria-label=&quot;htmlhyper text markup language permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML(Hyper Text Markup Language)&lt;/h2&gt;
&lt;p&gt;우리는 HTML을 이용해 웹 페이지 구조를 짤 수 있다.
지금 당장 VScode를 열어서 새파일 만들어서 아무파일명.html을 저장. 그다음 첫줄에 &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt;를 치고 Tab을 누르시오.
그렇다면 자동완성된 HTML 양식을 확인할 수 있다~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;별로 힘들이지 않고 이렇게 순식간에 완성된 우리의 기본 구조!
저기서 꺽쇠 영어 뭐시기… 써 있는걸 태그라고 하는데
기본적으로 태그와 태그 사이에 내용을 쓰고 끄트머리 꺽쇠를 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;로 닫아준다.
예를들어… &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;안녕 여러분!&amp;lt;/h1&amp;gt;&lt;/code&gt; 이런식으로다가 뙇!
(태그는 아래쪽에서 좀 더 자세히 다룰거에요~!)zzzz &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;: 느낌표를 앞에 써놔서 부정을 뜻할것 같지만 html이라고 명시하는 부분&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt;: 브라우저가 인제부터 html 설계도 그려나갈거야~! 라고 명시하는 부분&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;: 사이트의 제목, 설명, 부가정보,기술정보(모바일인지 아닌지) 등 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/code&gt;: 한중일어 포함되어 있다면 utf-8이라는 값으로 문자를 인코딩 해준다는 말씀&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt;&lt;/code&gt;:디바이스 가로길이가 웹페이지 가로길이와 같다는 말씀. 이걸 빼먹는다면 웹페이지가 축소되서 보이니까 꼭 한번씩 까먹고 써보지 맙시다~&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; : 브라우저에 보이는 탭 이름. 크롬탭에 뭐라고 써있는지 큰소리로 읽어보아요&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; : 젤 중요한 부분. 여기에 페이지에 보이는 뼈대와 내용을 작성쓰~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-태그&quot;&gt;&lt;a href=&quot;#2-%ED%83%9C%EA%B7%B8&quot; aria-label=&quot;2 태그 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 태그&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h5&amp;gt;&lt;/code&gt; : header의 줄임말. 머리로 박치기 하는거 말고! &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;배고파&amp;lt;/h1&amp;gt;&lt;/code&gt; 이런 식으로 h1부터 h5까지 써보시오. h1과 h5 중에 뭐가 더 클까요?? 쳐보세요 ^^ 코드는 실전입니다 크크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; : 딱 글자 쓴 만큼까지만 공간을 차지하는 애. 이름은 스판이지만, 전혀 스판끼 없는 애임. 쫙쫙 안 늘어나고 딱 그 글자만큼만!&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; : paragraph의 약자… 맞나? 아니면 나중에 수정하겠음. 여튼 문장단위의 공간을 차지하는 애. 위의 &lt;code class=&quot;language-text&quot;&gt;span&lt;/code&gt;과는 달리 줄바꿈 가능쓰~
(span과 p를 구분하려면 CSS를 손보면 되는데.. 배고프고 졸리니까 다음시간에…)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; : anchor의 약자. 해적선이 목적지에 도착하면 닻을 내리는 것처럼 얘도 접속하고픈 링크를 찍으면 글로 이동시켜준다!
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/tags/tag_div.asp&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;
고대로 가져온 예시… href는 Hypertext Reference의 줄임말. 예시처럼 링크는 흐르에프는~ 하고 따옴표 안에 링크를 구겨넣어줍시다. 옆에 target엔 &lt;code class=&quot;language-text&quot;&gt;_blank&lt;/code&gt;라고 되어있는데, 저걸 써줘야 새창에 뜹니다.. 마우스 우클릭 새탭으로 열기 안해도 되니까 을매나 좋게요?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; : division의 줄임말. 젤 중요한 애! 한 뭉텅이로 묶어주는 태그라고 보시면 됩니다.. 얘를 잘 쪼개고 묶어주는게 html 틀 짜는데 또 굉장히 중요하져!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;div에 대해 설명하기 위해 제가 만든 허접한 넷플릭스 화면과 창피한 html 구조를 공유합니다.. 절대 이렇게 따라하지 마씨오.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e74b1070-b268-11e9-a100-45a09e59a09a/%EB%A9%94%EC%9D%B8%EC%93%B0.PNG&quot; alt=&quot;메인쓰.PNG&quot;&gt;&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/e2bd4af0-b268-11e9-a100-45a09e59a09a/%EB%A9%94%EC%9D%B8%EC%95%84%EB%9E%98%EC%93%B0.PNG&quot; alt=&quot;메인아래쓰.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 보면 약간 그럴듯은 해보이긴 하는데… 코드를 보면 또르륽…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;bar.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;main.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;prize.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;best.css&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Dooflix&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=&amp;quot;black&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;#39;entire_wrap&amp;#39;&amp;gt;
      &amp;lt;div id=&amp;#39;black_bar&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;logo&amp;#39; src=&amp;#39;logo.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;bar_left&amp;#39;&amp;gt;
            &amp;lt;span id=&amp;#39;home&amp;#39;&amp;gt;홈&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;tv&amp;#39;&amp;gt;TV프로그램&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;movie&amp;#39;&amp;gt;영화&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;new&amp;#39;&amp;gt;최신등록콘텐츠&amp;lt;/span&amp;gt;
            &amp;lt;span id=&amp;#39;love&amp;#39;&amp;gt;내가찜한콘텐츠&amp;lt;/span&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;bar_right&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;glass&amp;#39; src=&amp;#39;glass.png&amp;#39;&amp;gt;
          &amp;lt;span id=&amp;#39;kids&amp;#39;&amp;gt;키즈&amp;lt;/span&amp;gt;
          &amp;lt;img id=&amp;#39;dingdong&amp;#39; src=&amp;#39;dingdong.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;profile&amp;#39; src=&amp;#39;profile.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;semo&amp;#39; src=&amp;#39;semo.png&amp;#39;&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=&amp;#39;main_ad&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;strange&amp;#39; src=&amp;#39;stranger_things.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;n_series&amp;#39; src=&amp;#39;word_n.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;stranger_title&amp;#39; src=&amp;#39;strangers.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;series&amp;#39;&amp;gt;시리즈&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;english_title&amp;#39;&amp;gt;STRANGER THINGS&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;play_box&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;contents_box&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div onmouseover=&amp;#39;play_over()&amp;#39; onmouseout=&amp;#39;play_out()&amp;#39; id=&amp;#39;play&amp;#39;&amp;gt;▶ 재생&amp;lt;/div&amp;gt;
          &amp;lt;div onmouseover=&amp;#39;contents_over()&amp;#39; onmouseout=&amp;#39;contents_out()&amp;#39; id=&amp;#39;contents_loved&amp;#39;&amp;gt;╂ 내가 찜한 콘텐츠&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;story1&amp;#39;&amp;gt;시즌 3, 지금 시청하세요&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;story2&amp;#39;&amp;gt;또다시 기묘한 일들이 일어난다. 정부가 숨기고 있는 비밀,&amp;lt;br&amp;gt;
          정체를 드러내는 그림자, 두려움을 모르는 아이들. 작은&amp;lt;br&amp;gt;
          마을에 어둠이 다가온다. 뒤집힌 세상의 문이 열린다.&amp;lt;/div&amp;gt;
          &amp;lt;img id=&amp;#39;refresh&amp;#39; src=&amp;#39;refreshNew.png&amp;#39;&amp;gt;
          &amp;lt;img id=&amp;#39;se15&amp;#39; src=&amp;#39;15se.png&amp;#39;&amp;gt;
          &amp;lt;div id=&amp;#39;old&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div id=&amp;#39;old_bar&amp;#39;&amp;gt;┃&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=oversea&amp;gt;외국 TV 프로그램&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;#39;container&amp;#39;&amp;gt;
        &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster0&amp;#39; src=&amp;#39;home.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster1&amp;#39; src=&amp;#39;grace.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster2&amp;#39; src=&amp;#39;kimi.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster3&amp;#39; src=&amp;#39;redhair.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster4&amp;#39; src=&amp;#39;taco.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster5&amp;#39; src=&amp;#39;body.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster6&amp;#39; src=&amp;#39;gossip.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster7&amp;#39; src=&amp;#39;lululu.png&amp;#39;&amp;gt;
        &amp;lt;/div&amp;gt;        
      &amp;lt;/div&amp;gt;
      &amp;lt;div id=now&amp;gt;지금 뜨는 콘텐츠&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;#39;container&amp;#39;&amp;gt;
        &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster0&amp;#39; src=&amp;#39;hanji.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster1&amp;#39; src=&amp;#39;bingbang.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster2&amp;#39; src=&amp;#39;friends.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster3&amp;#39; src=&amp;#39;himym.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster4&amp;#39; src=&amp;#39;lucifer.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster5&amp;#39; src=&amp;#39;ant.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster6&amp;#39; src=&amp;#39;alive.png&amp;#39;&amp;gt;
          &amp;lt;img class=&amp;#39;poster7&amp;#39; src=&amp;#39;meju.png&amp;#39;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저처럼 div id를 이렇게 남발하면 안됩니다…  젤 바깥쪽 묶는 div만 id로 하고 웬만하면 그 아랫것들(?)은 class로 묶어주세요… 현업에서도 id를 잘 안 쓴다고 하네요!!&lt;/p&gt;
&lt;h2 id=&quot;3-id와-class&quot;&gt;&lt;a href=&quot;#3-id%EC%99%80-class&quot; aria-label=&quot;3 id와 class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. id와 class&lt;/h2&gt;
&lt;p&gt;html로 구조를 짜면서 똑같은 태그를 여러번 쓰게 될텐데, id나 class 같은 애들을 통해서 이름표를 붙여줘야 헷갈리지 않겠죠~?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id : 우리가 복제인간이 아닌 이상 신분증은 이 세상에 단 하나밖에 없죠!!! 그런것처럼 id도 무조건 하나만… 만약에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;#39;hungry&amp;#39;&amp;gt;&lt;/code&gt; 이런식으로 div에 hungry라는 id를 줬으면 그 다음에 div에 또 hungry라는 이름을 붙여줄 수 없음! 그리고 주의사항… id를 너무 남발하면 안 좋다고 하니 젤 바깥쪽 뭉텅이의 div들에게만 아이디를 줍시다… 나머지는 어쩌냐고? 밑에를 보세요!&lt;/li&gt;
&lt;li&gt;class : id와는 달리 이 구역의 융통성 甲 of 甲. 어떤 태그든 같은 class 이름 여러번 쓰기 가능쓰~ 이게 바로 클래쓰의 차이인가!! 예를들어…
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&amp;quot;chicken&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p class=&amp;quot;chicken&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;
이런식으로 치킨 두번이상 쓰기 가능쓰~ 치느님은 위대해…&lt;/li&gt;
&lt;li&gt;여러 속성 쓰기 : 걍 예시를 먼저 봅시다
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;profile&amp;quot; class=&amp;quot;content-wrap&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&amp;quot;./hi.png&amp;quot; alt=&amp;quot;내사진&amp;quot; &amp;gt;&lt;/code&gt;
힘들어서 그대로 가져온 예시… 이런것처럼 id와 class를 동시에 쓰기도 가능쓰…
속성 여러개 쓰려면 profile과 class 사이가 멀어진것처럼 띄어쓰기 하나 해주긔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;블로그 주인장은 배고프고, 졸립고, 내일도 코딩 달려야해서 이만 잡니다~~ 내일도 열심히 정리해야지!
&lt;img src=&quot;https://images.velog.io/post-images/dooreplay/7a581430-b219-11e9-a4ce-730fc6b3757a/KakaoTalk20190730005626883.jpg&quot; alt=&quot;KakaoTalk_20190730_005626883.jpg&quot;&gt;(선릉 위워크 2호점에는 이렇게 예쁜 네온사인들이 많아서 힙하고 또 힙하다 ㅎ)&lt;/p&gt;</content:encoded></item></channel></rss>